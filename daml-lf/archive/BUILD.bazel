# Copyright (c) 2019 The DAML Authors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_library")
load("//bazel_tools:pkg.bzl", "pkg_tar")
load("//bazel_tools:proto.bzl", "proto_gen")
load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "da_scala_test_suite",
    "lf_scalacopts",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load("//bazel_tools:pom_file.bzl", "pom_file")
load("@os_info//:os_info.bzl", "is_windows")
load("//bazel_tools:javadoc_library.bzl", "javadoc_library")
load(":archive.bzl", "mangle_for_java")

LF_MAJOR_VERSIONS = [
    "0",
    "1",
]

LF_VERSIONS = [
    "dev",
    "1.6",
]

[
    [
        filegroup(
            name = "daml_lf_%s_archive_proto_srcs" % version,
            srcs = glob(["src/main/protobuf/com/digitalasset/daml_lf_%s/*.proto" % mangle_for_java(version)]),
        ),
        proto_library(
            name = "daml_lf_%s_archive_proto" % version,
            srcs = [":daml_lf_%s_archive_proto_srcs" % version],
            strip_import_prefix = "src/main/protobuf/",
            visibility = ["//:__subpackages__"],
        ),
        proto_gen(
            name = "daml_lf_%s_archive_java_proto_srcs" % version,
            srcs = [":daml_lf_%s_archive_proto" % version],
            plugin_name = "java",
            visibility = ["//visibility:public"],
        ),
        java_library(
            name = "daml_lf_%s_archive_java_proto" % version,
            srcs = [":daml_lf_%s_archive_java_proto_srcs" % version],
            tags = ["maven_coordinates=com.digitalasset:daml-lf-%s-archive-java-proto:__VERSION__" % version],
            visibility = ["//visibility:public"],
            deps = ["//3rdparty/jvm/com/google/protobuf:protobuf_java"],
        ),
        pom_file(
            name = "daml_lf_%s_archive_java_proto_pom" % version,
            target = "daml_lf_%s_archive_java_proto" % version,
            visibility = ["//visibility:public"],
        ),
        javadoc_library(
            name = "daml_lf_%s_archive_java_proto_javadoc" % version,
            srcs = ["daml_lf_%s_archive_java_proto" % version],
            root_packages = ["com.digitalasset.daml_lf_%s" % mangle_for_java(version)],
            visibility = ["//visibility:public"],
            deps = ["//3rdparty/jvm/com/google/protobuf:protobuf_java"],
        ),
        genrule(
            name = "daml_lf_%s_archive_proto_zip" % version,
            srcs = [":daml_lf_%s_archive_proto_srcs" % version],
            outs = ["daml_lf_%s_archive_proto_zip.zip" % version],
            cmd = """
                     DESTDIR=protobuf/com/digitalasset/daml_lf_%s &&           \
                     mkdir -p $$DESTDIR/ &&                                    \
                     cp $(SRCS) $$DESTDIR/ &&                                  \
                     $(location @zip_dev_env//:zip) \"$@\" -r $$DESTDIR/
                   """ % (mangle_for_java(version)),
            tools = ["@zip_dev_env//:zip"],
            visibility = ["//visibility:public"],
        ),
        pkg_tar(
            name = "daml_lf_%s_archive_proto_tarball" % version,
            srcs = [":daml_lf_%s_archive_proto_srcs" % version],
            extension = "tar.gz",
            package_dir = "com/digitalasset/daml_lf",
            visibility = ["//visibility:public"],
        ),
    ]
    for version in LF_VERSIONS
]

# FIXME(JM): Clean this up
genrule(
    name = "daml_lf_dev_archive_haskell_proto_src",
    srcs = ["daml_lf_dev_archive_proto_srcs"],
    outs = ["Com/Digitalasset/DamlLfDev/DamlLf.hs"] +
           ["Com/Digitalasset/DamlLfDev/DamlLf%s.hs" % v.title() for v in LF_MAJOR_VERSIONS],
    cmd =
        "\n".join(
            [
                """
                   $(location @haskell_proto3__suite//:compile-proto-file)  \
                     --includeDir daml-lf/archive/src/main/protobuf/        \
                     --proto com/digitalasset/daml_lf_dev/daml_lf%s.proto   \
                     --out $(@D)
                 """ % vx
                for vx in [""] + ["_%s" % v for v in LF_MAJOR_VERSIONS]
            ],
        ),
    tools = [
        "@haskell_proto3__suite//:compile-proto-file",
    ],
)

da_haskell_library(
    name = "daml_lf_dev_archive_haskell_proto",
    srcs = [":daml_lf_dev_archive_haskell_proto_src"],
    compiler_flags = ["-O0"],  # disable optimization as this is otherwise way too slow to compile.
    hackage_deps = [
        "base",
        "bytestring",
        "containers",
        "deepseq",
        "proto3-suite",
        "proto3-wire",
        "text",
        "vector",
    ],
    visibility = ["//visibility:public"],
)

da_scala_library(
    name = "daml_lf_archive_reader",
    srcs = glob(["src/main/scala/**/*.scala"]),
    scalacopts = lf_scalacopts,
    tags = ["maven_coordinates=com.digitalasset:daml-lf-archive-scala:__VERSION__"],
    visibility = ["//visibility:public"],
    deps = [
        ":daml_lf_dev_archive_java_proto",
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/commons_io",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//daml-lf/data",
        "//daml-lf/language",
    ],
)

da_scala_test_suite(
    name = "daml_lf_archive_reader_tests",
    size = "small",
    srcs = glob(["src/test/scala/**/*.scala"]),
    data = [
        ":DarReaderTest.dalf",
        ":DarReaderTest.dar",
    ],
    scalacopts = lf_scalacopts,
    deps = [
        ":daml_lf_1.6_archive_java_proto",
        ":daml_lf_1.6_archive_proto_srcs",
        ":daml_lf_archive_reader",
        ":daml_lf_dev_archive_java_proto",
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/org/scalacheck",
        "//3rdparty/jvm/org/scalatest",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//3rdparty/jvm/org/scalaz:scalaz_scalacheck_binding",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/data",
        "//daml-lf/data-scalacheck",
        "//daml-lf/language",
        "//daml-lf/parser",
        "//daml-lf/validation",
    ],
)

daml_compile(
    name = "DarReaderTest",
    main_src = "src/test/daml/DarReaderTest.daml",
)
