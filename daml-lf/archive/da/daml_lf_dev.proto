// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// .proto representation of the first version of the DAML-LF language,
// as specified by
// <https://github.com/DACH-NY/da/blob/master/daml-foundations/daml-tools/docs/daml-lf-specification/source/index.rst>.
//
// A few notes:
//
// * We generally "compress" structures that are often repeated, such as
//   application, let bindings, abstractions, etc.. In the Haskell / Scala
//   AST we probably will use the normal binary forms.
// * We generally never "newtype" strings, even if it might be good in
//   the actual AST. This is to keep the message structure relatively flat
//   and light.

syntax = "proto3";
package daml_lf_dev;

option java_package = "com.digitalasset.daml_lf";

// 'Unit' is used for canonical encoding in one-ofs for cases that
// carry no meaningful values.
message Unit {}

// Package reference
message PackageRef {
  oneof Sum {
    Unit self = 1;

    // A ascii7 lowercase hex-encoded package identifier. This refers
    // to the DAML LF Archive Hash.
    string package_id = 2;
  }
}

// A fully qualified identifier, e.g. Util.Either.isLeft
message DottedName {
  repeated string segments = 1; // length > 0
}

// A fully qualified module reference, referring to either
// a module within the package or to a module in another package.
message ModuleRef {
  PackageRef package_ref = 1;
  DottedName module_name = 2;
}

// A fully qualified reference to a type constructor.
message TypeConName {
  ModuleRef module = 1;
  DottedName name = 2;
}

// A fully qualified reference to a value definition.
message ValName {
  ModuleRef module = 1;
  repeated string name = 2;
}


// A field definition in a record or a variant associated with a type.
message FieldWithType {
  string field = 1;
  Type type = 2;
}

// Binder associated with a type.
message VarWithType {
  string var = 1;
  Type type = 2;
}

// Type binder associated with a kind.
message TypeVarWithKind {
  string var = 1;
  Kind kind = 2;
}

// A field in a record or variant constructor
message FieldWithExpr {
  string field = 1;
  Expr expr  = 2;
}

// A binding of a typed binder to an expression
message Binding {
  VarWithType binder = 1;
  Expr bound = 2;
}

// Kinds
message Kind {
  message Arrow {
    repeated Kind params = 1; // length > 0
    Kind result = 2;
  }

  oneof Sum {
    Unit star = 1;
    Arrow arrow = 2;
  }
}

// Builtin primitive types
enum PrimType {
  UNIT = 0; // arity = 0
  BOOL = 1; // arity = 0
  INT64 = 2; // arity = 0
  DECIMAL = 3; // arity = 0
  // CHAR = 4; // arity = 0, we have removed this in favor of TEXT for everything text related.
  TEXT = 5; // arity = 0
  TIMESTAMP = 6; // arity = 0
  // RELTIME = 7; // we removed this in favor of INT64.
  PARTY = 8; // arity = 0
  LIST = 9; // arity = 1
  UPDATE = 10; // arity = 1
  SCENARIO = 11; // arity = 1
  DATE = 12; // arity = 0, days since the unix epoch
  CONTRACT_ID = 13; // artity = 1
  OPTIONAL = 14; // arity = 1
  ARROW = 15; // arity = 2
  MAP = 16; // arity = 2
}

// Types
message Type {
  message Var {
    string var = 1;
    repeated Type args = 2; // length >= 0
  }

  message Con {
    TypeConName tycon = 1;
    repeated Type args = 2; // 0 <= length <= arity of tycon
  }

  message Prim {
    PrimType prim = 1;
    repeated Type args = 2; // 0 <= length <= arity of prim
  }

  message Forall {
    repeated TypeVarWithKind vars = 1; // length > 0
    Type body = 2;
  }

  message Tuple {
    repeated FieldWithType fields = 1; // length > 0
  }

  message App {
    Type tyfun = 1; // is never Type.Con or Type.Prim.
    repeated Type args = 2; // length > 0
  }

  oneof Sum {
    Var var = 1;
    Con con = 2;
    Prim prim = 3;
    Forall forall = 5;
    // Type list = 6; // Removed in favour of PrimType.LIST
    Tuple tuple = 7;
    // TypeConName contract_id = 8; // Removed in favour of PrimType.CONTRACT_ID
    // Type update = 9; // Removed in favour of PrimType.UPDATE
    // Type scenario = 10; // Removed in favor of PrimType.SCENARIO
  }

  reserved 6; // This was list.
  reserved 8; // Tis was contract_id.
  reserved 9; // This was update.
  reserved 10; // This was scenario.
}

// Primitive constructors
enum PrimCon {
  CON_UNIT = 0;
  CON_FALSE = 1;
  CON_TRUE = 2;
}

// Builtin functions
enum BuiltinFunction {
  ADD_DECIMAL = 0;
  SUB_DECIMAL = 1;
  MUL_DECIMAL = 2;
  DIV_DECIMAL = 3;
  ROUND_DECIMAL = 6;

  ADD_INT64 = 7;
  SUB_INT64 = 8;
  MUL_INT64 = 9;
  DIV_INT64 = 10;
  MOD_INT64 = 11;
  EXP_INT64 = 12;

  FOLDL = 20;
  FOLDR = 21;

  MAP_EMPTY = 96;
  MAP_INSERT = 97;
  MAP_LOOKUP = 98;
  MAP_DELETE = 99;
  MAP_TO_LIST = 100;
  MAP_SIZE = 101;

  EXPLODE_TEXT = 23;
  APPEND_TEXT = 24;

  ERROR = 25;

  LEQ_INT64 = 33;
  LEQ_DECIMAL = 34;
  LEQ_TEXT = 36;
  LEQ_TIMESTAMP = 37;
  LEQ_DATE = 67;
  LEQ_PARTY = 89;

  LESS_INT64 = 39;
  LESS_DECIMAL = 40;
  LESS_TEXT = 42;
  LESS_TIMESTAMP = 43;
  LESS_DATE = 68;
  LESS_PARTY = 90;

  GEQ_INT64 = 45;
  GEQ_DECIMAL = 46;
  GEQ_TEXT = 48;
  GEQ_TIMESTAMP = 49;
  GEQ_DATE = 69;
  GEQ_PARTY = 91;

  GREATER_INT64 = 51;
  GREATER_DECIMAL = 52;
  GREATER_TEXT = 54;
  GREATER_TIMESTAMP = 55;
  GREATER_DATE = 70;
  GREATER_PARTY = 92;

  TO_TEXT_INT64 = 57;
  TO_TEXT_DECIMAL = 58;
  TO_TEXT_TEXT = 60;
  TO_TEXT_TIMESTAMP = 61;
  TO_TEXT_DATE = 71;
  TO_QUOTED_TEXT_PARTY = 63; // legacy, remove in next major version
  TO_TEXT_PARTY = 94; // *Available Since version 1.2*
  FROM_TEXT_PARTY = 95; // *Available Since version 1.2*
  SHA256_TEXT = 93; // *Available Since version 1.2*

  DATE_TO_UNIX_DAYS = 72; // Date -> Int64
  UNIX_DAYS_TO_DATE = 73; // Int64 -> Date

  TIMESTAMP_TO_UNIX_MICROSECONDS = 74; // Timestamp -> Int64
  UNIX_MICROSECONDS_TO_TIMESTAMP = 75; // Int64 -> Timestamp

  INT64_TO_DECIMAL = 76;
  DECIMAL_TO_INT64 = 77;

  IMPLODE_TEXT = 78;

  EQUAL_INT64 = 79;
  EQUAL_DECIMAL = 80;
  EQUAL_TEXT = 81;
  EQUAL_TIMESTAMP = 82;
  EQUAL_DATE = 83;
  EQUAL_PARTY = 84;
  EQUAL_BOOL = 85;
  EQUAL_CONTRACT_ID = 86;
  EQUAL_LIST = 87;

  TRACE = 88;

  // Next id is 102. 101 is MAP_SIZE.
}

// Primitive literals
message PrimLit {
  oneof Sum {
    sint64 int64 = 1;
    // our decimal type would fit in an int128, but sadly protobuf does not
    // have one. so, string it is. note that we can't store the whole and
    // decimal part in two numbers either, because 10^28 > 2^63.
    string decimal = 2;
    string text = 4;
    // microseconds since the UNIX epoch. can go backwards. fixed
    // since the vast majority of values will be greater than
    // 2^28, since currently the number of microseconds since the
    // epoch is greater than that. Range: 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59.999999Z, so that we can convert to/from
    // https://www.ietf.org/rfc/rfc3339.txt
    sfixed64 timestamp = 5;
    string party = 7;
    // days since the unix epoch. can go backwards. limited from
    // 0001-01-01 to 9999-12-31, also to be compatible with
    // https://www.ietf.org/rfc/rfc3339.txt
    int32 date = 8;
  }

  reserved 3; // This was char.
  reserved 6; // This was reltime;
}

// Source code locations
message Location {
  // 0-indexed start and end line and column numbers.
  message Range {
    int32 start_line = 1;
    int32 start_col = 2;
    int32 end_line = 3;
    int32 end_col = 4;
  }

  ModuleRef module = 1; // optional, if missing the line is within this module.
  Range range = 2;
}


// Expressions
message Expr {
  message RecCon {
    Type.Con tycon = 1; // Always fully applied
    repeated FieldWithExpr fields = 2; // length > 0
  }

  message RecProj {
    Type.Con tycon = 1; // Always fully applied
    string field = 2;
    Expr record = 3;
  }

  // Set `field` in `record` to `update`.
  message RecUpd {
    Type.Con tycon = 1;
    string field = 2;
    Expr record = 3;
    Expr update = 4;
  }

  message VariantCon {
    Type.Con tycon = 1; // Always fully applied
    string variant_con = 2;
    Expr variant_arg = 3;
  }

  message TupleCon {
    repeated FieldWithExpr fields = 1; // length > 0
  }

  message TupleProj {
    string field = 1;
    Expr tuple = 2;
  }

  // Set `field` in `tuple` to `update`.
  message TupleUpd {
    string field =1;
    Expr tuple = 2;
    Expr update = 3;
  }

  message App {
    Expr fun = 1;
    repeated Expr args = 2; // length > 0
  }

  message TyApp {
    Expr expr = 1;
    repeated Type types = 2; // length > 0
  }

  message Abs {
    repeated VarWithType param = 1; // length > 0
    Expr body  = 2;
  }

  message TyAbs {
    repeated TypeVarWithKind param = 1; // length > 0
    Expr body = 2;
  }

  message Nil {
    Type type = 1;
  }

  message Cons {
    Type type = 1;
    repeated Expr front = 2; // length > 0
    Expr tail = 3;
  }

  message None {
    Type type = 1;
  }

  message Some {
    Type type = 1;
    Expr body = 2;
  }

  Location location = 25; // optional

  oneof Sum {
    string var = 1;
    ValName val = 2;
    BuiltinFunction builtin = 3;
    PrimCon prim_con = 4;
    PrimLit prim_lit = 5;
    RecCon rec_con = 6;
    RecProj rec_proj = 7;
    VariantCon variant_con = 8;
    TupleCon tuple_con = 9;
    TupleProj tuple_proj = 10;
    App app = 11;
    TyApp ty_app =  12;
    Abs abs = 13;
    TyAbs ty_abs = 14;
    Case case = 15;
    Block let = 16;
    Nil nil = 17;
    Cons cons = 18;
    // Type equals = 19; // Removed in favour of BuiltinFunction.EQUAL_*
    Update update = 20;
    Scenario scenario = 21;
    RecUpd rec_upd = 22;
    TupleUpd tuple_upd = 23;
    // TypeConName equal_contract_id = 24; // Removed in favour of BuiltinFunction.EQUAL_CONTRACT_ID
    None none = 26;
    Some some = 27;
  }

  reserved 19; // This was equals.
  reserved 24; // This was equal_contract_id.
}

// Case alternative
message CaseAlt {
  message Variant {
    TypeConName con = 1;
    string variant = 2;
    string binder = 3;
  }

  message Cons {
    string var_head = 1;
    string var_tail = 2;
  }

  message Some {
    string var_body = 1;
  }

  oneof Sum {
    Unit default = 1;
    Variant variant = 2;
    PrimCon prim_con = 3;
    Unit nil = 4;
    Cons cons = 5;
    Unit none = 7;
    Some some = 8;
  }

  Expr body = 6;
}

// Case expression
message Case {
  Expr scrut = 1;
  repeated CaseAlt alts = 2; // length > 0
}

// A block of bindings and an expression.
// Encodes a sequence of binds in e.g. a let or update block.
message Block {
  repeated Binding bindings = 1; // length > 0
  Expr body = 2;
}

message Pure {
  Type type = 1;
  Expr expr = 2;
}

// Update actions
message Update {
  message Create {
    TypeConName template = 1;
    Expr expr = 2;
  }

  message Exercise {
    TypeConName template = 1;
    string choice = 2;
    Expr cid = 3;
    Expr actor = 4;
    Expr arg = 5;
  }

  message Fetch {
    TypeConName template = 1;
    Expr cid = 2;
    // NOTE(MH): We thought we'd need this, but we don't.
    // REMOVED: Expr actor = 3;
    reserved 3;
  }

  message EmbedExpr {
    Type type = 1; // the expression should be of type `Scenario type`
    Expr body = 2;
  }

  message RetrieveByKey {
    TypeConName template = 1;
    Expr key = 2;
  }

  oneof Sum {
    Pure pure = 1;
    // this is purely for compact serialization -- specifically to
    // reduce the AST depth. it adds no expressive power.
    Block block = 2;
    Create create = 3;
    Exercise exercise = 4;
    Fetch fetch = 5;
    Unit get_time = 6;
    RetrieveByKey lookup_by_key = 8;
    RetrieveByKey fetch_by_key = 9;
    // see similar constructor in `Scenario` on why this is useful.
    EmbedExpr embed_expr = 7;
  }
}

// Scenario actions
message Scenario {
  message Commit {
    Expr party = 1;
    Expr expr = 2;
    Type ret_type = 3;
  }

  message EmbedExpr {
    Type type = 1; // the expression should be of type `Scenario type`
    Expr body = 2;
  }

  oneof Sum {
    Pure pure = 1;
    // this is purely for compact serialization -- specifically to
    // reduce the AST depth. it adds no expressive power.
    Block block = 2;
    Commit commit = 3;
    Commit mustFailAt = 4;
    Expr pass = 5;
    Unit get_time = 6;
    // The expression is of type `Text`.
    Expr get_party = 7;
    // embed an expression of type Scenario. note that this construct is useful
    // to explicitly mark the start of scenario execution, which is useful in
    // top level definitions. for example if we hav
    //
    // def test : Scenario Unit = if <blah> then <this> else <that>
    //
    // this is not a value, since it's headed with an `if`, but we can turn
    // it into a value by wrapping the `if` with this constructor. in that
    // case, the `if` will be executed every time the scenario runs --
    // as expected.
    EmbedExpr embed_expr = 8;
  }
}

// Template choice definition.
message TemplateChoice {
  // Name of the choice.
  string name = 1;

  // Indicator whether exercising the choice consumes the contract instance.
  bool consuming = 2;

  // The controllers of the choice. They have type `List Party` and the
  // template parameter in scope, but not the choice parameter. All of these
  // controllers need to authorize the exercising of this choice (aka
  // conjunctive choice controllers).
  Expr controllers = 3;

  // Name to which the choice argument is bound and its type.
  VarWithType arg_binder = 4;

  // Return type of the choice.
  Type ret_type = 5;

  // Follow-up update of the choice. It has type `Update <ret_type>` and both
  // the template parameter and the choice parameter in scope.
  Expr update = 6;

  // Name to bind the ContractId of the contract this choice is exercised on to.
  string self_binder = 7;

  Location location = 8;
}

// we restrict key expressions to records of projections, much like SQL
message KeyExpr {
  message Projection {
    Type.Con tycon = 1; // Always fully applied
    string field = 2;
  }

  // note that the projection is always referring to the template parameter.
  message Projections {
    repeated Projection projections = 2;
  }

  message RecordField {
    string field = 1;
    KeyExpr expr = 2;
  }

  message Record {
    Type.Con tycon = 1; // Always fully applied
    repeated RecordField fields = 2;
  }

  oneof Sum {
    Projections projections = 1;
    Record record = 2;
  }
}

// Contract template definition
message DefTemplate {
  message DefKey {
    Type type = 1;
    KeyExpr key = 2;
    Expr maintainers = 3; // a function from the key type to [Party]
  }

  // The type constructor for the template, acting as both
  // the name of the template and the type of the template argument.
  DottedName tycon = 1;

  // Name to which the template argument is bound.
  string param = 2;

  // NOTE(MH): The new runtime authorization check for DAML 1.0 does not rely
  // on the stakeholder signatures produced by the obligables computation
  // anymore but uses the interpreter to compute the signatories and
  // stakeholders of contract instances.
  // REMOVED: TemplateStakeholders stakeholders = 3;
  reserved 3;

  // Optional pre-condition that the template argument must satisfy.
  // When present, it has type `Bool` and the template parameter in scope.
  Expr precond = 4;

  // The signatories of the contract. They have type `List Party` and the
  // template parameter in scope.
  Expr signatories = 5;

  // The agreement text associated with the contract. It has type `Text` and
  // the template parameter in scope.
  Expr agreement = 6;

  // The choices available in the resulting contract.
  repeated TemplateChoice choices = 7;

  // The observers of the contract. They have type `List Party` and the
  // template parameter in scope.
  Expr observers = 8;

  Location location = 9;

  // They key definition for the template, if present
  DefKey key = 10; // optional
}

// Data type definition
message DefDataType {
  message Fields {
    repeated FieldWithType fields = 1; // length >= 0
  }

  DottedName name = 1;
  repeated TypeVarWithKind params = 2;

  oneof DataCons {
    Fields record = 3; // Records without fields are explicitly allowed.
    Fields variant = 4; // Variants without constructors are explicitly allowed.
  }

  // If true, this data type preserves serializability in the sense that when
  // all parameters are instantiated with serializable types (of kind `*`),
  // then the resulting type is serializable as well.
  // This flag is used to simplify package validation by not requiring an
  // inference but only a check. Such a check must validate that this flag is
  // set correctly and that template and choice argument and result types
  // have this flag set to true.
  bool serializable = 5;
  Location location = 6;
}

// Value definition
message DefValue {
  // The reason why we have this type instead of just flattening name and type in
  // DefValue is that it was VarWithType before, and we want to be binary-compatible
  // with it.
  message NameWithType {
    repeated string name = 1;
    Type type = 2;
  }

  NameWithType name_with_type = 1;
  Expr expr = 2;
  // If true, the value must not contain any party literals and not reference
  // values which contain party literals.
  // This flag is used to simplify package validation by not requiring an
  // inference but only a check. Such a check must validate that this flag is
  // set correctly and that templates do not reference values which have this
  // flag set to false.
  bool no_party_literals = 3;
  bool is_test = 4;
  Location location = 5;
}

message FeatureFlags {
  bool forbidPartyLiterals = 1;
}

message Module {
  DottedName name = 1;
  // repeated Definition definitions = 2; // Removed in favour of data_types, values and templates.
  reserved 2;
  // repeated string scenario_tests = 3; // Removed in favour of DefValue.is_test.
  reserved 3;
  FeatureFlags flags = 4;
  repeated DefDataType data_types = 5;
  repeated DefValue values = 6;
  repeated DefTemplate templates = 7;
}

message Package {
  repeated Module modules = 1;
}

