-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
module CollectAuthority where

import DA.Action

template Token with
    operator: Party
    owner: Party
  where
    signatory owner
    observer operator

    nonconsuming choice SignAgreement: ContractId Agreement with
        agreementId: ContractId Agreement
      controller operator
      do
        archive self
        exercise agreementId (AddSignatory with newSignatory = owner)

template Agreement with
    operator: Party
    signatories: [Party]
  where
    signatory operator :: signatories

    nonconsuming choice AddSignatory: ContractId Agreement with
        newSignatory: Party
      controller newSignatory
      do
        archive self
        create this with signatories = newSignatory :: signatories

    nonconsuming choice AddToken: ContractId Agreement with
        tokenId: ContractId Token
      controller operator
      do
        exercise tokenId (SignAgreement with agreementId = self)

    nonconsuming choice AddTokens: ContractId Agreement with
        tokenIds: [ContractId Token]
      controller operator
      do
        foldlA (\agreementId tokenId -> exercise agreementId (AddToken with tokenId)) self tokenIds

test = scenario do
  operator <- getParty "Operator"
  parties <- forA [1 .. 100] \id -> getParty ("Party" <> show id)
  tokenIds <- forA parties \party -> submit party do create Token with operator; owner = party
  agreementId <- submit operator do create Agreement with operator; signatories = []
  agreementId <- submit operator do exercise agreementId (AddTokens with tokenIds)
  pure ()
