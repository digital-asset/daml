// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

module RecordMod {

  record @serializable Pair (a:*) (b: *) = { fst: a, snd: b };

  record @serializable Box = { x: RecordMod:Pair Int64 (Numeric 10), party: Party } ;

  template (this : Box) =  {
    precondition True,
    signatories (PartyMod:one (RecordMod:Box {party} this)),
    observers (Nil @Party),
    agreement "Agreement for RecordMod:Box",
    choices {
    }
  };

  val createContract:
    RecordMod:Pair Int64 (Numeric 10)->
      Scenario (ContractId RecordMod:Box)
    = \ (x: RecordMod:Pair Int64 (Numeric 10)) ->
        commit @(ContractId RecordMod:Box) 'Bob' (create @RecordMod:Box (RecordMod:Box { x = x, party = 'Bob' }));

  val pair1: RecordMod:Pair Int64 (Numeric 10) =
    RecordMod:Pair @Int64 @(Numeric 10) {
      fst = 1,
      snd = 1.0000000000
    };

  val pair2: RecordMod:Pair Int64 (Numeric 10) =
    RecordMod:Pair @Int64 @(Numeric 10) {
      fst = -2,
      snd = -2.2222222222
    };
    
  val pair3: RecordMod:Pair Int64 (Numeric 10) =
    RecordMod:Pair @Int64 @(Numeric 10) {
      fst = -3,
      snd = -3333333333333333333333333333.0000000000
  };
   
  val createContracts: Scenario Unit =
    sbind
        c1 : ContractId RecordMod:Box <- RecordMod:createContract RecordMod:pair1 ;
        c2 : ContractId RecordMod:Box <- RecordMod:createContract RecordMod:pair2 ;
        c3 : ContractId RecordMod:Box <- RecordMod:createContract RecordMod:pair3
      in
        spure @Unit () ;

}
