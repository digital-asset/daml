


module BigDecimal {

    record BigDecimal = {
        scale: Int64,
        unscaled_value: BigInt
    };

   val add : BigDecimal -> BigDecimal -> BigDecimal =
       \(x1: BigDecimal) (x2: BigDecimal) ->
           let s1: Int = BigDecimal {scale} x1 in
           let s2: Int = BigDecimal {scale} x2 in
           case (GREATER s1 s2) of
               True -> BigDecimal {
                       scale = s2,
                       unscaled_value = ADD_BIGINT (BigDecimal {unscaled_value} x1) (POWER_OF_TEN_BIGINT (BigDecimal {unscaled_value} x1) (SUB_INT s1 s2))
                   }
          |    _    -> BigDecimal {
                       scale = s1,
                       unscaled_value = ADD_BIGINT (POWER_OF_TEN_BIGINT (BigDecimal {unscaled_value} x2) (SUB_INT s2 s1)) (BigDecimal {unscaled_value} x1)
                   };

//   val sub: BigDecimal -> BigDecimal -> BigDecimal =
//       \(x1: BigDecimal) (x2: BigDecimal) ->
//           let s1: Int = BigDecimal {scale} x1 in
//           let s2: Int = BigDecimal {scale} x2 in
//           case (GREATER s1 s2) of
//               True ->
//                   BigDecimal {
//                       scale = s2,
//                       unscaled_value = SUB_BIGINT (BigDecimal {unscaled_value} x1) (POWER_OF_TEN_BIGINT (BigDecimal {unscaled_value} x1) (SUB_INT s1 s2))
//                   }
//          |    _ ->
//                   BigDecimal {
//                       scale = s1,
//                       unscaled_value = SUB_BIGINT (POWER_OF_TEN_BIGINT (BigDecimal {unscaled_value} x2) (SUB_INT s2 s1)) (BigDecimal {unscaled_value} x1)
//                   };
//
//   val mult: BigDecimal -> BigDecimal -> BigDecimal =
//       \(x1: BigDecimal) (x2: BigDecimal) ->
//           BigDecimal {
//               scale = MULT_INT64 (BigDecimal {scale} x1) (BigDecimal {scale} x2),
//               unscaled_value = MULT_BIGINT (BigDecimal {unscaled_value} x1) {unscaled_value} x2)
//           };
//

}
