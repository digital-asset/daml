// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

module VariantMod {

  variant @serializable Either (a:*) (b: *) = Left: a | Right: b ;

  record @serializable Box = { x: VariantMod:Either Int64 (Numeric 10), party: Party } ;

  template (this : Box) =  {
    precondition True,
    signatories (PartyMod:one (VariantMod:Box {party} this)),
    observers (Nil @Party),
    agreement "Agreement for VariantMod:Box",
    choices {
    }
  };

  val createContract:
    VariantMod:Either Int64 (Numeric 10)->
      Scenario (ContractId VariantMod:Box)
    = \ (x: VariantMod:Either Int64 (Numeric 10)) ->
        commit @(ContractId VariantMod:Box) 'Bob' (create @VariantMod:Box (VariantMod:Box { x = x, party = 'Bob' }));

  val either1: VariantMod:Either Int64 (Numeric 10) =
    VariantMod:Either:Left @Int64 @(Numeric 10) 0;

  val either2:  VariantMod:Either Int64 (Numeric 10) =
    VariantMod:Either:Right @Int64 @(Numeric 10) 1.1111111111;

  val either3:  VariantMod:Either Int64 (Numeric 10) =
    VariantMod:Either:Right @Int64 @(Numeric 10) -2.2222222222;

  val createContracts: Scenario Unit =
    sbind
        c1 : ContractId VariantMod:Box <- VariantMod:createContract VariantMod:either1 ;
        c2 : ContractId VariantMod:Box <- VariantMod:createContract VariantMod:either2 ;
        c3 : ContractId VariantMod:Box <- VariantMod:createContract VariantMod:either3
      in
        spure @Unit () ;



}
