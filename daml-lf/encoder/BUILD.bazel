# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "lf_scalacopts",
)

da_scala_library(
    name = "encoder",
    srcs = glob(
        ["src/main/**/*.scala"],
        exclude = ["src/main/scala/com/digitalasset/daml/lf/testing/archive/DamlLfEncoder.scala"],
    ),
    scalacopts = lf_scalacopts,
    visibility = ["//daml-lf:__subpackages__"],
    deps = [
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//daml-lf/archive:daml_lf_archive_scala",
        "//daml-lf/archive:daml_lf_java_proto",
        "//daml-lf/data",
        "//daml-lf/language",
    ],
)

da_scala_test_suite(
    name = "tests",
    size = "small",
    srcs = glob(["src/test/scala/com/digitalasset/daml/lf/testing/archive/**/*.scala"]),
    data = [
        ":testing-dar-1.0",
        ":testing-dar-1.1",
        ":testing-dar-1.3",
        ":testing-dar-1.dev",
    ],
    scalacopts = lf_scalacopts,
    deps = [
        ":encoder",
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/org/scalacheck",
        "//3rdparty/jvm/org/scalatest",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_scala",
        "//daml-lf/archive:daml_lf_java_proto",
        "//daml-lf/data",
        "//daml-lf/language",
        "//daml-lf/parser",
        "//daml-lf/validation",
    ],
)

da_scala_binary(
    name = "encoder_binary",
    srcs = glob(["src/main/scala/com/digitalasset/daml/lf/testing/archive/DamlLfEncoder.scala"]),
    main_class = "com.digitalasset.daml.lf.testing.archive.DamlLfEncoder",
    scalacopts = ["-Xsource:2.13"],
    visibility = [
        "//daml-lf:__subpackages__",
        "//language-support:__subpackages__",
    ],
    deps = [
        ":encoder",
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/org/scalacheck",
        "//3rdparty/jvm/org/scalatest",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_scala",
        "//daml-lf/archive:daml_lf_java_proto",
        "//daml-lf/data",
        "//daml-lf/language",
        "//daml-lf/parser",
        "//daml-lf/validation",
    ],
)

filegroup(
    name = "lf_since_1.0",
    srcs = glob(["src/test/lf/since_1_0/**/*.lf"]),
)

filegroup(
    name = "lf_since_1.1",
    srcs = glob(["src/test/lf/since_1_1/**/*.lf"]),
)

filegroup(
    name = "lf_since_1.3",
    srcs = glob(["src/test/lf/since_1_3/**/*.lf"]),
)

filegroup(
    name = "lf_since_1.dev",
    srcs = glob(["src/test/lf/since_1_dev/**/*.lf"]),
)

genrule(
    name = "testing-dar-1.0",
    srcs = [":lf_since_1.0"],
    outs = ["test-1.0.dar"],
    cmd = "$(location :encoder_binary) $(SRCS) -o $@ -v 1.0",
    tools = [":encoder_binary"],
    visibility = [
        "//daml-lf:__subpackages__",
        "//language-support:__subpackages__",
    ],
)

genrule(
    name = "testing-dar-1.1",
    srcs = [
        ":lf_since_1.0",
        ":lf_since_1.1",
    ],
    outs = ["test-1.1.dar"],
    cmd = "$(location :encoder_binary) $(SRCS) -o $@ -v 1.1",
    tools = [":encoder_binary"],
    visibility = [
        "//daml-lf:__subpackages__",
        "//language-support:__subpackages__",
    ],
)

genrule(
    name = "testing-dar-1.3",
    srcs = [
        ":lf_since_1.0",
        ":lf_since_1.1",
        ":lf_since_1.3",
    ],
    outs = ["test-1.3.dar"],
    cmd = "$(location :encoder_binary) $(SRCS) -o $@ -v 1.3",
    tools = [":encoder_binary"],
    visibility = [
        "//daml-lf:__subpackages__",
        "//language-support:__subpackages__",
    ],
)

genrule(
    name = "testing-dar-1.dev",
    srcs = [
        ":lf_since_1.0",
        ":lf_since_1.1",
        ":lf_since_1.3",
        ":lf_since_1.dev",
    ],
    outs = ["test-1.dev.dar"],
    cmd = "$(location :encoder_binary) $(SRCS) -o $@ -v 1.dev",
    tools = [":encoder_binary"],
    visibility = [
        "//daml-lf:__subpackages__",
        "//language-support:__subpackages__",
    ],
)
