-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE

module Test where

import DA.Assert ((===))

-- | An interface comment.
data EmptyInterfaceView = EmptyInterfaceView {}

interface Token where
  viewtype EmptyInterfaceView

  getOwner : Party -- ^ A method comment.
  getAmount : Int
  setAmount : Int -> Token

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token) -- ^ An interface choice comment.
    with
      splitAmount : Int -- ^ A choice field comment.
    controller getOwner this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller getOwner this, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner this
    do
      noopImpl this nothing

  choice GetRich : ContractId Token
    with
      byHowMuch : Int
    controller getOwner this
    do
        assert (byHowMuch > 0)
        create $ setAmount this (getAmount this + byHowMuch)

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner
    implements Token where
      view = EmptyInterfaceView

      getOwner = owner
      getAmount = amount
      setAmount x = toInterface @Token (this with amount = x)

      splitImpl splitAmount = do
        assert (splitAmount < amount)
        cid1 <- create this with amount = splitAmount
        cid2 <- create this with amount = amount - splitAmount
        pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

      transferImpl newOwner = do
        cid <- create this with owner = newOwner
        pure (toInterfaceContractId @Token cid)

      noopImpl nothing = do
        [1] === [1] -- make sure `mkMethod` calls are properly erased in the presence of polymorphism.
        pure ()

run = do
  p <- getParty "alice"
  p `submit` do
    cidAsset1 <- create Asset with
      issuer = p
      owner = p
      amount = 15
    let cidToken1 = toInterfaceContractId @Token cidAsset1
    cid <- exercise cidToken1 (Noop ())
    _ <- fetch cidToken1
    exercise cidToken1 $ GetRich with byHowMuch = 20
    pure ()
