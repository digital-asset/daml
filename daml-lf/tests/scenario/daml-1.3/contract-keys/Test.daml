-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Test where

template TextKey
  with
    p : Party
    k : Text
    disclosedTo : [Party]
  where
    signatory p

    observer disclosedTo

    key (p, k): (Party, Text)
    maintainer p

    controller p can
      TextKeyChoice : ()
        do
          return ()

run = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  cid1 <- submit alice do
    create TextKey with
      p = alice
      k = "some-key"
      disclosedTo = [bob]

  -- duplicate keys are not OK
  submitMustFail alice do
    create TextKey with
      p = alice
      k = "some-key"
      disclosedTo = [bob]

  -- unauthorized lookups are not OK
  submitMustFail bob do
    lookupByKey @TextKey (alice, "some-key")
  submitMustFail bob do
    lookupByKey @TextKey (alice, "non-existant-key")

  cid2 <- submit alice do
    lookupByKey @TextKey (alice, "some-key")
  assertMsg "Some cid1 == cid2" (Some cid1 == cid2)

  (cid3, _tk) <- submit alice do
    fetchByKey @TextKey (alice, "some-key")
  assertMsg "cid1 == cid3" (cid1 == cid3)

  noCid1 <- submit alice do
    lookupByKey @TextKey (alice, "blah")
  assertMsg "None == noCid1" (None == noCid1)

  noCid2 <- submit bob do
    lookupByKey @TextKey (bob, "some-key")
  assertMsg "None == noCid2" (None == noCid2)

  submit alice do
    exercise cid1 TextKeyChoice

  noCid3 <- submit alice do
    lookupByKey @TextKey (alice, "some-key")
  assertMsg "None == noCid3" (None == noCid3)

  -- if we consume an absolute CID within a single
  -- submission, we witness that it does not exist
  cid4 <- submit alice do
    create TextKey with
      p = alice
      k = "some-key-2"
      disclosedTo = [bob]
  noCid4 <- submit alice do
    exercise cid4 TextKeyChoice
    lookupByKey @TextKey (alice, "some-key-2")
  assertMsg "None == noCid4" (None == noCid4)

