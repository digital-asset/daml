// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Please refer to the value spec (in daml-foundations/daml-lf/spec/value.rst)
// which describes the semantics of DAML-LF values in more detail.
//
// [one-line] version summary
// * 1: initial version
// * 2: new message Optional, incorporated into Value sum
// * 3: new message ContractId, replaces string contract_id in Value sum
// * 4: new message Map, incorporated into Value sum
syntax = "proto3";

package com.digitalasset.daml.lf.value;

option java_package = "com.digitalasset.daml.lf.value";

import "google/protobuf/empty.proto";

message VersionedValue {
    string version = 1;
    Value value = 2;
}

// The universe of serializable DAML-LF values.
// architecture-handbook-entry-begin: Value
message Value {
    oneof sum {
        Record record = 1;

        Variant variant = 2;

        string contract_id = 3; // removed in v3

        List list = 4;

        sint64 int64 = 5;

        // A decimal value with precision 38 (38 decimal digits), of which
        // 10 after the comma / period. in other words a decimal is a number
        // of the form `x / 10^10` where `|x| < 10^38`.
        // The number can start with a leading sign [+-] followed by digits
        string decimal = 6;

        string text = 8;

        // microseconds since the UNIX epoch. can go backwards. fixed
        // since the vast majority of values will be greater than
        // 2^28, since currently the number of microseconds since the
        // epoch is greater than that. Range: 0001-01-01T00:00:00Z to
        // 9999-12-31T23:59:59.999999Z, so that we can convert to/from
        // https://www.ietf.org/rfc/rfc3339.txt
        sfixed64 timestamp = 9;

        string party = 10;

        bool bool = 11;

        google.protobuf.Empty unit = 12;

        // days since the unix epoch. can go backwards. limited from
        // 0001-01-01 to 9999-12-31, also to be compatible with
        // https://www.ietf.org/rfc/rfc3339.txt
        int32 date = 13;

        Optional optional = 14;

        ContractId contract_id_struct = 15;

        Map map = 16;
    }
}
// architecture-handbook-entry-end: Value

message Record {
    Identifier record_id = 1; // optional
    repeated RecordField fields = 2;
}

message RecordField {
    string label = 1; // optional
    Value value = 2;
}

// Each component of the module name and the name have additional
// lexical restrictions besides non-emptiness -- see the value.rst
// spec for more info.
message Identifier {
    string package_id = 1; // non-empty
    repeated string module_name = 2; // at least length 1
    repeated string name = 3; // at least length 1
}

message Variant {
    Identifier variant_id = 1; // optional
    string constructor = 2;
    Value value = 3;
}

message ContractId {
    string contract_id = 1;
    bool relative = 2;
}

message List {
    repeated Value elements = 1;
}

message Optional {
    Value value = 1; // optional
}

message Map {
    message Entry {
        string key = 1;
        Value value = 2;
    }

    repeated Entry entries = 1;
}
