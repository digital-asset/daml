// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Please refer to the transaction spec (in daml-foundations/daml-lf/spec/transaction.rst)
// which describes the semantics of Daml-LF transactions in more detail.
//
// [one-line] version summary
// * 14 -- initial version
// * 15 -- add interfaceId in exercise node to exercise via interface
// * dev -- special staging area for the next version to be released
syntax = "proto3";

package com.daml.lf.transaction;

option java_package = "com.daml.lf.transaction";

import "com/daml/lf/value.proto";

// data structure represent an update to the ledger. executing a Daml-LF action of type
// Update A produces produces one of these.
// architecture-handbook-entry-begin: Transaction
message Transaction {
    string version = 1;
    repeated string roots = 2;
    repeated Node nodes = 3;
}
// architecture-handbook-entry-end: Transaction

// architecture-handbook-entry-begin: Contract
message ContractInstance {
   string package_name = 4; // required *since dev*
    com.daml.lf.value.Identifier template_id = 1;
    com.daml.lf.value.VersionedValue arg_versioned = 2;
    // TODO: https://github.com/digital-asset/daml/issues/18240
    //  remove agreement text for the proto
    string agreement = 3;
}
// architecture-handbook-entry-end: Contract

// architecture-handbook-entry-begin: Nodes

message Node {
    string version = 1;

    string node_id = 2;

    oneof node_type {
        FatContractInstance create = 3;
        NodeFetch fetch = 4;
        NodeExercise exercise = 5;
        NodeLookupByKey lookup_by_key = 6;
        NodeRollback rollback = 7;
    }
}

// A self contained representation of a committed contract.
message NodeCreate {
  bytes contract_id = 1;
  string package_name = 2;
  com.daml.lf.value.Identifier template_id = 3;

  bytes create_arg = 4;

  repeated string key_maintainers = 9; // required *since dev*

  repeated string non_maintainer_signatories = 5;

  repeated string non_signatory_stakeholders = 6;

  bytes key = 10; // required *since dev*

  sfixed64 created_at = 7; // optional

  bytes canton_data = 8;// optional
}

message NodeFetch {
    reserved 1; // was contract_id
    string package_name = 10; // required *since dev*
    com.daml.lf.value.Identifier template_id = 2;
    repeated string actors = 7;
    repeated string stakeholders = 3;
    repeated string signatories = 4;
    reserved 5; // was value_version
    bytes contract_id = 6;
    KeyWithMaintainers key_with_maintainers = 8;
    bool by_key = 9;
}

message NodeExercise {
    reserved 1; // was contract_id
    string package_name = 21; // required *since dev*
    com.daml.lf.value.Identifier template_id = 2;
    com.daml.lf.value.Identifier interface_id = 19; // optional *since version 15*
    repeated string actors = 3;
    string choice = 4;
    oneof arg {
        com.daml.lf.value.VersionedValue arg_versioned = 5; // *must not be used*
        bytes arg_unversioned = 16;
    }
    bool consuming = 6;
    repeated string children = 7; // node ids
    repeated string stakeholders = 8;
    repeated string signatories = 9;
    reserved 10; // was controllers
    bytes contract_id = 11;
    oneof result {
        com.daml.lf.value.VersionedValue result_versioned = 12; // *must not be used*
        bytes result_unversioned = 17;
    }
    reserved 13; // was contract_key
    KeyWithMaintainers key_with_maintainers = 14; // optional
    repeated string observers = 15;
    // No listed authorizers indicates default authorizers (signatories + actors)
    repeated string authorizers = 20;  // *since version dev*
    bool by_key = 18;
}

message NodeLookupByKey {
    string package_name = 5; // required *since dev*
    com.daml.lf.value.Identifier template_id = 1;
    KeyWithMaintainers key_with_maintainers = 2;
    reserved 3; // was contract_id
    bytes contract_id = 4;
}

message NodeRollback {
    repeated string children = 1; // node ids
}

// architecture-handbook-entry-end: Nodes

message Versioned {
  string version = 1;
  bytes payload = 2;
}



// A self contains representation of a committed contract.
message FatContractInstance {
  bytes contract_id = 1;
  string package_name = 9; // required *since dev*
  com.daml.lf.value.Identifier template_id = 2;

  bytes create_arg = 3;

  KeyWithMaintainers contract_key_with_maintainers = 4;

  repeated string non_maintainer_signatories = 5;

  repeated string non_signatory_stakeholders = 6;

  sfixed64 created_at = 7;

  bytes canton_data = 8;
}


message KeyWithMaintainers {
  oneof key {
    com.daml.lf.value.VersionedValue key_versioned = 1; // *must not be used*
    bytes key_unversioned = 3;
  }
  repeated string maintainers = 2; // the maintainers induced by the key
}
