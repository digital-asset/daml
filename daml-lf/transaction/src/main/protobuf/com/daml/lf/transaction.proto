// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Please refer to the transaction spec (in daml-foundations/daml-lf/spec/transaction.rst)
// which describes the semantics of Daml-LF transactions in more detail.
//
// [one-line] version summary
// * 10 -- new field key_with_maintainers in NodeFetch
// * 11 -- add choice observer
// * 12 -- drop value version in profit of node version
// * 13 -- no change w.r.t. 12
// * 14 -- add rollback nodes
//         add byKey flag to fetch and exercise node
// * dev (special staging area for the next version to be released)
syntax = "proto3";

package com.daml.lf.transaction;

option java_package = "com.daml.lf.transaction";

import "com/daml/lf/value.proto";

// data structure represent an update to the ledger. executing a Daml-LF action of type
// Update A produces produces one of these.
// architecture-handbook-entry-begin: Transaction
message Transaction {
    string version = 1;
    repeated string roots = 2;
    repeated Node nodes = 3;
}
// architecture-handbook-entry-end: Transaction

// architecture-handbook-entry-begin: Contract
message ContractInstance {
    com.daml.lf.value.Identifier template_id = 1;
    com.daml.lf.value.VersionedValue arg_versioned = 2;
    string agreement = 3;
}
// architecture-handbook-entry-end: Contract

// architecture-handbook-entry-begin: Nodes

message Node {
    string node_id = 1;

    oneof node_type {
        NodeCreate create = 3;
        NodeFetch fetch = 4;
        NodeExercise exercise = 5;
        NodeLookupByKey lookup_by_key = 6;
        NodeRollback rollback = 7; // *since version 14*
    }

    string version = 63; // *since 11*, optional
}

message KeyWithMaintainers {
    oneof key {
        com.daml.lf.value.VersionedValue key_versioned = 1; // *until version 11*
        bytes key_unversioned = 3; // *defined in version >= 1.11*
    }
    repeated string maintainers = 2; // the maintainers induced by the key
}

message NodeCreate {
    reserved 1; // was contract_id
    ContractInstance contract_instance = 2;  // *until version 11*
    com.daml.lf.value.Identifier template_id = 7; // *since version 12*
    bytes arg_unversioned = 8; // *since version 12*
    string agreement = 9; // *since version 12*
    repeated string stakeholders = 3;
    repeated string signatories = 4;
    KeyWithMaintainers key_with_maintainers = 5;
    com.daml.lf.value.ContractId contract_id_struct = 6;
}

message NodeFetch {
    reserved 1; // was contract_id
    com.daml.lf.value.Identifier template_id = 2;
    repeated string actors = 7;
    repeated string stakeholders = 3;
    repeated string signatories = 4;
    reserved 5; // was value_version
    com.daml.lf.value.ContractId contract_id_struct = 6;
    KeyWithMaintainers key_with_maintainers = 8;
    bool byKey = 9; // *since version 1.14*
}

message NodeExercise {
    reserved 1; // was contract_id
    com.daml.lf.value.Identifier template_id = 2;
    repeated string actors = 3;
    string choice = 4;
    oneof arg {
        com.daml.lf.value.VersionedValue arg_versioned = 5; // *until version 11*
        bytes arg_unversioned = 16; // *since version 12*
    }
    bool consuming = 6;
    repeated string children = 7; // node ids
    repeated string stakeholders = 8;
    repeated string signatories = 9;
    reserved 10; // was controllers
    com.daml.lf.value.ContractId contract_id_struct = 11;
    oneof result {
        com.daml.lf.value.VersionedValue result_versioned = 12; // *until version 11*
        bytes result_unversioned = 17; // *since version 12*
    }
    reserved 13; // was contract_key
    KeyWithMaintainers key_with_maintainers = 14; // optional
    repeated string observers = 15;  // *since version 11*
    bool byKey = 18; // *since version 14*
}

message NodeLookupByKey {
    com.daml.lf.value.Identifier template_id = 1;
    KeyWithMaintainers key_with_maintainers = 2;
    reserved 3; // was contract_id
    com.daml.lf.value.ContractId contract_id_struct = 4;
}

message NodeRollback { // *since version 14*
    repeated string children = 1; // node ids
}

// architecture-handbook-entry-end: Nodes
