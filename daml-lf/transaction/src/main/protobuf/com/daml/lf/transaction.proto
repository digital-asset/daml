// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Please refer to the transaction spec (in daml-foundations/daml-lf/spec/transaction.rst)
// which describes the semantics of DAML-LF transactions in more detail.
//
// [one-line] version summary
// * 10:  new field key_with_maintainers in NodeFetch
// * dev: add choice observer
syntax = "proto3";

package com.daml.lf.transaction;

option java_package = "com.daml.lf.transaction";

import "com/daml/lf/value.proto";

// data structure represent an update to the ledger. executing a DAML-LF action of type
// Update A produces produces one of these.
// architecture-handbook-entry-begin: Transaction
message Transaction {
    string version = 1;
    repeated string roots = 2;
    repeated Node nodes = 3;
}
// architecture-handbook-entry-end: Transaction

// architecture-handbook-entry-begin: Contract
message ContractInstance {
    com.daml.lf.value.Identifier template_id = 1;
    com.daml.lf.value.VersionedValue value = 2;
    string agreement = 3;
}
// architecture-handbook-entry-end: Contract

// architecture-handbook-entry-begin: Nodes

message Node {
    string node_id = 1;

    oneof node_type {
        NodeCreate create = 3;
        NodeFetch fetch = 4;
        NodeExercise exercise = 5;
        NodeLookupByKey lookup_by_key = 6;
    }

    string version = 7; // optional *since dev*
}

message KeyWithMaintainers {
    com.daml.lf.value.VersionedValue key = 1;
    repeated string maintainers = 2; // the maintainers induced by the key
}

message NodeCreate {
    reserved 1; // was contract_id
    ContractInstance contract_instance = 2;
    repeated string stakeholders = 3;
    repeated string signatories = 4;
    KeyWithMaintainers key_with_maintainers = 5;
    com.daml.lf.value.ContractId contract_id_struct = 6;
}

message NodeFetch {
    reserved 1; // was contract_id
    com.daml.lf.value.Identifier template_id = 2;
    repeated string actors = 7;
    repeated string stakeholders = 3;
    repeated string signatories = 4;
    reserved 5; // was value_version
    com.daml.lf.value.ContractId contract_id_struct = 6;
    KeyWithMaintainers key_with_maintainers = 8;
}

message NodeExercise {
    reserved 1; // was contract_id
    com.daml.lf.value.Identifier template_id = 2;
    repeated string actors = 3;
    string choice = 4;
    com.daml.lf.value.VersionedValue chosen_value = 5;
    bool consuming = 6;
    repeated string children = 7; // node ids
    repeated string stakeholders = 8;
    repeated string signatories = 9;
    reserved 10; // was controllers
    com.daml.lf.value.ContractId contract_id_struct = 11;
    com.daml.lf.value.VersionedValue return_value = 12;
    reserved 13; // was contract_key
    KeyWithMaintainers key_with_maintainers = 14; // optional
    repeated string observers = 15;  // *Available in versions >= 1.dev*
}

message NodeLookupByKey {
    com.daml.lf.value.Identifier template_id = 1;
    KeyWithMaintainers key_with_maintainers = 2;
    reserved 3; // was contract_id
    com.daml.lf.value.ContractId contract_id_struct = 4;
}

// architecture-handbook-entry-end: Nodes
