# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_benchmark_jmh",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "lf_scalacopts",
    "lf_scalacopts_stricter",
)
load("@os_info//:os_info.bzl", "is_windows")

da_scala_library(
    name = "validation",
    srcs = glob(["src/main/**/*.scala"]),
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["maven_coordinates=com.daml:daml-lf-validation:__VERSION__"],
    visibility = [
        "//canton:__subpackages__",
        "//canton-3x:__subpackages__",
        "//compiler/scenario-service:__subpackages__",
        "//daml-lf:__subpackages__",
        # TODO https://github.com/digital-asset/daml/issues/15453
        #      Extract the error types into a separate package
        #      in order to decouple the error definitions
        #      from unnecessary daml-lf/validation dependencies
        "//ledger/ledger-api-errors:__subpackages__",
    ],
    deps = [
        "//daml-lf/data",
        "//daml-lf/language",
        "//libs-scala/scala-utils",
    ],
)

da_scala_library(
    name = "validation-test-lib",
    srcs = glob(["src/test/**/SpecUtil.scala"]),
    scala_deps = [
        "@maven//:org_scalactic_scalactic",
    ],
    scalacopts = lf_scalacopts_stricter,
    deps = [
        ":validation",
        "//daml-lf/language",
        "//daml-lf/parser",
    ],
)

upgrade_test_file = "src/test/scala/com/digitalasset/daml/lf/validation/UpgradesSpec.scala"

da_scala_test_suite(
    name = "tests",
    size = "small",
    srcs = glob(
        ["src/test/**/*.scala"],
        exclude = [
            "src/test/**/*SpecUtil.scala",
            upgrade_test_file,
        ],
    ),
    data = [],
    scala_deps = [
    ],
    scalacopts = lf_scalacopts,
    deps = [
        ":validation",
        ":validation-test-lib",
        "//daml-lf/data",
        "//daml-lf/language",
        "//daml-lf/parser",
    ],
)

# TODO https://github.com/digital-asset/daml/issues/17254
#  this test should not use canton and be part of the suite above
[
    da_scala_test(
        name = "upgrade-tests",
        size = "medium",
        srcs = [upgrade_test_file],
        data = [
            "//test-common:dar-files-default",
            "//test-common:upgrades-CommonVersionFailure-v1a.dar",
            "//test-common:upgrades-CommonVersionFailure-v1b.dar",
            "//test-common:upgrades-MissingChoice-v1.dar",
            "//test-common:upgrades-MissingChoice-v2.dar",
            "//test-common:upgrades-MissingDataCon-v1.dar",
            "//test-common:upgrades-MissingDataCon-v2.dar",
            "//test-common:upgrades-MissingModule-v1.dar",
            "//test-common:upgrades-MissingModule-v2.dar",
            "//test-common:upgrades-MissingTemplate-v1.dar",
            "//test-common:upgrades-MissingTemplate-v2.dar",
            "//test-common:upgrades-RecordFieldsNewNonOptional-v1.dar",
            "//test-common:upgrades-RecordFieldsNewNonOptional-v2.dar",
            "//test-common:upgrades-TemplateChangedKeyType-v1.dar",
            "//test-common:upgrades-TemplateChangedKeyType-v2.dar",
            "//test-common:upgrades-ValidUpgrade-v1.dar",
            "//test-common:upgrades-ValidUpgrade-v2.dar",

            # Ported from DamlcUpgrades.hs
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateChoiceIsChanged-v1.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateChoiceIsChanged-v2.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v1.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v2.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType-v1.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType-v2.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType-v1.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType-v2.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplate-v1.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplate-v2.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplateChoice-v1.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplateChoice-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateAddsKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateAddsKeyType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateChangesKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateChangesKeyType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateChoiceChangesItsReturnType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateChoiceChangesItsReturnType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateRemovesKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateRemovesKeyType-v2.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate-v1.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate-v2.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice-v1.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice-v2.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceInputArgumentHasChanged-v1.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceInputArgumentHasChanged-v2.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged-v1.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v1.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v3.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v1.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v3.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v3.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v3.dar",
        ],
        scala_deps = [
            "@maven//:org_apache_pekko_pekko_actor",
            "@maven//:org_apache_pekko_pekko_stream",
        ],
        scalacopts = lf_scalacopts,
        deps = [
            "//bazel_tools/runfiles:scala_runfiles",
            "//canton:community_ledger_ledger-common",
            "//canton:ledger_api_proto_scala",
            "//daml-lf/archive:daml_lf_archive_reader",
            "//daml-lf/data",
            "//libs-scala/ledger-resources",
            "//libs-scala/ports",
            "//libs-scala/resources",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//test-common/canton/it-lib",
        ],
    ),
] if is_windows else []

da_scala_benchmark_jmh(
    name = "typechecking-benchmark",
    srcs = glob(["src/bench/**/*.scala"]),
    data = [
        "//test-common:model-tests-default.dar",
    ],
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/scenario-interpreter",
        "//daml-lf/transaction",
        "//daml-lf/validation",
        "//test-common:dar-files-default-lib",
        "@maven//:com_google_protobuf_protobuf_java",
    ],
)
