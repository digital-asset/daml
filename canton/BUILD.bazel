# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "lf_scalacopts_stricter",
)
load("//:canton_dep.bzl", "canton")
load("@build_environment//:configuration.bzl", "artif_auth")
load("@os_info//:os_info.bzl", "is_windows")

java_binary(
    name = "canton",
    main_class = "com.digitalasset.canton.CantonCommunityApp",
    visibility = ["//visibility:public"],
    runtime_deps = [
        # Do not sort
        "//canton:lib",
        "@maven//:org_bouncycastle_bcprov_jdk15on",
    ],
)

# We replace engine and archive classes in canton
# This should be used for testing only
java_binary(
    name = "canton-patched",
    main_class = "com.digitalasset.canton.CantonCommunityApp",
    visibility = ["//visibility:public"],
    runtime_deps = [
        # The following prevents buildifier from sorting the deps
        # Do not sort
        "//daml-lf/engine",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//canton:lib",
        "@maven//:org_bouncycastle_bcprov_jdk15on",
    ],
)

genrule(
    name = "canton-lib",
    srcs = [":lib/canton.jar"] if canton["local"] else ["@canton//:jar"],
    outs = ["canton-lib.jar"],
    cmd = """
    set -euo pipefail

    cp $(location {src}) $@
    """.format(src = ":lib/canton.jar" if canton["local"] else "@canton//:jar"),
    visibility = ["//visibility:public"],
)

java_import(
    name = "lib",
    jars = [":canton-lib.jar"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "canton-lib-ee",
    # We don't use the else branch but we need a resolvable value
    srcs = [":lib/canton-ee.jar"] if canton["local"] else ["@canton//:jar"],
    outs = ["canton-lib-ee.jar"],
    cmd = """
set -euo pipefail

if [ "{local}" = "true" ]; then
    cp $(location {src}) $@
    exit 0
fi

CANTON_ENTERPRISE_VERSION=2.7.0-rc3
CANTON_ENTERPRISE_SHA=f4b977e7eb9be613bca5868ae7ae3231161a55d7630142e79c4be71a1d8c00e4

url=https://digitalasset.jfrog.io/artifactory/canton-enterprise/canton-enterprise-$$CANTON_ENTERPRISE_VERSION.tar.gz

curl=$(location {curl})

tmp=$$(mktemp)
$$curl --location \
     --fail \
     --insecure \
     --silent \
     -H "Authorization: Basic {auth}" \
     $$url \
 > $$tmp

computed_sha=$$(sha256sum $$tmp | awk '{{print $$1}}')
if [ "$$CANTON_ENTERPRISE_SHA" != "$$computed_sha" ]; then
    echo "Wrong sha for canton enterprise jar." >&2
    echo "Trying to download from: $$url" >&2
    echo "Got: $$computed_sha" >&2
    echo "Expected: $$CANTON_ENTERPRISE_SHA" >&2
    exit 1
fi

tar xzf $$tmp

cp canton-*/lib/canton-*.jar $@
""".format(
        auth = artif_auth,
        curl = "@curl_dev_env//:bin/curl" if not is_windows else "@curl_dev_env//:bin/curl.exe",
        local = "true" if canton["local"] else "",
        src = ":lib/canton-ee.jar" if canton["local"] else "@canton//:jar",  # not used in else case but still must resolve
    ),
    tags = ["canton-ee"],
    tools = [
        "@curl_dev_env//:bin/curl" if not is_windows else "@curl_dev_env//:bin/curl.exe",
    ],
    visibility = ["//visibility:public"],
)

java_import(
    name = "lib-ee",
    jars = [":canton-lib-ee.jar"],
    tags = ["canton-ee"],
)

java_binary(
    name = "canton-ee",
    main_class = "com.digitalasset.canton.CantonEnterpriseApp",
    tags = ["canton-ee"],
    visibility = ["//ledger-service:__subpackages__"],
    runtime_deps = [
        "//canton:lib-ee",
        "@maven//:org_bouncycastle_bcprov_jdk15on",
    ],
)
