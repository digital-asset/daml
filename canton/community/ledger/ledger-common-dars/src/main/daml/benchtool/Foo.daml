-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Foo where

import DA.Functor (void)

template Divulger
  with
    divulgees: [Party] -- Parties to whom something is divulged
    divulger: Party -- Party who divulges something
    keyId: Text
  where
    signatory [divulger] <> divulgees

    key (divulger, keyId): (Party, Text)
    maintainer key._1

    nonconsuming choice DivulgeContractImmediate: ()
      with
          fooObservers : [Party]
          fooPayload : Text
          fooKeyId: Text
          fooTemplateName: Text
      controller divulger
      do
        -- Parties from 'divulgees' see the creation of Foo even though
        -- they are not contract stakeholders, i.e. immediate divulgence occurs.
        if fooTemplateName == "Foo1" then
            void $ create Foo1 with
                signatory = divulger
                observers = fooObservers
                payload = fooPayload
                keyId = fooKeyId
        else if fooTemplateName == "Foo2" then
            void $ create Foo2 with
                signatory = divulger
                observers = fooObservers
                payload = fooPayload
                keyId = fooKeyId
        else if fooTemplateName == "Foo3" then
            void $ create Foo3 with
                signatory = divulger
                observers = fooObservers
                payload = fooPayload
                keyId = fooKeyId
        else
            return ()

    nonconsuming choice DivulgeConsumingExercise: ()
      with
          fooTemplateName: Text
          fooKey: (Party, Text)
          fooConsumingPayload : Text
      controller divulger
      do
        -- Parties from 'divulgees' see the consuming exercise on Foo even though they are not
        -- contract stakeholders or choice controllers/observers, i.e. divulgence occurs.
        if fooTemplateName == "Foo1" then
            void $ exerciseByKey @Foo1 fooKey (Foo1_ConsumingChoice fooConsumingPayload)
        else if fooTemplateName == "Foo2" then
            void $ exerciseByKey @Foo2 fooKey (Foo2_ConsumingChoice fooConsumingPayload)
        else if fooTemplateName == "Foo3" then
            void $ exerciseByKey @Foo3 fooKey (Foo3_ConsumingChoice fooConsumingPayload)
        else
            return ()
template Foo1
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    nonconsuming choice Foo1_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo1_ConsumingChoice: ()
      with
          exercisePayload: Text
      controller signatory
      do
          return ()

    interface instance FooI1 for Foo1 where
      view = FooData with templateName = "Foo1", ..

template Foo2
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    nonconsuming choice Foo2_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo2_ConsumingChoice: ()
      with
         exercisePayload: Text
      controller signatory
      do
         return ()

    interface instance FooI2 for Foo2 where
      view = foo2ToFooData $ foo2Roundtrip 10 this


template Foo3
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    nonconsuming choice Foo3_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo3_ConsumingChoice: ()
      with
          exercisePayload: Text
      controller signatory
      do
          return ()

    interface instance FooI3 for Foo3 where
      view = foo3ToFooData $ foo3Roundtrip 100 this


template Dummy
  with
    signatory: Party
  where
    signatory signatory


data FooData = FooData
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
    templateName: Text
  deriving (Eq, Show)

-- FooI1 is exposing the most simple case of the interface views - just copying the data from within the template
interface FooI1 where
  viewtype FooData

foo2ToFooData : Foo2 -> FooData
foo2ToFooData Foo2{..} = FooData with templateName = "Foo2", ..

fooDataToFoo2 : FooData -> Foo2
fooDataToFoo2 FooData{..}
  | templateName == "Foo2" = Foo2 {..}
  | otherwise = error "fooDataToFoo2 called non non-foo2"

foo2Roundtrip : Int -> Foo2 -> Foo2
foo2Roundtrip n x
  | n <= 0 = x
  | otherwise = foo2Roundtrip (n - 1) (fooDataToFoo2 $ foo2ToFooData x)

-- FooI2 is exposing a FooData view through 10 round-trips in the recursion calls
interface FooI2 where
  viewtype FooData

foo3ToFooData : Foo3 -> FooData
foo3ToFooData Foo3{..} = FooData with templateName = "Foo3", ..

fooDataToFoo3 : FooData -> Foo3
fooDataToFoo3 FooData{..}
  | templateName == "Foo3" = Foo3 {..}
  | otherwise = error "fooDataToFoo3 called non non-foo3"

foo3Roundtrip : Int -> Foo3 -> Foo3
foo3Roundtrip n x
  | n <= 0 = x
  | otherwise = foo3Roundtrip (n - 1) (fooDataToFoo3 $ foo3ToFooData x)

-- FooI3 is exposing a FooData view through 100 round-trips in the recursion calls
interface FooI3 where
  viewtype FooData
