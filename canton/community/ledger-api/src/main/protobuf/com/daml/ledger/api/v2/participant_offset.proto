// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "ParticipantOffsetOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Describes a specific point on the participant. This is a participant local value:
// a participant offset is meaningful only in the context of its participant. Different
// participants may associate different offsets to the same change synchronized over a domain,
// and conversely, the same literal participant offset may refer to different changes on
// different participants.
//
// This is also a unique index of the changes which happened on the virtual shared ledger.
// Participant offset define an order, which is the same in which order the updates are
// visible as subscribing to the ``UpdateService``. This ordering is also a fully causal
// ordering for one specific domain: for two updates synchronized by the same domain, the
// one with a bigger participant offset happened after than the one with a smaller participant
// offset. Please note this is not true for updates synchronized by a different domain.
// Accordingly, the participant offset order may deviate from the order of the changes
// on the virtual shared ledger.
//
// The Ledger API endpoints that take offsets allow to specify portions
// of the participant that are relevant for the client to read.
//
// Offsets returned by the Ledger API can be used as-is (e.g.
// to keep track of processed transactions and provide a restart
// point to use in case of need).
//
// The format of absolute offsets is opaque to the client: no
// client-side transformation of an offset is guaranteed
// to return a meaningful offset.
//
// The server implementation ensures internally that offsets
// are lexicographically comparable.
message ParticipantOffset {
  oneof value {
    // The format of this string is specific to the participant and opaque to the client.
    string absolute = 1;
    ParticipantBoundary boundary = 2;
  }

  enum ParticipantBoundary {
    // Refers to the first transaction.
    PARTICIPANT_BOUNDARY_BEGIN = 0;

    // Refers to the currently last transaction, which is a moving target.
    PARTICIPANT_BOUNDARY_END = 1;
  }
}
