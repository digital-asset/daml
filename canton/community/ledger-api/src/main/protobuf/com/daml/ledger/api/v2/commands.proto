// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v1/commands.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


option java_outer_classname = "CommandsOuterClass";
option java_package = "com.daml.ledger.api.v2";
option csharp_namespace = "Com.Daml.Ledger.Api.V2";

// A composite command that groups multiple commands together.
message Commands {

  // Identifier of the on-ledger workflow that this command is a part of.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 1;

  // Uniquely identifies the application or participant user that issued the command.
  // Must be a valid ApplicationIdString (as described in ``value.proto``).
  // Required unless authentication is used with a user token or a custom token specifying an application-id.
  // In that case, the token's user-id, respectively application-id, will be used for the request's application_id.
  string application_id = 2;

  // Uniquely identifies the command.
  // The triple (application_id, party + act_as, command_id) constitutes the change ID for the intended ledger change,
  // where party + act_as is interpreted as a set of party names.
  // The change ID can be used for matching the intended ledger changes with all their completions.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 3;

  // Party on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of the given party.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Deprecated in favor of the ``act_as`` field. If both are set, then the effective list of parties on whose
  // behalf the command should be executed is the union of all parties listed in ``party`` and ``act_as``.
  // Optional
  string party = 4;

  // Individual elements of this atomic command. Must be non-empty.
  // Required
  repeated com.daml.ledger.api.v1.Command commands = 5;

  // Specifies the deduplication period for the change ID.
  // If omitted, the participant will assume the configured maximum deduplication time (see
  // ``ledger_configuration_service.proto``).
  oneof deduplication_period {

    // Specifies the length of the deduplication period.
    // It is interpreted relative to the local clock at some point during the submission's processing.
    // Must be non-negative. Must not exceed the maximum deduplication time (see
    // ``ledger_configuration_service.proto``).
    google.protobuf.Duration deduplication_duration = 6;

    // Specifies the start of the deduplication period by a completion stream offset (exclusive).
    // Must be a valid LedgerString (as described in ``participant_offset.proto``).
    string deduplication_offset = 7;
  }

  // Lower bound for the ledger time assigned to the resulting transaction.
  // Note: The ledger time of a transaction is assigned as part of command interpretation.
  // Use this property if you expect that command interpretation will take a considerate amount of time, such that by
  // the time the resulting transaction is sequenced, its assigned ledger time is not valid anymore.
  // Must not be set at the same time as min_ledger_time_rel.
  // Optional
  google.protobuf.Timestamp min_ledger_time_abs = 8;

  // Same as min_ledger_time_abs, but specified as a duration, starting from the time the command is received by the server.
  // Must not be set at the same time as min_ledger_time_abs.
  // Optional
  google.protobuf.Duration min_ledger_time_rel = 9;

  // Set of parties on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of each of the given parties.
  // This field supersedes the ``party`` field. The effective set of parties on whose behalf the command
  // should be executed is the union of all parties listed in ``party`` and ``act_as``, which must be non-empty.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Optional
  repeated string act_as = 10;

  // Set of parties on whose behalf (in addition to all parties listed in ``act_as``) contracts can be retrieved.
  // This affects Daml operations such as ``fetch``, ``fetchByKey``, ``lookupByKey``, ``exercise``, and ``exerciseByKey``.
  // Note: A participant node of a Daml network can host multiple parties. Each contract present on the participant
  // node is only visible to a subset of these parties. A command can only use contracts that are visible to at least
  // one of the parties in ``act_as`` or ``read_as``. This visibility check is independent from the Daml authorization
  // rules for fetch operations.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to read contract data on behalf of each of the given parties.
  // Optional
  repeated string read_as = 11;

  // A unique identifier to distinguish completions for different submissions with the same change ID.
  // Typically a random UUID. Applications are expected to use a different UUID for each retry of a submission
  // with the same change ID.
  // Must be a valid LedgerString (as described in ``value.proto``).
  //
  // If omitted, the participant or the committer may set a value of their choice.
  // Optional
  string submission_id = 12;

  // Additional contracts used to resolve contract & contract key lookups.
  // Optional
  repeated com.daml.ledger.api.v1.DisclosedContract disclosed_contracts = 13;

  // Must be a valid domain ID
  // Required
  string domain_id = 14;

  // The package-id selection preference of the client for resolving
  // package names and interface instances in command submission and interpretation
  repeated string package_id_selection_preference = 15;
}
