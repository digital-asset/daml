// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v0;

import "com/digitalasset/canton/protocol/v1/signed_content.proto";
import "com/digitalasset/canton/v0/trace_context.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";

// Messages for sequencing
message PossiblyIgnoredSequencedEvent {
  int64 counter = 1;
  google.protobuf.Timestamp timestamp = 2;
  com.digitalasset.canton.v0.TraceContext trace_context = 3;
  bool is_ignored = 4;
  v1.SignedContent underlying = 5; // Optional if is_ignored == true, required otherwise
}

// Protobuf has a hard limit on the nesting depth of messages, so this message could potentially hit
// the nesting depth limit. However this probably won't be an issue any time soon.
message RecipientsTree {
  repeated string recipients = 1;
  repeated com.digitalasset.canton.protocol.v0.RecipientsTree children = 2;
}

message Recipients {
  repeated RecipientsTree recipients_tree = 1;
}

message CompressedBatch {
  enum CompressionAlgorithm {
    None = 0;
    Gzip = 1;
  }
}

message ServiceAgreement {
  string id = 1; // A unique identifier of an agreement within a domain, which must change when the legal text changes
  string legal_text = 2;
}

// Messages for performing a version handshake with a sequencer service
// Reused between sequencer services
// IMPORTANT: changing the version handshakes can lead to issues with upgrading domains - be very careful
// when changing the handshake message format
message Handshake {
  message Request {
    repeated string client_protocol_versions = 1;
    google.protobuf.StringValue minimum_protocol_version = 2;
  }

  message Response {
    string server_protocol_version = 1;
    oneof value {
      Success success = 2;
      Failure failure = 3;
    }
  }

  message Success {}

  message Failure {
    string reason = 1;
  }
}

// Messages used for synchronization between sequencer nodes

message AggregationRule {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  repeated string eligible_members = 1;
  int32 threshold = 2;
}
