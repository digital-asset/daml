// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

// Definition of the ConfirmationResponse message which is shared between the transaction and transfer protocol

message LocalVerdict {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  oneof some_local_verdict {
    google.protobuf.Empty local_approve = 1;
    LocalReject local_reject = 2;
  }
}

message LocalReject {
  enum Code {
    CODE_UNSPECIFIED = 0;
    CODE_LOCKED_CONTRACTS = 1;
    CODE_LOCKED_KEYS = 2;
    CODE_INACTIVE_CONTRACTS = 3;
    CODE_DUPLICATE_KEY = 4;
    CODE_CREATES_EXISTING_CONTRACT = 5;
    CODE_LEDGER_TIME = 6;
    CODE_SUBMISSION_TIME = 7;
    CODE_LOCAL_TIMEOUT = 8;
    CODE_MALFORMED_PAYLOADS = 9;
    CODE_MALFORMED_MODEL = 10;
    CODE_MALFORMED_CONFIRMATION_POLICY = 11;
    CODE_BAD_ROOT_HASH_MESSAGE = 12;
    CODE_TRANSFER_OUT_ACTIVENESS_CHECK = 13;
    CODE_TRANSFER_IN_ALREADY_COMPLETED = 14;
    CODE_TRANSFER_IN_ALREADY_ACTIVE = 15;
    CODE_TRANSFER_IN_ALREADY_ARCHIVED = 16;
    CODE_TRANSFER_IN_LOCKED = 17;
    CODE_INCONSISTENT_KEY = 18;
  }

  // cause_prefix + details constitute the cause of the rejection.
  string cause_prefix = 1;
  string details = 2;

  repeated string resource = 3; // affected resources

  string error_code = 5;
  uint32 error_category = 6;
}

message ConfirmationResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  google.protobuf.Timestamp request_id = 1;
  string sender = 2;
  LocalVerdict local_verdict = 3;
  bytes root_hash = 4; // May be empty for Malformed verdicts if the participant cannot determine the root hash.
  repeated string confirming_parties = 5; // Empty iff the verdict is malformed.
  string domain_id = 6;
  ViewPosition view_position = 7;
}

message ViewPosition {
  repeated MerkleSeqIndex position = 1;
}

message MerkleSeqIndex {
  repeated bool is_right = 1;
}
