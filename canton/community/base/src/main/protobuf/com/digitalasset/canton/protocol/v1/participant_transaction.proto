// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v1;

import "com/digitalasset/canton/crypto/v0/crypto.proto";
import "com/digitalasset/canton/protocol/v0/participant_transaction.proto";
import "com/digitalasset/canton/protocol/v0/topology.proto";
import "com/digitalasset/canton/protocol/v1/common.proto";
import "com/digitalasset/canton/protocol/v1/merkle.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

// Messages sent by a participant as part of the transaction protocol

// Changes from v0: ActionDescription.

message ViewNode {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  BlindableNode view_common_data = 1;
  BlindableNode view_participant_data = 2;
  MerkleSeq subviews = 3; // changed type to MerkleSeq in v1
}

message ViewCommonData {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v0.Salt salt = 1;
  repeated Informee informees = 2;
  int32 threshold = 3;
}

message Informee {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  string party = 1;
  int32 weight = 2; // optional: only set if party is confirming
  com.digitalasset.canton.protocol.v0.TrustLevel required_trust_level = 3;
}

// EncryptedViewMessage

message ParticipantRandomnessLookup {
  // An encrypted random bytestring. After decryption, used in HKDF to derive the encryption keys for the view and
  // its subviews
  bytes randomness = 1;

  // The fingerprint of the public key that was used to encrypt the randomness for the participant
  string fingerprint = 2;
}

message ViewParticipantMessage {
  // Placeholder as the protobuf format in v1 is identical to v0.
  // To avoid copy-pasting the serializer/deserializers, the Scala code reuses the v0 message.
  option deprecated = true;
}

// InformeeMessage

message InformeeMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  FullInformeeTree full_informee_tree = 1;
  int32 protocol_version = 2; // added in v1
}

message LightTransactionViewTree {
  GenTransactionTree tree = 1;
  repeated bytes subview_hashes = 2; // added in v1
}

message FullInformeeTree {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  GenTransactionTree tree = 1;
}

// Compared to v0: contract changed type from v0.SerializableContract to v1.SerializableContract
message CreatedContract {
  v1.SerializableContract contract = 1;
  bool consumed_in_core = 2;
  bool rolled_back = 3;
}

// Compared to v0: contract changed type from v0.SerializableContract to v1.SerializableContract
message InputContract {
  v1.SerializableContract contract = 1;
  bool consumed = 2;
}

// Compared to v0: mediator_id field renamed to mediator; deserialization of the field have changed
message CommonMetadata {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  com.digitalasset.canton.crypto.v0.Salt salt = 1;
  bytes confirmation_policy = 2;
  string domain_id = 3;
  string uuid = 4;
  string mediator = 5;
}

// Compared to v0: added max_sequencing_time
message SubmitterMetadata {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v0.Salt salt = 1;
  repeated string act_as = 2;
  string application_id = 3;
  string command_id = 4;
  string submitter_participant = 5;
  string submission_id = 6; // optional; absent if not specified by submitter
  v0.DeduplicationPeriod dedup_period = 7;
  google.protobuf.Timestamp max_sequencing_time = 8;
}
