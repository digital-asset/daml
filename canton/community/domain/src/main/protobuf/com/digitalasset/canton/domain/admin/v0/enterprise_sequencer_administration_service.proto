// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.domain.admin.v0;

import "com/digitalasset/canton/domain/admin/v0/sequencer_initialization_snapshot.proto";
import "com/digitalasset/canton/pruning/admin/v0/pruning.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// administration service for enterprise feature supporting sequencer instances
service EnterpriseSequencerAdministrationService {
  // Remove data from the Sequencer
  rpc Prune(Pruning.Request) returns (Pruning.Response);

  // fetch a snapshot of the sequencer state based on the given timestamp
  rpc Snapshot(Snapshot.Request) returns (Snapshot.Response);

  // Disable members at the sequencer. Will prevent existing and new instances from connecting, and permit removing their data.
  rpc DisableMember(DisableMemberRequest) returns (google.protobuf.Empty);

  rpc AuthorizeLedgerIdentity(LedgerIdentity.AuthorizeRequest) returns (LedgerIdentity.AuthorizeResponse);

  // Enable automatic pruning using the specified schedule parameters
  // The following errors may occur on the SetSchedule or Update commands:
  // - ``INVALID_ARGUMENT``: if a parameter is missing or an invalid cron expression
  //   or duration.
  // - ``FAILED_PRECONDITION``: if automatic background pruning has not been enabled
  //   or if invoked on a participant running the Community Edition.
  rpc SetSchedule(com.digitalasset.canton.pruning.admin.v0.SetSchedule.Request) returns (com.digitalasset.canton.pruning.admin.v0.SetSchedule.Response);

  // Modify individual pruning schedule parameters.
  // - ``INVALID_ARGUMENT``: if the payload is malformed or no schedule is configured
  rpc SetCron(com.digitalasset.canton.pruning.admin.v0.SetCron.Request) returns (com.digitalasset.canton.pruning.admin.v0.SetCron.Response);
  rpc SetMaxDuration(com.digitalasset.canton.pruning.admin.v0.SetMaxDuration.Request) returns (com.digitalasset.canton.pruning.admin.v0.SetMaxDuration.Response);
  rpc SetRetention(com.digitalasset.canton.pruning.admin.v0.SetRetention.Request) returns (com.digitalasset.canton.pruning.admin.v0.SetRetention.Response);

  // Disable automatic pruning and remove the persisted schedule configuration.
  rpc ClearSchedule(com.digitalasset.canton.pruning.admin.v0.ClearSchedule.Request) returns (com.digitalasset.canton.pruning.admin.v0.ClearSchedule.Response);

  // Retrieve the automatic pruning configuration.
  rpc GetSchedule(com.digitalasset.canton.pruning.admin.v0.GetSchedule.Request) returns (com.digitalasset.canton.pruning.admin.v0.GetSchedule.Response);

  // Retrieve pruning timestamp at or near the "beginning" of events.
  rpc LocatePruningTimestamp(com.digitalasset.canton.pruning.admin.v0.LocatePruningTimestamp.Request) returns (com.digitalasset.canton.pruning.admin.v0.LocatePruningTimestamp.Response);
}

message EthereumAccount {
  string address = 1;
}

message LedgerIdentity {
  oneof identifier {
    EthereumAccount ethereum_account = 1;
  }

  message AuthorizeRequest {
    LedgerIdentity identify = 1;
  }
  message AuthorizeResponse {
    oneof value {
      Success success = 1;
      Failure failure = 2;
    }
  }
  message Success {}
  message Failure {
    string reason = 1;
  }
}

message Pruning {
  message Request {
    google.protobuf.Timestamp timestamp = 1;
  }

  message Response {
    // description of what was removed
    string details = 1;
  }
}

message Snapshot {
  message Request {
    google.protobuf.Timestamp timestamp = 1;
  }
  message Response {
    oneof value {
      // Used for sequencers running protocol versions up to v5
      Success success = 1;
      Failure failure = 2;
      // Used for sequencers running protocol version CNTestNet or higher.
      VersionedSuccess versionedSuccess = 3;
    }
  }
  message Success {
    com.digitalasset.canton.domain.admin.v0.SequencerSnapshot state = 1;
  }
  message Failure {
    string reason = 1;
  }
  message VersionedSuccess {
    // Contains a versioned SequencerSnapshot of version v1 or higher
    bytes snapshot = 1;
  }
}

message DisableMemberRequest {
  string member = 1;
}
