# Copyright (c) 2020 The DAML Authors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_binary", "da_haskell_library", "da_haskell_test")
load("//bazel_tools/packaging:packaging.bzl", "package_app")
load("@os_info//:os_info.bzl", "is_windows")

da_haskell_library(
    name = "daml-helper-lib",
    srcs = glob(
        ["src/**/*.hs"],
        exclude = ["src/DA/Daml/Helper/Main.hs"],
    ),
    hackage_deps = [
        "aeson",
        "async",
        "base",
        "bytestring",
        "containers",
        "directory",
        "extra",
        "filepath",
        "http-client",
        "http-types",
        "jwt",
        "monad-loops",
        "network",
        "open-browser",
        "optparse-applicative",
        "process",
        "safe-exceptions",
        "text",
        "typed-process",
        "unordered-containers",
        "utf8-string",
        "yaml",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//daml-assistant:daml-project-config",
        "//language-support/hs/bindings:hs-ledger",
        "//libs-haskell/da-hs-base",
    ],
)

da_haskell_binary(
    name = "daml-helper",
    srcs = ["src/DA/Daml/Helper/Main.hs"],
    hackage_deps = [
        "base",
        "extra",
    ],
    main_function = "DA.Daml.Helper.Main.main",
    visibility = ["//visibility:public"],
    deps = [
        ":daml-helper-lib",
        "//libs-haskell/da-hs-base",
    ],
)

package_app(
    name = "daml-helper-dist",
    binary = ":daml-helper",
    visibility = ["//visibility:public"],
)

genrule(
    name = "test-certificates",
    srcs = [":openssl-extensions.cnf"],
    outs = [
        "ca.key",
        "ca.crt",
        "client.csr",
        "client.crt",
        "client.key",
        "client.pem",
        "server.csr",
        "server.crt",
        "server.key",
        "server.pem",
    ],
    cmd = """
set -eou pipefail
{openssl_conf}
# Generate CA key and crt
$(location @openssl_dev_env//:openssl) genrsa -out $(location ca.key) 4096
$(location @openssl_dev_env//:openssl) req -new -x509 -key $(location ca.key) -out $(location ca.crt) -subj '{cn}=0.0.0.0.ca' -days 3650

# Generate server key, csr and crt
$(location @openssl_dev_env//:openssl) genrsa -out $(location server.key) 4096
$(location @openssl_dev_env//:openssl) pkey -in $(location server.key) -out $(location server.pem)
$(location @openssl_dev_env//:openssl) req -new -key $(location server.key) -out $(location server.csr) -subj '{cn}=0.0.0.0.server'
$(location @openssl_dev_env//:openssl) x509 -req -in $(location server.csr) -CA $(location ca.crt) -CAkey $(location ca.key) -CAcreateserial -out $(location server.crt) -extfile $(location openssl-extensions.cnf) -extensions req_ext -days 3650

# Generate client key, csr and crt
$(location @openssl_dev_env//:openssl) genrsa -out $(location client.key) 4096
$(location @openssl_dev_env//:openssl) pkey -in $(location client.key) -out $(location client.pem)
$(location @openssl_dev_env//:openssl) req -new -key $(location client.key) -out $(location client.csr) -subj '{cn}=0.0.0.0.client'
$(location @openssl_dev_env//:openssl) x509 -req -in $(location client.csr) -CA $(location ca.crt) -CAkey $(location ca.key) -CAcreateserial -out $(location client.crt) -extfile $(location openssl-extensions.cnf) -extensions req_ext -days 3650

    """.format(
        openssl_conf =
            "export OPENSSL_CONF=$$(dirname $(location @openssl_dev_env//:openssl))/cnf/openssl.cnf" if is_windows else "",
        cn = "//CN" if is_windows else "/CN",
    ),
    tools = [
        "@openssl_dev_env//:openssl",
    ],
)

da_haskell_test(
    name = "ledger-tls",
    srcs = glob(["test/**/*.hs"]),
    data = [
        "daml-helper",
        ":ca.crt",
        ":client.crt",
        ":client.pem",
        ":server.crt",
        ":server.pem",
        "//ledger/sandbox:sandbox-binary",
    ],
    hackage_deps = [
        "base",
        "extra",
        "filepath",
        "process",
        "tasty",
        "tasty-hunit",
    ],
    main_function = "DA.Daml.Helper.Test.Tls.main",
    visibility = ["//visibility:public"],
    deps = [
        "//libs-haskell/bazel-runfiles",
        "//libs-haskell/da-hs-base",
    ],
)
