-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE CPP #-}

module Daml.Trigger
 ( query
 , queryFilter
 , queryContractId
 , queryContractKey
 , ActionTriggerAny
 , getCommandsInFlight
 , ActionTriggerUpdate
 , Trigger(..)
 , TriggerA
 , TriggerUpdateA
 , TriggerInitializeA
 , get
 , put
 , modify
 , emitCommands
 , runTrigger
 , CommandId
 , Command(..)
 , AnyContractId
 , toAnyContractId
 , fromAnyContractId
 , exerciseCmd
 , createCmd
 , exerciseByKeyCmd
 , createAndExerciseCmd
 , dedupExercise
 , dedupCreate
 , dedupExerciseByKey
 , dedupCreateAndExercise
 , Message(..)
 , Completion(..)
 , Transaction(..)
 , Event(..)
 , Created
 , Archived
 , fromCreated
 , fromArchived
 , CompletionStatus(..)
 , RegisteredTemplates(..)
 , registeredTemplate
 , RelTime(..)
 , getReadAs
 , getActAs
 ) where

import Prelude hiding (any)
import DA.Action
import DA.Action.State (execState)
import DA.Foldable (any)
import DA.Functor ((<&>))
import DA.Map (Map)
import qualified DA.Map as Map
import DA.Optional

import Daml.Trigger.Internal
import Daml.Trigger.LowLevel hiding (Trigger)
import qualified Daml.Trigger.LowLevel as LowLevel

-- public API

-- | Extract the contracts of a given template from the ACS.
getContracts : forall a. Template a => ACS -> [(ContractId a, a)]
getContracts acs@(ACS tpls _) = mapOptional fromAny
                                $ filter (\(cid, _) -> not $ cid `elem` allPending)
                                $ optional [] Map.toList
                                $ Map.lookup (templateTypeRep @a) tpls
  where
    fromAny (cid, tpl) = (,) <$> fromAnyContractId cid <*> fromAnyTemplate tpl
    allPending = getPendingContracts acs

getPendingContracts : ACS -> [AnyContractId]
getPendingContracts (ACS _ pending) = concatMap snd $ Map.toList pending

getContractById : forall a. Template a => ContractId a -> ACS -> Optional a
getContractById id (ACS tpls pending) = do
  let aid = toAnyContractId id
      implSpecific = Map.lookup aid <=< Map.lookup (templateTypeRep @a)
  aa <- implSpecific tpls
  a <- fromAnyTemplate aa
  if any (elem aid) pending then None else Some a

-- | Extract the contracts of a given template from the ACS.
query : forall a m. (Template a, ActionTriggerAny m) => m [(ContractId a, a)]
query = implQuery

-- | Extract the contracts of a given template from the ACS and filter
-- to those that match the predicate.
queryFilter : forall a m. (Functor m, Template a, ActionTriggerAny m) => (a -> Bool) -> m [(ContractId a, a)]
queryFilter pred = filter (\(_, c) -> pred c) <$> implQuery

-- | Find the contract with the given `key` in the ACS, if present.
queryContractKey : forall a k m. (Template a, HasKey a k, Eq k, ActionTriggerAny m, Functor m)
    => k -> m (Optional (ContractId a, a))
queryContractKey k = find (\(_, a) -> k == key a) <$> query

-- | Features possible in `initialize`, `updateState`, and `rule`.
class ActionTriggerAny m where
  -- | Extract the contracts of a given template from the ACS.  (However, the
  -- type parameters are in the 'm a' order, so it is not exported.)
  implQuery : forall a. Template a => m [(ContractId a, a)]

  -- | Find the contract with the given `id` in the ACS, if present.
  queryContractId : Template a => ContractId a -> m (Optional a)

  -- | Query the list of currently pending contracts as set by
  -- `emitCommands`.
  queryPendingContracts : m [AnyContractId]

  getReadAs : m [Party]

  getActAs : m Party

instance ActionTriggerAny (TriggerA s) where
  implQuery = TriggerA $ pure . getContracts
  queryContractId id = TriggerA $ pure . getContractById id
  queryPendingContracts = TriggerA $ \acs -> pure (getPendingContracts acs)
  getReadAs = TriggerA $ \_ -> do
    s <- get
    pure s.readAs

  getActAs = TriggerA $ \_ -> do
    s <- get
    pure s.actAs

instance ActionTriggerAny (TriggerUpdateA s) where
  implQuery = TriggerUpdateA $ \s -> pure (getContracts s.acs)
  queryContractId id = TriggerUpdateA $ \s -> pure (getContractById id s.acs)
  queryPendingContracts = TriggerUpdateA $ \s -> pure (getPendingContracts s.acs)
  getReadAs = TriggerUpdateA $ \s -> pure s.readAs
  getActAs = TriggerUpdateA $ \s -> pure s.actAs

instance ActionTriggerAny TriggerInitializeA where
  implQuery = TriggerInitializeA (\s -> getContracts s.acs)
  queryContractId id = TriggerInitializeA (\s -> getContractById id s.acs)
  queryPendingContracts = TriggerInitializeA (\s -> getPendingContracts s.acs)
  getReadAs = TriggerInitializeA (\s -> s.readAs)
  getActAs = TriggerInitializeA (\s -> s.actAs)

-- | Features possible in `updateState` and `rule`.
class ActionTriggerAny m => ActionTriggerUpdate m where
  -- | Retrieve command submissions made by this trigger that have not yet
  -- completed.  If the trigger has restarted, it will not contain commands from
  -- before the restart; therefore, this should be treated as an optimization
  -- rather than an absolute authority on ledger state.
  getCommandsInFlight : m (Map CommandId [Command])

instance ActionTriggerUpdate (TriggerUpdateA s) where
  getCommandsInFlight = TriggerUpdateA $ \s -> pure s.commandsInFlight

instance ActionTriggerUpdate (TriggerA s) where
  getCommandsInFlight = liftTriggerRule $ get <&> \s -> s.commandsInFlight

-- | This is the type of your trigger. `s` is the user-defined state type which
-- you can often leave at `()`.
data Trigger s = Trigger
  { initialize : TriggerInitializeA s
  -- ^ Initialize the user-defined state based on the ACS.
  , updateState : Message -> TriggerUpdateA s ()
  -- ^ Update the user-defined state based on a transaction or
  -- completion message.  It can manipulate the state with `get`, `put`,
  -- and `modify`, or query the ACS with `query`.
  , rule : Party -> TriggerA s ()
  -- ^ The rule defines the main logic of your trigger. It can send commands
  -- to the ledger using `emitCommands` to change the ACS.
  -- The rule depends on the following arguments:
  --
  --   * The party your trigger is running as.
  --   * The user-defined state.
  --
  -- and can retrieve other data with functions in `TriggerA`:
  --
  --   * The current state of the ACS.
  --   * The current time (UTC in wallclock mode, Unix epoch in static mode)
  --   * The commands in flight.
  , registeredTemplates : RegisteredTemplates
  -- ^ The templates the trigger will receive events for.
  , heartbeat : Optional RelTime
  -- ^ Send a heartbeat message at the given interval.
  }

-- | Send a transaction consisting of the given commands to the ledger.
-- The second argument can be used to mark a list of contract ids as pending.
-- These contracts will automatically be filtered from getContracts until we
-- either get the corresponding transaction event for this command or
-- a failing completion.
emitCommands : [Command] -> [AnyContractId] -> TriggerA s CommandId
emitCommands cmds pending = do
  id <- liftTriggerRule $ submitCommands cmds
  let commands = Commands id cmds
  liftTriggerRule $ modify $ \s -> s
    { commandsInFlight = addCommands s.commandsInFlight commands
    , pendingContracts = Map.insert id pending s.pendingContracts
    }
  pure id

-- | Create the template if it’s not already in the list of commands
-- in flight (it will still be created if it is in the ACS).
--
-- Note that this will send the create as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `createCmd` and handle filtering yourself.
dedupCreate : (Eq t, Template t) => t -> TriggerA s ()
dedupCreate t = do
  aState <- liftTriggerRule get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight)
  unless (any ((Some t ==) . fromCreate) cmds) $
    void $ emitCommands [createCmd t] []

-- | Create the template and exercise a choice on it if it’s not already in the list of commands
-- in flight (it will still be created if it is in the ACS).
--
-- Note that this will send the create and exercise as a
-- single-command transaction.  If you need to send multiple commands
-- in one transaction, use `emitCommands` with `createAndExerciseCmd`
-- and handle filtering yourself.
dedupCreateAndExercise : (Eq t, Eq c, Template t, Choice t c r) => t -> c -> TriggerA s ()
dedupCreateAndExercise t c = do
  aState <- liftTriggerRule get
  -- This is a very naive approach that is linear in the number of
  -- commands in flight.  We probably want to change this to express
  -- the commands in flight as some kind of map to make these lookups
  -- cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight)
  unless (any ((Some (t, c) ==) . fromCreateAndExercise) cmds) $
    void $ emitCommands [createAndExerciseCmd t c] []

-- | Exercise the choice on the given contract if it is not already
-- in flight.
--
-- Note that this will send the exercise as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `exerciseCmd` and handle filtering yourself.
--
-- If you are calling a consuming choice, you might be better off by using
-- `emitCommands` and adding the contract id to the pending set.
dedupExercise : (Eq c, Choice t c r) => ContractId t -> c -> TriggerA s ()
dedupExercise cid c = do
  aState <- liftTriggerRule get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight)
  unless (any ((Some (cid, c) ==) . fromExercise) cmds) $
    void $ emitCommands [exerciseCmd cid c] []

-- | Exercise the choice on the given contract if it is not already
-- in flight.
--
-- Note that this will send the exercise as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `exerciseCmd` and handle filtering yourself.
dedupExerciseByKey : forall t c r k s. (Eq c, Eq k, Choice t c r, TemplateKey t k) => k -> c -> TriggerA s ()
dedupExerciseByKey k c = do
  aState <- liftTriggerRule get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight)
  unless (any ((Some (k, c) ==) . fromExerciseByKey @t) cmds) $
    void $ emitCommands [exerciseByKeyCmd @t k c] []

-- | Transform the high-level trigger type into the one from `Daml.Trigger.LowLevel`.
runTrigger : Trigger s -> LowLevel.Trigger (TriggerState s)
runTrigger userTrigger = LowLevel.Trigger
  { initialState = initialState
  , update = update
  , registeredTemplates = userTrigger.registeredTemplates
  , heartbeat = userTrigger.heartbeat
  }
  where
    initialState party readAs (ActiveContracts createdEvents) =
      let acs = foldl (\acs created -> applyEvent (CreatedEvent created) acs) (ACS mempty Map.empty) createdEvents
          userState = runTriggerInitializeA userTrigger.initialize (TriggerInitState acs party readAs)
          state = TriggerState acs party readAs userState Map.empty
      in TriggerSetup $ execStateT (runTriggerRule $ runRule userTrigger.rule) state
    utUpdateState commandsInFlight acs actAs readAs msg =
      let state = TriggerUpdateState commandsInFlight acs actAs readAs
      in execState $ flip runTriggerUpdateA state $ userTrigger.updateState msg
    update msg = do
      time <- getTime
      state <- get
      case msg of
        MCompletion completion ->
          -- NB: the commands-in-flight and ACS updateState sees are those
          -- prior to updates incurred by the msg
          let userState = utUpdateState state.commandsInFlight state.acs state.actAs state.readAs (MCompletion completion) state.userState
          in case completion.status of
            Succeeded {} ->
              -- We delete successful completions when we receive the corresponding transaction
              -- to avoid removing a command from commandsInFlight before we have modified the ACS.
              put $ state { userState }
            Failed {} -> do
                let commandsInFlight = Map.delete completion.commandId state.commandsInFlight
                    acs = state.acs { pendingContracts = Map.delete completion.commandId state.acs.pendingContracts }
                put $ state { commandsInFlight, userState, acs }
                runRule userTrigger.rule
        MTransaction transaction -> do
          let acs = applyTransaction transaction state.acs
              -- again, we use the commands-in-flight and ACS before the update below
              userState = utUpdateState state.commandsInFlight acs state.actAs state.readAs (MTransaction transaction) state.userState
              -- See the comment above for why we delete this here instead of when we receive the completion.
              (acs', commandsInFlight) = case transaction.commandId of
                None -> (acs, state.commandsInFlight)
                Some commandId -> (acs { pendingContracts = Map.delete commandId acs.pendingContracts }, Map.delete commandId state.commandsInFlight)
          put $ state { acs = acs', userState, commandsInFlight }
          runRule userTrigger.rule
        MHeartbeat -> do
          let userState = utUpdateState state.commandsInFlight state.acs state.actAs state.readAs MHeartbeat state.userState
          put $ state { userState }
          runRule userTrigger.rule
