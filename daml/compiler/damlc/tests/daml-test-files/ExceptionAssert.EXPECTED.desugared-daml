module ExceptionAssert where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Assert
testAssert
  = scenario
      do p <- getParty "Alice"
         submit
           p
           do DA.Internal.Desugar._tryCatch
                \ _ -> do assert False
                \case
                  (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (AssertionFailed m))
                    -> DA.Internal.Desugar.Some m === "Assertion failed"
                  _ -> DA.Internal.Desugar.None
testAssertMsg
  = scenario
      do p <- getParty "Alice"
         submit
           p
           do DA.Internal.Desugar._tryCatch
                \ _ -> do assertMsg "My message" False
                \case
                  (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (AssertionFailed m))
                    -> DA.Internal.Desugar.Some m === "My message"
                  _ -> DA.Internal.Desugar.None
testAssertEq
  = scenario
      do p <- getParty "Alice"
         submit
           p
           do DA.Internal.Desugar._tryCatch
                \ _ -> do 10 === 20
                \case
                  (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (AssertionFailed m))
                    -> DA.Internal.Desugar.Some m === "Failure, expected 10 == 20"
                  _ -> DA.Internal.Desugar.None
