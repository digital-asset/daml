module InterfaceNoExerciseRequiring where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token Token where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token Token where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token "getOwner" (Party)
getOwner : Token -> Party
getOwner = GHC.Types.primitiveInterface @"getOwner"
instance DA.Internal.Desugar.HasMethod Token "getAmount" (Int)
getAmount : Token -> Int
getAmount = GHC.Types.primitiveInterface @"getAmount"
instance DA.Internal.Desugar.HasMethod Token "setAmount" (Int
                                                          -> Token)
setAmount : Token -> Int -> Token
setAmount = GHC.Types.primitiveInterface @"setAmount"
instance DA.Internal.Desugar.HasToAnyTemplate Token where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType Token where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasToAnyChoice Token GetRich (ContractId Token) where
  _toAnyChoice _
    = GHC.Types.primitive @"EToAnyInterfaceChoice" ([] : [Token])
instance DA.Internal.Desugar.HasFromAnyChoice Token GetRich (ContractId Token) where
  _fromAnyChoice _
    = GHC.Types.primitive @"EFromAnyInterfaceChoice" ([] : [Token])
instance DA.Internal.Desugar.HasExerciseGuarded Token GetRich (ContractId Token) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token cid pred)
instance DA.Internal.Desugar.HasExercise Token GetRich (ContractId Token) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
data GetRich
  = GetRich {byHowMuch : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "byHowMuch" GetRich Int where
  getField
    = DA.Internal.Record.getFieldPrim @"byHowMuch" @GetRich @Int
  setField
    = DA.Internal.Record.setFieldPrim @"byHowMuch" @GetRich @Int
_choice_TokenGetRich :
  (Token -> GetRich -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token
   -> Token
      -> GetRich -> DA.Internal.Desugar.Update (ContractId Token),
   DA.Internal.Desugar.Consuming Token,
   DA.Internal.Desugar.Optional (Token
                                 -> GetRich -> [DA.Internal.Desugar.Party]))
_choice_TokenGetRich
  = (\ this arg@GetRich {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@GetRich {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do assert (byHowMuch > 0)
               create $ setAmount this (getAmount this + byHowMuch), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
instance DA.Internal.Desugar.HasInterfaceView Token EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
data GHC.Types.DamlInterface => SubToken
  = SubToken GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep SubToken where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch SubToken where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface SubToken SubToken where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface SubToken SubToken where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_SubToken_Token :
  DA.Internal.Desugar.RequiresT SubToken Token
_requires_SubToken_Token = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface SubToken Token where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface SubToken Token where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToAnyTemplate SubToken where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate SubToken where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep SubToken where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory SubToken where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver SubToken where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate SubToken where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType SubToken where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq SubToken where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasInterfaceView SubToken EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
cannotExercise : ContractId SubToken -> Update (ContractId Token)
cannotExercise sub
  = do exercise sub GetRich {byHowMuch = 1_000_000}
