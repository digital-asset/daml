-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE
-- @ENABLE-SCENARIOS

module QualifiedRetroactiveInterfaceInstance where

import qualified Asset

import DA.Assert ((===))

data TokenView = TokenView with
  owner : Party
  amount : Int

interface Token where
  viewtype TokenView

  setAmount : Int -> Token
  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token) -- ^ An interface choice comment.
    with
      splitAmount : Int -- ^ A choice field comment.
    controller (view this).owner
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller (view this).owner, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller (view this).owner
    do
      noopImpl this nothing

  choice GetRich : ContractId Token
    with
      byHowMuch : Int
    controller (view this).owner
    do
        assert (byHowMuch > 0)
        create $ setAmount this ((view this).amount + byHowMuch)

  interface instance Token for Asset.Asset where
    view = TokenView with owner, amount

    setAmount x = toInterface @Token (this with amount = x)

    splitImpl splitAmount = do
      assert (splitAmount < amount)
      cid1 <- create this with amount = splitAmount
      cid2 <- create this with amount = amount - splitAmount
      pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

    transferImpl newOwner = do
      cid <- create this with owner = newOwner
      pure (toInterfaceContractId @Token cid)

    noopImpl nothing = do
      [1] === [1] -- make sure `mkMethod` calls are properly erased in the presence of polymorphism.
      pure ()

main = scenario do
  p <- getParty "Alice"
  p `submit` do
    cidAsset1 <- create Asset.Asset with
      issuer = p
      owner = p
      amount = 15
    let cidToken1 = toInterfaceContractId @Token cidAsset1
    _ <- exercise cidToken1 (Noop ())
    (cidToken2, cidToken3) <- exercise cidToken1 (Split 10)
    token2 <- fetch cidToken2
    -- Party is duplicated because p is both observer & issuer
    signatory token2 === [p, p]
    (view token2).amount === 10
    case fromInterface token2 of
      None -> abort "expected Asset"
      Some Asset.Asset {amount} ->
        amount === 10
    token3 <- fetch cidToken3
    (view token3).amount === 5
    case fromInterface token3 of
      None -> abort "expected Asset"
      Some Asset.Asset {amount} ->
        amount === 5

    cidToken4 <- exercise cidToken3 (GetRich 20)
    token4 <- fetch cidToken4
    (view token4).amount === 25
    case fromInterface token4 of
      None -> abort "expected Asset"
      Some Asset.Asset {amount} ->
        amount === 25

    pure ()
