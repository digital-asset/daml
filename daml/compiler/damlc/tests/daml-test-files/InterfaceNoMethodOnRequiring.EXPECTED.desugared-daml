module InterfaceNoMethodOnRequiring where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token Token where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token Token where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token "getOwner" (Party)
getOwner : Token -> Party
getOwner = GHC.Types.primitiveInterface @"getOwner"
instance DA.Internal.Desugar.HasMethod Token "getAmount" (Int)
getAmount : Token -> Int
getAmount = GHC.Types.primitiveInterface @"getAmount"
instance DA.Internal.Desugar.HasMethod Token "setAmount" (Int
                                                          -> Token)
setAmount : Token -> Int -> Token
setAmount = GHC.Types.primitiveInterface @"setAmount"
instance DA.Internal.Desugar.HasToAnyTemplate Token where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType Token where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasInterfaceView Token EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
data GHC.Types.DamlInterface => SubToken
  = SubToken GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep SubToken where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch SubToken where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface SubToken SubToken where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface SubToken SubToken where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_SubToken_Token :
  DA.Internal.Desugar.RequiresT SubToken Token
_requires_SubToken_Token = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface SubToken Token where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface SubToken Token where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToAnyTemplate SubToken where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate SubToken where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep SubToken where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory SubToken where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver SubToken where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate SubToken where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType SubToken where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq SubToken where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasInterfaceView SubToken EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
cannotCall : SubToken -> Token
cannotCall sub = setAmount sub 1_000_000
