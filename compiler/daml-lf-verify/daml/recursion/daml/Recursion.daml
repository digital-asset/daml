-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Recursion where

type IouCid = ContractId Iou

template Iou
  with
    issuer : Party
    owner : Party
    currency : Text
    amount : Decimal
    observers : [Party]
  where

    signatory issuer, owner

    observer observers

    -- Test recursion A

    nonconsuming choice TestRecA : IouCid
      controller owner
      do
        archive self
        _ <- create this with amount = amount
        exercise self TestRecA

    -- Test recursion B

    nonconsuming choice TestRecB : IouCid
      with
        var: Int
      controller owner
      do
        if var > 0
        then do
          exercise self TestRecB with var = (var - 1)
        else do
          archive self
          create this with amount = amount

    -- Test recursion C

    nonconsuming choice Iou_Divide : (IouCid, IouCid)
      with
        receiverCid: IouCid
      controller owner
      do
        receiverIou <- fetch receiverCid
        if amount <= receiverIou.amount
        then return (self, receiverCid)
        else do
          newSelf <- create this with amount = amount - 1.0
          newReceiver <- create receiverIou with amount = receiverIou.amount + 1.0
          archive self
          archive receiverCid
          exercise newSelf Iou_Divide with receiverCid = newReceiver

    -- Test mutual recursion A

    nonconsuming choice TestMutA1 : IouCid
      controller owner
      do
        _ <- create this with amount = 1.0
        exercise self TestMutA2

    nonconsuming choice TestMutA2 : IouCid
      controller owner
      do
        _ <- create this with amount = -1.0
        res <- exercise self TestMutA1
        _ <- create this with amount = 1.0
        return res
          
    -- Test mutual recursion B

    nonconsuming choice TestMutB1 : IouCid
      controller owner
      do
        _ <- create this with amount = 1.0
        exercise self TestMutB2
        create this with amount = 5.0

    nonconsuming choice TestMutB2 : IouCid
      controller owner
      do
        _ <- create this with amount = 2.0
        exercise self TestMutB3

    nonconsuming choice TestMutB3 : IouCid
      controller owner
      do
        _ <- create this with amount = 3.0
        exercise self TestMutB4

    nonconsuming choice TestMutB4 : IouCid
      controller owner
      do
        _ <- create this with amount = 4.0
        exercise self TestMutB1

    -- Test mutual recursion C

    nonconsuming choice Iou_Divide_Mut : (IouCid, IouCid)
      with
        receiverCid: IouCid
      controller owner
      do
        receiverIou <- fetch receiverCid
        if amount <= receiverIou.amount
        then return (self, receiverCid)
        else do
          exercise self Iou_Divide_Sub with receiverCid = receiverCid

    choice Iou_AddOne : IouCid
      controller owner
      do
        create this with amount = amount + 1.0

    choice Iou_SubOne : IouCid
      controller owner
      do
        create this with amount = amount - 1.0

    nonconsuming choice Iou_Divide_Sub : (IouCid, IouCid)
      with
        receiverCid: IouCid
      controller owner
      do
        newSelf <- exercise self Iou_SubOne
        exercise newSelf Iou_Divide_Add with receiverCid = receiverCid

    nonconsuming choice Iou_Divide_Add : (IouCid, IouCid)
      with
        receiverCid: IouCid
      controller owner
      do
        receiverIou <- fetch receiverCid
        newReceiver <- exercise receiverCid Iou_AddOne
        exercise self Iou_Divide_Mut with receiverCid = newReceiver
