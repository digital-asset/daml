# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_library", "da_haskell_test")
load("//bazel_tools:proto.bzl", "proto_gen")

proto_library(
    name = "scenario_service_proto",
    srcs = ["scenario_service.proto"],
    visibility = ["//visibility:public"],
    deps = [],
)

proto_gen(
    name = "scenario_service_java_proto_src",
    srcs = [":scenario_service_proto"],
    plugin_name = "java",
    visibility = ["//visibility:public"],
)

proto_gen(
    name = "scenario_service_java_proto_grpc_src",
    srcs = [":scenario_service_proto"],
    plugin_exec = "@io_grpc_grpc_java//compiler:grpc_java_plugin",
    plugin_name = "java-grpc",
    visibility = ["//visibility:public"],
)

# FIXME(JM): java_grpc_library should do this for us,
# but cannot quite make it work. Also not sure if it
# makes sense to mix the //3rdparty dependencies with
# the stuff it pulls in...
java_library(
    name = "scenario_service_java_proto",
    srcs = [
        ":scenario_service_java_proto_grpc_src",
        ":scenario_service_java_proto_src",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@maven//:com_google_guava_guava",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:io_grpc_grpc_api",
        "@maven//:io_grpc_grpc_core",
        "@maven//:io_grpc_grpc_protobuf",
        "@maven//:io_grpc_grpc_stub",
        "@maven//:javax_annotation_javax_annotation_api",
    ],
)

# FIXME(JM): Modify compile-proto-file to allow specifying
# the output file and module name rather than directory.
genrule(
    name = "scenario_service_haskell_proto_src",
    srcs = ["scenario_service.proto"],
    outs = ["ScenarioService.hs"],
    cmd = """
    ORIGPWD=$$PWD
    cd compiler/scenario-service/protos
    $$ORIGPWD/$(location @proto3-suite//:compile-proto-file) \
      --proto scenario_service.proto --out "$$ORIGPWD/$(@D)"
  """,
    tools = [
        "@proto3-suite//:compile-proto-file",
    ],
)

da_haskell_library(
    name = "scenario_service_haskell_proto",
    srcs = [":scenario_service_haskell_proto_src"],
    compiler_flags = ["-Wno-deriving-defaults"],
    hackage_deps = [
        "base",
        "bytestring",
        "containers",
        "deepseq",
        "grpc-haskell",
        "grpc-haskell-core",
        "proto3-suite",
        "proto3-wire",
        "text",
        "vector",
    ],
    visibility = ["//visibility:public"],
)

# FIXME(JM): Modify compile-proto-file to allow specifying
# the output file and module name rather than directory.
genrule(
    name = "test_results_haskell_proto_src",
    srcs = [
        "test_results.proto",
        "scenario_service.proto",
        "//daml-lf/archive:daml_lf_dev_archive_proto_srcs",
    ],
    outs = ["TestResults.hs"],
    cmd = """
    ORIGPWD=$$PWD
    cd compiler/scenario-service/protos
    $$ORIGPWD/$(location @proto3-suite//:compile-proto-file) \
      --includeDir ./                                        \
      --includeDir $$ORIGPWD/daml-lf/archive/src/main/protobuf/        \
      --proto test_results.proto --out "$$ORIGPWD/$(@D)"
  """,
    tools = [
        "@proto3-suite//:compile-proto-file",
    ],
)

da_haskell_library(
    name = "test_results_haskell_proto",
    srcs = [":test_results_haskell_proto_src"],
    compiler_flags = ["-Wno-deriving-defaults"],
    hackage_deps = [
        "base",
        "bytestring",
        "containers",
        "deepseq",
        "grpc-haskell",
        "grpc-haskell-core",
        "proto3-suite",
        "proto3-wire",
        "text",
        "vector",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":scenario_service_haskell_proto",
        "//daml-lf/archive:daml_lf_dev_archive_haskell_proto",
    ],
)
