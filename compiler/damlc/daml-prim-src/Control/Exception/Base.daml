-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}

-- | HIDE
module Control.Exception.Base
  ( recSelError
  , recConError
  , runtimeError
  , nonExhaustiveGuardsError
  , patError
  , noMethodBindingError
  , absentError
  , typeError
  , absentSumFieldError
  ) where

import GHC.Base
import GHC.CString (fromString)
import GHC.Err
import GHC.Tuple()
import GHC.Types

-- List of errors inserted by GHC, copied from
-- https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Exception-Base.html#g:13
-- All of them take UTF8-encoded C strings of type 'Addr#' in ghc's Haskell
-- base library. Here, we must pass them 'Text' though to be able to call
-- 'error'. The conversion to DAML-LF basically pretends that 'Addr#' and
-- 'Text' are the same type by lifting the C strings into 'Text'.
recSelError, recConError, runtimeError, nonExhaustiveGuardsError, patError, noMethodBindingError, absentError, typeError : forall liftedRep r . Text -> r
recSelError s = error (append "No match in record selector " s)
recConError s = error (untangle s "Missing field in record construction")
runtimeError = error
nonExhaustiveGuardsError s = error (untangle s "Non-exhaustive guards in")
patError s = error (untangle s "Non-exhaustive patterns in")
noMethodBindingError s = error (untangle s "No instance nor default method for class operation")
absentError s = error (append "Oops!  Entered absent arg " s)
typeError = error

absentSumFieldError : a
absentSumFieldError = absentError " in unboxed sum."

{-
This function is copied from the same place as the functions above.
It's also modified to work with DAMLs Text type.

(untangle coded message) expects "coded" to be of the form
        "location|details"
It prints
        location message details
-}
untangle : Text -> Text -> Text
untangle coded message =  implode [implode location, ": ", message, implode details, "\n"]
  where
    implode : [Text] -> Text = primitive @"BEImplodeText"
    explode : Text -> [Text] = primitive @"BEExplodeText"
    (==) : Text -> Text -> Bool = primitive @"BEEqual"

    coded_str = explode coded

    (location, details)
      = case (break is_bar coded_str) of { (loc, rest) ->
        case rest of
          ("|"::det) -> (loc, " " :: det)
          _         -> (loc, [])
        }
    is_bar c = c == "|"

append : Text -> Text -> Text
append = primitive @"BEAppendText"

break : (a -> Bool) -> [a] -> ([a], [a])
break p = \case
  [] -> ([], [])
  x::xs
    | p x -> ([], x::xs)
    | otherwise -> let (ys, zs) = break p xs in (x::ys, zs)
