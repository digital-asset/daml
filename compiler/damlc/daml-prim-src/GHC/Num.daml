-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
daml 1.2

-- | MOVE Prelude
--
-- Has to live here so GHC can find it for deriving instances.
module GHC.Num
  ( Additive (..)
  , Multiplicative (..)
  , Divisible (..)
  , Fractional (..)
  , Signed (..)
  , Number (..)
  , (%)
  ) where

import GHC.Base
import GHC.Classes
import GHC.CString()
import GHC.Err()
import GHC.Integer.Type
import GHC.Real
import GHC.Types

default ()              -- Double isn't available yet,
                        -- and we shouldn't be using defaults anyway

infixl 6 -
infixl 6 +
infixl 7 *
infixr 8 ^
infixl 7 /
infixl 7 %

-- | Use the `Additive` class for types that can be added.
-- Instances have to respect the following laws:
--
-- * `(+)` must be associative, ie: `(x + y) + z` = `x + (y + z)`
-- * `(+)` must be commutative, ie: `x + y` = `y + x`
-- * `x + aunit` = `x`
-- * `negate` gives the additive inverse, ie: `x + negate x` = `aunit`
--
class Additive a  where
    -- | Add the two arguments together.
    (+)                 : a -> a -> a
    -- | The additive identity for the type. For example, for numbers, this is 0.
    aunit                : a

    -- | Subtract the second argument from the first argument, ie. `x - y` = `x + negate y`
    (-)                 : a -> a -> a
    x - y               = x + negate y

    -- | Negate the argument: `x + negate x` = `aunit`
    negate              : a -> a
    negate x            = aunit - x

-- | Use the `Multiplicative` class for types that can be multiplied.
-- Instances have to respect the following laws:
--
-- * `(*)` is associative, ie:`(x * y) * z` = `x * (y * z)`
-- * `(*)` is commutative, ie: `x * y` = `y * x`
-- * `x * munit` = `x`
--
class Multiplicative a where
    -- | Multipy the arguments together
    (*) : a -> a -> a
    -- | The multiplicative identity for the type. For example, for numbers, this is 1.
    munit : a
    -- | `x ^ n` raises `x` to the power of `n`.
    (^): a -> Int -> a

-- | `Number` is a class for numerical types.
-- As well as the rules for `Additive` and `Multiplicative`, instances
-- also have to respect the following law:
--
-- * `(*)` is distributive with respect to `(+)`. That is:
--     `a * (b + c)` = `(a * b) + (a * c)` and `(b + c) * a` = `(b * a) + (c * a)`
class (Additive a, Multiplicative a) => Number a where
  -- no methods

-- | The `Signed` is for the sign of a number.
class Signed a where
    -- | Sign of a number.
    -- For real numbers, the 'signum' is either `-1` (negative), `0` (zero)
    -- or `1` (positive).
    signum : a -> a

    -- | The absolute value: that is, the value without the sign.
    abs : a -> a

instance Additive Int where
    (+) = primitive @"BEAddInt64"
    (-) = primitive @"BESubInt64"
    negate x = 0 - x
    aunit = 0

instance Multiplicative Int where
    (*) = primitive @"BEMulInt64"
    munit = 1
    (^) = primitive @"BEExpInt64"

instance Number Int where
    -- no methods

instance Signed Int where
    signum x = if x == 0 then 0 else if x <= 0 then (-1) else 1
    abs x = if x <= 0 then negate x else x

instance Additive Decimal where
    (+) = primitive @"BEAddDecimal"
    (-) = primitive @"BESubDecimal"
    negate x = 0.0 - x
    aunit = 0.0

instance Multiplicative Decimal where
    (*) = primitive @"BEMulDecimal"
    munit = 1.0
    x ^ n
        | n == 0 = 1.0
        | n == 2 = x * x
        | n < 0 = 1.0 / x ^ (negate n)
        | n % 2 == 0 = (x ^ (n / 2)) ^ 2
        | otherwise = x * x ^ (n - 1)

instance Number Decimal where
    -- no methods

instance Signed Decimal where
    signum x = if x == 0.0 then 0.0 else if x <= 0.0 then (-1.0) else 1.0
    abs x = if x <= 0.0 then negate x else x

-- | Use the `Divisible` class for types that can be divided.
-- Instances should respect that division is the inverse of
-- multiplication, i.e. `x * y / y` is equal to `x` whenever
-- it is defined.
class (Multiplicative a) => Divisible a where
    -- | `x / y` divides `x` by `y`
    (/) : a -> a -> a

instance Divisible Int where
    (/) = primitive @"BEDivInt64"

instance Divisible Decimal where
    (/) = primitive @"BEDivDecimal"

-- | Use the `Fractional` class for types that can be divided
-- and where the reciprocal is well defined. Instances
-- have to respect the following laws:
--
-- * When `recip x` is defined, it must be the inverse of
-- `x` with respect to multiplication: `x * recip x = munit`
--
-- * When `recip y` is defined, then `x / y = x * recip y`
class (Divisible a) => Fractional a where
    -- | Calculates the reciprocal: `recip x` is `1/x`.
    recip : a -> a
    recip x = munit / x

instance Fractional Decimal

-- | `x % y` calculates the remainder of `x` by `y`
(%) : Int -> Int -> Int
(%) = primitive @"BEModInt64"
