-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Class of data structures that can be traversed from left to right, performing an action on each element.
-- You typically would want to import this module qualified to avoid clashes with
-- functions defined in `Prelude`. Ie.:
-- ```
-- import DA.Traversable   qualified as F
-- ```
module DA.Traversable where

import Prelude hiding (mapA, sequence)

import DA.Foldable
import DA.List as L

-- | Functors representing data structures that can be traversed from left to right.
class (Functor t, Foldable t) => Traversable t where
    {-# MINIMAL mapA | sequence #-}

    -- | Map each element of a structure to an action, evaluate these actions
    -- from left to right, and collect the results.
    mapA : Applicative f => (a -> f b) -> t a -> f (t b)
    mapA f = sequence . fmap f

    -- | Evaluate each action in the structure from left to right, and
    -- collect the results.
    sequence : Applicative f => t (f a) -> f (t a)
    sequence = mapA identity

-- | `forA` is `mapA` with its arguments flipped.
forA : (Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)
forA = flip mapA

instance Traversable Optional where
  mapA _ None = pure None
  mapA f (Some x) = Some <$> f x

instance Traversable [] where
  mapA f = L.foldr cons_f (pure [])
    where cons_f x ys = liftA2 (::) (f x) ys

instance Traversable (Either a) where
  mapA _ (Left x) = pure (Left x)
  mapA f (Right y) = Right <$> f y

instance Traversable ((,) a) where
  mapA f (x, y) = (,) x <$> f y
