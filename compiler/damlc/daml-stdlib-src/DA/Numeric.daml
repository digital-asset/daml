-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

module DA.Numeric where

#ifdef DAML_NUMERIC
import GHC.Types (primitive)

-- | Multiply two numerics. Both inputs and the output may have
-- different scales, unlike `(*)` which forces all numeric scales
-- to be the same. Raises an error on overflow, rounds to chosen
-- scale otherwise.
mul : NumericScale n3 => Numeric n1 -> Numeric n2 -> Numeric n3
mul = primitive @"BEMulNumeric"

-- | Divide two numerics. Both inputs and the output may have
-- different scales, unlike `(/)` which forces all numeric scales
-- to be the same. Raises an error on overflow, rounds to chosen
-- scale otherwise.
div : NumericScale n3 => Numeric n1 -> Numeric n2 -> Numeric n3
div = primitive @"BEDivNumeric"

-- | Cast a Numeric. Raises an error on overflow or loss of precision.
cast : NumericScale n2 => Numeric n1 -> Numeric n2
cast = primitive @"BECastNumeric"

-- | Cast a Numeric. Raises an error on overflow, rounds to chosen
-- scale otherwise.
castAndRound : NumericScale n2 => Numeric n1 -> Numeric n2
castAndRound = mul (1.0 : Numeric 0)

-- | Move the decimal point left or right by multiplying the numeric
-- value by 10^(n2 - n1). Does not overflow or underflow.
shift : NumericScale n2 => Numeric n1 -> Numeric n2
shift = primitive @"BEShiftNumeric"

-- | The number pi.
pi : NumericScale n => Numeric n
pi = castAndRound (3.14159_26535_89793_23846_26433_83279_50288_41 : Numeric 37)

#else

-- | The number pi.
pi : Decimal
pi = 3.14159_26536

#endif
