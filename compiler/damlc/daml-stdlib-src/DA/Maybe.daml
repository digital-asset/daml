-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE PatternSynonyms #-}
-- | HIDE
module DA.Maybe(Maybe, pattern Nothing, pattern Just, maybe, module DA.Maybe) where

import DA.Optional

{-# DEPRECATED fromJust "DAML 1.2 compatibility helper, use 'fromSome' from 'DA.Optional' instead of 'fromJust'" #-}
fromJust : Optional a -> a
fromJust = fromSome

{-# DEPRECATED fromJustNote "DAML 1.2 compatibility helper, use 'fromSomeNote' from 'DA.Optional' instead of 'fromJustNote'" #-}
fromJustNote : Text -> Optional a -> a
fromJustNote = fromSomeNote

{-# DEPRECATED catMaybes "DAML 1.2 compatibility helper, use 'catOptionals' from 'DA.Optional' instead of 'catMaybes'" #-}
catMaybes : [Optional a] -> [a]
catMaybes = catOptionals

{-# DEPRECATED listToMaybe "DAML 1.2 compatibility helper, use 'listToOptional' from 'DA.Optional' instead of 'listToMaybe'" #-}
listToMaybe : [a] -> Optional a
listToMaybe = listToOptional

{-# DEPRECATED maybeToList "DAML 1.2 compatibility helper, use 'optionalToList' from 'DA.Optional' instead of 'maybeToList'" #-}
maybeToList : Optional a -> [a]
maybeToList = optionalToList

{-# DEPRECATED fromMaybe "DAML 1.2 compatibility helper, use 'fromOptional' from 'DA.Optional' instead of 'fromMaybe'" #-}
fromMaybe : a -> Optional a -> a
fromMaybe = fromOptional

{-# DEPRECATED isJust "DAML 1.2 compatibility helper, use 'isSome' from 'DA.Optional' instead of 'isJust'" #-}
isJust : Optional a -> Bool
isJust = isSome

{-# DEPRECATED isNothing "DAML 1.2 compatibility helper, use 'isNone' from 'DA.Optional' instead of 'isNothing'" #-}
isNothing : Optional a -> Bool
isNothing = isNone

{-# DEPRECATED mapMaybe "DAML 1.2 compatibility helper, use 'mapOptional' from 'DA.Optional' instead of 'mapMaybe'" #-}
mapMaybe : (a -> Optional b) -> [a] -> [b]
mapMaybe = mapOptional

{-# DEPRECATED whenJust "DAML 1.2 compatibility helper, use 'whenSome' from 'DA.Optional' instead of 'whenJust'" #-}
whenJust : Applicative m => Optional a -> (a -> m ()) -> m ()
whenJust = whenSome
