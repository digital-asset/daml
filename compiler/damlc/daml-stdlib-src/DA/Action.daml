-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
-- | Action
module DA.Action
  (void
  ,mapA
  ,forA
  ,sequence
  ,Action(..)
  ,join
  ,module DA.Action
  ) where

import DA.Functor

-- | Conditional execution of `Action` expressions. For example,
-- ```
--   when final (archive contractId)
-- ```
-- will archive the contract `contractId` if the Boolean value `final` is
-- `True`, and otherwise do nothing.
--
-- This function has short-circuiting semantics, i.e., when both arguments are
-- present and the first arguments evaluates to `False`, the second argument
-- is not evaluated at all.
when      : Applicative f => Bool -> f () -> f ()
when p s  = if p then s else pure ()

-- | The reverse of `when`.
--
-- This function has short-circuiting semantics, i.e., when both arguments are
-- present and the first arguments evaluates to `False`, the second argument
-- is not evaluated at all.
unless : Applicative f => Bool -> f () -> f ()
unless p s  = if p then pure () else s

-- | The `foldrA` is analogous to `foldr`, except that its result is
-- encapsulated in an action. Note that `foldrA` works from right-to-left
-- over the list arguments.
foldrA : Action m => (a -> b -> m b) -> b -> [a] -> m b
foldrA f x xs = foldr (\ y acc -> do v <- acc; f y v) (pure x) xs

-- | `foldr1A` is like `foldrA` but raises an error when presented
-- with an empty list argument.
foldr1A : Action m => (a -> a -> m a) -> [a] -> m a
foldr1A f (x :: xs) = foldrA f x xs
foldr1A _ [] = error "foldr1A: empty list"

-- | `foldlA` is analogous to `foldl`, except that its result is
-- encapsulated in an action. Note that `foldlA` works from
-- left-to-right over the list arguments.
foldlA : Action m => (b -> a -> m b) -> b -> [a] -> m b
foldlA f x xs = foldl (\ acc y -> do v <- acc; f v y) (pure x) xs

-- | The `foldl1A` is like `foldlA` but raises an errors when
-- presented with an empty list argument.
foldl1A : Action m => (a -> a -> m a) -> [a] -> m a
foldl1A f (x :: xs) = foldlA f x xs
foldl1A _ [] = error "foldl1M: empty list"

-- | `replicateA n act` performs the action `n` times, gathering the
--  results.
replicateA : (Applicative m) => Int -> m a -> m [a]
replicateA n x
  | n <= 0 = pure []
  | otherwise = liftA2 (::) x (replicateA (n-1) x)
