-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE ScopedTypeVariables #-}

-- | MOVE Prelude interface functionality
module DA.Internal.Interface (
  HasInterfaceTypeRep(..),
  HasToInterface(..),
  HasFromInterface(..),
  Implements,
  interfaceTypeRep,
  toInterface,
  toInterfaceContractId,
  fromInterfaceContractId,
  fetchFromInterface,
  _exerciseDefault,
  _exerciseInterfaceGuard
) where

import DA.Internal.Prelude
import DA.Internal.Template.Functions
import DA.Internal.LF
import DA.Internal.Any

-- | (1.dev only) Exposes the `interfaceTypeRep` function. Available only for interfaces.
class HasInterfaceTypeRep i where
  -- | HIDE
  _interfaceTypeRep : i -> TypeRep

-- | (1.dev only) Obtain the `TemplateTypeRep` for the template given in the interface value.
interfaceTypeRep : HasInterfaceTypeRep i => i -> TemplateTypeRep
interfaceTypeRep x = TemplateTypeRep (_interfaceTypeRep x)

-- | (1.dev only) Exposes the `toInterface` and `toInterfaceContractId` functions.
class HasToInterface t i where
  -- | HIDE
  _toInterface : t -> i

-- Note that this seems identical to the method '_toInterface'. The only difference
-- is the order of the type arguments. This allows `toInterface` to be type-applied to
-- the interface type first, which is usually more convenient.
-- i.e., for a value `asset` of template Asset which implements an interface Token,
--
-- @
--   token = toInterface @Token asset
-- @
--
-- This way, it's clear to readers what interface is being used, without needing
-- to provide/skip the template type argument, cf.
--
-- @
--   token = _toInterface @Asset @Token asset
--   token = _toInterface @_ @Token asset
-- @
--

-- | (1.dev only) Convert a template value into an interface value.
-- For example `toInterface @MyInterface value` converts a template
-- `value` into a `MyInterface` type.
toInterface : forall i t. HasToInterface t i => t -> i
toInterface = _toInterface

-- | (1.dev only) Exposes `fromInterface` and `fromInterfaceContractId`
-- functions.
class HasFromInterface t i where
  -- | (1.dev only) Attempt to convert an interface value back into a
  -- template value. A `None` indicates that the expected template
  -- type doesn't match the underyling template type for the
  -- interface value.
  --
  -- For example, `fromInterface @MyTemplate value` will try to convert
  -- the interface value `value` into the template type `MyTemplate`.
  fromInterface : i -> Optional t

  -- | HIDE
  -- Like 'fromInterface', but raises a fatal error (`WronglyTypedContract`) if the
  -- underlying template type of the interface value doesn't match the desired type.
  unsafeFromInterface : ContractId i -> i -> t

-- | (1.dev only) Constraint that indicates that a template implements an interface.
type Implements t i =
  ( HasInterfaceTypeRep i
  , HasToInterface t i
  , HasFromInterface t i
  )

-- | (1.dev only) Convert a template contract id into an interface
-- contract id. For example, `toInterfaceContractId @MyInterface cid`.
toInterfaceContractId : forall i t. HasToInterface t i => ContractId t -> ContractId i
toInterfaceContractId = coerceContractId

-- | (1.dev only) Convert an interface contract id into a template
-- contract id. For example, `fromInterfaceContractId @MyTemplate cid`.
--
-- Can also be used to convert an interface contract id into a contract id of
-- one of its requiring interfaces.
--
-- This function does not verify that the interface contract id
-- actually points to a template of the given type. This means
-- that a subsequent `fetch`, `exercise`, or `archive` may fail, if,
-- for example, the contract id points to a contract that implements
-- the interface but is of a different template type than expected.
--
-- Therefore, you should only use `fromInterfaceContractId` in situations
-- where you already know that the contract id points to a contract of the
-- right template type. You can also use it in situations where you will
-- fetch, exercise, or archive the contract right away, when a transaction
-- failure is the appropriate response to the contract having the wrong
-- template type.
--
-- In all other cases, consider using `fetchFromInterface` instead.
fromInterfaceContractId : forall t i. HasFromInterface t i => ContractId i -> ContractId t
fromInterfaceContractId = coerceContractId

-- | (1.dev only) Fetch an interface and convert it to a specific
-- template type. If conversion is succesful, this function returns
-- the converted contract and its converted contract id. Otherwise,
-- this function returns `None`.
--
-- Can also be used to fetch and convert an interface contract id into a
-- contract and contract id of one of its requiring interfaces.
--
-- Example:
-- ```
-- do
--   fetchResult <- fetchFromInterface @MyTemplate ifaceCid
--   case fetchResult of
--     None -> abort "Failed to convert interface to appropriate template type"
--     Some (tplCid, tpl) -> do
--        ... do something with tpl and tplCid ...
-- ```
fetchFromInterface : forall t i. (HasFromInterface t i, HasFetch i) => ContractId i -> Update (Optional (ContractId t, t))
fetchFromInterface cid = do
    iface <- fetch cid
    case fromInterface @t iface of
      None -> pure None
      Some tpl -> pure (Some (fromInterfaceContractId @t cid, tpl))

-- | HIDE Gives a valid implementation of `HasExercise.exercise`
-- for types that implement `HasExerciseGuarded`. This is used
-- in interface desugaring.
_exerciseDefault : HasExerciseGuarded t c r => ContractId t -> c -> Update r
_exerciseDefault = exerciseGuarded (const True)

-- | HIDE The guard used for UExerciseInterface, during interface
-- desugaring. This function converts a guard on type t into a
-- guard on the type i, raising a WronglyTypedContract error if
-- there is a type mismatch. It has to work uniformly in these
-- three cases:
--
--  1. when t is a template type and i is an interface it implements
--  2. when t is an interface type and i is an interface it requires
--  3. when t and i are the same interface type
--
-- It supports these three cases uniformly because `unsafeFromInterface`
-- handles each of them separately.
_exerciseInterfaceGuard : forall i t.
  (HasFromInterface t i, HasInterfaceTypeRep i, HasTemplateTypeRep t) =>
  ContractId t -> (t -> Bool) -> i -> Bool
_exerciseInterfaceGuard cid tpred ivalue =
  tpred (unsafeFromInterface (coerceContractId cid) ivalue)
