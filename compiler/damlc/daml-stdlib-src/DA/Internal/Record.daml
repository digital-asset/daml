-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE AllowAmbiguousTypes #-} -- setField doesn't mention x, because we pass it as a type application


-- | MOVE DA.Record
module DA.Internal.Record(HasField(..), Symbol, getFieldPrim, setFieldPrim) where

import GHC.Types
import GHC.Tuple() -- reqired for Tuple's themselves
import GHC.Integer.Type() -- required for Integer primitives

-- | `HasField` gives you getter and setter functions for each record field
-- automatically.
--
-- **In the vast majority of use-cases, plain Record syntax should be
-- preferred**:
--
-- ```
-- daml> let a = MyRecord 1 "hello"
-- daml> a.foo
-- 1
-- daml> a.bar
-- "hello"
-- daml> a { bar = "bye" }
-- MyRecord {foo = 1, bar = "bye"}
-- daml> a with foo = 3
-- MyRecord {foo = 3, bar = "hello"}
-- daml>
-- ```
--
-- For more on Record syntax, see https://docs.daml.com/daml/intro/3_Data.html#record.
--
-- `HasField x r a` is a typeclass that takes three parameters. The first
-- parameter `x` is the field name, the second parameter `r` is the record type,
-- and the last parameter `a` is the type of the field in this record. For
-- example, if we define a type:
--
-- ```
-- data MyRecord = MyRecord with
--     foo : Int
--     bar : Text
-- ```
--
-- Then we get, for free, the following HasField instances:
--
-- ```
-- HasField "foo" MyRecord Int
-- HasField "bar" MyRecord Text
-- ```
--
-- If we want to get a value using HasField, we can use the `getField` function:
--
-- ```
-- getFoo : MyRecord -> Int
-- getFoo r = getField @"foo" r
--
-- getBar : MyRecord -> Text
-- getBar r = getField @"bar" r
-- ```
--
-- Note that this uses the “type application” syntax ( `f @t` ) to specify the
-- field name.
--
-- Likewise, if we want to set the value in the field, we can use the `setField` function:
--
-- ```
-- setFoo : Int -> MyRecord -> MyRecord
-- setFoo a r = setField @"foo" a r
--
-- setBar : Text -> MyRecord -> MyRecord
-- setBar a r = setField @"bar" a r
-- ```
class HasField (x : Symbol) r a | x r -> a where
    getField : r -> a
    setField : a -> r -> r

-- | HIDE Not re-exported in DA.Record
getFieldPrim : forall (f : Symbol) rec fld. rec -> fld
getFieldPrim = getFieldPrim

-- | HIDE Not re-exported in DA.Record
setFieldPrim : forall (f : Symbol) rec fld. fld -> rec -> rec
setFieldPrim = setFieldPrim

-- we have _1/.. for pairs to quintuples

instance HasField "_1" (a,b) a where
    getField (a,_) = a
    setField a (_,b) = (a,b)

instance HasField "_2" (a,b) b where
    getField (_,b) = b
    setField b (a,_) = (a,b)

instance HasField "_1" (a,b,c) a where
    getField (a,_,_) = a
    setField a (_,b,c) = (a,b,c)

instance HasField "_2" (a,b,c) b where
    getField (_,b,_) = b
    setField b (a,_,c) = (a,b,c)

instance HasField "_3" (a,b,c) c where
    getField (_,_,c) = c
    setField c (a,b,_) = (a,b,c)

instance HasField "_1" (a,b,c,d) a where
    getField (a,_,_,_) = a
    setField a (_,b,c,d) = (a,b,c,d)

instance HasField "_2" (a,b,c,d) b where
    getField (_,b,_,_) = b
    setField b (a,_,c,d) = (a,b,c,d)

instance HasField "_3" (a,b,c,d) c where
    getField (_,_,c,_) = c
    setField c (a,b,_,d) = (a,b,c,d)

instance HasField "_4" (a,b,c,d) d where
    getField (_,_,_,d) = d
    setField d (a,b,c,_) = (a,b,c,d)

instance HasField "_1" (a,b,c,d,e) a where
    getField (a,_,_,_,_) = a
    setField a (_,b,c,d,e) = (a,b,c,d,e)

instance HasField "_2" (a,b,c,d,e) b where
    getField (_,b,_,_,_) = b
    setField b (a,_,c,d,e) = (a,b,c,d,e)

instance HasField "_3" (a,b,c,d,e) c where
    getField (_,_,c,_,_) = c
    setField c (a,b,_,d,e) = (a,b,c,d,e)

instance HasField "_4" (a,b,c,d,e) d where
    getField (_,_,_,d,_) = d
    setField d (a,b,c,_,e) = (a,b,c,d,e)

instance HasField "_5" (a,b,c,d,e) e where
    getField (_,_,_,_,e) = e
    setField e (a,b,c,d,_) = (a,b,c,d,e)
