-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE ScopedTypeVariables #-}

-- | HIDE Automatically imported qualified in every module.
module DA.Internal.Desugar (
    module DA.Internal.Template,
    module DA.Internal.Template.Functions,
    module DA.Internal.Exception,
    module DA.Internal.Interface,
    Eq(..), Show(..),
    Bool(..), Text, Optional(..),
    (&&),
    concat, magic,
    Party, ContractId, Update, Any,
    NonConsuming(..), PreConsuming(..), PostConsuming(..), Consuming(..),
    TypeRep,
    ImplementsT(..),
    HasIsInterfaceType(..),
    RequiresT(..),
    HasMethod,
    Method,
    mkMethod,
    _exerciseDefault,
    _exerciseInterfaceGuard,
    _typeRepForInterfaceExercise,
) where

import DA.Internal.Prelude
import DA.Internal.Template
import DA.Internal.Template.Functions
import DA.Internal.Interface
import DA.Internal.LF
#ifndef DAML_EXCEPTIONS
import DA.Internal.Exception ()
#else
import DA.Internal.Exception
#endif
import GHC.Types (magic, Symbol)

-- These are only used as markers by desugaring, we do not translate them to LF.
data NonConsuming t = NonConsuming {}
data PreConsuming t = PreConsuming {}
data Consuming t = Consuming {}
data PostConsuming t = PostConsuming {}

-- Used to construct markers representing the fact that
-- a template `t` implements an interface `i`.
data ImplementsT t i = ImplementsT

class HasIsInterfaceType t where
  _isInterfaceType : proxy t -> Bool

_typeRepForInterfaceExercise : (HasTemplateTypeRep t, HasIsInterfaceType t) => proxy t -> Optional TypeRep
_typeRepForInterfaceExercise p =
  if _isInterfaceType p
    then None
    else Some (_templateTypeRep p)

-- Used to mark interface hierarchies, i.e. when
-- an interface A requires an interface B.
data RequiresT a b = RequiresT

{-
Together, `HasMethod`, `Method` and `mkMethod` allow us to desugar the methods of
an interface implementation in `RdrHsSyn`, while ensuring that all implementations
have the same type.

Given

> interface Iface where
>   myMethod : MyMethodType

`RdrHsSyn` generates this instance of `HasMethod`

> instance HasMethod Iface "myMethod" MyMethodType

Meanwhile, given

> template Tplt
>   with
>     ...
>   where
>     ...
>     implements Iface where
>       let myMethod = myMethodImpl this

`RdrHsSyn` generates the following binding

> _method_Tplt_Iface_myMethod : Method Tplt Iface "myMethod"
> _method_Tplt_Iface_myMethod = mkMethod @Tplt @Iface @"myMethod" (\this -> myMethodImpl this)

Note that the signature given to `_method_Tplt_Iface_myMethod` doesn't mention the
type of the method itself. This is because the the type of the method is not
available in the `implements` block.

Then how can we ensure that all implementations of that method have the right type?
By wrapping the method implementation in the `Method t i m` type using the
`mkMethod` function with the necessary type applications, we bind the three
type variables `t i m` to the template, interface and method name types, respectively.
Then, the functional dependency `i m -> r` in the `HasMethod` class guarantees
that for the given interface type and method name, the return type `r` is fixed.
Finally, the compiler has to unify the argument to `mkMethod` with the type
`t -> r`, guaranteeing that all implementations have the correct type.
-}

-- Read: Interface `i` has a method named `m` with return type `r`
class HasMethod i (m : Symbol) r | i m -> r

-- | This is only a marker for the container, it doesn't contain the
-- actual implementation of the method.
newtype Method t i (m : Symbol) = Method ()

-- | This is used to check that the argument has the correct
-- return type `r` for the given `t i m` type arguments.
-- At runtime, the argument is ignored, but at compile time,
-- it's extracted unmodified.
mkMethod : (Implements t i, HasMethod i m r) => (t -> r) -> Method t i m
mkMethod = magic @"mkMethod"

-- | Gives a valid implementation of `HasExercise.exercise`
-- for types that implement `HasExerciseGuarded`.
_exerciseDefault : HasExerciseGuarded t c r => ContractId t -> c -> Update r
_exerciseDefault = exerciseGuarded (const True)

_exerciseInterfaceGuard : forall i t. HasFromInterface t i => (t -> Bool) -> (i -> Bool)
_exerciseInterfaceGuard pred iface =
  optional False pred (fromInterface iface)
