-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}

-- | MOVE DA.Time DAML-LF types and primitives, apart from templates/contracts.
module DA.Internal.Time where

import DA.Internal.Prelude
import DA.Internal.LF
import DA.Internal.Date
import GHC.Types (primitive)

-- | HIDE Number of microseconds per day.
microsecondsPerDay : Int
microsecondsPerDay = 86400000000 -- 24 * 60 * 60 * 1000000

-- | HIDE Pass simulated scenario time by argument
internal_pass : Int -> Scenario Time
internal_pass us = primitive @"SPass" us -- passes simulated scenario time by specified number of microseconds

-- | HIDE Convert a UTC timestamp (Time) to a microseconds since epoch,
-- i.e. the number of microseconds since midnight on January 1, 1970.
timeToMicrosecondsSinceEpoch : Time -> Int
timeToMicrosecondsSinceEpoch = primitive @"BETimestampToUnixMicroseconds"

-- | HIDE Convert microseconds since epoch (i.e. the number of microseconds since
-- midnight on January 1, 1970) to a UTC timestamp (Time).
microsecondsSinceEpochToTime : Int -> Time
microsecondsSinceEpochToTime = primitive @"BEUnixMicrosecondsToTimestamp"

-- | `time d h m s` turns given UTC date `d` and the UTC time (given in hours, minutes, seconds)
-- into a UTC timestamp (`Time`). Does not handle leap seconds.
time : Date -> Int -> Int -> Int -> Time
time d h m s =
  microsecondsSinceEpochToTime (microsecondsPerDay * (dateToDaysSinceEpoch d) + 1000000 * (s + 60 * (m + 60 * h)))
