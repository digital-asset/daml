-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


-- | The `Optional` type encapsulates an optional value. A value of type
-- `Optional a` either contains a value of type `a` (represented as `Some a`),
-- or it is empty (represented as `None`). Using `Optional` is a good way
-- to deal with errors or exceptional cases without resorting to
-- drastic measures such as error.
--
-- The Optional type is also an action. It is a simple kind of error
-- action, where all errors are represented by `None`. A richer
-- error action can be built using the `Either` type.
module DA.Optional(Optional(..), optional, module DA.Optional) where

-- | The `fromSome` function extracts the element out of a `Some` and
-- throws an error if its argument is `None`.
fromSome : Optional a -> a
fromSome = fromSomeNote "fromSome: None"

fromSomeNote : Text -> Optional a -> a
fromSomeNote _ (Some x) = x
fromSomeNote n None = error n

-- | The `catOptionals` function takes a list of `Optionals` and returns a
-- list of all the `Some` values.
catOptionals : [Optional a] -> [a]
catOptionals = concatMap optionalToList

-- | The `listToOptional` function returns `None` on an empty list or
-- `Some` a where a is the first element of the list.
listToOptional : [a] -> Optional a
listToOptional [] = None
listToOptional (x::_) = Some x

-- | The `optionalToList` function returns an empty list when given
-- `None` or a singleton list when not given `None`.
optionalToList : Optional a -> [a]
optionalToList None = []
optionalToList (Some x)  = [x]

-- | The `fromOptional` function takes a default value and a `Optional`
-- value. If the `Optional` is `None`, it returns the default values
-- otherwise, it returns the value contained in the `Optional`.
fromOptional : a -> Optional a -> a
fromOptional d x = case x of None -> d; Some v  -> v

-- | The `isSome` function returns `True` iff its argument is of the
-- form `Some _`.
isSome : Optional a -> Bool
isSome None = False
isSome _ = True

-- | The `isNone` function returns `True` iff its argument is
-- `None`.
isNone : Optional a -> Bool
isNone = not . isSome

-- | The `mapOptional` function is a version of `map` which can throw out
-- elements. In particular, the functional argument returns something
-- of type `Optional b`. If this is `None`, no element is added on to
-- the result list. If it is `Some b`, then `b` is included in the
-- result list.
mapOptional : (a -> Optional b) -> [a] -> [b]
mapOptional f = catOptionals . map f

-- | Perform some operation on `Some`, given the field inside the
-- `Some`.
whenSome : Applicative m => Optional a -> (a -> m ()) -> m ()
whenSome None _ = pure ()
whenSome (Some v) f = f v
