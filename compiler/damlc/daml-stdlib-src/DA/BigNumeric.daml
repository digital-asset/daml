-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

#ifndef DAML_BIGNUMERIC

-- | HIDE
module DA.BigNumeric where

#else

-- | This module exposes operations for working with the `BigNumeric` type.
module DA.BigNumeric where

import GHC.Types (primitive)

-- | Calculate the scale of a `BigNumeric` number. The `BigNumeric` number is
-- represented as `n * 10^-s` where `n` is an integer with no trailing zeros,
-- and `s` is the scale.
--
-- Thus, the scale represents the number of nonzero digits after the decimal point.
-- Note that the scale can be negative if the `BigNumeric` represents an integer
-- with trailing zeros. In that case, it represents the number of trailing zeros
-- (negated).
--
-- The scale ranges between 2^15 and -2^15 + 1.
-- The scale of `0` is `0` by convention.
--
-- ```
-- >>> scale 1.1
-- 1
-- ```
--
-- ```
-- >>> scale (shift (-2^14) 1.0)
-- -2^14
-- ```
scale : BigNumeric -> Int
scale = primitive @"BEScaleBigNumeric"

-- | Calculate the precision of a `BigNumeric` number. The `BigNumeric` number is
-- represented as `n * 10^-s` where `n` is an integer with no trailing zeros,
-- and `s` is the scale. The precision is the number of digits in `n`.
--
-- Thus, the precision represents the number of significant digits in the `BigNumeric`.
--
-- The precision ranges between 0 and 2^16 - 1.
--
-- ```
-- >>> precision 1.1.0
-- 2
-- ```
precision : BigNumeric -> Int
precision = primitive @"BEPrecisionBigNumeric"

-- | Calculate a division of `BigNumeric` numbers. The value of `div n r a b`
-- is the division of `a` by `b`, rounded to `n` decimal places (i.e. scale),
-- according to the rounding mode `r`.
--
-- This will fail when dividing by `0`, and when using the `RoundingUnnecessary`
-- mode for a number that cannot be represented exactly with at most `n` decimal
-- places.
div : Int -> RoundingMode -> BigNumeric -> BigNumeric -> BigNumeric
div = primitive @"BEDivBigNumeric"

-- | Round a `BigNumeric` number. The value of `round n r a` is the value
-- of `a` rounded to `n` decimal places (i.e. scale), according to the rounding
-- mode `r`.
--
-- This will fail when using the `RoundingUnnecessary` mode for a number that cannot
-- be represented exactly with at most `n` decimal places.
round : Int -> RoundingMode -> BigNumeric -> BigNumeric
round scale rounding x = div scale rounding x 1.0

-- | Shift a `BigNumeric` number up or down by a power of 10. The value
-- `shift n a` is the value of `a` times `10^(-n)`.
--
-- This will fail if the resulting `BigNumeric` is out of bounds.
--
-- ```
-- >>> shift 2 32.0
-- 0.32
-- ```
shift : Int -> BigNumeric -> BigNumeric
shift = primitive @"BEShiftBigNumeric"

#endif
