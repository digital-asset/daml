-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module DA.List.Total
  ( module DA.List
  , head
  , tail
  , init
  , last
  , foldl1
  , foldr1
  , foldBalanced1
  , (!!)
  )
where

import DA.List hiding (foldBalanced1, head, tail, init, last, foldl1, foldr1, (!!))

head : ActionFail m => [a] -> m a
head (x::_) = pure x
head [] = fail "head: empty list"

tail : ActionFail m => [a] -> m [a]
tail (_::xs) = pure xs
tail [] = fail "tail: empty list"

last : ActionFail m => [a] -> m a
last = foldl1 (flip const)

init : ActionFail m => [a] -> m [a]
init [x]     = pure []
init (x::xs) = do i <- init xs; pure (x :: i)
init []      = fail "init: empty list"

infixl 9 !!
(!!) : ActionFail m => [a] -> Int -> m a
_ !! i | i < 0 = fail "(!!): negative index"
[] !! _ = fail "(!!): index too large"
(x::_) !! 0 = pure x
(_::xs) !! i = xs !! (i-1)

foldl1 : ActionFail m => (a -> a -> a) -> [a] -> m a
foldl1 f (x::xs) = pure (foldl f x xs)
foldl1 _  [] = fail "foldl1: empty list"

foldr1 : ActionFail m => (a -> a -> a) -> [a] -> m a
foldr1 f xs = foldl1 (flip f) (reverse xs)

foldBalanced1 : ActionFail m => (a -> a -> a) -> [a] -> m a
foldBalanced1 _ [] = fail "foldBalanced1: empty list"
foldBalanced1 _ [x] = pure x
foldBalanced1 f xs = foldBalanced1 f (combinePairs f xs)
