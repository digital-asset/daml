-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


-- | `Validation` type and associated functions.
module DA.Validation
  ( Validation(..)
  , invalid
  , ok
  , validate
  , run
  , run1
  , runWithDefault
  , (<?>)
  ) where

import DA.Foldable
import DA.NonEmpty as NE
import DA.Traversable
import DA.Validation.Types

deriving instance (Eq err, Eq a) => Eq (Validation err a)
deriving instance (Show err, Show a) => Show (Validation err a)

-- | Fail for the given reason.
invalid : err -> Validation err a
invalid err = Errors $ singleton err

-- | Succeed with the given value.
ok : a -> Validation err a
ok a = Success a

-- | Turn an `Either` into a `Validation`.
validate : Either err a -> Validation err a
validate = either invalid ok

-- | Convert a `Validation err a` value into an `Either`,
-- taking the non-empty list of errors as the left value.
run : Validation err a -> Either (NonEmpty err) a
run (Errors errs) = Left errs
run (Success a)   = Right a

-- | Convert a `Validation err a` value into an `Either`,
-- taking just the first error as the left value.
run1 : Validation err a -> Either err a
run1 (Errors errs) = Left errs.hd
run1 (Success a)   = Right a

-- | Run a `Validation err a` with a default value in case of errors.
runWithDefault : a -> Validation err a -> a
runWithDefault d (Errors _) = d
runWithDefault _ (Success a) = a

instance Functor (Validation err) where
    fmap _ (Errors e) = Errors e
    fmap f (Success a) = Success (f a)

instance Applicative (Validation err) where
    pure = Success

    Success f <*> Success x = Success (f x)
    Success _ <*> Errors e2 = Errors e2
    Errors e1 <*> Success _ = Errors e1
    Errors e1 <*> Errors e2 = Errors (e1 <> e2)

    liftA2 f (Success x) (Success y) = Success (f x y)
    liftA2 _ (Errors e1) (Errors e2) = Errors (e1 <> e2)
    liftA2 _ (Errors e1) _ = Errors e1
    liftA2 _ _ (Errors e2) = Errors e2

    Success _m1 *> m2 = m2
    Errors e1 *> Success _ = Errors e1
    Errors e1 *> Errors e2 = Errors (e1 <> e2)

-- | Unlike the Haskell version (see https://hackage.haskell.org/package/either-5.0.2/docs/Data-Either-Validation.html#t:Validation), 
-- this only results in a `Success` (the last one) if there are no `Errors`.
instance Semigroup (Validation err a) where
    Errors e1 <> Errors e2 = Errors (e1 <> e2)
    Success _ <> x = x
    x <> Success _ = x

instance Foldable (Validation err) where
    foldr _ z (Errors _) = z
    foldr f z (Success x) = f x z

instance Traversable (Validation err) where
    mapA _ (Errors x) = pure $ Errors x
    mapA f (Success x) = Success <$> f x

-- | Convert an `Optional t` into a `Validation err t`, or
-- more generally into an `m t` for any `ActionFail` type `m`.
(<?>) : Optional b -> err -> Validation err b
None <?> s = invalid s
Some v <?> _ = pure v
