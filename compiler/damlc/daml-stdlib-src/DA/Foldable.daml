-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Class of data structures that can be folded to a summary value.
-- It's a good idea to import this module qualified to avoid clashes with
-- functions defined in `Prelude`. Ie.:
-- ```
-- import DA.Foldable qualified as F
-- ```
module DA.Foldable where

import Prelude hiding (foldr, foldl, any, all)
import Prelude qualified as P

import DA.Monoid

import DA.Either qualified as E
import DA.Optional qualified as O

-- | Class of data structures that can be folded to a summary value.
class Foldable t where
  -- Minimum complete definition: foldMap | foldr
  {-# MINIMAL foldMap | foldr #-}

  -- | Combine the elements of a structure using a monoid.
  fold : Monoid m => t m -> m
  fold = foldMap identity

  -- | Combine the elements of a structure using a monoid.
  foldMap : Monoid m => (a -> m) -> t a -> m
  foldMap f = foldr ((<>) . f) mempty

  -- | Right-associative fold of a structure.
  foldr : (a -> b -> b) -> b -> t a -> b
  foldr f z t = let endo{-: Endo b-} = \a -> Endo (f a)
                in appEndo (foldMap endo t) z

  -- | Left-associative fold of a structure.
  foldl : (b -> a -> b) -> b -> t a -> b
  foldl f z t = let endo{-: Endo b-} = \a -> Endo (flip f a)
                in appEndo (foldMap endo t) z

  -- | A variant of foldr that has no base case, and thus should only be applied to non-empty structures.
  foldr1 : (a -> a -> a) -> t a -> a
  foldr1 f xs = O.fromSomeNote "foldr1: empty input" (foldr mf None xs)
    where
      mf x m = Some (case m of None -> x; Some y -> f x y)

  -- | A variant of foldl that has no base case, and thus should only be applied to non-empty structures.
  foldl1 : (a -> a -> a) -> t a -> a
  foldl1 f xs = O.fromSomeNote "foldl1: empty input" (foldl mf None xs)
    where
      mf m x = Some (case m of None -> x; Some y -> f x y)

  -- | List of elements of a structure, from left to right.
  toList : t a -> [a]
  toList t = foldl (\b a -> a::b) [] t

  -- | Test whether the structure is empty. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.
  null : t a -> Bool
  null = foldl (\_ _ -> False) True

  -- | Returns the size/length of a finite structure as an `Int`. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.
  length : t a -> Int
  length = foldl (\c _ -> c + 1) 0

  -- | Does the element occur in the structure?
  elem : Eq a => a -> t a -> Bool
  elem = any . (==)

  -- | The sum function computes the sum of the numbers of a structure.
  sum : Additive a => t a -> a
  sum = foldl (+) aunit

  -- | The product function computes the product of the numbers of a structure.
  product : Multiplicative a => t a -> a
  product = foldl (*) munit

  -- | The least element of a non-empty structure.
  minimum : Ord a => t a -> a
  minimum = foldl1 m
    where
      m x y = if x > y then y else x

  -- | The largest element of a non-empty structure.
  maximum : Ord a => t a -> a
  maximum = foldl1 m
    where
      m x y = if x < y then y else x

-- | Map each element of a structure to an action, evaluate these
-- actions from left to right, and ignore the results. For a version
-- that doesn't ignore the results see 'DA.Traversable.mapA'.
mapA_ : (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()
mapA_ f = foldr ((*>) . f) (pure ())

-- | 'for_' is 'mapA_' with its arguments flipped. For a version
-- that doesn't ignore the results see 'DA.Traversable.forA'.
forA_ : (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
forA_ = flip mapA_

-- | Evaluate each action in the structure from left to right,
-- and ignore the results. For a version that doesn't ignore the
-- results see 'DA.Traversable.sequence'.
sequence_ : (Foldable t, Action m) => t (m a) -> m ()
sequence_ = foldr (>>) (return ())

-- | The concatenation of all the elements of a container of lists.
concat : Foldable t => t [a] -> [a]
concat xs = foldr (\x y -> foldr (::) y x) [] xs

-- | `and` returns the conjunction of a container of Bools. For the result to be `True`, the container must be finite; `False`, however, results from a `False` value finitely far from the left end.
and : Foldable t => t Bool -> Bool
and = getAll . foldMap All

-- | `or` returns the disjunction of a container of Bools. For the result to be `False`, the container must be finite; `True`, however, results from a `True` value finitely far from the left end.
or : Foldable t => t Bool -> Bool
or = getAny . foldMap Any

-- | Determines whether any element of the structure satisfies the predicate.
any : Foldable t => (a -> Bool) -> t a -> Bool
any p = getAny . foldMap (Any . p)

-- | Determines whether all elements of the structure satisfy the predicate.
all : Foldable t => (a -> Bool) -> t a -> Bool
all p = getAll . foldMap (All . p)

--
-- Instances
--

instance Foldable [] where
  foldr = P.foldr
  foldl = P.foldl
  toList = identity
  null xs = case xs of [] -> True; _ -> False
  length = P.length
  elem = P.elem

instance Foldable (E.Either a) where
  foldMap _ (E.Left _) = mempty
  foldMap f (Right y) = f y

instance Foldable O.Optional where
  foldMap = O.optional mempty

instance Foldable ((,) a) where
  foldMap f (_, y) = f y
  foldr f z (_, y) = f y z
