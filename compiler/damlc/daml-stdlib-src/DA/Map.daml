-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

daml 1.2

#ifndef DAML_GENMAP

-- | HIDE
module DA.Map where

#else

-- | This module exports the generic map type `Map k v` and associated
-- functions. This module should be imported qualified, for example:
--
-- ```
-- import DA.Map (Map)
-- import DA.Map qualified as M
-- ```
--
-- This will give access to the `Map` type, and the various operations
-- as `M.lookup`, `M.insert`, `M.fromList`, etc.
--
-- Note that the `Map k v` functions use the built-in equality for the
-- type `k`, not the `Eq k` instance. Nevertheless, the `Eq k` constraint
-- is usually required to prevent runtime errors.
--
module DA.Map
    ( Map
    , empty
    , size
    , toList
    , fromList
    , fromListWith
    , null
    , lookup
    , member
    , filter
    , filterWithKey
    , delete
    , insert
    , union
    , merge
    , keys
    , values
    ) where

import Prelude hiding (lookup, null, filter, empty)
import DA.Internal.LF (Map)
import DA.Foldable qualified as Foldable
import DA.List qualified as List
import DA.Optional
import DA.Traversable qualified as Traversable
import GHC.Types (primitive)


-- | Create a map from a list of key/value pairs.
--
-- Note that this function uses the built-in equality for the type `k`,
-- not the `Eq` instance. Nevertheless, the `Eq k` constraint is
-- necessary to prevent runtime errors.
fromList : Eq k => [(k, v)] -> Map k v
fromList list = foldl (\acc (key, value) -> insert key value acc) empty list

-- | Create a map from a list of key/value pairs with a combining
-- function. Examples:
--
-- ```
-- >>> fromListWith (++) [("A", [1]), ("A", [2]), ("B", [2]), ("B", [1]), ("A", [3])]
-- Map [("A", [1, 2, 3]), ("B", [2, 1])]
-- >>> fromListWith (++) [] == (M.empty : Map Text [Int])
-- True
-- ```
--
-- Note that this function uses the built-in equality for the type `k`,
-- not the `Eq` instance. Nevertheless, the `Eq k` constraint is
-- necessary to prevent runtime errors.
fromListWith : Eq k => (v -> v -> v) -> [(k, v)] -> Map k v
fromListWith f = foldl g empty
  where
    g acc (k, x) =
      let z = case lookup k acc of
            None -> x
            Some y -> f y x
      in insert k z acc

-- | Get the list of keys in the map. Keys are in "first insertion order", so
-- if a key k1 was first inserted before k2, then k1 will show up before k2.

-- ```
-- >>> keys (fromList [("A", 1), ("B", 2)])
-- ["A", "B"]
-- ```
keys : Map k v -> [k]
keys = primitive @"BEGenMapKeys"

-- | Get the list of values in the map. These will be in the same order as
-- their respective keys from `M.keys`.
--
-- ```
-- >>> values (fromList [("A", 1), ("B", 2)])
-- [1, 2]
-- ```
values : Map k v -> [v]
values = primitive @"BEGenMapValues"

-- | Convert the map to a list of key/value pairs. These will be in "first
-- insertion order" by key, as in `M.keys`.
toList : Map k v -> [(k, v)]
toList x = zip (keys x) (values x)

-- | The empty map.
empty : Map k v
empty = primitive @"BEGenMapEmpty"

-- | Number of elements in the map.
size : Map k v -> Int
size = primitive @"BEGenMapSize"

-- | Is the map empty?
null : Map k v -> Bool
null m = size m == 0

-- | Lookup the value at a key in the map.
lookup : Eq k => k -> Map k v -> Optional v
lookup = primitive @"BEGenMapLookup"

-- | Is the key a member of the map?
member : Eq k => k -> Map k v -> Bool
member x m = isSome $ lookup x m

-- | Filter the `Map` using a predicate: keep only the entries where the
-- value satisfies the predicate.
filter : Eq k => (v -> Bool) -> Map k v -> Map k v
filter p = filterWithKey (const p)

-- | Filter the `Map` using a predicate: keep only the entries which
-- satisfy the predicate.
filterWithKey : Eq k => (k -> v -> Bool) -> Map k v -> Map k v
filterWithKey p m = fromList $ List.filter (uncurry p) (toList m)

-- | Delete a key and its value from the map. When the key is not a
-- member of the map, the original map is returned.
delete : Eq k => k -> Map k v -> Map k v
delete = primitive @"BEGenMapDelete"

-- | Insert a new key/value pair in the map. If the key is already
-- present in the map, the associated value is replaced with the
-- supplied value.
insert : Eq k => k -> v -> Map k v -> Map k v
insert = primitive @"BEGenMapInsert"

-- | The union of two maps, preferring the first map when equal
-- keys are encountered.
union : Eq k => Map k v -> Map k v -> Map k v
union m1 m2 = foldl (\acc (k, v) -> insert k v acc) m2 (toList m1)

-- | Combine two maps, using separate functions based on whether
-- a key appears only in the first map, only in the second map,
-- or appears in both maps.
merge : forall k a b c.
    Eq k
    => (k -> a -> Optional c)
    -> (k -> b -> Optional c)
    -> (k -> a -> b -> Optional c)
    -> Map k a
    -> Map k b
    -> Map k c
merge f g h mapA mapB = foldl insertB (foldl insertA empty (toList mapA)) (toList mapB)
  where
    insertA : Map k c -> (k, a) -> Map k c
    insertA accum (k, a) =
        case lookup k mapB of
            None -> insertMaybe k (f k a) accum
            Some b -> insertMaybe k (h k a b) accum

    insertB : Map k c -> (k, b) -> Map k c
    insertB accum (k, b) =
        if member k mapA
            then accum
            else insertMaybe k (g k b) accum

    insertMaybe : k -> Optional v -> Map k v -> Map k v
    insertMaybe k (Some v) m = insert k v m
    insertMaybe _ None m = m

instance (Show k, Show v) => Show (Map k v) where
  show m = "Map " <> show (toList m)

instance (Eq k, Eq v) => Eq (Map k v) where
    x == y = size x == size y
        && all (\(k,v) -> Some v == lookup k y) (toList x)

instance (Ord k, Ord v) => Ord (Map k v) where
  x `compare` y = List.sort (toList x) `compare` List.sort (toList y)

instance Eq k => Semigroup (Map k v) where
  (<>) = union

instance Eq k => Monoid (Map k v) where
  mempty = empty

instance Eq k => Functor (Map k) where
  fmap f x = fromList $ map (\(k, v) -> (k, f v)) $ toList x

instance Eq k => Foldable.Foldable (Map k) where
  foldr f z x = List.foldr (\(_, v) acc -> f v acc) z $ toList x

instance Eq k => Traversable.Traversable (Map k) where
  mapA f x = fmap fromList $ mapA (\(k, v) -> fmap (k,) $ f v) $ toList x

#endif
