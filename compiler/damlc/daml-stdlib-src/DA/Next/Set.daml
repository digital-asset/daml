-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Set - The `Set a` type represents a set of elements of type
-- `a`. Most operations require that `a` be an instance of the `MapKey`
-- type class.
module DA.Next.Set
  ( Set
  , empty
  , size
  , toList
  , fromList
  , toTextMap
  , fromTextMap
  , member
  , null
  , insert
  , filter
  , delete
  , singleton
  , union
  , intersection
  , difference
  )
where

import Prelude hiding (filter, null, empty)
import DA.Next.Map (MapKey (..))
import DA.TextMap (TextMap)
import DA.TextMap qualified as TextMap

-- | The type of a set.
newtype Set a = Set with textMap : TextMap ()
  deriving (Eq, Ord)
-- NOTE(MH): This is not a newtype wrapper around the `Map` type such that
-- people using `Set` over the Ledger API don't have to wrap every set into
-- two layers of newtypes.

-- | The empty set.
empty : Set a
empty = Set TextMap.empty

-- | The number of elements in the set.
size : Set a -> Int
size (Set t) = TextMap.size t

-- | Convert the set to a list of elements.
toList : MapKey a => Set a -> [a]
toList (Set t) = map (keyFromText . fst) $ TextMap.toList t

-- | Create a set from a list of elements.
fromList : MapKey a => [a] -> Set a
fromList xs = Set $ TextMap.fromList $ map (\x -> (keyToText x, ())) xs

-- | Convert a `Set` into a `TextMap`.
toTextMap : Set Text -> TextMap ()
toTextMap (Set t) = t

-- | Create a `Set` from a `TextMap`.
fromTextMap : TextMap () -> Set Text
fromTextMap = Set

-- | Is the element in the set?
member : MapKey a => a -> Set a -> Bool
member x (Set t) = TextMap.member (keyToText x) t

-- | Is this the empty set?
null : Set a -> Bool
null (Set t) = TextMap.null t

-- | Insert an element in a set. If the set already contains an
-- element equal to the given value, it is replaced with the new
-- value.
insert : MapKey a => a -> Set a -> Set a
insert x (Set t) = Set $ TextMap.insert (keyToText x) () t

-- | Filter all elements that satisfy the predicate.
filter : MapKey a => (a -> Bool) -> Set a -> Set a
filter p (Set t) = Set $ TextMap.filterWithKey (\x () -> p (keyFromText x)) t

-- | Delete an element from a set.
delete : MapKey a => a -> Set a -> Set a
delete x (Set t) = Set $ TextMap.delete (keyToText x) t

-- | Create a singleton set.
singleton : MapKey a => a -> Set a
singleton x = insert x empty

-- | The union of two sets, preferring the first set when equal
-- elements are encountered.
union : MapKey a => Set a -> Set a -> Set a
union (Set t1) (Set t2) = Set $ TextMap.union t1 t2

-- | The intersection of two sets. Elements of the result come from
-- the first set.
intersection : MapKey a => Set a -> Set a -> Set a
intersection s1 s2 = filter (`member` s2) s1

-- | Difference of two sets.
difference : MapKey a => Set a -> Set a -> Set a
difference s1 s2 = filter (\x -> not (x `member` s2)) s1

instance (MapKey a, Show a) => Show (Set a) where
  show s = "Set " <> show (toList s)

instance IsParties (Set Party) where
  toParties = toList

instance MapKey a => Semigroup (Set a) where
  (<>) = union

instance MapKey a => Monoid (Set a) where
  mempty = empty
