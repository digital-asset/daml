-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
-- | Map - A `Map` is an associative array data type composed of a
-- collection of key/value pairs such that each possible key appears
-- at most once in the collection.
module DA.Next.Map
  ( Map
  , MapKey (..)
  , empty
  , size
  , toList
  , fromList
  , fromListWith
  , toTextMap
  , fromTextMap
  , null
  , lookup
  , member
  , filter
  , filterWithKey
  , delete
  , insert
  , union
  , merge
  ) where

import Prelude hiding (lookup, null, filter, empty)
import DA.Foldable qualified as Foldable
import DA.Optional
import DA.Text
import DA.TextMap (TextMap)
import DA.TextMap qualified as TextMap
import DA.Traversable qualified as Traversable
import DA.Tuple

-- | A `Map k v` is an associative array data type composed of a
-- collection of key/value pairs of key type `k` and value type `v`
-- such that each possible key appears at most once in the collection.
newtype Map k v = Map with textMap : TextMap v
  deriving (Eq, Ord, Foldable.Foldable)

-- | A class for types that can be used as keys for the `Map` type.
-- All keys `k` must satisfy `keyFromText (keyToText k) == k`.
class Eq k => MapKey k where
  -- | Turn a key into its textual representation. This function must be
  -- injective.
  keyToText : k -> Text
  -- | Recover a key from its textual representation. `keyFromText x` is
  -- allowed to fail whenever there is _no_ key `k` with `keyToText k == x`.
  -- Whenever such a `k` does exist, then it must satisfy
  -- `keyFromText x == k`.
  keyFromText : Text -> k

instance MapKey Text where
  keyToText x = x
  keyFromText x = x

instance MapKey Party where
  keyToText = partyToText
  keyFromText = fromSome . partyFromText

instance MapKey Int where
  keyToText = show
  keyFromText = fromSome . parseInt

instance MapKey Decimal where
  keyToText = show
  keyFromText = fromSome . parseDecimal

-- | Create a map from a list of key/value pairs.
fromList : MapKey k => [(k, v)] -> Map k v
fromList kvs = Map $ TextMap.fromList $ map (first keyToText) kvs

-- | Create a map from a list of key/value pairs with a combining
-- function. Examples:
-- ```
--   fromListWith (<>) [(5,"a"), (5,"b"), (3,"b"), (3,"a"), (5,"c")] == fromList [(3, "ba"), (5, "abc")]
--   fromListWith (<>) [] == (empty : Map Int Text)
-- ```
fromListWith : MapKey k => (v -> v -> v) -> [(k, v)] -> Map k v
fromListWith f kvs = Map $ TextMap.fromListWith f $ map (first keyToText) kvs

-- | Convert the map to a list of key/value pairs where the keys are
-- in ascending order of their textual representation.
toList : MapKey k => Map k v -> [(k, v)]
toList (Map t) = map (first keyFromText) $ TextMap.toList t

-- | Create a `Map` from a `TextMap`.
fromTextMap : TextMap v -> Map Text v
fromTextMap = Map

-- | Convert a `Map` into a `TextMap`.
toTextMap : MapKey k => Map k v -> TextMap v
toTextMap (Map t) = t

-- | The empty map.
empty : Map k v
empty = Map TextMap.empty

-- | Number of elements in the map.
size : Map k v -> Int
size (Map t) = TextMap.size t

-- | Is the map empty?
null : Map k v -> Bool
null m = size m == 0

-- | Lookup the value at a key in the map.
lookup : MapKey k => k -> Map k v -> Optional v
lookup k (Map t) = TextMap.lookup (keyToText k) t

-- | Is the key a member of the map?
member : MapKey k => k -> Map k v -> Bool
member k (Map t) = TextMap.member (keyToText k) t

-- | Filter the `Map` using a predicate: keep only the entries where the
-- value satisfies the predicate.
filter : MapKey k => (v -> Bool) -> Map k v -> Map k v
filter p = filterWithKey (const p)

-- | Filter the `Map` using a predicate: keep only the entries which
-- satisfy the predicate.
filterWithKey : MapKey k => (k -> v -> Bool) -> Map k v -> Map k v
filterWithKey p (Map t) = Map $ TextMap.filterWithKey (p . keyFromText) t

-- | Delete a key and its value from the map. When the key is not a
-- member of the map, the original map is returned.
delete : MapKey k => k -> Map k v -> Map k v
delete k (Map t) = Map $ TextMap.delete (keyToText k) t

-- | Insert a new key/value pair in the map. If the key is already
-- present in the map, the associated value is replaced with the
-- supplied value.
insert : MapKey k => k -> v -> Map k v -> Map k v
insert k v (Map t) = Map $ TextMap.insert (keyToText k) v t

-- | The union of two maps, preferring the first map when equal
-- keys are encountered.
union : MapKey k => Map k v -> Map k v -> Map k v
union (Map t1) (Map t2) = Map $ TextMap.union t1 t2

-- | Merge two maps. `merge f g h x y` applies `f` to all key/value pairs
-- whose key only appears in `x`, `g` to all pairs whose key only appears
-- in `y` and `h` to all pairs whose key appears in both `x` and `y`.
-- In the end, all pairs yielding `Some` are collected as the result.
merge
  :  MapKey k
  => (k -> a -> Optional c)
  -> (k -> b -> Optional c)
  -> (k -> a -> b -> Optional c)
  -> Map k a
  -> Map k b
  -> Map k c
merge f g h (Map xs) (Map ys) = Map $ TextMap.merge (f . keyFromText) (g . keyFromText) (h . keyFromText) xs ys

instance (MapKey k, Show k, Show v) => Show (Map k v) where
  show m = "Map " <> show (toList m)

deriving instance MapKey k => Semigroup (Map k v)

-- TODO(MH): The converter to DAML-LF can't handle deriving this right now.
-- It fails with "Coercion with symco."
-- deriving instance MapKey k => Monoid (Map k v)
instance MapKey k => Monoid (Map k v) where
  mempty = empty

deriving instance MapKey k => Functor (Map k)

instance MapKey k => Traversable.Traversable (Map k) where
  mapA f (Map t) = fmap Map $ Traversable.mapA f t
