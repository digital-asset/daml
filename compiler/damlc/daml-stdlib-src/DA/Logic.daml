-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Logic -  Propositional calculus.
module DA.Logic
  ( Formula (..)

  , true
  , false
  , (&&&)
  , (|||)
  , neg
  , conj
  , disj
  , fromBool

  , toNNF
  , toDNF
  , reduce
  , substitute
  , substituteA
  , interpret
  , interpretA
  , isBool

  , traverse
  , zipFormulas
  )
where

import DA.Either
import DA.Logic.Types

infixr 3  &&&
infixr 2  |||

deriving instance Eq t => Eq (Formula t)
deriving instance Ord t => Ord (Formula t)
deriving instance Show t => Show (Formula t)
deriving instance Functor Formula

-- | `&&&` is the ∧ operation of the boolean algebra of formulas, to
-- be read as "and"
(&&&) : Formula t -> Formula t -> Formula t
f &&& g = Conjunction [f, g]

-- | `|||` is the ∨ operation of the boolean algebra of formulas, to
-- be read as "or"
(|||) : Formula t -> Formula t -> Formula t
f ||| g = Disjunction [f, g]

-- | `true` is the 1 element of the boolean algebra of formulas,
-- represented as an empty conjunction.
true : Formula t
true = Conjunction []

-- | `false` is the 0 element of the boolean algebra of formulas,
-- represented as an empty disjunction.
false : Formula t
false = Disjunction []

-- | `neg` is the ¬ (negation) operation of the boolean algebra of
-- formulas.
neg : Formula t -> Formula t
neg = Negation

-- | `conj` is a list version of `&&&`, enabled by the associativity
-- of ∧.
conj : [Formula t] -> Formula t
conj = Conjunction

-- | `disj` is a list version of `|||`, enabled by the associativity
-- of ∨.
disj : [Formula t] -> Formula t
disj = Disjunction

-- | `fromBool` converts `True` to `true` and `False` to `false`.
fromBool : Bool -> Formula t
fromBool x = if x then true else false

-- | `toNNF` transforms a formula to negation normal form
-- (see https://en.wikipedia.org/wiki/Negation_normal_form).
toNNF : Formula t -> Formula t
toNNF (Negation (Negation f)) = f
toNNF (Negation (Conjunction fs)) = Disjunction $ map (toNNF . neg) fs
toNNF (Negation (Disjunction fs)) = Conjunction $ map (toNNF . neg) fs
toNNF f = f

-- | `toDNF` turns a formula into disjunctive normal form.
-- (see https://en.wikipedia.org/wiki/Disjunctive_normal_form).
toDNF : Formula t -> Formula t
toDNF f = case f of
  f@(Proposition p) -> Disjunction [Conjunction [f]]
  Disjunction ds -> Disjunction $ concatMap (disjuncts . toDNF) ds
  Conjunction cs -> Disjunction $ map Conjunction regroupedcs
    where
      dnfs = map toDNF cs
      groupedcs = map (concatMap conjuncts . disjuncts) dnfs
      cart acc d = (::) <$> d <*> acc
      regroupedcs = foldl cart [[]] groupedcs
  f@(Negation n) ->
    case n of
      Proposition _ -> Disjunction [Conjunction [f]]
      _ -> toDNF $ toNNF f
  where
    disjuncts f = case f of
      Disjunction xs -> xs
      _ -> error "Does not happen."
    conjuncts f = case f of
      Conjunction xs -> xs
      _ -> error "Does not happen."

-- | An implementation of `traverse` in the usual sense.
traverse : Applicative f => (t -> f s) -> Formula t -> f (Formula s)
traverse fn (Proposition x) = Proposition <$> fn x
traverse fn (Negation x) = Negation <$> traverse fn x
traverse fn (Conjunction xs) = Conjunction <$> mapA (traverse fn) xs
traverse fn (Disjunction xs) = Disjunction <$> mapA (traverse fn) xs

instance Applicative Formula where
  pure = Proposition
  ffn <*> fa = do
    fn <- ffn
    a <- fa
    pure $ fn a

instance Action Formula where
  Proposition p >>= fnf = fnf p
  Negation n >>= fnf = Negation $ n >>= fnf
  Conjunction cs >>= fnf = Conjunction $ map (>>= fnf) cs
  Disjunction ds >>= fnf = Disjunction $ map (>>= fnf) ds

-- | `zipFormulas` takes to formulas of same shape, meaning only
-- propositions are different and zips them up.
zipFormulas : Formula t -> Formula s -> Formula (t, s)
zipFormulas (Proposition p) (Proposition q) = Proposition (p, q)
zipFormulas (Negation f1) (Negation f2) = Negation $ zipFormulas f1 f2
zipFormulas (Conjunction fs1) (Conjunction fs2) = Conjunction $ zipWith zipFormulas fs1 fs2
zipFormulas (Disjunction fs1) (Disjunction fs2) = Disjunction $ zipWith zipFormulas fs1 fs2
zipFormulas _ _ = error "Formula structures do not match."

-- | `substitute` takes a truth assignment and substitutes `True` or
-- `False` into the respective places in a formula.
substitute : (t -> Optional Bool) -> Formula t -> Formula t
substitute t f = f >>= (\x -> optional (Proposition x) fromBool (t x))

-- | `reduce` reduces a formula as far as possible by:
--   1. Removing any occurrences of `true` and `false`;
--   2. Removing directly nested Conjunctions and Disjunctions;
--   3. Going to negation normal form.
reduce : Formula t -> Formula t
reduce f@(Proposition _) = f
reduce f@(Negation (Proposition _)) = f
reduce f@(Negation _) = reduce $ toNNF f
reduce (Conjunction cs) =
  let
    work _ (Disjunction []) = false
    work (Disjunction []) _ = false
    work x (Conjunction []) = x
    work (Conjunction []) x = x
    work (Conjunction cs1) (Conjunction cs2) = Conjunction $ cs1 ++ cs2
    work (Conjunction cs1) f2 = Conjunction $ f2 :: cs1
    work f1 (Conjunction cs2) = Conjunction $ f1 :: cs2
    work f1 f2 = Conjunction [f1, f2]
    xs = map reduce cs
  in foldl work true xs
reduce (Disjunction ds) =
  let
    work _ (Conjunction []) = true
    work (Conjunction []) _ = true
    work x (Disjunction []) = x
    work (Disjunction []) x = x
    work (Disjunction cs1) (Disjunction cs2) = Conjunction $ cs1 ++ cs2
    work (Disjunction cs1) f2 = Disjunction $ f2 :: cs1
    work f1 (Disjunction cs2) = Disjunction $ f1 :: cs2
    work f1 f2 = Disjunction [f1, f2]
    xs = map reduce ds
  in foldl work false xs

-- | `isBool` attempts to convert a formula to a bool. It satisfies
-- `isBool true == Right True` and `toBool false == Right False`.
-- Otherwise, it returns `Left x`, where `x` is the input.
isBool : Formula t -> Optional Bool
isBool x = case x of
  Conjunction [] -> Some True
  Disjunction [] -> Some False
  _ -> None

-- | `interpret` is a version of `toBool` that first substitutes using
-- a truth function and then reduces as far as possible.
interpret : (t -> Optional  Bool) -> Formula t -> Either (Formula t) Bool
interpret t f = optionalToEither rx $ isBool rx
  where rx = reduce $ substitute t f

-- | `substituteA` is a version of `substitute` that allows for truth
-- values to be obtained from an action.
substituteA : Applicative f => (t -> f (Optional Bool)) -> Formula t -> f (Formula t)
substituteA t x = join <$> traverse work x
  where work p = optional (Proposition p) fromBool <$> t p

-- | `interpretA` is a version of `interpret` that allows for truth
-- values to be obtained form an action.
interpretA :  Applicative f => (t -> f (Optional Bool)) -> Formula t -> f (Either (Formula t) Bool)
interpretA t f = optionalToEither f . isBool . reduce <$> substituteA t f
