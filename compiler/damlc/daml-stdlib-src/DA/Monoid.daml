-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module DA.Monoid where

-- | Boolean monoid under conjunction (&&)
newtype All = All { getAll : Bool } deriving (Eq, Ord, Show)

instance Semigroup All where
  All a1 <> All a2 = All $ a1 && a2

-- | Boolean Monoid under disjunction (||)
newtype Any = Any { getAny : Bool } deriving (Eq, Ord, Show)

instance Semigroup Any where
  Any a1 <> Any a2 = Any $ a1 || a2

-- | The monoid of endomorphisms under composition.
newtype Endo a = Endo { appEndo : a -> a }

instance Semigroup (Endo a) where
  Endo e1 <> Endo e2 = Endo $ e1 . e2

instance Monoid (Endo a) where
  mempty = Endo identity

-- | Boolean Monoid under conjunction (&&)
instance Monoid All where
  mempty = All True

-- | Boolean Monoid under disjunction (||)
instance Monoid Any where
  mempty = Any False

-- | Monoid under (+)
--
-- ```
-- > Sum 1 <> Sum 2
-- Sum 3
-- ```
newtype Sum a = Sum a deriving (Eq, Ord, Show, Additive, Multiplicative)

instance Additive a => Semigroup (Sum a) where
  Sum a <> Sum b = Sum (a + b)

instance Additive a => Monoid (Sum a) where
  mempty = aunit

-- | Monoid under (*)
--
-- ```
-- > Product 2 <> Product 3
-- Product 6
-- ```
newtype Product a = Product a deriving (Eq, Ord, Show, Additive, Multiplicative)

instance Multiplicative a => Semigroup (Product a) where
  Product a <> Product b = Product (a * b)

instance Multiplicative a => Monoid (Product a) where
  mempty = munit
