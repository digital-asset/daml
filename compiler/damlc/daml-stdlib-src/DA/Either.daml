-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | The `Either` type represents values with two possibilities.
--
-- It is sometimes used to represent a value which is either correct
-- or an error. By convention, the `Left` constructor is used to hold
-- an error value and the `Right` constructor is used to hold a correct
-- value (mnemonic: "right" also means correct).
module DA.Either(Either(..), either, module DA.Either) where

-- | Extracts all the `Left` elements from a list.
lefts : [Either a b] -> [a]
lefts x = [a | Left a <- x]

-- | Extracts all the `Right` elements from a list.
rights : [Either a b] -> [b]
rights x = [a | Right a <- x]

-- | Partitions a list of `Either` into two lists, the `Left` and
-- `Right` elements respectively. Order is maintained.
partitionEithers : [Either a b] -> ([a], [b])
partitionEithers = foldr (either left right) ([], [])
 where
  left  a (l, r) = (a :: l, r)
  right a (l, r) = (l, a :: r)

-- | Return `True` if the given value is a `Left`-value, `False`
-- otherwise.
isLeft : Either a b -> Bool
isLeft (Left  _) = True
isLeft (Right _) = False

-- | Return `True` if the given value is a `Right`-value, `False`
-- otherwise.
isRight : Either a b -> Bool
isRight (Left  _) = False
isRight (Right _) = True

-- | Return the contents of a `Left`-value, or a default value
-- in case of a `Right`-value.
fromLeft : a -> Either a b -> a
fromLeft _ (Left a) = a
fromLeft a _        = a

-- | Return the contents of a `Right`-value, or a default value
-- in case of a `Left`-value.
fromRight : b -> Either a b -> b
fromRight _ (Right b) = b
fromRight b _         = b

-- | Convert a `Optional` value to an `Either` value, using the supplied
-- parameter as the `Left` value if the `Optional` is `None`.
optionalToEither : a -> Optional b -> Either a b
optionalToEither l None = Left l
optionalToEither _ (Some x) = Right x

-- | Convert an `Either` value to a `Optional`, dropping any value in
-- `Left`.
eitherToOptional : Either a b -> Optional b
eitherToOptional (Left _) = None
eitherToOptional (Right x) = Some x
-- | Deprecated.
{-# DEPRECATED maybeToEither "DAML 1.2 compatibility helper, use 'optionalToEither' instead of 'maybeToEither'" #-}
maybeToEither : a -> Optional b -> Either a b
maybeToEither = optionalToEither
-- | Deprecated.
{-# DEPRECATED eitherToMaybe "DAML 1.2 compatibility helper, use 'eitherToOptional' instead of 'eitherToMaybe'" #-}
eitherToMaybe : Either a b -> Optional b
eitherToMaybe = eitherToOptional
