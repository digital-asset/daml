-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ImplicitParams #-}
module DA.Stack
  ( CallStack
  , HasCallStack
  , SrcLoc(..)
  , callStack
  , getCallStack
  , prettyCallStack
  ) where

import Prelude
import DA.Text
import GHC.Stack.Types hiding (SrcLoc(..))
import qualified GHC.Stack.Types as GHC

-- | Request a CallStack.
--
-- Calls to functions with this constraint will be added to the callstack.
-- You can get access to the current call stack with `callStack`.
--
-- Note that if the call stack is reset if any function in between does not
-- have a `HasCallStack` constraint.
type HasCallStack = (?callStack : CallStack)

-- Pretty-print a `CallStack`.
prettyCallStack : CallStack -> Text
prettyCallStack = intercalate "\n" . prettyCallStackLines

prettyCallStackLines : CallStack -> [Text]
prettyCallStackLines cs = case getCallStack cs of
  []  -> []
  stk -> "CallStack (from HasCallStack):"
       :: map (("  " <>) . prettyCallSite) stk
  where
    prettyCallSite (f, loc) = f <> ", called at " <> prettySrcLoc loc

prettySrcLoc : SrcLoc -> Text
prettySrcLoc SrcLoc {..}
  = foldr (<>) ""
      [ srcLocFile, ":"
      , show srcLocStartLine, ":"
      , show srcLocStartCol, " in "
      , srcLocPackage, ":", srcLocModule
      ]

-- | Extract the list of call sites from the `CallStack`.
--
-- The most recent call comes first.
getCallStack : CallStack -> [(Text, SrcLoc)]
getCallStack stk = case stk of
  EmptyCallStack            -> []
  PushCallStack (fn, loc, stk') -> (fromString fn,convSrcLoc loc) :: getCallStack stk'
  FreezeCallStack stk'      -> getCallStack stk'

-- | Access to the current `CallStack`.
callStack : HasCallStack => CallStack
callStack =
  case ?callStack of
    EmptyCallStack -> EmptyCallStack
    _              -> popCallStack ?callStack

-- | Location in the source code.
--
-- Line and column are 1-based.
data SrcLoc = SrcLoc
-- User-facing type using Text instead of TextLit.
  { srcLocPackage   : Text
  , srcLocModule    : Text
  , srcLocFile      : Text
  , srcLocStartLine : Int
  , srcLocStartCol  : Int
  , srcLocEndLine   : Int
  , srcLocEndCol    : Int
  }

convSrcLoc : GHC.SrcLoc -> SrcLoc
convSrcLoc GHC.SrcLoc{..} =
  SrcLoc
    { srcLocPackage = fromString srcLocPackage
    , srcLocModule = fromString srcLocModule
    , srcLocFile = fromString srcLocFile
    , srcLocStartLine
    , srcLocStartCol
    , srcLocEndLine
    , srcLocEndCol
    }

