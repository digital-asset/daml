-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- Copied from https://github.com/ghc/ghc/blob/master/libraries/base/GHC/Generics.hs
-- commit 36546a43e490ea6f989e6cad369d1a251c94a42b

{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveFunctor              #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE EmptyDataDeriving          #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE KindSignatures             #-}
{-# LANGUAGE MagicHash                  #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE ScopedTypeVariables        #-}
{-# LANGUAGE StandaloneDeriving         #-}
{-# LANGUAGE Trustworthy                #-}
{-# LANGUAGE TypeOperators              #-}
{-# LANGUAGE TypeSynonymInstances       #-}
{-# LANGUAGE UndecidableInstances       #-}
{-# LANGUAGE DamlSyntax                 #-}

-- | HIDE Partial implementation of DeriveGeneric. Note that this is not supported in cross-SDK dependencies.
module DA.Generics (

  -- * Generic representation types
    V1, U1(..), Par1(..), Rec1(..), K1(..), M1(..)
  , (:+:)(..), (:*:)(..), (:.:)(..)

  -- ** Unboxed representation types
  --, URec(..)
  --, type UAddr, type UChar, type UDouble
  --, type UFloat, type UInt, type UWord

  -- ** Synonyms for convenience
  , Rec0, R
  , D1, C1, S1, D, C, S

  -- * Meta-information
  -- , Datatype(..), Constructor(..), Selector(..)
  , Fixity(..), FixityI(..), Associativity(..), prec
  , SourceUnpackedness(..), SourceStrictness(..), DecidedStrictness(..)
  , Meta(..), MetaData0(..), MetaCons0(..), MetaSel0(..)

  -- * Generic type classes
  , Generic(..), Generic1(..)

  ) where

-- We use some base types
import GHC.Types hiding (Nat)

-- Needed for instances
import GHC.Classes ( Eq(..), Ord(..) )
import GHC.Enum    ( Bounded, Enum )
import GHC.Show    ( Show(..), showString )

-- Needed for metadata

import GHC.CString (fromString)
import GHC.Integer.Type (fromInteger)
import DA.Internal.Prelude (Optional(..))

-- | The kind of types with values. For example @Int :: Type@.
-- [DA] copied from ghc-prim/GHC/Types.hs. Usually set to
-- type Type = TYPE 'LiftedRep, but we only have one representation.
type Type = *

 --------------------------------------------------------------------------------
-- Representation types
--------------------------------------------------------------------------------

-- | Void: used for datatypes without constructors
data V1 (p : *)
  deriving ( Eq       -- ^ @since 4.9.0.0
           , Ord      -- ^ @since 4.9.0.0
           , Show     -- ^ @since 4.9.0.0
           )

-- | Unit: used for constructors without arguments
data U1 (p : *) = U1

instance Eq (U1 p) where
  _ == _ = True

instance Ord (U1 p) where
  compare _ _ = EQ

instance Show (U1 p) where
  showsPrec _ _ = showString "U1"

-- | Used for marking occurrences of the parameter
newtype Par1 p = Par1 { unPar1 : p }
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Recursive calls of kind `* -> *` (or kind `k -> *`, when @PolyKinds@
-- is enabled)
newtype Rec1 (f : * -> Type) (p : *) = Rec1 { unRec1 : f p }
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Constants, additional parameters and recursion of kind @*@
newtype K1 (i : Type) c (p : *) = K1 { unK1 : c }
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Meta-information (constructor names, etc.)
newtype M1 (i : Type) (c : Meta) (f : * -> Type) (p : *) =
    M1 { unM1 : f p }
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Sums: encode choice between constructors
infixr 5 :+:
data (:+:) (f : * -> Type) (g : * -> Type) (p : *) = L1 (f p) | R1 (g p)
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Products: encode multiple arguments to constructors
infixr 6 :*:
data (:*:) (f : * -> Type) (g : * -> Type) (p : *) = P1 {prodL1 : f p, prodR1 : g p}
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
           )

-- | Composition of functors
infixr 7 :.:
newtype (:.:) (f : * -> Type) (g : * -> *) (p : *) =
    Comp1 { unComp1 : f (g p) }
  deriving ( Eq       -- ^ @since 4.7.0.0
           , Ord      -- ^ @since 4.7.0.0
--           , Read     -- ^ @since 4.7.0.0
           , Show     -- ^ @since 4.7.0.0
--           , Functor  -- ^ @since 4.9.0.0
           --, Generic  -- ^ @since 4.7.0.0
           --, Generic1 -- ^ @since 4.9.0.0
           )

-- | Tag for K1: recursion (of kind @Type@)
data R

-- | Type synonym for encoding recursion (of kind @Type@)
type Rec0  = K1 R

-- | Tag for M1: datatype
data D
-- | Tag for M1: constructor
data C
-- | Tag for M1: record selector
data S

-- | Type synonym for encoding meta-information for datatypes
type D1 = M1 D

-- | Type synonym for encoding meta-information for constructors
type C1 = M1 C

-- | Type synonym for encoding meta-information for record selectors
type S1 = M1 S

-- | Datatype to represent the fixity of a constructor. An infix
-- declaration directly corresponds to an application of 'Infix'.
data Fixity = Prefix | Infix Infix0
  deriving ( Eq       -- ^ @since 4.6.0.0
           , Show     -- ^ @since 4.6.0.0
           , Ord      -- ^ @since 4.6.0.0
           )

data Infix0 = Infix0 {associativity : Associativity, fixity : Int} deriving (Eq, Show, Ord)

data Nat

-- | This variant of 'Fixity' appears at the type level.
data FixityI = PrefixI | InfixI InfixI0

data InfixI0 = InfixI0 {associativity : Associativity, fixity : Nat}

-- | Get the precedence of a fixity value.
prec : Fixity -> Int
prec Prefix      = 10
prec (Infix (Infix0 _ n)) = n

-- | Datatype to represent the associativity of a constructor
data Associativity = LeftAssociative
                   | RightAssociative
                   | NotAssociative
  deriving ( Eq       -- ^ @since 4.6.0.0
           , Show     -- ^ @since 4.6.0.0
           , Ord      -- ^ @since 4.6.0.0
           , Enum     -- ^ @since 4.9.0.0
           , Bounded  -- ^ @since 4.9.0.0
           )

-- | The unpackedness of a field as the user wrote it in the source code. For
-- example, in the following data type:
--
-- ```
-- data E = ExampleConstructor     Int
--            {\-\# NOUNPACK \#-\} Int
--            {\-\#   UNPACK \#-\} Int
-- ```
--
-- The fields of @ExampleConstructor@ have 'NoSourceUnpackedness',
-- 'SourceNoUnpack', and 'SourceUnpack', respectively.
data SourceUnpackedness = NoSourceUnpackedness
                        | SourceNoUnpack
                        | SourceUnpack
  deriving ( Eq      -- ^ @since 4.9.0.0
           , Show    -- ^ @since 4.9.0.0
           , Ord     -- ^ @since 4.9.0.0
           , Enum    -- ^ @since 4.9.0.0
           , Bounded -- ^ @since 4.9.0.0
           )

-- | The strictness of a field as the user wrote it in the source code. For
-- example, in the following data type:
--
-- ```
-- data E = ExampleConstructor Int ~Int !Int
-- ```
--
-- The fields of @ExampleConstructor@ have 'NoSourceStrictness',
-- 'SourceLazy', and 'SourceStrict', respectively.
data SourceStrictness = NoSourceStrictness
                      | SourceLazy
                      | SourceStrict
  deriving ( Eq      -- ^ @since 4.9.0.0
           , Show    -- ^ @since 4.9.0.0
           , Ord     -- ^ @since 4.9.0.0
           , Enum    -- ^ @since 4.9.0.0
           , Bounded -- ^ @since 4.9.0.0
           )

-- | The strictness that GHC infers for a field during compilation. Whereas
-- there are nine different combinations of 'SourceUnpackedness' and
-- 'SourceStrictness', the strictness that GHC decides will ultimately be one
-- of lazy, strict, or unpacked. What GHC decides is affected both by what the
-- user writes in the source code and by GHC flags. As an example, consider
-- this data type:
--
-- ```
-- data E = ExampleConstructor {\-\# UNPACK \#-\} !Int !Int Int
-- ```
--
-- * If compiled without optimization or other language extensions, then the
--   fields of @ExampleConstructor@ will have 'DecidedStrict', 'DecidedStrict',
--   and 'DecidedLazy', respectively.
--
-- * If compiled with @-XStrictData@ enabled, then the fields will have
--   'DecidedStrict', 'DecidedStrict', and 'DecidedStrict', respectively.
--
-- * If compiled with @-O2@ enabled, then the fields will have 'DecidedUnpack',
--   'DecidedStrict', and 'DecidedLazy', respectively.
data DecidedStrictness = DecidedLazy
                       | DecidedStrict
                       | DecidedUnpack
  deriving ( Eq      -- ^ @since 4.9.0.0
           , Show    -- ^ @since 4.9.0.0
           , Ord     -- ^ @since 4.9.0.0
           , Enum    -- ^ @since 4.9.0.0
           , Bounded -- ^ @since 4.9.0.0
           )

-- | Representable types of kind @*@.
-- This class is derivable in DAML with the @DeriveGeneric@ flag on.
--
-- A 'Generic' instance must satisfy the following laws:
--
-- ```
-- 'from' . 'to' ≡ 'Prelude.id'
-- 'to' . 'from' ≡ 'Prelude.id'
-- ```
--
-- [DA] we replaced the type family @Rep a@ with a second type parameter of the class @rep@.
class Generic a rep | a -> rep where
  -- | Convert from the datatype to its representation
  from  : a -> rep x
  -- | Convert from the representation to the datatype
  to    : rep x -> a


-- | Representable types of kind `* -> *` (or kind `k -> *`, when @PolyKinds@
-- is enabled).
-- This class is derivable in GHC with the @DeriveGeneric@ flag on.
--
-- A 'Generic1' instance must satisfy the following laws:
--
-- ```
-- 'from1' . 'to1' ≡ 'Prelude.id'
-- 'to1' . 'from1' ≡ 'Prelude.id'
-- ```
--
-- [DA] we replaced the type family @Rep1 f@ with a second type paremeter of the class @rep@.
class Generic1 (f : * -> Type) rep | f -> rep where
  -- | Convert from the datatype to its representation
  from1  : f a -> rep a
  -- | Convert from the representation to the datatype
  to1    : rep a -> f a

--------------------------------------------------------------------------------
-- Meta-data
--------------------------------------------------------------------------------

-- | Datatype to represent metadata associated with a datatype (@MetaData@),
-- constructor (@MetaCons@), or field selector (@MetaSel@).
--
-- * In @MetaData n m p nt@, @n@ is the datatype's name, @m@ is the module in
--   which the datatype is defined, @p@ is the package in which the datatype
--   is defined, and @nt@ is @'True@ if the datatype is a @newtype@.
--
-- * In @MetaCons n f s@, @n@ is the constructor's name, @f@ is its fixity,
--   and @s@ is @'True@ if the constructor contains record selectors.
--
-- * In @MetaSel mn su ss ds@, if the field uses record syntax, then @mn@ is
--   'Just' the record name. Otherwise, @mn@ is 'Nothing'. @su@ and @ss@ are
--   the field's unpackedness and strictness annotations, and @ds@ is the
--   strictness that GHC infers for the field.
data Meta = MetaData MetaData0
          | MetaCons MetaCons0
          | MetaSel  MetaSel0

data MetaData0 = MetaData0 {name : Symbol, module_ : Symbol, package : Symbol, isNewType : Bool}
data MetaCons0 = MetaCons0 {name : Symbol, fixity : FixityI, hasRecordSelectors : Bool}
data MetaSel0 = MetaSel0 {  mbRecordName : Optional Symbol
                          , sourceUnpackedness : SourceUnpackedness
                          , sourceStrictness : SourceStrictness
                          }
