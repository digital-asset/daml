-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
{-# OPTIONS_GHC -Wno-orphans #-}

#ifndef DAML_GENMAP

-- | HIDE
module DA.Set where

#else

-- | Note: This is only supported in DAML-LF 1.11 or later.
--
-- This module exports the generic set type `Set k` and associated
-- functions. This module should be imported qualified, for example:
--
-- ```
-- import DA.Set (Set)
-- import DA.Set qualified as S
-- ```
--
-- This will give access to the `Set` type, and the various operations
-- as `S.lookup`, `S.insert`, `S.fromList`, etc.
--
-- `Set k` internally uses the built-in order for the type `k`.
-- This means that keys that contain functions are not comparable
-- and will result in runtime errors. To prevent this, the `Ord k`
-- instance is required for most set operations. It is recommended to
-- only use `Set k` for key types that have an `Ord k` instance
-- that is derived automatically using `deriving`:
--
-- ```
-- data K = ...
--   deriving (Eq, Ord)
-- ```
--
-- This includes all built-in types that aren't function types, such as
-- `Int`, `Text`, `Bool`, `(a, b)` assuming `a` and `b` have default
-- `Ord` instances, `Optional t` and `[t]` assuming `t` has a
-- default `Ord` instance, `Map k v` assuming `k` and `v` have
-- default `Ord` instances, and `Set k` assuming `k` has a
-- default `Ord` instance.
module DA.Set
  ( Set
  , empty
  , size
  , toList
  , fromList
  , toMap
  , fromMap
  , member
  , null
  , insert
  , filter
  , delete
  , singleton
  , union
  , intersection
  , difference
  ) where

import DA.Set.Types
import DA.Map (Map)
import DA.Map qualified as M
import Prelude hiding (filter, null)

-- | The empty set.
empty : Set k
empty = Set M.empty

-- | The number of elements in the set.
size : Set k -> Int
size (Set m) = M.size m

-- | Convert the set to a list of elements.
toList : Set k -> [k]
toList (Set m) = [ k | (k, ()) <- M.toList m ]

-- | Create a set from a list of elements.
fromList : Ord k => [k] -> Set k
fromList ks = Set (M.fromList [ (k, ()) | k <- ks ])

-- | Convert a `Set` into a `Map`.
toMap : Set k -> Map k ()
toMap (Set m) = m

-- | Create a `Set` from a `Map`.
fromMap : Map k () -> Set k
fromMap = Set

-- | Is the element in the set?
member : Ord k => k -> Set k -> Bool
member k (Set m) = M.member k m

-- | Is this the empty set?
null : Set k -> Bool
null (Set m) = M.null m

-- | Insert an element in a set. If the set already contains the
-- element, this returns the set unchanged.
insert : Ord k => k -> Set k -> Set k
insert k (Set m) = Set (M.insert k () m)

-- | Filter all elements that satisfy the predicate.
filter : Ord k => (k -> Bool) -> Set k -> Set k
filter f (Set m) = Set (M.fromList [ (k, ()) | (k, _) <- M.toList m, f k ])

-- | Delete an element from a set.
delete : Ord k => k -> Set k -> Set k
delete k (Set m) = Set (M.delete k m)

-- | Create a singleton set.
singleton : Ord k => k -> Set k
singleton k = Set (M.fromList [(k, ())])

-- | The union of two sets.
union : Ord k => Set k -> Set k -> Set k
union (Set m1) (Set m2) = Set (M.union m1 m2)

-- | The intersection of two sets.
intersection : Ord k => Set k -> Set k -> Set k
intersection s1 s2 = filter (`member` s2) s1

-- | `difference x y` returns the set consisting of all
-- elements in `x` that are not in `y`.
--
-- >>> fromList [1, 2, 3] `difference` fromList [1, 4]
-- fromList [2, 3]
difference : Ord k => Set k -> Set k -> Set k
difference s1 s2 = filter (\x -> not (x `member` s2)) s1

deriving instance Ord k => Eq (Set k)
deriving instance Ord k => Ord (Set k)

instance (Ord k, Show k) => Show (Set k) where
  show s = "Set " <> show (toList s)

instance IsParties (Set Party) where
  toParties = toList

instance Ord k => Semigroup (Set k) where
  (<>) = union

instance Ord k => Monoid (Set k) where
  mempty = empty

instance DA.Internal.Record.HasField "map" (Set k) (Map k ()) where
  getField (Set m) = m
  setField m _ = Set m

#endif
