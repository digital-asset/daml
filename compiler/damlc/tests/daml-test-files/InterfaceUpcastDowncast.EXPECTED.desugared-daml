module InterfaceUpcastDowncast where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Assert ( (===) )
import DA.Optional ( isNone )
import DA.Functor ( void )
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => A = A GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep A where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch A where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface A A where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface A A where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod A "getOwner" (Party)
getOwner : A -> Party
getOwner = GHC.Types.primitiveInterface @"getOwner"
instance DA.Internal.Desugar.HasToAnyTemplate A where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate A where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep A where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory A where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver A where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate A where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType A where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq A where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive A where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice A DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice A DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded A DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @A cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @A cid pred)
instance DA.Internal.Desugar.HasExercise A DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @A cid)
        arg
instance DA.Internal.Desugar.HasChoiceController A DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver A DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasToAnyChoice A ChoiceA (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice A ChoiceA (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded A ChoiceA (Int) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @A cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @A cid pred)
instance DA.Internal.Desugar.HasExercise A ChoiceA (Int) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @A cid)
        arg
instance DA.Internal.Desugar.HasChoiceController A ChoiceA where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver A ChoiceA where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
data ChoiceA
  = ChoiceA {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice$_A$Archive :
  (DA.Internal.Desugar.Consuming A,
   A -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (A
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (A
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId A
   -> A
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_A$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_A$ChoiceA :
  (DA.Internal.Desugar.NonConsuming A,
   A -> ChoiceA -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (A
                                 -> ChoiceA -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (A
                                 -> ChoiceA -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId A
   -> A -> ChoiceA -> DA.Internal.Desugar.Update (Int))
_choice$_A$ChoiceA
  = (DA.Internal.Desugar.NonConsuming, 
     \ this arg@ChoiceA
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this arg@ChoiceA
       -> let _ = self in let _ = this in let _ = arg in do pure 10)
instance DA.Internal.Desugar.HasInterfaceView A EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView A EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlInterface => B = B GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep B where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch B where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface B B where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface B B where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires$_B_A : DA.Internal.Desugar.RequiresT B A
_requires$_B_A = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface B A where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface B A where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasMethod B "getCoolness" (Int)
getCoolness : B -> Int
getCoolness = GHC.Types.primitiveInterface @"getCoolness"
instance DA.Internal.Desugar.HasToAnyTemplate B where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate B where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep B where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory B where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver B where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate B where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType B where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq B where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive B where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice B DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice B DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded B DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @B cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @B cid pred)
instance DA.Internal.Desugar.HasExercise B DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @B cid)
        arg
instance DA.Internal.Desugar.HasChoiceController B DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver B DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasToAnyChoice B ChoiceB (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice B ChoiceB (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded B ChoiceB (Int) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @B cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @B cid pred)
instance DA.Internal.Desugar.HasExercise B ChoiceB (Int) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @B cid)
        arg
instance DA.Internal.Desugar.HasChoiceController B ChoiceB where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver B ChoiceB where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
data ChoiceB
  = ChoiceB {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice$_B$Archive :
  (DA.Internal.Desugar.Consuming B,
   B -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (B
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (B
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId B
   -> B
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_B$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_B$ChoiceB :
  (DA.Internal.Desugar.NonConsuming B,
   B -> ChoiceB -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (B
                                 -> ChoiceB -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (B
                                 -> ChoiceB -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId B
   -> B -> ChoiceB -> DA.Internal.Desugar.Update (Int))
_choice$_B$ChoiceB
  = (DA.Internal.Desugar.NonConsuming, 
     \ this arg@ChoiceB
       -> let _ = this in
          let _ = arg
          in DA.Internal.Desugar.toParties (getOwner (toInterface @A this)), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this arg@ChoiceB
       -> let _ = self in
          let _ = this in let _ = arg in do pure (getCoolness this))
instance DA.Internal.Desugar.HasInterfaceView B EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView B EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlTemplate => T1
  = T1 {p1 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p1" T1 Party where
  getField = DA.Internal.Record.getFieldPrim @"p1" @T1 @Party
  setField = DA.Internal.Record.setFieldPrim @"p1" @T1 @Party
instance DA.Internal.Desugar.HasSignatory T1 where
  signatory this@T1 {..}
    = DA.Internal.Desugar.toParties (p1)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T1 where
  observer this@T1 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T1 where
  ensure this@T1 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T1 where
  agreement this@T1 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T1 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T1 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T1 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T1 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T1 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T1 DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T1 DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T1$Archive :
  (DA.Internal.Desugar.Consuming T1,
   T1 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T1
   -> T1
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T1$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_T1_A_T1 :
  DA.Internal.Desugar.InterfaceInstance T1 A T1
_interface_instance$_T1_A_T1
  = DA.Internal.Desugar.mkInterfaceInstance @T1 @A @T1
_method$_T1_A_T1_getOwner :
  DA.Internal.Desugar.Method T1 A T1 "getOwner"
_method$_T1_A_T1_getOwner
  = DA.Internal.Desugar.mkMethod
      @T1
      @A
      @T1
      @"getOwner"
      \ this@T1 {..} -> let _ = this in let $getOwner = p1 in $getOwner
_view$_T1_A_T1 : DA.Internal.Desugar.InterfaceView T1 A T1
_view$_T1_A_T1
  = DA.Internal.Desugar.mkInterfaceView
      @T1
      @A
      @T1
      \ this@T1 {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface T1 A where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T1 A where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_interface_instance$_T1_B_T1 :
  DA.Internal.Desugar.InterfaceInstance T1 B T1
_interface_instance$_T1_B_T1
  = DA.Internal.Desugar.mkInterfaceInstance @T1 @B @T1
_method$_T1_B_T1_getCoolness :
  DA.Internal.Desugar.Method T1 B T1 "getCoolness"
_method$_T1_B_T1_getCoolness
  = DA.Internal.Desugar.mkMethod
      @T1
      @B
      @T1
      @"getCoolness"
      \ this@T1 {..}
        -> let _ = this in let $getCoolness = 20 in $getCoolness
_view$_T1_B_T1 : DA.Internal.Desugar.InterfaceView T1 B T1
_view$_T1_B_T1
  = DA.Internal.Desugar.mkInterfaceView
      @T1
      @B
      @T1
      \ this@T1 {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface T1 B where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T1 B where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data GHC.Types.DamlTemplate => T2
  = T2 {p2 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p2" T2 Party where
  getField = DA.Internal.Record.getFieldPrim @"p2" @T2 @Party
  setField = DA.Internal.Record.setFieldPrim @"p2" @T2 @Party
instance DA.Internal.Desugar.HasSignatory T2 where
  signatory this@T2 {..}
    = DA.Internal.Desugar.toParties (p2)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T2 where
  observer this@T2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T2 where
  ensure this@T2 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T2 where
  agreement this@T2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T2 DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T2 DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T2$Archive :
  (DA.Internal.Desugar.Consuming T2,
   T2 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T2
   -> T2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T2$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_T2_A_T2 :
  DA.Internal.Desugar.InterfaceInstance T2 A T2
_interface_instance$_T2_A_T2
  = DA.Internal.Desugar.mkInterfaceInstance @T2 @A @T2
_method$_T2_A_T2_getOwner :
  DA.Internal.Desugar.Method T2 A T2 "getOwner"
_method$_T2_A_T2_getOwner
  = DA.Internal.Desugar.mkMethod
      @T2
      @A
      @T2
      @"getOwner"
      \ this@T2 {..} -> let _ = this in let $getOwner = p2 in $getOwner
_view$_T2_A_T2 : DA.Internal.Desugar.InterfaceView T2 A T2
_view$_T2_A_T2
  = DA.Internal.Desugar.mkInterfaceView
      @T2
      @A
      @T2
      \ this@T2 {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface T2 A where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T2 A where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
useAction : Party -> (ContractId B -> Update ()) -> Update ()
useAction p action
  = do cid <- create (toInterface @A (T2 p))
       action (fromInterfaceContractId @B cid)
data GHC.Types.DamlTemplate => Test
  = Test {p : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @Test @Party
data TemplateInterfaceMatching
  = TemplateInterfaceMatching {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data VoidUseAction
  = VoidUseAction {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data FetchUseAction
  = FetchUseAction {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data ExerciseUseAction
  = ExerciseUseAction {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasSignatory Test where
  signatory this@Test {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Test where
  observer this@Test {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Test where
  ensure this@Test {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Test where
  agreement this@Test {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Test where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Test where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Test where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Test where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Test where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Test where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Test where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Test DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test TemplateInterfaceMatching (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test TemplateInterfaceMatching (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test TemplateInterfaceMatching (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test TemplateInterfaceMatching where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test TemplateInterfaceMatching where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test VoidUseAction (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test VoidUseAction (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test VoidUseAction (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test VoidUseAction where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test VoidUseAction where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test FetchUseAction (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test FetchUseAction (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test FetchUseAction (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test FetchUseAction where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test FetchUseAction where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test ExerciseUseAction (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test ExerciseUseAction (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test ExerciseUseAction (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test ExerciseUseAction where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test ExerciseUseAction where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Test$Archive :
  (DA.Internal.Desugar.Consuming Test,
   Test -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Test$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Test$TemplateInterfaceMatching :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> TemplateInterfaceMatching -> DA.Internal.Desugar.Update (()))
_choice$_Test$TemplateInterfaceMatching
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@TemplateInterfaceMatching
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@TemplateInterfaceMatching
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do let t1 = T1 p
               let t2 = T2 p
               let t1b = toInterface @B t1
               let t1a = toInterface @A t1b
               let t2a = toInterface @A t2
               Some t1 === fromInterface @T1 t1b
               Some t1 === fromInterface @T1 t1a
               Some t1 === (fromInterface @B t1a >>= fromInterface @T1)
               Some t2 === fromInterface @T2 t2a
               None === (fromInterface @B t2a >> pure ())
               getCoolness t1b === 20
               getOwner t1a === p
               cidt1 <- create t1
               cidt2 <- create t2
               let cidt1b = toInterfaceContractId @B cidt1
               let cidt1a = toInterfaceContractId @A cidt1
               cidt1a === toInterfaceContractId @A cidt1b
               let cidt2a = toInterfaceContractId @A cidt2
               cidt1b === fromInterfaceContractId cidt1a
               fetchPair1 <- fetchFromInterface @B cidt1a
               fetchPair2 <- fetchFromInterface @B cidt2a
               assertMsg
                 "fetchPair1 != Some (cidt1b, t1b)"
                 (fetchPair1 == Some userWrittenTuple (cidt1b, t1b))
               assertMsg "fetchPair2 != None" (isNone fetchPair2)
               exercise cidt1a ChoiceA
               exercise cidt1b ChoiceB
               pure ())
_choice$_Test$VoidUseAction :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> VoidUseAction -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> VoidUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> VoidUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> VoidUseAction -> DA.Internal.Desugar.Update (()))
_choice$_Test$VoidUseAction
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@VoidUseAction
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@VoidUseAction
       -> let _ = self in
          let _ = this in let _ = arg in do useAction p $ \ _bcid -> pure ())
_choice$_Test$FetchUseAction :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> FetchUseAction -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> FetchUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> FetchUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> FetchUseAction -> DA.Internal.Desugar.Update (()))
_choice$_Test$FetchUseAction
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@FetchUseAction
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@FetchUseAction
       -> let _ = self in
          let _ = this in
          let _ = arg in do useAction p $ \ bcid -> void (fetch bcid))
_choice$_Test$ExerciseUseAction :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> ExerciseUseAction -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> ExerciseUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> ExerciseUseAction -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> ExerciseUseAction -> DA.Internal.Desugar.Update (()))
_choice$_Test$ExerciseUseAction
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@ExerciseUseAction
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@ExerciseUseAction
       -> let _ = self in
          let _ = this in
          let _ = arg
          in do useAction p $ \ bcid -> void (exercise bcid ChoiceB))
exerciseTest : Choice Test c () => c -> Script ()
exerciseTest c
  = script
      do p <- allocateParty "Alice"
         p `submit` createAndExerciseCmd (Test p) c
         pure ()
templateInterfaceMatching = exerciseTest TemplateInterfaceMatching
voidUseAction = exerciseTest VoidUseAction
fetchUseAction = exerciseTest FetchUseAction
exerciseUseAction = exerciseTest ExerciseUseAction
