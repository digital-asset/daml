module InterfaceUpcastDowncast where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Assert ( (===) )
import DA.Optional ( isNone )
import DA.Functor ( void )
data GHC.Types.DamlInterface => A = A GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep A where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch A where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface A A where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface A A where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod A "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t A => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @A t)
instance DA.Internal.Desugar.HasToAnyTemplate A where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate A where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep A where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory A where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver A where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate A where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure A where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType A where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq A where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t A) =>
         DA.Internal.Desugar.HasToAnyChoice t ChoiceA (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t A) =>
         DA.Internal.Desugar.HasFromAnyChoice t ChoiceA (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t A)) =>
         DA.Internal.Desugar.HasExerciseGuarded t ChoiceA (Int) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @A cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @A cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t A)) =>
         DA.Internal.Desugar.HasExercise t ChoiceA (Int) where
  exercise = DA.Internal.Desugar._exerciseDefault
data ChoiceA
  = ChoiceA {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_AChoiceA :
  (A -> ChoiceA -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId A
   -> A -> ChoiceA -> DA.Internal.Desugar.Update (Int),
   DA.Internal.Desugar.NonConsuming A,
   DA.Internal.Desugar.Optional (A
                                 -> ChoiceA -> [DA.Internal.Desugar.Party]))
_choice_AChoiceA
  = (\ this arg@ChoiceA
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@ChoiceA
       -> let _ = self in let _ = this in let _ = arg in do pure 10, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
data GHC.Types.DamlInterface => B = B GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep B where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch B where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface B B where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface B B where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_B_A : DA.Internal.Desugar.RequiresT B A
_requires_B_A = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface B A where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface B A where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasMethod B "getCoolness" (Int)
getCoolness : DA.Internal.Desugar.Implements t B => t -> Int
getCoolness t
  = GHC.Types.primitiveInterface
      @"getCoolness" (DA.Internal.Desugar._toInterface @_ @B t)
instance DA.Internal.Desugar.HasToAnyTemplate B where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate B where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep B where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory B where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver B where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate B where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure B where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType B where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq B where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t B) =>
         DA.Internal.Desugar.HasToAnyChoice t ChoiceB (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t B) =>
         DA.Internal.Desugar.HasFromAnyChoice t ChoiceB (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t B)) =>
         DA.Internal.Desugar.HasExerciseGuarded t ChoiceB (Int) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @B cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @B cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t B)) =>
         DA.Internal.Desugar.HasExercise t ChoiceB (Int) where
  exercise = DA.Internal.Desugar._exerciseDefault
data ChoiceB
  = ChoiceB {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_BChoiceB :
  (B -> ChoiceB -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId B
   -> B -> ChoiceB -> DA.Internal.Desugar.Update (Int),
   DA.Internal.Desugar.NonConsuming B,
   DA.Internal.Desugar.Optional (B
                                 -> ChoiceB -> [DA.Internal.Desugar.Party]))
_choice_BChoiceB
  = (\ this arg@ChoiceB
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@ChoiceB
       -> let _ = self in
          let _ = this in let _ = arg in do pure (getCoolness this), 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => T1
  = T1 {p1 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p1" T1 Party where
  getField = DA.Internal.Record.getFieldPrim @"p1" @T1 @Party
  setField = DA.Internal.Record.setFieldPrim @"p1" @T1 @Party
instance DA.Internal.Desugar.HasSignatory T1 where
  signatory this@T1 {..}
    = DA.Internal.Desugar.toParties (p1)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T1 where
  observer this@T1 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T1 where
  ensure this@T1 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T1 where
  agreement this@T1 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T1 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T1 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T1 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T1 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T1 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_T1Archive :
  (T1 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T1
   -> T1
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T1,
   DA.Internal.Desugar.Optional (T1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_T1Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_T1_A : DA.Internal.Desugar.ImplementsT T1 A
_implements_T1_A = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T1 A where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T1 A where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T1_A_getOwner : DA.Internal.Desugar.Method T1 A "getOwner"
_method_T1_A_getOwner
  = DA.Internal.Desugar.mkMethod
      @T1
      @A
      @"getOwner"
      (\ this@T1 {..} -> let _ = this in let getOwner = p1 in getOwner)
_implements_T1_B : DA.Internal.Desugar.ImplementsT T1 B
_implements_T1_B = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T1 B where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T1 B where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T1_B_getCoolness :
  DA.Internal.Desugar.Method T1 B "getCoolness"
_method_T1_B_getCoolness
  = DA.Internal.Desugar.mkMethod
      @T1
      @B
      @"getCoolness"
      (\ this@T1 {..}
         -> let _ = this in let getCoolness = 20 in getCoolness)
data GHC.Types.DamlTemplate => T2
  = T2 {p2 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p2" T2 Party where
  getField = DA.Internal.Record.getFieldPrim @"p2" @T2 @Party
  setField = DA.Internal.Record.setFieldPrim @"p2" @T2 @Party
instance DA.Internal.Desugar.HasSignatory T2 where
  signatory this@T2 {..}
    = DA.Internal.Desugar.toParties (p2)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T2 where
  observer this@T2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T2 where
  ensure this@T2 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T2 where
  agreement this@T2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_T2Archive :
  (T2 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T2
   -> T2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T2,
   DA.Internal.Desugar.Optional (T2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_T2Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_T2_A : DA.Internal.Desugar.ImplementsT T2 A
_implements_T2_A = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T2 A where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T2 A where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T2_A_getOwner : DA.Internal.Desugar.Method T2 A "getOwner"
_method_T2_A_getOwner
  = DA.Internal.Desugar.mkMethod
      @T2
      @A
      @"getOwner"
      (\ this@T2 {..} -> let _ = this in let getOwner = p2 in getOwner)
main
  = scenario
      do p <- getParty "Alice"
         submit
           p
           do let t1 = T1 p
              let t2 = T2 p
              let t1b = toInterface @B t1
              let t1a = toInterface @A t1b
              let t2a = toInterface @A t2
              Some t1 === fromInterface @T1 t1b
              Some t1 === fromInterface @T1 t1a
              Some t1 === (fromInterface @B t1a >>= fromInterface @T1)
              Some t2 === fromInterface @T2 t2a
              None === (fromInterface @B t2a >> pure ())
              getCoolness t1 === 20
              getCoolness t1b === 20
              getOwner t1 === p
              getOwner t1a === p
              getOwner t1b === p
              cidt1 <- create t1
              cidt2 <- create t2
              let cidt1b = toInterfaceContractId @B cidt1
              let cidt1a = toInterfaceContractId @A cidt1
              cidt1a === toInterfaceContractId @A cidt1b
              let cidt2a = toInterfaceContractId @A cidt2
              cidt1b === fromInterfaceContractId cidt1a
              fetchPair1 <- fetchFromInterface @B cidt1a
              fetchPair2 <- fetchFromInterface @B cidt2a
              assertMsg
                "fetchPair1 != Some (cidt1b, t1b)"
                (fetchPair1 == Some (cidt1b, t1b))
              assertMsg "fetchPair2 != None" (isNone fetchPair2)
              exercise cidt1a ChoiceA
              exercise cidt1b ChoiceA
              exercise cidt1b ChoiceB
              exercise cidt1 ChoiceA
              exercise cidt1 ChoiceB
              pure ()
         let useAction : (ContractId B -> Update ()) -> Update ()
             useAction action
               = do cid <- create (toInterface @A (T2 p))
                    action (fromInterfaceContractId @B cid)
         submit p do useAction $ \ _bcid -> pure ()
         submitMustFail p do useAction $ \ bcid -> void (fetch bcid)
         submitMustFail
           p do useAction $ \ bcid -> void (exercise bcid ChoiceA)
         submitMustFail
           p do useAction $ \ bcid -> void (exercise bcid ChoiceB)
