-- @WARN range=9:1-9:19; Modules importing DA.Generics do not work with data-dependencies.
-- @WARN range=13:1-13:46; Using the kind Symbol in combination with type classes
-- @WARN range=16:10-16:27; Using type-level strings in combination with type classes
-- @WARN range=19:1-19:51; Using the kind Symbol in combination with type classes
-- @WARN range=22:1-22:34; Using the kind Meta in combination with type classes
-- @WARN range=25:10-25:59; Using the type 'MetaData in combination with type classes
module ErasedTypesWarnings where

import DA.Generics
import DA.Record

-- We warn about explicitly using `Symbol` in a class definition.
class KnownSymbol (x: GHC.Types.Symbol) where

-- We warn about using a type-evel string in an instance.
instance KnownSymbol "foo" where

-- We warn about implicitly using `Symbol` in a class definition.
class HasField x r a => ReallyHasField x r a where

-- We warn about using generics stuff in a class definition.
class Generically (a: Meta) where

-- We warn about using generics stuff in an instance.
instance Generically (MetaData ('MetaData0 "" "" "" True)) where

-- We do not warn about the imlicitly created `HasField` instance.
data MonoRec = MonoRec with mono: Int

-- We do not warn about `HasField` even for polymorphic records.
data PolyRec a = PolyRec with poly: a
