-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- Temporarily disable this test to merge #14773
-- Re-enable in subsequent PR
-- @IGNORE
-- @SINCE-LF-FEATURE DAML_INTERFACE

-- | Test interface conversion functions specifically.
module InterfaceConversions where

import DA.Assert ((===))
import DA.Functor (void)

data EmptyInterfaceView = EmptyInterfaceView {}

interface Iface where
    viewtype EmptyInterfaceView
    getOwner : Party
    choice MyChoice : ()
        controller getOwner this
        do pure ()

template Template1
    with
        owner1: Party
        value1: Int
    where
        signatory owner1
        interface instance Iface for Template1 where
            view = EmptyInterfaceView
            getOwner = owner1

template Template2
    with
        owner2: Party
        value2: Text
    where
        signatory owner2
        interface instance Iface for Template2 where
            view = EmptyInterfaceView
            getOwner = owner2

main = scenario do
    p <- getParty "Alice"
    let template1 = Template1 p 10
        template2 = Template2 p "Hi"
        iface1 = toInterface @Iface template1
        iface2 = toInterface @Iface template2
    fromInterface @Template1 iface1 === Some template1
    fromInterface @Template2 iface1 === None
    fromInterface @Template1 iface2 === None
    fromInterface @Template2 iface2 === Some template2

    p `submit` do
        templateCid1 <- create template1
        templateCid2 <- create template2
        let ifaceCid1 = toInterfaceContractId @Iface templateCid1
            ifaceCid2 = toInterfaceContractId @Iface templateCid2

        fromInterfaceContractId ifaceCid1 === templateCid1
        fromInterfaceContractId ifaceCid2 === templateCid2

        x1 <- fetchFromInterface @Template1 ifaceCid1
        x2 <- fetchFromInterface @Template2 ifaceCid1
        x3 <- fetchFromInterface @Template1 ifaceCid2
        x4 <- fetchFromInterface @Template2 ifaceCid2

        x1 === Some (templateCid1, template1)
        x2 === None
        x3 === None
        x4 === Some (templateCid2, template2)

    -- Test that using fromInterfaceContractId incorrectly will result
    -- in failed fetch/exercise/archives. I.e. using a Template1 contract
    -- id as if it were a Template2 contract id will always fail, even
    -- for actions that make sense for the common interface Iface.
    let useAction : (ContractId Template2 -> Update ()) -> Update ()
        useAction action = do
            cid <- create (toInterface @Iface (Template1 p 10))
            action (fromInterfaceContractId @Template2 cid)
    submit p do useAction $ \_cid -> pure ()
    submitMustFail p do useAction $ \cid -> void (fetch cid)
    submitMustFail p do useAction $ \cid -> exercise cid MyChoice
    submitMustFail p do useAction $ \cid -> archive cid

-- @ENABLE-SCENARIOS
