-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @SINCE-LF 1.8
-- @QUERY-LF [ .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$minimalFoo"]) ] | length == 1
-- @QUERY-LF [ .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$minimalBar"]) ] | length == 0
-- @QUERY-LF [ .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$minimalBaz"]) ] | length == 0
-- @QUERY-LF [ .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$minimalDummy"]) ] | length == 1
module MinimalDef where

class Foo t where
    {-# MINIMAL foo1 | foo2 #-}

    foo1 : t -> Int
    foo1 x = foo1 x + 1

    foo2 : t -> Int
    foo2 x = foo2 x + 1

class Bar t where
    bar1 : t -> Int
    bar2 : t -> Int
    bar2 _ = 20

class Baz t where
    baz1 : t -> Int
    baz2 : t -> Int
    baz3 : t -> Int
    baz3 _ = 30

-- @WARN The MINIMAL pragma does not require: 'dummy' but there is no default implementation.
class Dummy t where
    {-# MINIMAL #-}
    dummy : t -> Bool
