-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.


module Optional where

import Daml.Script
import DA.Optional
import DA.Assert
import ScriptAssertHelpers

template Foo
  with
    p : Party
  where
    signatory p

    nonconsuming choice ConsumeIfPositive : ()
      with x : Int
           cid : ContractId Foo
      controller p
      do if x > 0
           then archive cid
           else pure ()

-- @ERROR range=27:1-27:13; fromSome: None
testFromSome = script @(Optional ()) do
  "abc" === fromSome (Some "abc")
  pure $ fromSome None

-- @ERROR range=32:1-32:17; testFromSomeNoteError
testFromSomeNote = script @(Optional ()) do
  "abc" === fromSomeNote "testFromSomeNoteWrongError" (Some "abc")
  pure $ fromSomeNote "testFromSomeNoteError" None

testCatOptionals = script do
  [1, 2, 3] === catOptionals [None, Some 1, None, Some 2, None, None, Some 3, None]
  [] === catOptionals ([] : [Optional Int])
  [] === catOptionals ([None, None] : [Optional Int])

testListToOptional = script do
  Some 1 === listToOptional [1]
  Some "ab" === listToOptional ["ab", "cd"]
  None === listToOptional ([] : [Decimal])

testOptionalToList = script do
  [1] === optionalToList (Some 1)
  [] === optionalToList (None : Optional Decimal)

testFromOptional = script do
  1 === fromOptional 0 (Some 1)
  (2.3 : Decimal) === fromOptional 2.3 None

testIsSome = script do
  True === isSome (Some "a")
  True === isSome (Some True)
  True === isSome (Some identity)
  False === isSome (None : Optional Int)

testIsNone = script do
  False === isNone (Some "a")
  False === isNone (Some False)
  False === isNone (Some None)
  True === isNone None

testMapOptional = script do
  [1, 4, 5] === mapOptional (\x -> if x > 0 then Some x else None) [1, -3, 4, 5, 0]
  [] === mapOptional Some ([] : [Int])
  [] === mapOptional (const (None : Optional Text)) [1, 2, 3, 4]

testWhenSome = script do
  p <- allocateParty "p"
  cid <- submit p (createCmd Foo with p)
  whenSome None (\x -> submit p $ exerciseCmd cid $ ConsumeIfPositive x cid)
  p `canSee` cid
  whenSome (Some (-5)) (\x -> submit p $ exerciseCmd cid $ ConsumeIfPositive x cid)
  p `canSee` cid
  whenSome (Some 5) (\x -> submit p $ exerciseCmd cid $ ConsumeIfPositive x cid)
  p `cantSee` cid

testFindOptional = script do
  findOptional toLeft [] === (None : Optional ())
  findOptional toLeft [Right 1] === (None : Optional ())
  findOptional toLeft [Right 1, Left 2] === Some 2
  findOptional toLeft [Right 1, Left 2, Left 3] === Some 2

toLeft : Either a b -> Optional a
toLeft (Left a) = Some a
toLeft (Right _) = None
