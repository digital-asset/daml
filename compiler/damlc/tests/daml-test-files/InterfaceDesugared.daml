-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE
-- @WARN Modules compiled with the DatatypeContexts language extension
{-# LANGUAGE DatatypeContexts #-}

-- | The "desugared" counterpart to Interface.daml
-- Please keep in sync with Interface.daml
module InterfaceDesugared where

import DA.Assert ((===))

data Split = Split { splitAmount : Int }

data Transfer = Transfer { newOwner : Party }

data Noop = Noop { nothing : () }

data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque

class
  ( HasExercise t Split (ContractId Token, ContractId Token)
  , HasExercise t Transfer (ContractId Token)
  , HasExercise t Noop ()
  ) => IsToken t where
  toToken : t -> Token
  fromToken : Token -> Optional t
  toTokenContractId : ContractId t -> ContractId Token
  fromTokenContractId : ContractId Token -> Update (Optional (ContractId t))
  getAmount : t -> Int

instance HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"

instance HasExercise Token Split (ContractId Token, ContractId Token) where
  exercise = GHC.Types.primitive @"UExerciseInterface"

instance HasExercise Token Transfer (ContractId Token) where
  exercise = GHC.Types.primitive @"UExerciseInterface"

instance HasExercise Token Noop () where
  exercise = GHC.Types.primitive @"UExerciseInterface"

instance IsToken Token where
  toToken = GHC.Types.primitive @"EToInterface"
  fromToken = GHC.Types.primitive @"EFromInterface"
  toTokenContractId = GHC.Types.primitive @"EToInterfaceContractId"
  fromTokenContractId = GHC.Types.primitive @"UFromInterfaceContractId"
  getAmount = GHC.Types.primitiveInterface @"getAmount"

_interface_choice_TokenTransfer :
  (DA.Internal.Desugar.ContractId Token
   -> Token
      -> Transfer -> DA.Internal.Desugar.Update (ContractId Token),
   DA.Internal.Desugar.Consuming Token)
_interface_choice_TokenTransfer
  = (error "", DA.Internal.Desugar.Consuming)
_interface_choice_TokenSplit :
  (DA.Internal.Desugar.ContractId Token
   -> Token
      -> Split
         -> DA.Internal.Desugar.Update ((ContractId Token,
                                         ContractId Token)),
   DA.Internal.Desugar.Consuming Token)
_interface_choice_TokenSplit
  = (error "", DA.Internal.Desugar.Consuming)

_interface_choice_TokenNoop :
  (DA.Internal.Desugar.ContractId Token -> Token -> Noop
    -> DA.Internal.Desugar.Update (),
   DA.Internal.Desugar.NonConsuming Token)
_interface_choice_TokenNoop
  = (error "", DA.Internal.Desugar.NonConsuming)

data Asset = Asset { amount : Int, issuer : Party, owner : Party }
  deriving (Eq, Show)

instance IsToken Asset where
  toToken = GHC.Types.primitive @"EToInterface"
  fromToken = GHC.Types.primitive @"EFromInterface"
  toTokenContractId = GHC.Types.primitive @"EToInterfaceContractId"
  fromTokenContractId = GHC.Types.primitive @"UFromInterfaceContractId"
  getAmount Asset{..} = amount

_implements_AssetToken : DA.Internal.Desugar.Implements Asset Token
_implements_AssetToken = DA.Internal.Desugar.Implements

instance HasCreate Asset where
  create = GHC.Types.primitive @"UCreate"

instance HasSignatory Asset where
  signatory Asset{..} = [issuer, owner]

instance HasEnsure Asset where
  ensure _ = True

instance HasAgreement Asset where
  agreement _ = ""

instance HasObserver Asset where
  observer _ = []

instance HasFetch Asset where
  fetch = GHC.Types.primitive @"UFetch"

instance HasExercise Asset Transfer (ContractId Token) where
  exercise = GHC.Types.primitive @"UExercise"

instance HasExercise Asset Archive () where
  exercise = GHC.Types.primitive @"UExercise"

instance HasExercise Asset Split (ContractId Token, ContractId Token) where
  exercise = GHC.Types.primitive @"UExercise"

instance HasExercise Asset Noop () where
  exercise = GHC.Types.primitive @"UExercise"

instance HasArchive Asset where
  archive cid = exercise cid Archive

_choice_AssetTransfer :
  ( Asset -> Transfer -> [DA.Internal.Desugar.Party]
  , DA.Internal.Desugar.ContractId Asset -> Asset -> Transfer -> DA.Internal.Desugar.Update (ContractId Token)
  , DA.Internal.Desugar.Consuming Asset
  , DA.Internal.Desugar.Optional (Asset -> Transfer -> [DA.Internal.Desugar.Party])
  )
_choice_AssetTransfer =
  ( \Asset{..} Transfer{..} -> [owner, newOwner]
  , \_ this Transfer{..} -> do
      cid <- create this with owner = newOwner
      pure (toTokenContractId cid)
  , DA.Internal.Desugar.Consuming
  , DA.Internal.Desugar.None
  )

_choice_AssetArchive :
  ( Asset -> Archive -> [DA.Internal.Desugar.Party]
  , DA.Internal.Desugar.ContractId Asset -> Asset -> Archive -> DA.Internal.Desugar.Update ()
  , DA.Internal.Desugar.Consuming Asset
  , DA.Internal.Desugar.Optional (Asset -> Archive -> [DA.Internal.Desugar.Party])
  )
_choice_AssetArchive =
  ( \a _ -> signatory a
  , \_ _ _ -> pure ()
  , DA.Internal.Desugar.Consuming
  , DA.Internal.Desugar.None
  )

_choice_AssetSplit :
  ( Asset -> Split -> [DA.Internal.Desugar.Party]
  , DA.Internal.Desugar.ContractId Asset -> Asset -> Split -> DA.Internal.Desugar.Update (ContractId Token, ContractId Token)
  , DA.Internal.Desugar.Consuming Asset
  , DA.Internal.Desugar.Optional (Asset -> Split -> [DA.Internal.Desugar.Party])
  )
_choice_AssetSplit =
  ( \a _ -> [a.owner]
  , \_ this@Asset{..} Split{..} -> do
      assert (splitAmount < amount)
      cid1 <- create this with amount = splitAmount
      cid2 <- create this with amount = amount - splitAmount
      pure (toTokenContractId cid1, toTokenContractId cid2)
  , DA.Internal.Desugar.Consuming
  , DA.Internal.Desugar.None
  )

_choice_AssetNoop :
  ( Asset -> Noop -> [DA.Internal.Desugar.Party]
  , DA.Internal.Desugar.ContractId Asset -> Asset -> Noop -> DA.Internal.Desugar.Update ()
  , DA.Internal.Desugar.NonConsuming Asset
  , DA.Internal.Desugar.Optional (Asset -> Noop -> [DA.Internal.Desugar.Party])
  )
_choice_AssetNoop =
  ( \a _ -> [a.owner]
  , \_ _ _ -> pure ()
  , DA.Internal.Desugar.NonConsuming
  , DA.Internal.Desugar.None
  )

main = scenario do
  p <- getParty "Alice"
  p `submit` do
    cidAsset1 <- create Asset with
      issuer = p
      owner = p
      amount = 15
    let cidToken1 = toTokenContractId cidAsset1
    _ <- exercise cidToken1 (Noop ())
    (cidToken2, cidToken3) <- exercise cidToken1 (Split 10)
    token2 <- fetch cidToken2
    getAmount token2 === 10
    case fromToken token2 of
      None -> abort "expected Asset"
      Some Asset {amount} ->
        amount === 10
    token3 <- fetch cidToken3
    getAmount token3 === 5
    case fromToken token3 of
      None -> abort "expected Asset"
      Some Asset {amount} ->
        amount === 5
    pure ()
