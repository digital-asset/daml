-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- Here we test that evaluation order proceeds as we expect. We do this by
-- raising multiple errors and seeing which one percolates to the top (i.e.
-- which error was evaluated first).
--
-- (Convention: When testing a rule in the operational semantics, we use the
-- rule's name in the error message itself. If there are multiple tests for
-- the same rule, we use `R_1`, `R_2`, `R_3`, and so on. This is why there is
-- `evExpRecUpdErr1`, `evExpRecUpdErr2_1`, and `evExpRecUpdErr2_2`, for example.)
--
-- @ERROR Aborted: overApply OK
-- @ERROR Aborted: EvExpAppErr1 OK
-- @ERROR Aborted: EvExpAppErr2 OK
-- @ERROR Aborted: EvExpLetErr OK
-- @ERROR Aborted: ghcReordersMultiLets OK
-- @ERROR Aborted: EvExpCaseErr OK
-- @ERROR Aborted: EvExpCase_1 OK
-- @ERROR Aborted: EvExpCase_2 OK
-- @ERROR Aborted: EvExpConsErr1 OK
-- @ERROR Aborted: EvExpConsErr2 OK
-- @ERROR Aborted: EvExpBuiltinErr OK
-- @ERROR Aborted: EvExpRecConErr_1 OK
-- @ERROR Aborted: EvExpRecConErr_2 OK
-- @ERROR Aborted: EvExpRecConErr_3 OK
-- @ERROR Aborted: EvExpRecConErr_4 OK
-- @ERROR Aborted: EvExpRecUpdErr1 OK
-- @ERROR Aborted: EvExpRecUpdErr2_1 OK
-- @ERROR Aborted: EvExpRecUpdErr2_2 OK
-- @ERROR Aborted: EvExpUpPureErr OK
-- @ERROR Aborted: EvExpUpBindErr OK
-- @ERROR Aborted: EvExpUpCreateErr OK
-- @ERROR Aborted: EvExpUpFetchErr OK
-- @ERROR Aborted: EvExpUpExerciseWithoutActorsErr1 OK
-- @ERROR Aborted: EvExpUpExerciseWithoutActorsErr2 OK
-- @ERROR Aborted: EvExpUpFetchByKeyErr OK
-- @ERROR Aborted: EvExpUpLookupByKeyErr OK
-- @ERROR Aborted: abort2 OK
-- @ERROR Aborted: EvUpdBindErr1_1 OK
-- @ERROR Aborted: EvUpdBindErr1_2 OK
-- @ERROR Aborted: EvUpdBindErr2 OK
-- @ERROR Aborted: EvUpdBindErr3 OK
-- @ERROR Aborted: EvUpdCreateErr1 OK
-- @ERROR Template pre-condition violated in: create SemanticsEvalOrder:T_EvUpdCreateFail
-- @ERROR Aborted: EvUpdCreateErr2 OK
-- @ERROR Aborted: EvUpdCreateErr3 OK
-- @ERROR Aborted: EvUpdCreateErr4_1 OK
-- @ERROR Aborted: EvUpdCreateErr4_2 OK
-- @ERROR Aborted: EvUpdCreateWithKeyErr1 OK
-- @ERROR Aborted: EvUpdCreateWithKeyErr2 OK
module SemanticsEvalOrder where

overApply = scenario do
  let f x = error "overApply OK"
  let _ = f 1 (error "overApply Failed")
  let _ = f 1 2
  pure ()

evExpAppErr1 = scenario do
  let _ = (error "EvExpAppErr1 OK") (error "EvExpAppErr1 failed")
  pure ()

evExpAppErr2 = scenario do
  let f _ _ = error "EvExpAppErr2 failed"
  let _ = f 1 (error "EvExpAppErr2 OK")
  pure ()

evExpLetErr = scenario do
    let _ = error "EvExpLetErr OK"
    let _ = error "EvExpLetErr bad"
    error "EvExpLetErr failed"

-- | The following "multiple-binding let" behavior is caused by GHC.
-- This is tracked in issue #6788. We would love to get rid of this
-- reordering behavior, but it's very much tied with a part of GHC
-- that we don't control. So we track this behavior here.
ghcReordersMultiLets = scenario do
    let _ = error "ghcReordersMultiLets failed in a good way -- close the issue & update the test"
        _ = error "ghcReordersMultiLets OK"
    error "ghcReordersMultiLets failed in a bad way"

evExpCaseErr = scenario do
  case error "EvExpCaseErr OK" of
    None -> error "EvExpCaseErr failed"
    Some _ -> error "EvExpCaseErr failed"

evExpCase_1 = scenario do
  case None of
    None -> error "EvExpCase_1 OK"
    Some _ -> error "EvExpCase_1 failed"

evExpCase_2 = scenario do
  case Some 1 of
    None -> error "EvExpCase_2 failed"
    Some _ -> error "EvExpCase_2 OK"

evExpConsErr1 = scenario do
  pure ( error "EvExpConsErr1 OK"
      :: error "EvExpConsErr1 failed"
      :: error "EvExpConsErr1 failed")

evExpConsErr2 = scenario do
  pure ( 10
      :: error "EvExpConsErr2 OK"
      :: error "EvExpConsErr2 failed")

evExpBuiltinErr = scenario do
  let _ : Int = error "EvExpBuiltinErr OK" + error "EvExpBuiltinErr failed"
  pure ()


data R1 = R1 { a: Int, b: Int }

evExpRecConErr_1 = scenario do
  pure R1 { a = error "EvExpRecConErr_1 OK", b = error "EvExpRecConErr_1 failed" }

evExpRecConErr_2 = scenario do
  pure R1 { b = error "EvExpRecConErr_2 failed", a = error "EvExpRecConErr_2 OK" }

data R2 = R2 { d: Int, c: Int }
  -- ^ Checking that there isn't a dependence on the field names.
  -- There should be a dependence on the definition order according to the LF spec.

evExpRecConErr_3 = scenario do
  pure R2 { d = error "EvExpRecConErr_3 OK", c = error "EvExpRecConErr_3 failed" }

evExpRecConErr_4 = scenario do
  pure R2 { c = error "EvExpRecConErr_4 failed", d = error "EvExpRecConErr_4 OK"  }

evExpRecUpdErr1 = scenario do
  pure (error "EvExpRecUpdErr1 OK" : R1)
    { a = error "EvExpRecUpdErr1 failed", b = error "EvExpRecUpdErr1 failed" }

evExpRecUpdErr2_1 = scenario do
  pure (R1 {a=0, b=0})
    { a = error "EvExpRecUpdErr2_1 OK", b = error "EvExpRecUpdErr2_1 failed" }

evExpRecUpdErr2_2 = scenario do
  pure (R1 {a=0, b=0})
    { b = error "EvExpRecUpdErr2_2 OK", a = error "EvExpRecUpdErr2_2 failed" }
  -- ^ Note that record update depends on the order the fields appear in
  -- code, rather than the order in which fields were defined.

-- Can't test LF struct evaluation order from DAML, since we purposely avoid
-- evaluation of struct fields during typeclass desugaring, and we don't have
-- a way to construct LF structs directly.

evExpUpPureErr = scenario do
  let _ : Update () = pure (error "EvExpUpPureErr OK")
  pure ()

evExpUpBindErr = scenario do
  let _ : Update () = do
          error "EvExpUpBindErr OK"
          error "EvExpUpBindErr failed"
  pure ()

template T
  with p : Party
  where signatory p

evExpUpCreateErr = scenario do
  let _ : Update (ContractId T) = create (error "EvExpUpCreateErr OK")
  pure ()

evExpUpFetchErr = scenario do
  let _ : Update T = fetch (error "EvExpUpFetchErr OK")
  pure ()

-- "exercise with actors" is not testable from DAML.

evExpUpExerciseWithoutActorsErr1 = scenario do
  let _ : Update () =
          exercise @T @Archive
              (error "EvExpUpExerciseWithoutActorsErr1 OK")
              (error "EvExpUpExerciseWithoutActorsErr1 failed")
  pure ()

evExpUpExerciseWithoutActorsErr2 = scenario do
  p <- getParty "Alice"
  t <- submit p $ create (T p)
  let _ : Update () = exercise @T @Archive t (error "EvExpUpExerciseWithoutActorsErr2 OK")
  pure ()

template T2
  with
    p : Party
    k : Int
  where
    signatory p
    key (p,k) : (Party, Int)
    maintainer key._1

evExpUpFetchByKeyErr = scenario do
  let _ = fetchByKey @T2 (error "EvExpUpFetchByKeyErr OK")
  pure ()

evExpUpLookupByKeyErr = scenario do
  let _ = lookupByKey @T2 (error "EvExpUpLookupByKeyErr OK")
  pure ()

abort1 = scenario do
  let _ : Update () = abort "abort1 failed"
  pure ()

abort2 = scenario do
  p <- getParty "Alice"
  submit p do
    abort "abort2 OK"

evUpdBindErr1_1 = scenario do
  p <- getParty "Alice"
  submit p do
    abort "EvUpdBindErr1_1 OK"
    abort "EvUpdBindErr1_1 failed"

evUpdBindErr1_2 = scenario do
  p <- getParty "Alice"
  submit p do
    abort "EvUpdBindErr1_2 OK"
    error "EvUpdBindErr1_2 failed"

evUpdBindErr2 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T p)
    error "EvUpdBindErr2 OK"
    abort "EvUpdBindErr2 failed"

evUpdBindErr3 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T p)
    abort "EvUpdBindErr3 OK"
    abort "EvUpdBindErr3 failed"

template T_EvUpdCreateErr1
  with
    p : Party
  where
    ensure (error @Bool "EvUpdCreateErr1 OK")
    agreement (error @Text "EvUpdCreateErr1 failed (1)")
    signatory (error @Party "EvUpdCreateErr1 failed (2)")
    observer (error @Party "EvUpdCreateErr1 failed (3)")

evUpdCreateErr1 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateErr1 p)
    error "EvUpdCreateErr1 failed (4)"

template T_EvUpdCreateFail
  with
    p : Party
  where
    ensure False
    agreement (error @Text "EvUpdCreateFail failed (1)")
    signatory (error @Party "EvUpdCreateFail failed (2)")
    observer (error @Party "EvUpdCreateFail failed (3)")

evUpdCreateFail = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateFail p)
    error "EvUpdCreateFail failed (4)"

template T_EvUpdCreateErr2
  with
    p : Party
  where
    ensure True
    agreement (error @Text "EvUpdCreateErr2 OK")
    signatory (error @Party "EvUpdCreateErr2 failed (1)")
    observer (error @Party "EvUpdCreateErr2 failed (2)")

evUpdCreateErr2 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateErr2 p)
    error "EvUpdCreateErr2 failed (3)"

template T_EvUpdCreateErr3
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory (error @Party "EvUpdCreateErr3 OK")
    observer (error @Party "EvUpdCreateErr3 failed (1)")

evUpdCreateErr3 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateErr3 p)
    error "EvUpdCreateErr3 failed (2)"

template T_EvUpdCreateErr4_1
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer (error @Party "EvUpdCreateErr4_1 OK")

evUpdCreateErr4_1 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateErr4_1 p)
    error "EvUpdCreateErr4_1 failed"

template T_EvUpdCreateErr4_2
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer (error @Party "EvUpdCreateErr4_2 OK")
    key error @Party "EvUpdCreateErr4_2 failed" : Party
    maintainer error @Party "EvUpdCreateErr4_2 failed"

evUpdCreateErr4_2 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateErr4_2 p)
    error "EvUpdCreateErr4_2 failed"

template T_EvUpdCreateWithKeyErr1
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer [] : [Party]
    key error @Party "EvUpdCreateWithKeyErr1 OK" : Party
    maintainer error @Party "EvUpdCreateWithKeyErr1 failed"

evUpdCreateWithKeyErr1 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateWithKeyErr1 p)
    error "EvUpdCreateWithKeyErr1 failed"

template T_EvUpdCreateWithKeyErr2
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer [] : [Party]
    key p : Party
    maintainer error @Party "EvUpdCreateWithKeyErr2 OK"

evUpdCreateWithKeyErr2 = scenario do
  p <- getParty "Alice"
  submit p do
    create (T_EvUpdCreateWithKeyErr2 p)
    error "EvUpdCreateWithKeyErr2 failed"
