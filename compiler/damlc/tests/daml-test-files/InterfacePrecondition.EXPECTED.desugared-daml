module InterfacePrecondition where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data GHC.Types.DamlInterface => Token1 = Token1 GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token1 where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token1 where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token1 Token1 where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token1 Token1 where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token1 "getOwner1" (Party)
getOwner1 : DA.Internal.Desugar.Implements t Token1 => t -> Party
getOwner1 t
  = GHC.Types.primitiveInterface
      @"getOwner1" (DA.Internal.Desugar._toInterface @_ @Token1 t)
instance DA.Internal.Desugar.HasMethod Token1 "getAmount1" (Int)
getAmount1 : DA.Internal.Desugar.Implements t Token1 => t -> Int
getAmount1 t
  = GHC.Types.primitiveInterface
      @"getAmount1" (DA.Internal.Desugar._toInterface @_ @Token1 t)
instance DA.Internal.Desugar.HasMethod Token1 "splitImpl" (Int
                                                           -> Update (ContractId Token1,
                                                                      ContractId Token1))
splitImpl :
  DA.Internal.Desugar.Implements t Token1 =>
  t -> Int -> Update (ContractId Token1, ContractId Token1)
splitImpl t
  = GHC.Types.primitiveInterface
      @"splitImpl" (DA.Internal.Desugar._toInterface @_ @Token1 t)
instance DA.Internal.Desugar.HasMethod Token1 "transferImpl" (Party
                                                              -> Update (ContractId Token1))
transferImpl :
  DA.Internal.Desugar.Implements t Token1 =>
  t -> Party -> Update (ContractId Token1)
transferImpl t
  = GHC.Types.primitiveInterface
      @"transferImpl" (DA.Internal.Desugar._toInterface @_ @Token1 t)
instance DA.Internal.Desugar.HasToAnyTemplate Token1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token1 where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token1 where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token1 where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Token1 where
  ensure this = (getAmount1 this >= 0 && getAmount1 this <= 7)
instance DA.Internal.Desugar.HasIsInterfaceType Token1 where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token1 where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Token1) =>
         DA.Internal.Desugar.HasToAnyChoice t Split ((ContractId Token1,
                                                      ContractId Token1)) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Token1) =>
         DA.Internal.Desugar.HasFromAnyChoice t Split ((ContractId Token1,
                                                        ContractId Token1)) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token1)) =>
         DA.Internal.Desugar.HasExerciseGuarded t Split ((ContractId Token1,
                                                          ContractId Token1)) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token1 cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token1 cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token1)) =>
         DA.Internal.Desugar.HasExercise t Split ((ContractId Token1,
                                                   ContractId Token1)) where
  exercise = DA.Internal.Desugar._exerciseDefault
instance (DA.Internal.Desugar.Implements t Token1) =>
         DA.Internal.Desugar.HasToAnyChoice t Transfer (ContractId Token1) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Token1) =>
         DA.Internal.Desugar.HasFromAnyChoice t Transfer (ContractId Token1) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token1)) =>
         DA.Internal.Desugar.HasExerciseGuarded t Transfer (ContractId Token1) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token1 cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token1 cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token1)) =>
         DA.Internal.Desugar.HasExercise t Transfer (ContractId Token1) where
  exercise = DA.Internal.Desugar._exerciseDefault
data Split
  = Split {splitAmount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "splitAmount" Split Int where
  getField
    = DA.Internal.Record.getFieldPrim @"splitAmount" @Split @Int
  setField
    = DA.Internal.Record.setFieldPrim @"splitAmount" @Split @Int
data Transfer
  = Transfer {newOwner : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "newOwner" Transfer Party where
  getField
    = DA.Internal.Record.getFieldPrim @"newOwner" @Transfer @Party
  setField
    = DA.Internal.Record.setFieldPrim @"newOwner" @Transfer @Party
_choice_Token1Split :
  (Token1 -> Split -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token1
   -> Token1
      -> Split
         -> DA.Internal.Desugar.Update ((ContractId Token1,
                                         ContractId Token1)),
   DA.Internal.Desugar.Consuming Token1,
   DA.Internal.Desugar.Optional (Token1
                                 -> Split -> [DA.Internal.Desugar.Party]))
_choice_Token1Split
  = (\ this arg@Split {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner1 this), 
     \ self this arg@Split {..}
       -> let _ = self in
          let _ = this in let _ = arg in do splitImpl this splitAmount, 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
_choice_Token1Transfer :
  (Token1 -> Transfer -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token1
   -> Token1
      -> Transfer -> DA.Internal.Desugar.Update (ContractId Token1),
   DA.Internal.Desugar.Consuming Token1,
   DA.Internal.Desugar.Optional (Token1
                                 -> Transfer -> [DA.Internal.Desugar.Party]))
_choice_Token1Transfer
  = (\ this arg@Transfer {..}
       -> let _ = this in
          let _ = arg
          in
            DA.Internal.Desugar.concat
              [DA.Internal.Desugar.toParties (getOwner1 this),
               DA.Internal.Desugar.toParties (newOwner)], 
     \ self this arg@Transfer {..}
       -> let _ = self in
          let _ = this in let _ = arg in do transferImpl this newOwner, 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlInterface => Token2 = Token2 GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token2 where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token2 where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token2 Token2 where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token2 Token2 where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token2 "getOwner2" (Party)
getOwner2 : DA.Internal.Desugar.Implements t Token2 => t -> Party
getOwner2 t
  = GHC.Types.primitiveInterface
      @"getOwner2" (DA.Internal.Desugar._toInterface @_ @Token2 t)
instance DA.Internal.Desugar.HasMethod Token2 "getAmount2" (Int)
getAmount2 : DA.Internal.Desugar.Implements t Token2 => t -> Int
getAmount2 t
  = GHC.Types.primitiveInterface
      @"getAmount2" (DA.Internal.Desugar._toInterface @_ @Token2 t)
instance DA.Internal.Desugar.HasMethod Token2 "noopImpl" (()
                                                          -> Update ())
noopImpl :
  DA.Internal.Desugar.Implements t Token2 => t -> () -> Update ()
noopImpl t
  = GHC.Types.primitiveInterface
      @"noopImpl" (DA.Internal.Desugar._toInterface @_ @Token2 t)
instance DA.Internal.Desugar.HasToAnyTemplate Token2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token2 where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token2 where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token2 where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Token2 where
  ensure this = (getAmount2 this >= 3 && getAmount2 this <= 10)
instance DA.Internal.Desugar.HasIsInterfaceType Token2 where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token2 where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Token2) =>
         DA.Internal.Desugar.HasToAnyChoice t Noop (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Token2) =>
         DA.Internal.Desugar.HasFromAnyChoice t Noop (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token2)) =>
         DA.Internal.Desugar.HasExerciseGuarded t Noop (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token2 cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token2 cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token2)) =>
         DA.Internal.Desugar.HasExercise t Noop (()) where
  exercise = DA.Internal.Desugar._exerciseDefault
data Noop
  = Noop {nothing : ()}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "nothing" Noop () where
  getField = DA.Internal.Record.getFieldPrim @"nothing" @Noop @()
  setField = DA.Internal.Record.setFieldPrim @"nothing" @Noop @()
_choice_Token2Noop :
  (Token2 -> Noop -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token2
   -> Token2 -> Noop -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming Token2,
   DA.Internal.Desugar.Optional (Token2
                                 -> Noop -> [DA.Internal.Desugar.Party]))
_choice_Token2Noop
  = (\ this arg@Noop {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner2 this), 
     \ self this arg@Noop {..}
       -> let _ = self in
          let _ = this in let _ = arg in do noopImpl this nothing, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
data GHC.Types.DamlInterface => Token3 = Token3 GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token3 where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token3 where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token3 Token3 where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token3 Token3 where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token3 "getMessage" (Text)
getMessage : DA.Internal.Desugar.Implements t Token3 => t -> Text
getMessage t
  = GHC.Types.primitiveInterface
      @"getMessage" (DA.Internal.Desugar._toInterface @_ @Token3 t)
instance DA.Internal.Desugar.HasToAnyTemplate Token3 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token3 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token3 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token3 where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token3 where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token3 where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Token3 where
  ensure this = (error $ getMessage this)
instance DA.Internal.Desugar.HasIsInterfaceType Token3 where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token3 where
  (==) = GHC.Types.primitive @"BEEqual"
data GHC.Types.DamlTemplate => Asset
  = Asset {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset @Party
instance DA.Internal.Record.HasField "owner" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset @Party
instance DA.Internal.Record.HasField "amount" Asset Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset @Int
instance DA.Internal.Desugar.HasSignatory Asset where
  signatory this@Asset {..}
    = DA.Internal.Desugar.concat
        [DA.Internal.Desugar.toParties (owner),
         DA.Internal.Desugar.toParties (issuer)]
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset where
  observer this@Asset {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset where
  ensure this@Asset {..}
    = (amount >= 5 && amount <= 8)
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset where
  agreement this@Asset {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_AssetArchive :
  (Asset
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset
   -> Asset
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset,
   DA.Internal.Desugar.Optional (Asset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_AssetArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset_Token1 :
  DA.Internal.Desugar.ImplementsT Asset Token1
_implements_Asset_Token1 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset Token1 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset Token1 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset_Token1_getOwner1 :
  DA.Internal.Desugar.Method Asset Token1 "getOwner1"
_method_Asset_Token1_getOwner1
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token1
      @"getOwner1"
      (\ this@Asset {..}
         -> let _ = this in let getOwner1 = owner in getOwner1)
_method_Asset_Token1_getAmount1 :
  DA.Internal.Desugar.Method Asset Token1 "getAmount1"
_method_Asset_Token1_getAmount1
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token1
      @"getAmount1"
      (\ this@Asset {..}
         -> let _ = this in let getAmount1 = amount in getAmount1)
_method_Asset_Token1_splitImpl :
  DA.Internal.Desugar.Method Asset Token1 "splitImpl"
_method_Asset_Token1_splitImpl
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token1
      @"splitImpl"
      (\ this@Asset {..}
         -> let _ = this in
            let
              splitImpl splitAmount
                = do assert (splitAmount < amount)
                     cid1 <- create this {amount = splitAmount}
                     cid2 <- create this {amount = amount - splitAmount}
                     pure
                       (toInterfaceContractId @Token1 cid1, 
                        toInterfaceContractId @Token1 cid2)
            in splitImpl)
_method_Asset_Token1_transferImpl :
  DA.Internal.Desugar.Method Asset Token1 "transferImpl"
_method_Asset_Token1_transferImpl
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token1
      @"transferImpl"
      (\ this@Asset {..}
         -> let _ = this in
            let
              transferImpl newOwner
                = do cid <- create this {owner = newOwner}
                     pure (toInterfaceContractId @Token1 cid)
            in transferImpl)
_implements_Asset_Token2 :
  DA.Internal.Desugar.ImplementsT Asset Token2
_implements_Asset_Token2 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset Token2 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset Token2 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset_Token2_getOwner2 :
  DA.Internal.Desugar.Method Asset Token2 "getOwner2"
_method_Asset_Token2_getOwner2
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token2
      @"getOwner2"
      (\ this@Asset {..}
         -> let _ = this in let getOwner2 = owner in getOwner2)
_method_Asset_Token2_getAmount2 :
  DA.Internal.Desugar.Method Asset Token2 "getAmount2"
_method_Asset_Token2_getAmount2
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token2
      @"getAmount2"
      (\ this@Asset {..}
         -> let _ = this in let getAmount2 = amount in getAmount2)
_method_Asset_Token2_noopImpl :
  DA.Internal.Desugar.Method Asset Token2 "noopImpl"
_method_Asset_Token2_noopImpl
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token2
      @"noopImpl"
      (\ this@Asset {..}
         -> let _ = this in let noopImpl nothing = do pure () in noopImpl)
data GHC.Types.DamlTemplate => Asset2
  = Asset2 {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset2 Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset2 @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset2 @Party
instance DA.Internal.Record.HasField "owner" Asset2 Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset2 @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset2 @Party
instance DA.Internal.Record.HasField "amount" Asset2 Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset2 @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset2 @Int
instance DA.Internal.Desugar.HasSignatory Asset2 where
  signatory this@Asset2 {..}
    = DA.Internal.Desugar.concat
        [DA.Internal.Desugar.toParties (owner),
         DA.Internal.Desugar.toParties (issuer)]
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset2 where
  observer this@Asset2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset2 where
  ensure this@Asset2 {..}
    = (amount > 10)
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset2 where
  agreement this@Asset2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_Asset2Archive :
  (Asset2
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset2
   -> Asset2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset2,
   DA.Internal.Desugar.Optional (Asset2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_Asset2Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset2_Token1 :
  DA.Internal.Desugar.ImplementsT Asset2 Token1
_implements_Asset2_Token1 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset2 Token1 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset2 Token1 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset2_Token1_getOwner1 :
  DA.Internal.Desugar.Method Asset2 Token1 "getOwner1"
_method_Asset2_Token1_getOwner1
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token1
      @"getOwner1"
      (\ this@Asset2 {..}
         -> let _ = this in let getOwner1 = owner in getOwner1)
_method_Asset2_Token1_getAmount1 :
  DA.Internal.Desugar.Method Asset2 Token1 "getAmount1"
_method_Asset2_Token1_getAmount1
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token1
      @"getAmount1"
      (\ this@Asset2 {..}
         -> let _ = this in let getAmount1 = amount in getAmount1)
_method_Asset2_Token1_splitImpl :
  DA.Internal.Desugar.Method Asset2 Token1 "splitImpl"
_method_Asset2_Token1_splitImpl
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token1
      @"splitImpl"
      (\ this@Asset2 {..}
         -> let _ = this in
            let
              splitImpl splitAmount
                = do assert (splitAmount < amount)
                     cid1 <- create this {amount = splitAmount}
                     cid2 <- create this {amount = amount - splitAmount}
                     pure
                       (toInterfaceContractId @Token1 cid1, 
                        toInterfaceContractId @Token1 cid2)
            in splitImpl)
_method_Asset2_Token1_transferImpl :
  DA.Internal.Desugar.Method Asset2 Token1 "transferImpl"
_method_Asset2_Token1_transferImpl
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token1
      @"transferImpl"
      (\ this@Asset2 {..}
         -> let _ = this in
            let
              transferImpl newOwner
                = do cid <- create this {owner = newOwner}
                     pure (toInterfaceContractId @Token1 cid)
            in transferImpl)
_implements_Asset2_Token2 :
  DA.Internal.Desugar.ImplementsT Asset2 Token2
_implements_Asset2_Token2 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset2 Token2 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset2 Token2 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset2_Token2_getOwner2 :
  DA.Internal.Desugar.Method Asset2 Token2 "getOwner2"
_method_Asset2_Token2_getOwner2
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token2
      @"getOwner2"
      (\ this@Asset2 {..}
         -> let _ = this in let getOwner2 = owner in getOwner2)
_method_Asset2_Token2_getAmount2 :
  DA.Internal.Desugar.Method Asset2 Token2 "getAmount2"
_method_Asset2_Token2_getAmount2
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token2
      @"getAmount2"
      (\ this@Asset2 {..}
         -> let _ = this in let getAmount2 = amount in getAmount2)
_method_Asset2_Token2_noopImpl :
  DA.Internal.Desugar.Method Asset2 Token2 "noopImpl"
_method_Asset2_Token2_noopImpl
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token2
      @"noopImpl"
      (\ this@Asset2 {..}
         -> let _ = this in let noopImpl nothing = do pure () in noopImpl)
_implements_Asset2_Token3 :
  DA.Internal.Desugar.ImplementsT Asset2 Token3
_implements_Asset2_Token3 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset2 Token3 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset2 Token3 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset2_Token3_getMessage :
  DA.Internal.Desugar.Method Asset2 Token3 "getMessage"
_method_Asset2_Token3_getMessage
  = DA.Internal.Desugar.mkMethod
      @Asset2
      @Token3
      @"getMessage"
      (\ this@Asset2 {..}
         -> let _ = this in let getMessage = "boom tail" in getMessage)
data GHC.Types.DamlTemplate => Asset3
  = Asset3 {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset3 Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset3 @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset3 @Party
instance DA.Internal.Record.HasField "owner" Asset3 Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset3 @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset3 @Party
instance DA.Internal.Record.HasField "amount" Asset3 Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset3 @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset3 @Int
instance DA.Internal.Desugar.HasSignatory Asset3 where
  signatory this@Asset3 {..}
    = DA.Internal.Desugar.concat
        [DA.Internal.Desugar.toParties (owner),
         DA.Internal.Desugar.toParties (issuer)]
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset3 where
  observer this@Asset3 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset3 where
  ensure this@Asset3 {..}
    = (amount > 10)
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset3 where
  agreement this@Asset3 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset3 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset3 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset3 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset3 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset3 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset3 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset3 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset3 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset3 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset3 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_Asset3Archive :
  (Asset3
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset3
   -> Asset3
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset3,
   DA.Internal.Desugar.Optional (Asset3
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_Asset3Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset3_Token1 :
  DA.Internal.Desugar.ImplementsT Asset3 Token1
_implements_Asset3_Token1 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset3 Token1 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset3 Token1 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset3_Token1_getOwner1 :
  DA.Internal.Desugar.Method Asset3 Token1 "getOwner1"
_method_Asset3_Token1_getOwner1
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token1
      @"getOwner1"
      (\ this@Asset3 {..}
         -> let _ = this in let getOwner1 = owner in getOwner1)
_method_Asset3_Token1_getAmount1 :
  DA.Internal.Desugar.Method Asset3 Token1 "getAmount1"
_method_Asset3_Token1_getAmount1
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token1
      @"getAmount1"
      (\ this@Asset3 {..}
         -> let _ = this in let getAmount1 = amount in getAmount1)
_method_Asset3_Token1_splitImpl :
  DA.Internal.Desugar.Method Asset3 Token1 "splitImpl"
_method_Asset3_Token1_splitImpl
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token1
      @"splitImpl"
      (\ this@Asset3 {..}
         -> let _ = this in
            let
              splitImpl splitAmount
                = do assert (splitAmount < amount)
                     cid1 <- create this {amount = splitAmount}
                     cid2 <- create this {amount = amount - splitAmount}
                     pure
                       (toInterfaceContractId @Token1 cid1, 
                        toInterfaceContractId @Token1 cid2)
            in splitImpl)
_method_Asset3_Token1_transferImpl :
  DA.Internal.Desugar.Method Asset3 Token1 "transferImpl"
_method_Asset3_Token1_transferImpl
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token1
      @"transferImpl"
      (\ this@Asset3 {..}
         -> let _ = this in
            let
              transferImpl newOwner
                = do cid <- create this {owner = newOwner}
                     pure (toInterfaceContractId @Token1 cid)
            in transferImpl)
_implements_Asset3_Token3 :
  DA.Internal.Desugar.ImplementsT Asset3 Token3
_implements_Asset3_Token3 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset3 Token3 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset3 Token3 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset3_Token3_getMessage :
  DA.Internal.Desugar.Method Asset3 Token3 "getMessage"
_method_Asset3_Token3_getMessage
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token3
      @"getMessage"
      (\ this@Asset3 {..}
         -> let _ = this in let getMessage = "boom middle" in getMessage)
_implements_Asset3_Token2 :
  DA.Internal.Desugar.ImplementsT Asset3 Token2
_implements_Asset3_Token2 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset3 Token2 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset3 Token2 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset3_Token2_getOwner2 :
  DA.Internal.Desugar.Method Asset3 Token2 "getOwner2"
_method_Asset3_Token2_getOwner2
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token2
      @"getOwner2"
      (\ this@Asset3 {..}
         -> let _ = this in let getOwner2 = owner in getOwner2)
_method_Asset3_Token2_getAmount2 :
  DA.Internal.Desugar.Method Asset3 Token2 "getAmount2"
_method_Asset3_Token2_getAmount2
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token2
      @"getAmount2"
      (\ this@Asset3 {..}
         -> let _ = this in let getAmount2 = amount in getAmount2)
_method_Asset3_Token2_noopImpl :
  DA.Internal.Desugar.Method Asset3 Token2 "noopImpl"
_method_Asset3_Token2_noopImpl
  = DA.Internal.Desugar.mkMethod
      @Asset3
      @Token2
      @"noopImpl"
      (\ this@Asset3 {..}
         -> let _ = this in let noopImpl nothing = do pure () in noopImpl)
data GHC.Types.DamlTemplate => Asset4
  = Asset4 {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset4 Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset4 @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset4 @Party
instance DA.Internal.Record.HasField "owner" Asset4 Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset4 @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset4 @Party
instance DA.Internal.Record.HasField "amount" Asset4 Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset4 @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset4 @Int
instance DA.Internal.Desugar.HasSignatory Asset4 where
  signatory this@Asset4 {..}
    = DA.Internal.Desugar.concat
        [DA.Internal.Desugar.toParties (owner),
         DA.Internal.Desugar.toParties (issuer)]
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset4 where
  observer this@Asset4 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset4 where
  ensure this@Asset4 {..}
    = (amount > 10)
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset4 where
  agreement this@Asset4 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset4 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset4 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset4 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset4 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset4 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset4 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset4 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset4 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset4 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset4 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_Asset4Archive :
  (Asset4
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset4
   -> Asset4
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset4,
   DA.Internal.Desugar.Optional (Asset4
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_Asset4Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset4_Token3 :
  DA.Internal.Desugar.ImplementsT Asset4 Token3
_implements_Asset4_Token3 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset4 Token3 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset4 Token3 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset4_Token3_getMessage :
  DA.Internal.Desugar.Method Asset4 Token3 "getMessage"
_method_Asset4_Token3_getMessage
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token3
      @"getMessage"
      (\ this@Asset4 {..}
         -> let _ = this in let getMessage = "boom head" in getMessage)
_implements_Asset4_Token1 :
  DA.Internal.Desugar.ImplementsT Asset4 Token1
_implements_Asset4_Token1 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset4 Token1 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset4 Token1 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset4_Token1_getOwner1 :
  DA.Internal.Desugar.Method Asset4 Token1 "getOwner1"
_method_Asset4_Token1_getOwner1
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token1
      @"getOwner1"
      (\ this@Asset4 {..}
         -> let _ = this in let getOwner1 = owner in getOwner1)
_method_Asset4_Token1_getAmount1 :
  DA.Internal.Desugar.Method Asset4 Token1 "getAmount1"
_method_Asset4_Token1_getAmount1
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token1
      @"getAmount1"
      (\ this@Asset4 {..}
         -> let _ = this in let getAmount1 = amount in getAmount1)
_method_Asset4_Token1_splitImpl :
  DA.Internal.Desugar.Method Asset4 Token1 "splitImpl"
_method_Asset4_Token1_splitImpl
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token1
      @"splitImpl"
      (\ this@Asset4 {..}
         -> let _ = this in
            let
              splitImpl splitAmount
                = do assert (splitAmount < amount)
                     cid1 <- create this {amount = splitAmount}
                     cid2 <- create this {amount = amount - splitAmount}
                     pure
                       (toInterfaceContractId @Token1 cid1, 
                        toInterfaceContractId @Token1 cid2)
            in splitImpl)
_method_Asset4_Token1_transferImpl :
  DA.Internal.Desugar.Method Asset4 Token1 "transferImpl"
_method_Asset4_Token1_transferImpl
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token1
      @"transferImpl"
      (\ this@Asset4 {..}
         -> let _ = this in
            let
              transferImpl newOwner
                = do cid <- create this {owner = newOwner}
                     pure (toInterfaceContractId @Token1 cid)
            in transferImpl)
_implements_Asset4_Token2 :
  DA.Internal.Desugar.ImplementsT Asset4 Token2
_implements_Asset4_Token2 = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset4 Token2 where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset4 Token2 where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset4_Token2_getOwner2 :
  DA.Internal.Desugar.Method Asset4 Token2 "getOwner2"
_method_Asset4_Token2_getOwner2
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token2
      @"getOwner2"
      (\ this@Asset4 {..}
         -> let _ = this in let getOwner2 = owner in getOwner2)
_method_Asset4_Token2_getAmount2 :
  DA.Internal.Desugar.Method Asset4 Token2 "getAmount2"
_method_Asset4_Token2_getAmount2
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token2
      @"getAmount2"
      (\ this@Asset4 {..}
         -> let _ = this in let getAmount2 = amount in getAmount2)
_method_Asset4_Token2_noopImpl :
  DA.Internal.Desugar.Method Asset4 Token2 "noopImpl"
_method_Asset4_Token2_noopImpl
  = DA.Internal.Desugar.mkMethod
      @Asset4
      @Token2
      @"noopImpl"
      (\ this@Asset4 {..}
         -> let _ = this in let noopImpl nothing = do pure () in noopImpl)
main
  = scenario
      do p <- getParty "Alice"
         p `submitMustFail`
             do create Asset {issuer = p, owner = p, amount = - 1}
         p `submitMustFail`
             do create Asset {issuer = p, owner = p, amount = 1}
         p `submitMustFail`
             do create Asset {issuer = p, owner = p, amount = 3}
         p `submitMustFail`
             do create Asset {issuer = p, owner = p, amount = 8}
         p `submitMustFail`
             do create Asset {issuer = p, owner = p, amount = 8}
         p `submit` do create Asset {issuer = p, owner = p, amount = 5}
         p `submitMustFail`
             do create Asset2 {issuer = p, owner = p, amount = 11}
         p `submitMustFail`
             do create Asset3 {issuer = p, owner = p, amount = 11}
         p `submit` do create Asset4 {issuer = p, owner = p, amount = 11}
         pure ()
