-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- Check that non-generic templates work with the new de/re-sugaring of
-- templates for DAML-LF < 1.5 as well. This test can be deleted when
-- generic templates (#1387) land in master.
-- Since we need complex contract keys for this, it only works for
-- DAML-LF >= 1.4.
-- @SINCE-LF 1.4
daml 1.2
module GenTemplCompat where

import Prelude hiding (Template (..), TemplateKey (..), Choice (..), Archive (..), create, fetch, archive, fetchByKey, lookupByKey, exercise)
import DA.Assert
import GenericTemplates

data Fact = Fact with
    owner : Party
    name : Text
    value : Int
  deriving (Eq, Show)

instance FactInstance => Template Fact where
    signatory = _signatoryFact
    observer = _observerFact
    ensure = _ensureFact
    agreement = _agreementFact
    create = _createFact
    fetch = _fetchFact
    archive = _archiveFact

instance FactInstance => TemplateKey Fact (Party, Text) where
    key = _keyFact
    fetchByKey = _fetchByKeyFact
    lookupByKey = _lookupByKeyFact

instance FactInstance => Choice Fact Archive () where
    exercise = _exerciseFactArchive

data Touch = Touch{}
  deriving (Eq, Show)

instance FactInstance => Choice Fact Touch () where
    exercise = _exerciseFactTouch

data FetchAndArchive = FetchAndArchive{}
  deriving (Eq, Show)

instance FactInstance => Choice Fact FetchAndArchive Fact where
    exercise = _exerciseFactFetchAndArchive

class FactInstance where
    _signatoryFact : Fact -> [Party]
    _signatoryFact this@Fact{..} = [owner]
    _observerFact : Fact -> [Party]
    _observerFact this@Fact{..} = []
    _ensureFact : Fact -> Bool
    _ensureFact this@Fact{..} = name /= ""
    _agreementFact : Fact -> Text
    _agreementFact this@Fact{..} =
        show owner <> " provides " <> show name <> ": " <> show value
    _createFact : Fact -> Update (ContractId Fact)
    _createFact = error "code will be injected by the compiler"
    _fetchFact : ContractId Fact -> Update Fact
    _fetchFact = error "code will be injected by the compiler"
    _archiveFact : ContractId Fact -> Update ()
    _archiveFact cid = _exerciseFactArchive cid Archive

    _hasKeyFact : HasKey Fact
    _hasKeyFact = HasKey
    _keyFact : Fact -> (Party, Text)
    _keyFact this@Fact{..} = (owner, name)
    _maintainerFact : HasKey Fact -> (Party, Text) -> [Party]
    _maintainerFact HasKey key = [fst key]
    _fetchByKeyFact : (Party, Text) -> Update (ContractId Fact, Fact)
    _fetchByKeyFact = error "code will be injected by the compiler"
    _lookupByKeyFact : (Party, Text) -> Update (Optional (ContractId Fact))
    _lookupByKeyFact = error "code will be injected by the compiler"

    _consumptionFactArchive : PreConsuming Fact
    _consumptionFactArchive = PreConsuming
    _controllerFactArchive : Fact -> Archive -> [Party]
    _controllerFactArchive this@Fact{..} arg@Archive = _signatoryFact this
    _actionFactArchive : ContractId Fact -> Fact -> Archive -> Update ()
    _actionFactArchive self this@Fact{..} arg@Archive = do
        pure ()
    _exerciseFactArchive : ContractId Fact -> Archive -> Update ()
    _exerciseFactArchive = error "code will be injected by the compiler"

    _consumptionFactTouch : NonConsuming Fact
    _consumptionFactTouch = NonConsuming
    _controllerFactTouch : Fact -> Touch -> [Party]
    _controllerFactTouch this@Fact{..} arg@Touch = [owner]
    _actionFactTouch : ContractId Fact -> Fact -> Touch -> Update ()
    _actionFactTouch self this@Fact{..} arg@Touch = do
        pure ()
    _exerciseFactTouch : ContractId Fact -> Touch -> Update ()
    _exerciseFactTouch = error "code will be injected by the compiler"

    _consumptionFactFetchAndArchive : PostConsuming Fact
    _consumptionFactFetchAndArchive = PostConsuming
    _controllerFactFetchAndArchive : Fact -> FetchAndArchive -> [Party]
    _controllerFactFetchAndArchive this@Fact{..} arg@FetchAndArchive = [owner]
    _actionFactFetchAndArchive : ContractId Fact -> Fact -> FetchAndArchive -> Update Fact
    _actionFactFetchAndArchive self this@Fact{..} arg@FetchAndArchive = do
        fetch self
    _exerciseFactFetchAndArchive : ContractId Fact -> FetchAndArchive -> Update Fact
    _exerciseFactFetchAndArchive = error "code will be injected by the compiler"

instance FactInstance where


test = scenario do
    alice <- getParty "Alice"
    let fact = Fact with owner = alice; name = "Answer"; value = 42

    -- Check that create, fetch, fetchByKey and exercising non- and pre-consuming choices work.
    factId <- submit alice do create fact
    submit alice do exercise factId Touch
    fact' <- submit alice do fetch factId
    fact' === fact
    (factId', fact') <- submit alice do fetchByKey @Fact (alice, "Answer")
    factId' === factId
    fact' === fact
    mbFactId <- submit alice do lookupByKey @Fact (alice, "Answer")
    mbFactId === Some factId
    submit alice do archive factId
    submitMustFail alice do fetch factId

    -- Check that post-consuming choices work.
    factId <- submit alice do create fact
    fact' <- submit alice do exercise factId FetchAndArchive
    fact' === fact
    submitMustFail alice do fetch factId
