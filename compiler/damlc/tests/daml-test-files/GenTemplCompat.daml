-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- Check that non-generic templates work with the new de/re-sugaring of
-- templates for DAML-LF < 1.5 as well. This test can be deleted when
-- generic templates (#1387) land in master.
-- Since we need complex contract keys for this, it only works for
-- DAML-LF >= 1.4.
-- @SINCE-LF 1.4
daml 1.2
module GenTemplCompat where

import Prelude hiding (Template (..), TemplateKey (..), Choice (..), Archive (..), create, fetch, archive, fetchByKey, lookupByKey, exercise)
import DA.Assert
import GenericTemplates

data Fact = Fact with
    owner : Party
    name : Text
    value : Int
  deriving (Eq, Show)

instance FactInstance => Template Fact where
    signatory = signatoryFact
    observer = observerFact
    ensure = ensureFact
    agreement = agreementFact
    create = createFact
    fetch = fetchFact
    archive = archiveFact

instance FactInstance => TemplateKey Fact (Party, Text) where
    key = keyFact
    fetchByKey = fetchByKeyFact
    lookupByKey = lookupByKeyFact

instance FactInstance => Choice Fact Archive () where
    exercise = exerciseFactArchive

data Touch = Touch{}
  deriving (Eq, Show)

instance FactInstance => Choice Fact Touch () where
    exercise = exerciseFactTouch

data FetchAndArchive = FetchAndArchive{}
  deriving (Eq, Show)

instance FactInstance => Choice Fact FetchAndArchive Fact where
    exercise = exerciseFactFetchAndArchive

class FactInstance where
    signatoryFact : Fact -> [Party]
    signatoryFact this@Fact{..} = [owner]
    observerFact : Fact -> [Party]
    observerFact this@Fact{..} = []
    ensureFact : Fact -> Bool
    ensureFact this@Fact{..} = name /= ""
    agreementFact : Fact -> Text
    agreementFact this@Fact{..} =
        show owner <> " provides " <> show name <> ": " <> show value
    createFact : Fact -> Update (ContractId Fact)
    createFact = error "code will be injected by the compiler"
    fetchFact : ContractId Fact -> Update Fact
    fetchFact = error "code will be injected by the compiler"
    archiveFact : ContractId Fact -> Update ()
    archiveFact cid = exerciseFactArchive cid Archive

    hasKeyFact : HasKey Fact
    hasKeyFact = HasKey
    keyFact : Fact -> (Party, Text)
    keyFact this@Fact{..} = (owner, name)
    maintainerFact : HasKey Fact -> (Party, Text) -> [Party]
    maintainerFact HasKey key = [fst key]
    fetchByKeyFact : (Party, Text) -> Update (ContractId Fact, Fact)
    fetchByKeyFact = error "code will be injected by the compiler"
    lookupByKeyFact : (Party, Text) -> Update (Optional (ContractId Fact))
    lookupByKeyFact = error "code will be injected by the compiler"

    consumptionFactArchive : PreConsuming Fact
    consumptionFactArchive = PreConsuming
    controllerFactArchive : Fact -> Archive -> [Party]
    controllerFactArchive this@Fact{..} arg@Archive = signatoryFact this
    actionFactArchive : ContractId Fact -> Fact -> Archive -> Update ()
    actionFactArchive self this@Fact{..} arg@Archive = do
        pure ()
    exerciseFactArchive : ContractId Fact -> Archive -> Update ()
    exerciseFactArchive = error "code will be injected by the compiler"

    consumptionFactTouch : NonConsuming Fact
    consumptionFactTouch = NonConsuming
    controllerFactTouch : Fact -> Touch -> [Party]
    controllerFactTouch this@Fact{..} arg@Touch = [owner]
    actionFactTouch : ContractId Fact -> Fact -> Touch -> Update ()
    actionFactTouch self this@Fact{..} arg@Touch = do
        pure ()
    exerciseFactTouch : ContractId Fact -> Touch -> Update ()
    exerciseFactTouch = error "code will be injected by the compiler"

    consumptionFactFetchAndArchive : PostConsuming Fact
    consumptionFactFetchAndArchive = PostConsuming
    controllerFactFetchAndArchive : Fact -> FetchAndArchive -> [Party]
    controllerFactFetchAndArchive this@Fact{..} arg@FetchAndArchive = [owner]
    actionFactFetchAndArchive : ContractId Fact -> Fact -> FetchAndArchive -> Update Fact
    actionFactFetchAndArchive self this@Fact{..} arg@FetchAndArchive = do
        fetch self
    exerciseFactFetchAndArchive : ContractId Fact -> FetchAndArchive -> Update Fact
    exerciseFactFetchAndArchive = error "code will be injected by the compiler"

instance FactInstance where


test = scenario do
    alice <- getParty "Alice"
    let fact = Fact with owner = alice; name = "Answer"; value = 42

    -- Check that create, fetch, fetchByKey and exercising non- and pre-consuming choices work.
    factId <- submit alice do create fact
    submit alice do exercise factId Touch
    fact' <- submit alice do fetch factId
    fact' === fact
    (factId', fact') <- submit alice do fetchByKey @Fact (alice, "Answer")
    factId' === factId
    fact' === fact
    mbFactId <- submit alice do lookupByKey @Fact (alice, "Answer")
    mbFactId === Some factId
    submit alice do archive factId
    submitMustFail alice do fetch factId

    -- Check that post-consuming choices work.
    factId <- submit alice do create fact
    fact' <- submit alice do exercise factId FetchAndArchive
    fact' === fact
    submitMustFail alice do fetch factId
