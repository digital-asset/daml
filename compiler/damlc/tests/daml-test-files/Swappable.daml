daml 1.2
module Swappable where

import CashAsset

template (Asset t, Template (SwapProposal t)) => Swappable t with
    asset: t
  where
    signatory asset.issuer, asset.owner

    controller asset.owner can
      ProposeSwap: ContractId (SwapProposal t)
        with assetInReturn: Swappable t
        do create SwapProposal with
            assetOffered = this
            assetInReturn

template (Asset t, Template (Swappable t)) => SwapProposal t with
    assetOffered: Swappable t
    assetInReturn: Swappable t
  where
    let proposer = assetOffered.asset.owner
        proposee = assetInReturn.asset.owner
    signatory proposer

    controller proposer can
      WithdrawSwap: ContractId (Swappable t)
        do create assetOffered

    controller proposee can
      RejectSwap: ContractId (Swappable t)
        do create assetOffered

      -- If successful, return the proposer's and proposee's new assets respectively
      AcceptSwap: (ContractId (Swappable t), ContractId (Swappable t))
        with assetInReturnCid: ContractId (Swappable t)
        do -- first check that the asset given in return really is the requested asset
           actualAssetInReturn <- fetch assetInReturnCid
           assert $ actualAssetInReturn == assetInReturn
           archive assetInReturnCid
           proposersNewAsset <- create $ Swappable $ assetInReturn.asset with owner = proposer
           proposeesNewAsset <- create $ Swappable $ assetOffered.asset with owner = proposee
           return (proposersNewAsset, proposeesNewAsset)

template instance CashSwappable = Swappable Cash
template instance CashSwapProposal = SwapProposal Cash

s = scenario do
  rohan <- getParty "Rohan"
  martin <- getParty "Martin"
  -- Cash is self-issued to simplify the workflow
  let rohansCash = Swappable Cash with issuer = rohan; owner = rohan; amount = 50.0; currency = "USD"
      martinsCash = Swappable Cash with issuer = martin; owner = martin; amount = 50.0; currency = "CHF"
  -- Create the Swappable contracts
  rohansCashCid <- rohan `submit` create rohansCash
  martinsCashCid <- martin `submit` create martinsCash
  -- Martin initiates a swap with Rohan
  martinsSwapProposal <- martin `submit` exercise martinsCashCid (ProposeSwap rohansCash)
  -- Rohan accepts, resulting in the two assets with new owners
  (martinsNewCashCid, rohansNewCashCid) <- rohan `submit` exercise martinsSwapProposal (AcceptSwap rohansCashCid)
  -- Some checks that the swap was successful
  martinsNewCash <- martin `submit` fetch martinsNewCashCid
  assert $ martinsNewCash.asset.currency == "USD"
  rohansNewCash <- rohan `submit` fetch rohansNewCashCid
  assert $ rohansNewCash.asset.currency == "CHF"
  return ()
