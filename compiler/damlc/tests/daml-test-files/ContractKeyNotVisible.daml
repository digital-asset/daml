-- @ERROR range=18:1-18:10; Attempt to fetch, lookup or exercise a key associated with a contract
-- @ERROR range=63:1-63:15; Attempt to fetch, lookup or exercise a key associated with a contract
-- @ERROR range=81:1-81:12; Attempt to fetch, lookup or exercise a key associated with a contract
-- @ERROR range=111:1-111:12; Attempt to fetch, lookup or exercise a key associated with a contract
-- @ERROR range=117:1-117:11;  Attempt to fetch, lookup or exercise a key associated with a contract
module ContractKeyNotVisible where

import DA.Optional

template Foo
  with
    p : Party
  where
    signatory p
    key p : Party
    maintainer key

aScenario = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  _ <- submit bob do create Foo with p = bob
  _ <- submit alice $ fetchByKey @Foo bob
  pure ()

template Keyed
  with
    sig : Party
  where
    signatory sig

    key sig : Party
    maintainer key

template Divulger
  with
    divulgee : Party
    sig : Party
  where
    signatory divulgee

    controller sig can
      nonconsuming DivulgeKeyed
        : Keyed
        with
          keyedCid : ContractId Keyed
        do
          fetch keyedCid

template Delegation
  with
    sig : Party
    divulgee : Party
  where
    signatory sig
    observer divulgee

    choice LookupKeyed
      : Optional (ContractId Keyed)
      controller divulgee
      do
        lookupByKey @Keyed sig

divulgeeLookup = scenario do
  sig <- getParty "s" -- Signatory
  divulgee <- getParty "d" -- Divulgee
  keyedCid <- submit sig do create Keyed with ..
  divulgercid <- submit divulgee do create Divulger with ..
  submit sig do exercise divulgercid DivulgeKeyed with ..
  -- Divulgee can't do positive lookup with maintainer authority.
  -- Note that the lookup returns `None` so the assertion passes.
  -- If the assertion is changed to `isSome`, the assertion fails,
  -- which means the error message changes. The reason is that the
  -- assertion is checked at interpretation time, before the lookup
  -- is checked at validation time.
  delegationCid <- submit sig $ create (Delegation sig divulgee)
  submit divulgee do
    mcid <- exercise delegationCid LookupKeyed
    assert (isNone mcid)
    pure ()

blindLookup = scenario do
  sig <- getParty "s" -- Signatory
  blind <- getParty "b" -- Blind
  _ <- submit sig do create Keyed with ..
  -- Blind party can't do positive lookup with maintainer authority.
  cid <- submit sig $ create (Delegation sig blind)
  submit blind do
    mcid <- exercise cid LookupKeyed
    assert (isNone mcid)
    pure ()

template LocalKeyVisibility
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs
    choice LocalLookup : ()
      controller obs
      do create (Keyed sig)
         Some _ <- lookupByKey @Keyed sig
         pure ()

    choice LocalFetch : ()
      controller obs
      do create (Keyed sig)
         _ <- fetchByKey @Keyed sig
         pure ()

localLookup = scenario do
  p1 <- getParty "p1"
  p2 <- getParty "p2"
  cid <- submit p1 $ create (LocalKeyVisibility p1 p2)
  submit p2 $ exercise cid LocalLookup

localFetch = scenario do
  p1 <- getParty "p1"
  p2 <- getParty "p2"
  cid <- submit p1 $ create (LocalKeyVisibility p1 p2)
  submit p2 $ exercise cid LocalFetch

localLookupFetchMustFail = scenario do
  p1 <- getParty "p1"
  p2 <- getParty "p2"
  cid <- submit p1 $ create (LocalKeyVisibility p1 p2)
  submitMustFail p2 $ exercise cid LocalLookup
  submitMustFail p2 $ exercise cid LocalFetch
