module ExceptionSyntax where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Exception ( throw )
import DA.Assert ( (===) )
data DA.Internal.Desugar.DamlException => MyException
  = MyException {m : Text}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "m" MyException Text where
  getField = DA.Internal.Record.getFieldPrim @"m" @MyException @Text
  setField = DA.Internal.Record.setFieldPrim @"m" @MyException @Text
instance DA.Internal.Desugar.HasMessage MyException where
  message this@MyException {..} = let _ = this in m
instance DA.Internal.Desugar.HasThrow MyException where
  throwPure = GHC.Types.primitive @"EThrow"
instance DA.Internal.Desugar.HasToAnyException MyException where
  toAnyException = GHC.Types.primitive @"EToAnyException"
instance DA.Internal.Desugar.HasFromAnyException MyException where
  fromAnyException = GHC.Types.primitive @"EFromAnyException"
data GHC.Types.DamlTemplate => Test
  = Test {p : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @Test @Party
data Call
  = Call {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasSignatory Test where
  signatory this@Test {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Test where
  observer this@Test {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Test where
  ensure this@Test {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Test where
  agreement this@Test {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Test where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Test where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Test where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Test where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Test where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Test where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Test where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Test DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test Call (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test Call (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test Call (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test Call where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test Call where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Test$Archive :
  (DA.Internal.Desugar.Consuming Test,
   Test -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Test$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Test$Call :
  (DA.Internal.Desugar.Consuming Test,
   Test -> Call -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> Call -> DA.Internal.Desugar.Update (()))
_choice$_Test$Call
  = (DA.Internal.Desugar.Consuming, 
     \ this@Test {..} arg@Call
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@Call
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do x <- DA.Internal.Desugar._tryCatch
                      \ _
                        -> do throw (MyException "ok")
                              pure "err"
                      \case
                        (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (MyException m))
                          -> DA.Internal.Desugar.Some pure m
                        _ -> DA.Internal.Desugar.None
               x === "ok")
tryCatchExample
  = script
      do p <- allocateParty "Alice"
         p `submit` createAndExerciseCmd (Test p) Call
