-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE

module InterfacePrecondition where

interface Token1 where
  getOwner1 : Party
  getAmount1 : Int
  splitImpl : Int -> Update (ContractId Token1, ContractId Token1)
  transferImpl : Party -> Update (ContractId Token1)

  ensure (getAmount1 this >= 0 && getAmount1 this <= 7)

  choice Split : (ContractId Token1, ContractId Token1)
    with
      splitAmount : Int
    controller getOwner1 this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token1
    with
      newOwner : Party
    controller getOwner1 this, newOwner
    do
      transferImpl this newOwner


interface Token2 where
  getOwner2 : Party
  getAmount2 : Int
  noopImpl : () -> Update ()

  ensure (getAmount2 this >= 3 && getAmount2 this <= 10)

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner2 this
      do
        noopImpl this nothing

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner

    ensure (amount >= 5 && amount <= 8)

    implements Token1 where
      let getOwner1 = owner
      let getAmount1 = amount
      let splitImpl = \splitAmount -> do
            assert (splitAmount < amount)
            cid1 <- create this with amount = splitAmount
            cid2 <- create this with amount = amount - splitAmount
            pure (toInterfaceContractId @Token1 cid1, toInterfaceContractId @Token1 cid2)
      let transferImpl = \newOwner -> do
            cid <- create this with owner = newOwner
            pure (toInterfaceContractId @Token1 cid)


    implements Token2 where
      let getOwner2 = owner
      let getAmount2 = amount
      let noopImpl = \nothing -> do
            pure ()

main = scenario do
  p <- getParty "Alice"
  p `submitMustFail` do
    create Asset with
      issuer = p
      owner = p
      amount = -1 -- violates ensure of Token1 & Token2 & Asset

  p `submitMustFail` do
    create Asset with
      issuer = p
      owner = p
      amount = 1 -- violates ensure of Token2 && Asset

  p `submitMustFail` do
    create Asset with
      issuer = p
      owner = p
      amount = 3 -- violates ensure of Asset

  p `submitMustFail` do
    create Asset with
      issuer = p
      owner = p
      amount = 8 -- violates ensure of Asset & Token2

  p `submitMustFail` do
    create Asset with
      issuer = p
      owner = p
      amount = 8 -- violates ensure of Token1

  p `submit` do
    create Asset with
      issuer = p
      owner = p
      amount = 5 -- works for Token1 & Token2 & Asset
  pure ()
