-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- This tests that, if the contract id in contract key check is skipped by
-- defining the type that contains a contract id in a separate module, the
-- runtime check is still performed.

-- @ERROR range=39:1-39:14; Contract IDs are not supported in contract key
-- Below should be `Contract IDs are not supported in contract key` however Scenario service does not return the error
-- @TODO Make a ticket about this
-- @ERROR range=48:1-48:13; Scenario service backend error
-- @ERROR range=54:1-54:16; Contract IDs are not supported in contract key

-- @TODO Test this within Update context, so in a template

module ContractIdInContractKeySkipCheck where

import Daml.Script
import ContractIdInContractKeySkipCheckType (ContractId'(..))

template Contract with
    party : Party
  where
    signatory party

template ContractKeyWithCid with
    party: Party
    cid: ContractId Contract
  where
    signatory [party]

    nonconsuming choice Noop : ()
      controller party
      do pure ()

    key (party, ContractId' cid) : (Party, ContractId' Contract)
    maintainer key._1

createCrashes = script do
    alice <- allocateParty "Alice"
    cid <- submit alice $ do
      createCmd Contract with party = alice
    submit alice $ do
      createCmd ContractKeyWithCid with
        party = alice
        cid = cid

fetchCrashes = script do
    alice <- allocateParty "Alice"
    cid <- submit alice $ do
          createCmd Contract with party = alice
    queryContractKey @ContractKeyWithCid alice (alice, ContractId' cid)

exerciseCrashes = script do
    alice <- allocateParty "Alice"
    cid <- submit alice $ do
          createCmd Contract with party = alice
    submit alice $ do exerciseByKeyCmd @ContractKeyWithCid (alice, ContractId' cid) Noop
