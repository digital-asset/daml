-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- Here we test that evaluation order proceeds as we expect. We do this by
-- raising multiple errors and seeing which one percolates to the top (i.e.
-- which error was evaluated first).
--
-- (Convention: When testing a rule in the operational semantics, we use the
-- rule's name in the error message itself. If there are multiple tests for
-- the same rule, we use `R_1`, `R_2`, `R_3`, and so on. This is why there is
-- `evExpRecUpdErr1`, `evExpRecUpdErr2_1`, and `evExpRecUpdErr2_2`, for example.)

{-# OPTIONS -Wno-template-agreement #-}
{-# LANGUAGE ApplicativeDo #-}

-- @SUPPORTS-LF-FEATURE DAML_RIGHT_TO_LEFT_EVALUATION

module SemanticsEvalOrderRightToLeft where

import Daml.Script
import ScriptAssertHelpers

-- @ERROR EvTyAbsErasableErr OK
evTyAbsErasableErr : Script ()
evTyAbsErasableErr = script do
  let x : forall a. a
      x = error "EvTyAbsErasableErr OK"
  error "EvTyAbsErasable failed"

-- @ERROR overApply OK
overApply : Script ()
overApply = script do
  let f x = error "overApply Failed"
  let _ = f 1 (error "overApply OK")
  let _ = f 1 2
  pure ()

-- @ERROR EvExpAppErr1 OK
evExpAppErr1 : Script ()
evExpAppErr1 = script do
  let _ = (error "EvExpAppErr1 failed") (error "EvExpAppErr1 OK")
  pure ()

-- @ERROR EvExpAppErr2 OK
evExpAppErr2 : Script ()
evExpAppErr2 = script do
  let f _ _ = error "EvExpAppErr2 failed"
  let _ = f 1 (error "EvExpAppErr2 OK")
  pure ()

-- @ERROR EvExpLetErr OK
evExpLetErr : Script ()
evExpLetErr = script do
    let _ = error "EvExpLetErr OK"
    let _ = error "EvExpLetErr bad"
    error "EvExpLetErr failed"

-- Regression test for issue #6788
-- @ERROR multiLetEvalOrder OK
multiLetEvalOrder : Script ()
multiLetEvalOrder = script do
    let _ = error "multiLetEvalOrder OK"
        _ = error "multiLetEvalOrder failed"
    error "multiLetEvalOrder failed"

-- @ERROR EvExpCaseErr OK
evExpCaseErr : Script ()
evExpCaseErr = script do
  case error "EvExpCaseErr OK" of
    None -> error "EvExpCaseErr failed"
    Some _ -> error "EvExpCaseErr failed"

-- @ERROR EvExpCase_1 OK
evExpCase_1 : Script ()
evExpCase_1 = script do
  case None of
    None -> error "EvExpCase_1 OK"
    Some _ -> error "EvExpCase_1 failed"

-- @ERROR EvExpCase_2 OK
evExpCase_2 : Script ()
evExpCase_2 = script do
  case Some 1 of
    None -> error "EvExpCase_2 failed"
    Some _ -> error "EvExpCase_2 OK"

-- @ERROR EvExpConsErr1 OK
evExpConsErr1 : Script [Int]
evExpConsErr1 = script do
  pure ( error "EvExpConsErr1 failed"
      :: error "EvExpConsErr1 failed"
      :: error "EvExpConsErr1 OK")

-- @ERROR EvExpConsErr2 OK
evExpConsErr2 : Script [Int]
evExpConsErr2 = script do
  pure ( 10
      :: error "EvExpConsErr2 failed"
      :: error "EvExpConsErr2 OK")

-- @ERROR EvExpBuiltinErr OK
evExpBuiltinErr : Script ()
evExpBuiltinErr = script do
  let _ : Int = error "EvExpBuiltinErr failed" + error "EvExpBuiltinErr OK"
  pure ()


data R1 = R1 { a: Int, b: Int }

-- @ERROR EvExpRecConErr_1 OK
evExpRecConErr_1 : Script R1
evExpRecConErr_1 = script do
  pure R1 { a = error "EvExpRecConErr_1 failed", b = error "EvExpRecConErr_1 OK" }

-- @ERROR EvExpRecConErr_2 OK
evExpRecConErr_2 : Script R1
evExpRecConErr_2 = script do
  pure R1 { b = error "EvExpRecConErr_2 OK", a = error "EvExpRecConErr_2 failed" }

data R2 = R2 { d: Int, c: Int }
  -- ^ Checking that there isn't a dependence on the field names.
  -- There should be a dependence on the definition order according to the LF spec.

-- @ERROR EvExpRecConErr_3 OK
evExpRecConErr_3 : Script R2
evExpRecConErr_3 = script do
  pure R2 { d = error "EvExpRecConErr_3 failed", c = error "EvExpRecConErr_3 OK" }

-- @ERROR EvExpRecConErr_4 OK
evExpRecConErr_4 : Script R2
evExpRecConErr_4 = script do
  pure R2 { c = error "EvExpRecConErr_4 OK", d = error "EvExpRecConErr_4 failed"  }

-- @ERROR EvExpRecUpdErr1 OK
evExpRecUpdErr1 : Script R1
evExpRecUpdErr1 = script do
  pure (error "EvExpRecUpdErr1 failed" : R1)
    { a = error "EvExpRecUpdErr1 failed", b = error "EvExpRecUpdErr1 OK" }

-- @ERROR EvExpRecUpdErr2_1 OK
evExpRecUpdErr2_1 : Script R1
evExpRecUpdErr2_1 = script do
  pure (R1 {a=0, b=0})
    { a = error "EvExpRecUpdErr2_1 failed", b = error "EvExpRecUpdErr2_1 OK" }

-- @ERROR EvExpRecUpdErr2_2 OK
evExpRecUpdErr2_2 : Script R1
evExpRecUpdErr2_2 = script do
  pure (R1 {a=0, b=0})
    { b = error "EvExpRecUpdErr2_2 failed", a = error "EvExpRecUpdErr2_2 OK" }
  -- ^ Note that record update depends on the order the fields appear in
  -- code, rather than the order in which fields were defined.

-- NOTE(MH): Make sure we don't swallow record field updates if a field is
-- updated multiple times.
-- @ERROR EvExpRecUpdErr2_3 OK
evExpRecUpdErr2_3 : Script R1
evExpRecUpdErr2_3 = script do
  pure (R1 {a=0, b=0})
    { a = error "EvExpRecUpdErr2_3 failed", a = error "EvExpRecUpdErr2_3 OK" }

-- Can't test LF struct evaluation order from Daml, since we purposely avoid
-- evaluation of struct fields during typeclass desugaring, and we don't have
-- a way to construct LF structs directly.

-- @ERROR EvExpFoldrErr1 OK
evExpFoldrErr1 : Script Int
evExpFoldrErr1 = script do
  pure (foldr f 0 [1, 2])
  where
    f 2 0 = error "EvExpFoldrErr1 OK"
    f _ _ = error "EvExpFoldrErr1 failed"

-- @ERROR EvExpFoldrErr2 OK
evExpFoldrErr2 : Script Int
evExpFoldrErr2 = script do
  pure (foldr f 0 [1, 2])
  where
    f 1 = error "EvExpFoldrErr2 OK"
    f _ = error "EvExpFoldrErr2 failed"

-- @ERROR EvExpFoldrErr3 OK
evExpFoldrErr3 : Script Int
evExpFoldrErr3 = script do
  pure (foldr f identity [1] (error "EvExpFoldrErr3 OK"))
  where
    f: Int -> (Int -> Int) -> (Int -> Int)
    f _ _ = error "EvExpFoldrErr3 failed"

-- @ERROR EvExpFoldlErr1 OK
evExpFoldlErr1 : Script Int
evExpFoldlErr1 = script do
  pure (foldl f 0 [1, 2])
  where
    f 0 1 = error "EvExpFoldlErr1 OK"
    f _ _ = error "EvExpFoldlErr1 failed"

-- @ERROR EvExpFoldlErr2 OK
evExpFoldlErr2 : Script Int
evExpFoldlErr2 = script do
  pure (foldl f 0 [1, 2])
  where
    f 0 = error "EvExpFoldlErr2 OK"
    f _ = error "EvExpFoldlErr2 failed"

-- @ERROR EvExpFoldlErr3 OK
evExpFoldlErr3 : Script Int
evExpFoldlErr3 = script do
  pure (foldl f identity [1] (error "EvExpFoldlErr3 OK"))
  where
    f: (Int -> Int) -> Int -> (Int -> Int)
    f _ _ = error "EvExpFoldlErr3 failed"

-- @ERROR EvExpUpPureErr OK
evExpUpPureErr : Script ()
evExpUpPureErr = script do
  let _ : Update () = pure (error "EvExpUpPureErr OK")
  pure ()

-- @ERROR EvExpUpBindErr OK
evExpUpBindErr : Script ()
evExpUpBindErr = script do
  let _ : Update () = do
          error "EvExpUpBindErr OK"
          error "EvExpUpBindErr failed"
  pure ()

template T
  with p : Party
  where signatory p

-- @ERROR EvUpdCreateErr1 OK
template T_EvUpdCreateErr1
  with
    p : Party
  where
    ensure (error @Bool "EvUpdCreateErr1 OK")
    agreement (error @Text "EvUpdCreateErr1 failed (1)")
    signatory (error @Party "EvUpdCreateErr1 failed (2)")
    observer (error @Party "EvUpdCreateErr1 failed (3)")

evUpdCreateErr1 : Script ()
evUpdCreateErr1 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr1 p)
  abort "EvUpdCreateErr1 failed (4)"

-- @ERROR range=260:1-260:16; Template precondition violated
template T_EvUpdCreateFail
  with
    p : Party
  where
    ensure False
    agreement (error @Text "EvUpdCreateFail failed (1)")
    signatory (error @Party "EvUpdCreateFail failed (2)")
    observer (error @Party "EvUpdCreateFail failed (3)")

evUpdCreateFail : Script ()
evUpdCreateFail = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateFail p)
  abort "EvUpdCreateFail failed (4)"

-- @ERROR EvUpdCreateErr2 OK
template T_EvUpdCreateErr2
  with
    p : Party
  where
    ensure True
    agreement (error @Text "EvUpdCreateErr2 OK")
    signatory (error @Party "EvUpdCreateErr2 failed (1)")
    observer (error @Party "EvUpdCreateErr2 failed (2)")

evUpdCreateErr2 : Script ()
evUpdCreateErr2 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr2 p)
  abort "EvUpdCreateErr2 failed (3)"

-- @ERROR EvUpdCreateErr3 OK
template T_EvUpdCreateErr3
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory (error @Party "EvUpdCreateErr3 OK")
    observer (error @Party "EvUpdCreateErr3 failed (1)")

evUpdCreateErr3 : Script ()
evUpdCreateErr3 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr3 p)
  abort "EvUpdCreateErr3 failed (2)"

-- @ERROR EvUpdCreateErr4_1 OK
template T_EvUpdCreateErr4_1
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer (error @Party "EvUpdCreateErr4_1 OK")

evUpdCreateErr4_1 : Script ()
evUpdCreateErr4_1 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr4_1 p)
  abort "EvUpdCreateErr4_1 failed"

-- @ERROR EvUpdCreateErr4_2 OK
template T_EvUpdCreateErr4_2
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer (error @Party "EvUpdCreateErr4_2 OK")
    key error @Party "EvUpdCreateErr4_2 failed" : Party
    maintainer error @Party "EvUpdCreateErr4_2 failed"

evUpdCreateErr4_2 : Script ()
evUpdCreateErr4_2 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr4_2 p)
  abort "EvUpdCreateErr4_2 failed"

-- @ERROR EvUpdCreateWithKeyErr1 OK
template T_EvUpdCreateWithKeyErr1
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer [] : [Party]
    key error @Party "EvUpdCreateWithKeyErr1 OK" : Party
    maintainer error @Party "EvUpdCreateWithKeyErr1 failed"

evUpdCreateWithKeyErr1 : Script ()
evUpdCreateWithKeyErr1 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateWithKeyErr1 p)
  abort "EvUpdCreateWithKeyErr1 failed"

-- @ERROR EvUpdCreateWithKeyErr2 OK
template T_EvUpdCreateWithKeyErr2
  with
    p : Party
  where
    ensure True
    agreement ""
    signatory p
    observer [] : [Party]
    key p : Party
    maintainer error @Party "EvUpdCreateWithKeyErr2 OK"

evUpdCreateWithKeyErr2 : Script ()
evUpdCreateWithKeyErr2 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateWithKeyErr2 p)
  abort "EvUpdCreateWithKeyErr2 failed"

-- | `choice ... controller P ...` doesn't add `P` as observer.
-- This test is here to contrast with the previous.
-- @ERROR choiceControllerDoesntAddObserver OK
template T_ChoiceControllerDoesntAddObserver
  with
    p : Party
  where
    signatory p
    choice CY : ()
      controller (error @Party "choiceControllerDoesntAddObserver failed")
        do pure ()

choiceControllerDoesntAddObserver : Script ()
choiceControllerDoesntAddObserver = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_ChoiceControllerDoesntAddObserver p)
  abort "choiceControllerDoesntAddObserver OK"

-- | Verify that contract inactivity is checked before interpreting
-- the rest of the update.
-- @ERROR Attempt to exercise a contract that was consumed in same transaction. Contract: #0:0 (SemanticsEvalOrderRightToLeft:T_DoubleArchive)
template T_DoubleArchive
  with
    p : Party
  where
    signatory p

doubleArchive : Script ()
doubleArchive = script do
  p <- allocateParty "Alice"
  c <- submit p do createCmd (T_DoubleArchive p)
  submit p do
    archiveCmd c
    archiveCmd c
    pure ()
  abort "doubleArchive failed"

-- | Verify that a consuming choice's update is interpreted with a
-- ledger state where the template has already been consumed.
-- @ERROR Attempt to exercise a contract that was consumed in same transaction. Contract: #0:0 (SemanticsEvalOrderRightToLeft:T_EvUpdExercConsumErr_1)
template T_EvUpdExercConsumErr_1
  with
    p : Party
  where
    signatory p
    choice C_EvUpdExercConsumErr_1 : ()
      controller p
        do
          archive self
          error "EvUpdExercConsumErr_1 failed (1)"

evUpdExercConsumErr_1 : Script ()
evUpdExercConsumErr_1 = script do
  p <- allocateParty "Alice"
  submit p do createAndExerciseCmd (T_EvUpdExercConsumErr_1 p) C_EvUpdExercConsumErr_1
  abort "EvUpdExercConsumErr_1 failed (2)"


-- | Similar to `T_EvUpdExercConsumErr_1` but using fetch instead of archive.
-- @ERROR Attempt to exercise a contract that was consumed in same transaction. Contract: #0:0 (SemanticsEvalOrderRightToLeft:T_EvUpdExercConsumErr_2)
template T_EvUpdExercConsumErr_2
  with
    p : Party
  where
    signatory p
    choice C_EvUpdExercConsumErr_2 : ()
      controller p
        do
          fetch self
          error "EvUpdExercConsumErr_2 failed (1)"

evUpdExercConsumErr_2 : Script ()
evUpdExercConsumErr_2 = script do
  p <- allocateParty "Alice"
  submit p do createAndExerciseCmd (T_EvUpdExercConsumErr_2 p) C_EvUpdExercConsumErr_2
  abort "EvUpdExercConsumErr_2 failed (2)"

-- | Verify that a nonconsuming choice's update is interpreted with
-- the original ledger state (template hasn't been consumed).
-- @ERROR EvUpdExercNonConsumErr OK
template T_EvUpdExercNonConsumErr
  with
    p : Party
  where
    signatory p
    nonconsuming choice C_EvUpdExercNonConsumErr : ()
      controller p
        do
          archive self
          error "EvUpdExercNonConsumErr OK"

evUpdExercNonConsumErr : Script ()
evUpdExercNonConsumErr = script do
  p <- allocateParty "Alice"
  c <- submit p do createAndExerciseCmd (T_EvUpdExercNonConsumErr p) C_EvUpdExercNonConsumErr
  abort "EvUpdExercNonConsumErr failed"


-- | Show that the exercising party is evaluated after
-- we check that the contract is still active.
-- @ERROR Attempt to exercise a contract that was consumed in same transaction.
template T_EvUpdExercWithoutActorsErr_2
  with
    p : Party
  where
    signatory p
    choice C_EvUpdExercWithoutActorsErr_2 : () with
      controller (error @Party "EvUpdExercWithoutActorsErr_2 failed (1)")
        do abort "EvUpdExercWithoutActorsErr_2 failed (2)"

evUpdExercWithoutActorsErr_2 : Script ()
evUpdExercWithoutActorsErr_2 = script do
  p <- allocateParty "Alice"
  c <- submit p do createCmd (T_EvUpdExercWithoutActorsErr_2 p)
  submit p do
    archiveCmd c
    exerciseCmd c C_EvUpdExercWithoutActorsErr_2
    pure ()
  abort "EvUpdExercWithoutActorsErr_2 failed (3)"

-- | Checks that an authorization / bad actor check occurs
-- at some point during submission.
-- @ERROR exercise of C_BadActorCheck
template T_BadActorCheck
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice C_BadActorCheck : ()
      controller p2
      do pure ()

badActorCheck : Script ()
badActorCheck = script do
  p1 <- allocateParty "Alice"
  p2 <- allocateParty "Bob"
  submit p1 do createAndExerciseCmd (T_BadActorCheck p1 p2) C_BadActorCheck
  error "BadActorCheck failed"

-- @ERROR Couldn't see contract with key ()
template T_EvUpdFetchByKeyErr
  with
    p : Party
  where
    signatory p
    key () : ()
    maintainer (error @Party "EvUpdFetchByKeyErr OK")

evUpdFetchByKeyErr : Script ()
evUpdFetchByKeyErr = script do
  p <- allocateParty "Alice"
  canSeeKey @T_EvUpdFetchByKeyErr p ()
  abort "EvUpdFetchByKeyErr failed"

template T_EvUpdFetchByKeyErrContract
  with
    p : Party
  where
    signatory p
    key () : ()
    maintainer (error @Party "EvUpdFetchByKeyErrContract OK")

-- Caller contract to ensure above follows correct evalation path
-- @ERROR EvUpdFetchByKeyErrContract OK
template T_EvUpdFetchByKeyErrCaller
  with
    p : Party
  where
    signatory p
    choice DoFetch : ()
      controller p
      do
        fetchByKey @T_EvUpdFetchByKeyErrContract ()
        pure ()

evUpdFetchByKeyErrContract : Script ()
evUpdFetchByKeyErrContract = script do
  p <- allocateParty "Alice"
  p `submit` createAndExerciseCmd (T_EvUpdFetchByKeyErrCaller p) DoFetch
  abort "EvUpdFetchByKeyErrContract failed"
