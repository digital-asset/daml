-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF 1.dev
-- @QUERY-LF [ .modules[].exceptions[] ] | length == 1
-- @WARN Modules compiled with the DatatypeContexts language extension
{-# LANGUAGE DatatypeContexts #-}

-- | Test that desugared exceptions are picked up during LF conversion.
-- This is the "desugared" counterpart to ExceptionSyntax.
module ExceptionDesugared where

import DA.Exception (throw)
import DA.Assert ((===))

data DA.Internal.Desugar.DamlException => MyException =
    MyException with
        m : Text

instance DA.Internal.Desugar.HasMessage MyException where
    message (MyException m) = m

instance DA.Internal.Desugar.HasThrow MyException where
    throwPure = GHC.Types.primitive @"EThrow"

instance DA.Internal.Desugar.HasToAnyException MyException where
    toAnyException = GHC.Types.primitive @"EToAnyException"

instance DA.Internal.Desugar.HasFromAnyException MyException where
    fromAnyException = GHC.Types.primitive @"EFromAnyException"

tryCatchExample = scenario do
    p <- getParty "Alice"
    x <- submit p do
        DA.Internal.Desugar._tryCatch
            (\() -> do
                throw (MyException "ok")
                pure "err"
            )
            (\case
                (DA.Internal.Desugar.fromAnyException -> Some (MyException m)) ->
                    Some (pure m)
                _ ->
                    None
            )
    x === "ok"
