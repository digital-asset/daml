-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @ ERROR B's Company is run by B and they are 3 years old

module Records where

import DA.Record -- for type annotations using HasField
import DA.Assert

data Record a = Record {field : a}
data Company = Company {name : Text, owner : Person}
data Person = Person {name : Text, age : Int}

-- a simple example of a third-party library needing HasField
type Lens s a = (s -> a, a -> s -> s)
view (g, _) = g
update (_, s) = s

display : Company -> Text
display c = c.name <> " is run by " <> c.owner.name <> " and they are " <> show c.owner.age <> " years old"

nameAfterOwner c@Company{} = c{name = c.owner.name <> "'s Company"}
namePunning c@Company{..} = c{name} -- Puns are special, so an extra test case

sumAges : [Record Company] -> Int
sumAges = sum . map (.field.owner.age)

-- this variant of sumAges is polymorphic in the outer record
sumAges' : forall r. (HasField "field" r Company) => [r] -> Int
sumAges' = sum . map (.field.owner.age)

-- TODO: once we stop autogenerating selector functions, the
-- name "age" should be available for use as its own declaration
ageL : Lens Person Int
ageL = (getField @"age", setField @"age")

main = scenario do
    alice <- getParty "alice"
    sumAges (map Record [c,c,c]) === 9
    sumAges' (map Record [c,c,c]) === 9
    view ageL p === p.age
    submit alice $ abort $ display $ namePunning $ nameAfterOwner c
    where c = Company "A" p
          p = Person "B" 3
