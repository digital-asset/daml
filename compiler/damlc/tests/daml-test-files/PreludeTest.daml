-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @INFO range=52:26-52:42; Use uncurry
-- @INFO range=66:8-66:18; Redundant identity
-- @INFO range=67:12-67:26; Redundant identity
-- @INFO range=68:22-68:60; Redundant identity
-- @INFO range=90:8-90:17; Evaluate
-- @INFO range=94:12-94:21; Use elem
-- @INFO range=95:12-95:21; Use elem
-- @INFO range=96:10-96:19; Use elem
-- @INFO range=100:22-100:59; Redundant if
-- @INFO range=109:23-109:61; Redundant if
-- @INFO range=112:12-112:36; Use ||
-- @INFO range=114:11-114:34; Use ||
-- @INFO range=115:11-115:26; Use ||
-- @INFO range=118:12-118:37; Use &&
-- @INFO range=120:12-120:36; Use &&
-- @INFO range=121:11-121:27; Use &&
-- @INFO range=157:11-157:35; Use isNone
-- @INFO range=157:20-157:34; Use $>
-- @INFO range=163:9-163:55; Evaluate
-- @INFO range=164:9-164:58; Evaluate
-- @INFO range=177:16-177:35; Use ++
-- @INFO range=181:8-181:21; Redundant flip
-- @INFO range=182:14-182:37; Redundant flip
-- @INFO range=208:12-208:52; Evaluate
-- @INFO range=220:9-220:28; Take on a non-positive
-- @INFO range=226:9-226:28; Drop on a non-positive
-- @INFO range=292:27-292:38; Use zip
-- @INFO range=293:37-293:48; Use zip
-- @INFO range=297:37-297:50; Use zip3
-- @INFO range=298:52-298:65; Use zip3
-- @INFO range=310:8-310:20; Evaluate
-- @INFO range=313:10-313:22; Evaluate
-- @INFO range=317:12-317:19; Evaluate
-- @ERROR range=384:0-384:16; Day 29 falls outside of valid day range (1 .. 28) for Feb 2100.
-- @ERROR range=388:0-388:17; Day 0 falls outside of valid day range (1 .. 31) for Jan 2000.

module PreludeTest where

import DA.List as L
import DA.Text qualified as T
import DA.Assert
import DA.Date

testDollar = scenario do
    let x1 = (+) 3 $ (*) 2 10
    assert $ 23 == 23

testCurry = scenario do
    assert $ 23 == curry (\(x, y) -> x + y) 20 3

testUncurry = scenario do
    assert $ 23 == uncurry (+) (20, 3)

testPow = scenario do
    assert $ 256 == 2^8
    assert $ 2^2^2^2 == 65536

testRemainder = scenario do
  1 === 6 % 5
  -1 === -1 % 2

testId = scenario do
  1 === identity 1
  "abc" === identity "abc"
  [1.0, 2.0, 3.0] === identity ([1.0, 2.0, 3.0] : [Decimal])

testFoldl = scenario do
  2.5 === foldl (/) 150.0 ([5.0, 4.0, 3.0] : [Decimal])
  "abc" === foldl (<>) "" ["a", "b", "c"]
  -6 === foldl (-) 0 [1, 2, 3]

testFoldr = scenario do
  6.0 === foldr (/) 3.0 ([36.0,  300.0, 150.0] : [Decimal])
  "abc" === foldr (<>) "" ["a", "b", "c"]
  [1, 2, 3] === foldr (::) [] [1, 2, 3]
  2 === foldr (-) 0 [1, 2, 3]

testFind = scenario do
  None === find (==1) [2, 3, 4]
  None === find (==1) []
  Some 3 === find (==3) [2, 3, 4]
  Some 2 === find (>0) [-1, 0, 2, 5]
  None === find (const False) [0, 1, 2]
  Some 0 === find (const True) [0, 1, 2]

testLength = scenario do
  0 === length []
  10 === length [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

testAny = scenario do
  False === any (==1) [2, 3, 4]
  False === any (==1) []
  True=== any (==3) [2, 3, 4]
  True === any (>0) [-1, 0, 2, 5]
  False === any (const False) [0, 1, 2]
  True === any (const True) [0, 1, 2]
  True === any (\x -> if x == 0 then True else error "boom") [0, 1]

testAll = scenario do
  False === all (==1) [2, 3, 4]
  True === all (==1) []
  True === all (>0) [2, 3, 4]
  False === all (>0) [-1, 0, 2, 5]
  False === all (const False) [0, 1, 2]
  True === all (const True) [0, 1, 2]
  False === all (\x -> if x == 0 then False else error "boom") [0, 1]

testOr = scenario do
  False === or [False, False, False]
  False === or []
  True === or [False, False, True]
  True === or [True, True]

testAnd = scenario do
  False === and [False, False, False]
  True === and []
  False === and [False, False, True]
  True === and [True, True]

testElem = scenario do
  True === elem 1.0 ([1.0, 2.0, 3.0] : [Decimal])
  False === elem 4 [1, 2, 3]
  False === elem "" []

testNotElem = scenario do
  False === notElem 1.0 ([1.0, 2.0, 3.0] : [Decimal])
  True === notElem 4 [1, 2, 3]
  True === notElem "" []

testFmap = scenario do
  [1, 4, 9] === fmap (\x -> x * x) [1, 2, 3]
  [1, 2, 3] === fmap T.length ["a", "ab", "abc"]
  [] === fmap T.length []
  [1, 4, 9] === ((\x -> x * x) <$> [1, 2, 3])
  [1, 2, 3] === (T.length <$> ["a", "ab", "abc"])
  [] === (T.length <$> [])
  Right 2 === fmap T.length (Right "10" : Either Text Text)
  Left "a" === fmap (+10) (Left "a")
  (1, 3) === fmap T.length (1, "abc")

testOptional = scenario do
  Some 11 === fmap (+10) (Some 1)
  None === fmap (+10) None
  Some 11 === ((+10) <$> Some 1)
  None === ((+10) <$> None)

  Some 1 === pure 1

  Some 11 === (Some (+10) <*> Some 1)
  None === (Some (+10) <*> None)

  None === fmap (+1) (fail "")
  None === do None; pure 1
  assert $ None == (None *> pure 1)

  5 === optional 5 T.length None
  5 === optional 5 T.length (Some "12345")

testEither = scenario do
  11 === either (+1) (floor : Decimal -> Int) (Left 10)
  11 === either (+1) (floor : Decimal -> Int) (Right 11.5)

testAppend = scenario do
  "abc123" === "abc" <> "123"
  "efg" === "efg" <> ""
  "xyz" === "" <> "xyz"

testPlusPlus = scenario do
  [1, 2, 3, 4] === [1, 2] ++ [3, 4]
  ["a", "b", "c"] === [] ++ ["a", "b", "c"]
  [1, 2, 3] === [1, 2, 3] ++ []

testConcat = scenario do
  [1, 2, 3] === concat [[1,2], [3]]
  ["a", "b", "c"] === concat [[], ["a"], [], ["b", "c"]]

testFlip = scenario do
  5 === flip (/) 4 20
  Some 10 === flip fmap (Some 2) (*5)

testReverse = scenario do
  ([] : [Int]) === reverse []
  [3, 2, 1] === reverse [1, 2, 3]
  ["abc", "def"] === reverse ["def", "abc"]

testMapA = scenario do
 Some [1, 2] === mapA (\x -> if x > 0 then pure x else fail "") [1, 2]
 [[1, 2]] === mapA (\x -> if x > 0 then pure x else fail "") [1, 2]
 None === mapA (\x -> if x > 0 then pure x else fail "") [1, 2, 0]
 [] === mapA (\x -> if x > 0 then pure x else fail "") [1, 2, 0]

testForA = scenario do
  Some [1, 2] === forA [1, 2] (\x -> if x > 0 then pure x else fail "")
  None === forA [1, 2, 0] (\x -> if x > 0 then pure x else fail "")

testSequence = scenario do
  Some [1, 2] === sequence [Some 1, Some 2]
  [[1, 2]] === sequence [[1], [2]]
  None === sequence [Some 1, Some 2, None]
  Left "foo" === sequence [Right 1, Right 2, Left "foo", Left "bar"]
  Right [1, 2] === sequence [Right 1, Right 2 : Either Text Int]

testRbind = scenario do
  Some 1 === (Some . floor =<< Some (1.9 : Decimal))
  None === (Some . (floor : Decimal -> Int) =<< None)
  (None : Optional Int) === (const None =<< Some (1.9 : Decimal))

testConcatMap = scenario do
  ["a", "b", "c", "d"] === concatMap T.explode ["a", "bcd"]


testReplicate = scenario do
  [1, 1, 1, 1] === replicate 4 1
  [] === replicate 0 "foo"

testTake = scenario do
  [] === take 0 [1, 2, 3, 4]
  [1, 1, 1] === take 3 (replicate 10 1)
  ["abc"] === take 2 ["abc"]

testDrop = scenario do
  [] === drop 100 [1, 2, 3]
  [] === drop 0 ([] : [Int])
  [4, 5, 6] === drop 3 [1, 2, 3, 4, 5, 6]

testSplitAt = scenario do
  ([], [1, 2, 3]) === splitAt 0 [1, 2, 3]
  ([], [1, 2, 3]) === splitAt (-100) [1, 2, 3]
  ([1, 2], [3]) === splitAt 2 [1, 2, 3]
  ([1, 2, 3], []) === splitAt 3 [1, 2, 3]
  ([1, 2, 3], []) === splitAt 100 [1, 2, 3]

testTakeWhile = scenario do
  [1, 2] === takeWhile (<3) [1, 2, 3, 2, 1]
  [] === takeWhile (const True) ([] : [Text])
  [1, 2, 3, 2, 1] === takeWhile (const True) [1, 2, 3, 2, 1]
  [0, 0] === takeWhile (==0) [0, 0, 1, 1, 0, 0]

testDropWhile = scenario do
  [3, 2, 1] === dropWhile (<3) [1, 2, 3, 2, 1]
  [] === dropWhile (const True) ([] : [Text])
  [1, 2, 3, 2, 1] === dropWhile (const False) [1, 2, 3, 2, 1]
  [1, 1, 0, 0] === dropWhile (==0) [0, 0, 1, 1, 0, 0]

testSpan = scenario do
  ([1,2], [3, 2, 1]) === span (<3) [1, 2, 3, 2, 1]
  ([], []) === span (const True) ([] : [Text])
  ([], [1, 2, 3, 2, 1]) === span (const False) [1, 2, 3, 2, 1]
  ([0, 0], [1, 1, 0, 0]) === span (==0) [0, 0, 1, 1, 0, 0]

testPartition: Scenario ()
testPartition = scenario do
  ([], []) === partition (const True) ([] : [Text])
  ([], []) === partition (const False) ([] : [Text])
  ([1, 2], []) === partition (const True) [1,2]
  ([], [1, 2]) === partition (const False) [1,2]
  ([-2, -3, -5], [1, 4, 6]) === partition (<0) [1, -2, -3, 4, -5, 6]

testBreak = scenario do
  ([1,2], [3, 2, 1]) === break (>=3) [1, 2, 3, 2, 1]
  ([], []) === break (const False) ([] : [Text])
  ([], [1, 2, 3, 2, 1]) === break (const True) [1, 2, 3, 2, 1]
  ([0, 0], [1, 1, 0, 0]) === break (/=0) [0, 0, 1, 1, 0, 0]

testLookup = scenario do
  None === lookup 0 ([] : [(Int, Text)])
  None === lookup 0 [(1, "A"), (2, "B")]
  Some "B" === lookup 2 [(1, "A"), (2, "B")]
  Some "C" === lookup 0 [(1, "A"), (2, "B"), (0, "C")]

testZip = scenario do
  [] === zip ([] : [Int]) ([] : [Text])
  [] === zip  [1, 2, 3] ([] : [Text])
  [] === zip ([] : [Int]) ["A", "B", "C"]
  [(1, "A"), (2, "B")] === zip [1, 2, 3] ["A", "B"]
  [(1, "A"), (2, "B")] === zip [1, 2] ["A", "B", "C", "D"]
  [(1, "A"), (2, "B"), (0, "C")] === zip [1, 2, 0] ["A", "B", "C", "D"]

testZip3 = scenario do
  [] === zip3 ([] : [Int]) ([] : [Text]) ([] : [Decimal])
  [] === zip3  [1, 2, 3] ([] : [Text]) ([] : [Decimal])
  [] === zip3 ([] : [Int]) ["A", "B", "C"] ([] : [Decimal])
  [] === zip3 ([] : [Int]) ([] : [Text]) ([1.0, 2.0] : [Decimal])
  [(1, "A", 2.0), (2, "B", 1.0)] === zip3 [1, 2, 3] ["A", "B"] ([2.0, 1.0, 3.0] : [Decimal])
  [(1, "A", 2.0), (2, "B", 1.0)] === zip3 [1, 2] ["A", "B", "C", "D"] ([2.0, 1.0, 3.0] : [Decimal])
  [(1, "A", 2.0), (2, "B", 1.0), (0, "C", 3.0)] === zip3 [1, 2, 0, 5] ["A", "B", "C", "D"] ([2.0, 1.0, 3.0] : [Decimal])

testZipWith = scenario do
  [(1, "A"), (2, "B")] === zipWith (,) [1, 2] ["A", "B", "C", "D"]
  [(1, "A"), (2, "B"), (0, "C")] === zipWith (,) [1, 2, 0, 4, 9] ["A", "B", "C"]
  [11, 25, 33] === zipWith ((+) . floor) ([1.9, 5.4, 3.2] : [Decimal]) [10, 20, 30, 40]

testZipWith3 = scenario do
  [(1, "A", 2.2), (2, "B", 1.1)] === zipWith3 (,,) [1, 2] ["A", "B", "C", "D"] ([2.2, 1.1, 3.3] : [Decimal])
  [(1, "A", 2.2), (2, "B", 1.1), (0, "C", 3.3)] === zipWith3 (,,) [1, 2, 0, 4, 9] ["A", "B", "C"] ([2.2, 1.1, 3.3] : [Decimal])
  [11, 21, 31] === zipWith3 (\x y z -> floor x + y - T.length z) ([1.9, 5.4, 3.2] : [Decimal]) [10, 20, 30, 40] ["", "....", ".."]

testUnzip = scenario do
  ([], []) === unzip ([] : [(Int, Text)])
  ([1, 2, 3], ["A", "B", "C"]) === unzip [(1, "A"), (2, "B"), (3, "C")]

testUnzip3 = scenario do
  ([], [], []) === unzip3 ([] : [(Int, Text, Decimal)])
  ([1, 2, 3], ["A", "B", "C"], [2.0, 1.0, 9.0]) === unzip3 [(1, "A", 2.0), (2, "B", 1.0), (3, "C", (9.0 : Decimal))]

testFst = scenario do
  1 === fst (1, "A")

testSnd = scenario do
  "A" === snd (1, "A")

testNull = scenario do
  False === null [1]
  True  === null []

testFilter = scenario do
  [] === filter (>3) [1, 2, 3]
  [1, 3, 5] === filter (\x -> x%2 == 1) [1, 2, 3, 4, 5, 6]

testFixedpoint = scenario do
  89 === fixedpoint (\f x -> if x < 2 then 1 else f (x-1) + f (x-2)) 10

testIntToDecimal = scenario do
    assert $ intToDecimal 1 == 1.0
    assert $ intToDecimal (-7) == (-7.0)
    assert $ intToDecimal 0 == 0.0

testTruncate = scenario do
    assert $ truncate (14.9 : Decimal) == 14
    assert $ truncate (15.0 : Decimal) == 15
    assert $ truncate ((-9.3) : Decimal) == (-9)
    assert $ truncate (0.0 : Decimal) == 0

testCeiling = scenario do
    assert $ ceiling (14.9 : Decimal) == 15
    assert $ ceiling (15.0 : Decimal) == 15
    assert $ ceiling ((-9.3) : Decimal) == (-9)
    assert $ ceiling (0.0 : Decimal) == 0

testFloor = scenario do
    assert $ floor (14.9 : Decimal) == 14
    assert $ floor (15.0 : Decimal) == 15
    assert $ floor ((-9.3) : Decimal) == (-10)
    assert $ floor (0.0 : Decimal) == 0

testRound = scenario do
    roundCommercial 0 10.5 === (11.0 : Decimal)
    roundCommercial 2 22.105 === (22.110 : Decimal)
    roundBankers 0 10.5 === (10.0 : Decimal)
    roundBankers 2 22.105 === (22.100 : Decimal)
    roundCommercial 0 (-10.5) === (-11.0 : Decimal)
    roundCommercial 2 (-22.105) === (-22.110 : Decimal)
    roundBankers 0 (-10.5) === (-10.0 : Decimal)
    roundBankers 2 (-22.105) === (-22.100 : Decimal)

testNth = scenario do
    let l = [1, 5, 10]
    let v = l !! 1
    assert $ v == 5

testDiv = scenario do
    assert $ 10.0 / 2.0 == (5.0 : Decimal)
    assert $ 13.2 / 5.0 == (2.64 : Decimal)

    assert $ 0.5 == recip (2.0 : Decimal)
    1.0 / 3.0 === (0.3333333333 : Decimal)
    1.0 / 3.0 * 3.0 === (0.9999999999 : Decimal)

    10 / 2 === 5
    10 / 3 === 3
    5 / 3 === 1
    -5 / 3 === -1
    -3 / (-3) === 1
    5 / (-3) === -1

testDayOfWeek = scenario do
    assert $ dayOfWeek (date 1900 Jan 01) == Monday
    assert $ dayOfWeek (date 2018 Jan 17) == Wednesday
    assert $ dayOfWeek (date 2020 Feb 29) == Saturday

testDateOverflow = scenario do
    pure $ date 2100 Feb 29
      -- 2100 is not a leap year!

testDateUnderflow = scenario do
    pure $ date 2000 Jan 0
