{-# LANGUAGE UndecidableSuperClasses #-}
{-# LANGUAGE FlexibleContexts #-}

daml 1.2
module Transferrable where

import DA.Record

class (Template t, Eq t, HasField "issuer" t Party, HasField "owner" t Party) => Asset t
-- ^ Would like to write this as a constraint synonym but DAML doesn't allow it currently

template (Asset t, TransferProposalInstance t) => Transferrable t
  with
    transferrableAsset: t
  where
    let owner = transferrableAsset.owner

    signatory transferrableAsset.issuer, owner

    controller owner can
      ProposeTransfer: ContractId (TransferProposal t)
        with newOwner: Party
        do create TransferProposal with
            assetToTransfer = this
            newOwner

template (Asset t, TransferrableInstance t) => TransferProposal t
  with
    assetToTransfer: Transferrable t
    newOwner: Party
  where
    let owner = assetToTransfer.transferrableAsset.owner
    signatory owner

    controller owner can
      WithdrawTransfer: ContractId (Transferrable t)
        do create assetToTransfer

    controller newOwner can
      RejectTransfer: ContractId (Transferrable t)
        do create assetToTransfer

      AcceptTransfer: ContractId (Transferrable t)
        do create assetToTransfer with
            transferrableAsset = assetToTransfer.transferrableAsset with owner = newOwner

template Cash
  with
    issuer: Party
    owner: Party
    amount: Decimal
    currency: Text
  where
    signatory issuer, owner

instance Asset Cash
template instance CashTransferProposal = TransferProposal Cash
template instance CashTransferrable = Transferrable Cash

s = scenario do
  rohan <- getParty "Rohan"
  martin <- getParty "Martin"
  -- Cash is self-issued by Rohan and Martin to simplify the workflow
  let rohans50 = Transferrable Cash with issuer = rohan; owner = rohan; amount = 50.0; currency = "USD"
      martins50 = Transferrable Cash with issuer = martin; owner = martin; amount = 50.0; currency = "CHF"
  -- Create the Transferrable contracts
  rohans50Cid <- rohan `submit` create rohans50
  martins50Cid <- martin `submit` create martins50
  -- Martin transfers his $50 to Rohan
  martinsTransferProposal <- martin `submit` exercise martins50Cid ProposeTransfer with newOwner = rohan
  rohan `submit` exercise martinsTransferProposal AcceptTransfer
  -- Rohan returns the favour by initiating a transfer in the other direction
  rohansTransferProposal <- rohan `submit` exercise rohans50Cid ProposeTransfer with newOwner = martin
  martin `submit` exercise rohansTransferProposal AcceptTransfer
  return ()
