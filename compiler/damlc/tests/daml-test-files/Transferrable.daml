{-# LANGUAGE UndecidableSuperClasses #-}
{-# LANGUAGE FlexibleContexts #-}

daml 1.2
module Transferrable where

import DA.Record

class (Template t, Eq t, HasField "issuer" t Party, HasField "owner" t Party) => Issuable t

template Issuable t => Issuance t with
    assetToIssue: t
  where
    signatory assetToIssue.issuer

    controller assetToIssue.owner can
      AcceptIssuance: ContractId t
        do create assetToIssue

template (Issuable t, TransferProposalInstance t) => Transferrable t
  with
    transferrableAsset: t
  where
    let owner = transferrableAsset.owner

    -- Note that the issuer is not a signatory, as it would require further
    -- proposal or authorisation steps.
    signatory owner

    controller owner can
      ProposeTransfer: ContractId (TransferProposal t)
        with newOwner: Party
        do create TransferProposal with
            assetToTransfer = this
            newOwner

template (Issuable t, TransferrableInstance t) => TransferProposal t
  with
    assetToTransfer: Transferrable t
    newOwner: Party
  where
    let owner = assetToTransfer.transferrableAsset.owner
    signatory owner

    controller owner can
      WithdrawTransfer: ContractId (Transferrable t)
        do create assetToTransfer

    controller newOwner can
      RejectTransfer: ContractId (Transferrable t)
        do create assetToTransfer

      AcceptTransfer: ContractId (Transferrable t)
        do create assetToTransfer with
            transferrableAsset = assetToTransfer.transferrableAsset with owner = newOwner

template Cash
  with
    issuer: Party
    owner: Party
    amount: Decimal
    currency: Text
  where
    -- Note that the issuer is not a signatory, to simplify our workflow.
    signatory owner

    controller owner can
      MakeTransferrable: ContractId (Transferrable Cash)
        do create $ Transferrable this

instance Issuable Cash
template instance CashIssuance = Issuance Cash
template instance CashTransferProposal = TransferProposal Cash
template instance CashTransferrable = Transferrable Cash

s = scenario do
  issuer <- getParty "World Bank"
  rohan <- getParty "Rohan"
  martin <- getParty "Martin"
  -- Issue $50 each to Rohan and Martin
  let rohans50 = Cash with issuer; owner = rohan; amount = 50.0; currency = "USD"
      martins50 = Cash with issuer; owner = martin; amount = 50.0; currency = "CHF"
  rohans50Issuance <- issuer `submit` create Issuance with assetToIssue = rohans50
  rohans50Cid <- rohan `submit` exercise rohans50Issuance AcceptIssuance
  martins50Issuance <- issuer `submit` create Issuance with assetToIssue = martins50
  martins50Cid <- martin `submit` exercise martins50Issuance AcceptIssuance
  -- Rohan and Martin need to explicitly make their cash transferrable,
  -- i.e. convert the Cash contracts into Transferrable contracts
  rohans50Transferrable <- rohan `submit` exercise rohans50Cid MakeTransferrable
  martins50Transferrable <- martin `submit` exercise martins50Cid MakeTransferrable
  -- Martin transfers his $50 to Rohan
  martinsTransferProposal <- martin `submit` exercise martins50Transferrable ProposeTransfer with newOwner = rohan
  rohan `submit` exercise martinsTransferProposal AcceptTransfer
  -- Rohan returns the favour by initiating a transfer in the other direction
  rohansTransferProposal <- rohan `submit` exercise rohans50Transferrable ProposeTransfer with newOwner = martin
  martin `submit` exercise rohansTransferProposal AcceptTransfer
  return ()
