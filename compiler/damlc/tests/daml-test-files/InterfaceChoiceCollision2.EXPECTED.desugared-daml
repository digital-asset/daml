module InterfaceChoiceCollision2 where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import qualified InterfaceChoiceCollision1
data GHC.Types.DamlInterface => Interface
  = Interface GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Interface where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Interface where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Interface Interface where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Interface Interface where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_Interface_Interface :
  DA.Internal.Desugar.RequiresT Interface InterfaceChoiceCollision1.Interface
_requires_Interface_Interface = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface Interface InterfaceChoiceCollision1.Interface where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface Interface InterfaceChoiceCollision1.Interface where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasMethod Interface "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t Interface => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @Interface t)
instance DA.Internal.Desugar.HasToAnyTemplate Interface where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Interface where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Interface where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Interface where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Interface where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Interface where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Interface where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType Interface where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Interface where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Interface) =>
         DA.Internal.Desugar.HasToAnyChoice t MyArchive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Interface) =>
         DA.Internal.Desugar.HasFromAnyChoice t MyArchive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Interface)) =>
         DA.Internal.Desugar.HasExerciseGuarded t MyArchive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Interface cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Interface cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Interface)) =>
         DA.Internal.Desugar.HasExercise t MyArchive (()) where
  exercise = DA.Internal.Desugar._exerciseDefault
data MyArchive
  = MyArchive {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_InterfaceMyArchive :
  (Interface -> MyArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Interface
   -> Interface -> MyArchive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Interface,
   DA.Internal.Desugar.Optional (Interface
                                 -> MyArchive -> [DA.Internal.Desugar.Party]))
_choice_InterfaceMyArchive
  = (\ this arg@MyArchive
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@MyArchive
       -> let _ = self in let _ = this in let _ = arg in do pure (), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
