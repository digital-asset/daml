module InterfaceRequiresClash where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import qualified InterfaceRequiresClashA as A
import qualified InterfaceRequiresClashB as B
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => C = C GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep C where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch C where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface C C where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface C C where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires$_C_A:I : DA.Internal.Desugar.RequiresT C A.I
_requires$_C_A:I = DA.Internal.Desugar.RequiresT
_requires$_C_B:I : DA.Internal.Desugar.RequiresT C B.I
_requires$_C_B:I = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface C A.I where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface C A.I where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToInterface C B.I where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface C B.I where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToAnyTemplate C where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate C where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep C where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory C where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver C where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate C where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType C where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq C where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive C where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice C DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice C DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded C DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @C cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @C cid pred)
instance DA.Internal.Desugar.HasExercise C DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @C cid)
        arg
instance DA.Internal.Desugar.HasChoiceController C DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver C DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_C$Archive :
  (DA.Internal.Desugar.Consuming C,
   C -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (C
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (C
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId C
   -> C
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_C$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
instance DA.Internal.Desugar.HasInterfaceView C EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView C EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
