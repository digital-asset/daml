module InterfaceRequiresClash where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import qualified InterfaceRequiresClashA as A
import qualified InterfaceRequiresClashB as B
data GHC.Types.DamlInterface => C = C GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep C where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch C where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface C C where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface C C where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_C_A:I : DA.Internal.Desugar.RequiresT C A.I
_requires_C_A:I = DA.Internal.Desugar.RequiresT
_requires_C_B:I : DA.Internal.Desugar.RequiresT C B.I
_requires_C_B:I = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface C A.I where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface C A.I where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToInterface C B.I where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface C B.I where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToAnyTemplate C where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate C where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep C where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory C where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver C where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate C where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType C where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq C where
  (==) = GHC.Types.primitive @"BEEqual"
