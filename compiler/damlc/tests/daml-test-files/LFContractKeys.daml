-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{- DLINT ignore -}

module LFContractKeys where

import Daml.Script

import DA.Optional

template Keyed
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs

    key sig : Party
    maintainer key

template Divulger
  with
    divulgee : Party
    sig : Party
  where
    signatory divulgee
    observer sig

    nonconsuming choice DivulgeKeyed : Keyed
        with
          keyedCid : ContractId Keyed
        controller sig
        do
          fetch keyedCid

template Delegation
  with
    sig : Party
    delegees : [Party]
  where
    signatory sig
    observer delegees

    nonconsuming choice CreateKeyed
      : ContractId Keyed
      with
        delegee : Party
        obs : Party
      controller delegee
      do
        create Keyed with sig; obs

    nonconsuming choice ArchiveKeyed
      : ()
      with
        delegee : Party
        keyedCid : ContractId Keyed
      controller delegee
      do
        archive keyedCid

    nonconsuming choice LookupKeyed
      : Optional (ContractId Keyed)
      with
        lookupKey : Party
        delegee : Party
      controller delegee
      do
        lookupByKey @Keyed lookupKey

    nonconsuming choice FetchKeyed
      : (ContractId Keyed, Keyed)
      with
        lookupKey : Party
        delegee : Party
      controller delegee
      do
        fetchByKey @Keyed lookupKey

template Helper with
    p : Party
  where
    signatory p

    choice FetchByKey : (ContractId Keyed, Keyed)
      with lookupKey : Party
      controller p
      do fetchByKey @Keyed lookupKey

    choice LookupByKey : Optional (ContractId Keyed)
      with lookupKey : Party
      controller p
      do lookupByKey @Keyed lookupKey

lookupTest : Script ()
lookupTest = script do

  -- Put four parties in the four possible relationships with a `Keyed`
  sig <- allocateParty "s" -- Signatory
  obs <- allocateParty "o" -- Observer
  divulgee <- allocateParty "d" -- Divulgee
  blind <- allocateParty "b" -- Blind

  keyedCid <- submit sig do createCmd Keyed with ..
  divulgercid <- submit divulgee do createCmd Divulger with ..
  submit sig do exerciseCmd divulgercid DivulgeKeyed with ..

  -- Now the signatory and observer delegate their choices
  sigDelegationCid <- submit sig do
    createCmd Delegation with
      sig
      delegees = [obs, divulgee, blind]
  obsDelegationCid <- submit obs do
    createCmd Delegation with
      sig = obs
      delegees = [divulgee, blind]

  -- TESTING LOOKUPS AND FETCHES

  -- Maintainer can fetch
  do
    (cid, keyed) <- submit sig do createAndExerciseCmd (Helper sig) (FetchByKey sig)
    assert (keyedCid == cid)
  -- Maintainer can lookup
  do
    mcid <- submit sig do createAndExerciseCmd (Helper sig) (LookupByKey sig)
    assert (mcid == Some keyedCid)

  -- Stakeholder can fetch
  do
    (cid, l) <- submit obs do createAndExerciseCmd (Helper obs) (FetchByKey sig)
    assert (keyedCid == cid)
  -- Stakeholder can't lookup without authorization
  submitMustFail obs do createAndExerciseCmd (Helper obs) (LookupByKey sig)
  -- Stakeholder can lookup with authorization
  do
    mcid <- submit obs do
      exerciseCmd sigDelegationCid LookupKeyed with
        delegee = obs
        lookupKey = sig
    assert (mcid == Some keyedCid)

  -- Divulgee can't fetch
  submitMustFail divulgee do createAndExerciseCmd (Helper divulgee) (FetchByKey sig)
  -- Divulgee can't lookup
  submitMustFail divulgee do createAndExerciseCmd (Helper divulgee) (LookupByKey sig)
  -- Divulgee can't lookup with stakeholder authority
  submitMustFail divulgee do
    exerciseCmd obsDelegationCid LookupKeyed with
        delegee = divulgee
        lookupKey = sig
  -- Divulgee can't do positive lookup with maintainer authority.
  submitMustFail divulgee do
    exerciseCmd sigDelegationCid LookupKeyed with
      delegee = divulgee
      lookupKey = sig
  -- Divulgee can't fetch with stakeholder authority
  submitMustFail divulgee do
    exerciseCmd obsDelegationCid FetchKeyed with
      delegee = divulgee
      lookupKey = sig

  -- Blind party can't fetch
  submitMustFail blind do createAndExerciseCmd (Helper blind) (FetchByKey sig)
  -- Blind party can't lookup
  submitMustFail blind do createAndExerciseCmd (Helper blind) (LookupByKey sig)
  -- Blind party can't lookup with stakeholder authority
  submitMustFail blind do
    exerciseCmd obsDelegationCid LookupKeyed with
      delegee = blind
      lookupKey = sig
  -- Blind party can't lookup with maintainer authority.
  submitMustFail blind do
    exerciseCmd sigDelegationCid LookupKeyed with
      delegee = blind
      lookupKey = sig
  -- Blind party can't fetch with stakeholder authority as lookup is negative
  submitMustFail blind do
    exerciseCmd obsDelegationCid FetchKeyed with
      delegee = blind
      lookupKey = sig
  -- Blind can do a negative lookup on a truly nonexistant contract
  do
    mcid <- submit blind do
      exerciseCmd obsDelegationCid LookupKeyed with
        delegee = blind
        lookupKey = obs
    assert (isNone mcid)

  -- TESTING CREATES AND ARCHIVES

  -- Divulgee can archive
  -- @WARN range=196:3-199:15; Use of divulged contracts is deprecated
  submit divulgee do
    exerciseCmd sigDelegationCid ArchiveKeyed with
      delegee = divulgee
      keyedCid
  -- Divulgee can create
  keyedCid2 <- submit divulgee do
    exerciseCmd sigDelegationCid CreateKeyed with
      delegee = divulgee
      obs

  -- Stakeholder can archive
  submit obs do
    exerciseCmd sigDelegationCid ArchiveKeyed with
      delegee = obs
      keyedCid = keyedCid2
  -- Stakeholder can create
  keyedCid3 <- submit obs do
    exerciseCmd sigDelegationCid CreateKeyed with
      delegee = obs
      obs

  return ()
