module InterfaceConversions where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Assert ( (===) )
import DA.Functor ( void )
data GHC.Types.DamlInterface => Iface = Iface GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Iface where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Iface where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Iface Iface where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Iface Iface where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Iface "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t Iface => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @Iface t)
instance DA.Internal.Desugar.HasToAnyTemplate Iface where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Iface where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Iface where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Iface where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Iface where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Iface where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Iface where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType Iface where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Iface where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Iface) =>
         DA.Internal.Desugar.HasToAnyChoice t MyChoice (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Iface) =>
         DA.Internal.Desugar.HasFromAnyChoice t MyChoice (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Iface)) =>
         DA.Internal.Desugar.HasExerciseGuarded t MyChoice (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Iface cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Iface cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Iface)) =>
         DA.Internal.Desugar.HasExercise t MyChoice (()) where
  exercise = DA.Internal.Desugar._exerciseDefault
data MyChoice
  = MyChoice {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_IfaceMyChoice :
  (Iface -> MyChoice -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Iface
   -> Iface -> MyChoice -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Iface,
   DA.Internal.Desugar.Optional (Iface
                                 -> MyChoice -> [DA.Internal.Desugar.Party]))
_choice_IfaceMyChoice
  = (\ this arg@MyChoice
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@MyChoice
       -> let _ = self in let _ = this in let _ = arg in do pure (), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => Template1
  = Template1 {owner1 : Party, value1 : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner1" Template1 Party where
  getField
    = DA.Internal.Record.getFieldPrim @"owner1" @Template1 @Party
  setField
    = DA.Internal.Record.setFieldPrim @"owner1" @Template1 @Party
instance DA.Internal.Record.HasField "value1" Template1 Int where
  getField
    = DA.Internal.Record.getFieldPrim @"value1" @Template1 @Int
  setField
    = DA.Internal.Record.setFieldPrim @"value1" @Template1 @Int
instance DA.Internal.Desugar.HasSignatory Template1 where
  signatory this@Template1 {..}
    = DA.Internal.Desugar.toParties (owner1)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Template1 where
  observer this@Template1 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Template1 where
  ensure this@Template1 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Template1 where
  agreement this@Template1 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Template1 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Template1 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Template1 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Template1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Template1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Template1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Template1 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Template1 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Template1 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Template1 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_Template1Archive :
  (Template1
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Template1
   -> Template1
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Template1,
   DA.Internal.Desugar.Optional (Template1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_Template1Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Template1_Iface :
  DA.Internal.Desugar.ImplementsT Template1 Iface
_implements_Template1_Iface = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Template1 Iface where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Template1 Iface where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Template1_Iface_getOwner :
  DA.Internal.Desugar.Method Template1 Iface "getOwner"
_method_Template1_Iface_getOwner
  = DA.Internal.Desugar.mkMethod
      @Template1
      @Iface
      @"getOwner"
      (\ this@Template1 {..}
         -> let _ = this in let getOwner = owner1 in getOwner)
data GHC.Types.DamlTemplate => Template2
  = Template2 {owner2 : Party, value2 : Text}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner2" Template2 Party where
  getField
    = DA.Internal.Record.getFieldPrim @"owner2" @Template2 @Party
  setField
    = DA.Internal.Record.setFieldPrim @"owner2" @Template2 @Party
instance DA.Internal.Record.HasField "value2" Template2 Text where
  getField
    = DA.Internal.Record.getFieldPrim @"value2" @Template2 @Text
  setField
    = DA.Internal.Record.setFieldPrim @"value2" @Template2 @Text
instance DA.Internal.Desugar.HasSignatory Template2 where
  signatory this@Template2 {..}
    = DA.Internal.Desugar.toParties (owner2)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Template2 where
  observer this@Template2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Template2 where
  ensure this@Template2 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Template2 where
  agreement this@Template2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Template2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Template2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Template2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Template2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Template2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Template2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Template2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Template2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Template2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Template2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_Template2Archive :
  (Template2
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Template2
   -> Template2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Template2,
   DA.Internal.Desugar.Optional (Template2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_Template2Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Template2_Iface :
  DA.Internal.Desugar.ImplementsT Template2 Iface
_implements_Template2_Iface = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Template2 Iface where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Template2 Iface where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Template2_Iface_getOwner :
  DA.Internal.Desugar.Method Template2 Iface "getOwner"
_method_Template2_Iface_getOwner
  = DA.Internal.Desugar.mkMethod
      @Template2
      @Iface
      @"getOwner"
      (\ this@Template2 {..}
         -> let _ = this in let getOwner = owner2 in getOwner)
main
  = scenario
      do p <- getParty "Alice"
         let template1 = Template1 p 10
         let template2 = Template2 p "Hi"
         let iface1 = toInterface @Iface template1
         let iface2 = toInterface @Iface template2
         fromInterface @Template1 iface1 === Some template1
         fromInterface @Template2 iface1 === None
         fromInterface @Template1 iface2 === None
         fromInterface @Template2 iface2 === Some template2
         p `submit`
             do templateCid1 <- create template1
                templateCid2 <- create template2
                let ifaceCid1 = toInterfaceContractId @Iface templateCid1
                let ifaceCid2 = toInterfaceContractId @Iface templateCid2
                fromInterfaceContractId ifaceCid1 === templateCid1
                fromInterfaceContractId ifaceCid2 === templateCid2
                x1 <- fetchFromInterface @Template1 ifaceCid1
                x2 <- fetchFromInterface @Template2 ifaceCid1
                x3 <- fetchFromInterface @Template1 ifaceCid2
                x4 <- fetchFromInterface @Template2 ifaceCid2
                x1 === Some (templateCid1, template1)
                x2 === None
                x3 === None
                x4 === Some (templateCid2, template2)
         let useAction : (ContractId Template2 -> Update ()) -> Update ()
             useAction action
               = do cid <- create (toInterface @Iface (Template1 p 10))
                    action (fromInterfaceContractId @Template2 cid)
         submit p do useAction $ \ _cid -> pure ()
         submitMustFail p do useAction $ \ cid -> void (fetch cid)
         submitMustFail p do useAction $ \ cid -> exercise cid MyChoice
         submitMustFail p do useAction $ \ cid -> archive cid
