-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

module AuthEvalOrder where

import Daml.Script

template TheContract
  with
    party : Party
  where
    signatory party

-- t1/t2 are a pair of similar tests, except t2 is badly authorized.
-- In the well-authorized t1, execution reaches the `error` function
-- In the badly-authorized t2, the auth failure prevent the error from being reached.
template T1_create_success
  with
    ivy : Party
  where
    signatory ivy
    choice T1Call : ContractId TheContract
      controller ivy
      do create (TheContract with party = ivy)

-- @ERROR range=28:1-28:18; t1 finished with no authorization failure
t1_create_success : Script ()
t1_create_success = script do
  ivy <- allocateParty "Ivy"
  _ <- ivy `submit` createAndExerciseCmd (T1_create_success ivy) T1Call
  abort "t1 finished with no authorization failure"

template T2_create_success
  with
    ivy : Party
    mach : Party
  where
    signatory mach
    choice T2Call : ContractId TheContract
      controller mach
      do create (TheContract with party = ivy)

-- @ERROR range=45:1-45:26; failed due to a missing authorization from 'Ivy'
t2_create_badlyAuthorized : Script ()
t2_create_badlyAuthorized = script do
  mach <- allocateParty "Mach"
  ivy <- allocateParty "Ivy"
  _ <- mach `submit` createAndExerciseCmd (T2_create_success ivy mach) T2Call
  abort "t2 Finished"

template TheContractBuilder
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice TheChoice : ContractId TheContract
      with party : Party
      controller p2
      do create TheContract with party

-- t3/t4 are a pair of similar tests, except t4 is badly authorized.
-- It is the 2nd submit which is of interest here, where mach exercises the `builder` contract created in the first submit, to contract signed by Ivy. This is possible in t3 because `builder` is signed by Ivy, but it is not well authorized in t4.
-- Only in the well-authorized case will execution reach the `error` function.

template T3_createViaExerice_success
  with
    builder : ContractId TheContractBuilder
    ivy : Party
    mach : Party
  where
    signatory mach
    choice T3Call : ContractId TheContract
      controller mach
      do exercise builder TheChoice with party = ivy

-- @ERROR range=80:1-80:28; t3 finished with no authorization failure
t3_createViaExerice_success : Script ()
t3_createViaExerice_success = script do
  ivy <- allocateParty "Ivy"
  mach <- allocateParty "Mach"
  builder <-
    ivy `submit` createCmd (TheContractBuilder with p1 = ivy; p2 = mach)
  _ <- mach `submit` createAndExerciseCmd (T3_createViaExerice_success builder ivy mach) T3Call
  abort "t3 finished with no authorization failure"

template T4_createViaExerice_success
  with
    builder : ContractId TheContractBuilder
    ivy : Party
    mach : Party
  where
    signatory mach
    choice T4Call : ContractId TheContract
      controller mach
      do exercise builder TheChoice with party = ivy

-- @ERROR range=101:1-101:36; failed due to a missing authorization from 'Ivy'
t4_createViaExerice_badlyAuthorized : Script ()
t4_createViaExerice_badlyAuthorized = script do
  ivy <- allocateParty "Ivy"
  mach <- allocateParty "Mach"
  builder <-
    mach `submit` createCmd (TheContractBuilder with p1 = mach; p2 = mach)
  _ <- mach `submit` createAndExerciseCmd (T4_createViaExerice_success builder ivy mach) T4Call
  abort "t4 finished with no authorization failure"
