-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

module AuthEvalOrder where

template TheContract
  with
    party : Party
  where
    signatory party

-- t1/t2 are a pair of similar tests, except t2 is badly authorized.
-- In the well-authorized t1, execution reaches the `error` function
-- In the badly-authorized t2, the auth failure prevent the error from being reached.

-- @ERROR Aborted: t1 finished with no authorization failure
t1 : Scenario ()
t1 = scenario do
  ivy <- getParty "Ivy-t1"
  submit ivy $ do
    create (TheContract with party = ivy)
    let x = error "t1 finished with no authorization failure"
    return ()

-- @ERROR failed due to a missing authorization from 'Ivy-t2'
t2 : Scenario ()
t2 = scenario do
  mach <- getParty "Mach-t1"
  ivy <- getParty "Ivy-t2"
  submit mach $ do
    create (TheContract with party = ivy)
    let x = error "t2 Finished"
    return ()

template TheContractBuilder
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    controller p2 can
      TheChoice : ContractId TheContract
        with party : Party
        do
          create TheContract with party

-- t3/t4 are a pair of similar tests, except t4 is badly authorized.
-- It is the 2nd submit which is of interest here, where mach exercises the `builder` contract created in the first submit, to contract signed by Ivy. This is possible in t3 because `builder` is signed by Ivy, but it is not well authorized in t4.
-- Only in the well-authorized case will execution reach the `error` function.

-- @ERROR Aborted: t3 finished with no authorization failure
t3 : Scenario ()
t3 = scenario do
  ivy <- getParty "Ivy-t3"
  mach <- getParty "Mach-t3"
  builder <-
    submit ivy $ do
      create (TheContractBuilder with p1 = ivy; p2 = mach)
  submit mach $ do
    exercise builder TheChoice with party = ivy
    let x = error "t3 finished with no authorization failure"
    return ()

-- @ERROR failed due to a missing authorization from 'Ivy-t4'
t4 : Scenario ()
t4 = scenario do
  ivy <- getParty "Ivy-t4"
  mach <- getParty "Mach-t4"
  builder <-
    submit mach $ do
      create (TheContractBuilder with p1 = mach; p2 = mach)
  submit mach $ do
    exercise builder TheChoice with party = ivy
    let x = error "t4 finished with no authorization failure"
    return ()
