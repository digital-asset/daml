-- Copyright (c) 2024, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- This tests that "dot syntax" works for getting and setting "fields" defined
-- using custom (i.e. not daml-preprocessor-generated) `HasField` instances.

module CustomHasField where

import Daml.Script
import DA.Assert ((===))

data Foo = Foo with
    ab : (Int, Bool)
  deriving (Eq, Show)

instance HasField "a" Foo Int where
  getField foo = foo.ab._1
  setField x foo = foo with ab._1 = x

indirectGetA : Foo -> Int
indirectGetA = getField'
  where
    getField' : forall r t. HasField "a" r t => r -> t
    getField' = getField @"a"

directGetA : Foo -> Int
directGetA x = x.a

indirectSetA : Int -> Foo -> Foo
indirectSetA = setField'
  where
    setField' : forall r t. HasField "a" r t => t -> r -> r
    setField' = setField @"a"

directSetA : Int -> Foo -> Foo
directSetA a x = x with a = a

myFoo : Foo
myFoo = Foo with
  ab = (42, True)

test : Script ()
test = do
  indirectGetA myFoo === 42
  directGetA myFoo === 42
  myFoo.a === 42

  indirectSetA 53 myFoo === Foo (53, True)
  directSetA 53 myFoo === Foo (53, True)
  (myFoo with a = 53) === Foo (53, True)

  (myFoo, ())._1.a === 42
  ((myFoo, ()) with _1.a = 53) === (Foo (53, True), ())

  fmap (.a) [myFoo] === [42]
