-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SUPPORTS-LF-FEATURE DAML_INTERFACE
{-# LANGUAGE ApplicativeDo #-}

module Interface where

import Daml.Script
import DA.Assert ((===))
import ScriptAssertHelpers

data EmptyInterfaceView = EmptyInterfaceView {}

-- | An interface comment.
interface Token where
  viewtype EmptyInterfaceView
  getOwner : Party -- ^ A method comment.
  getAmount : Int
  setAmount : Int -> Token

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token) -- ^ An interface choice comment.
    with
      splitAmount : Int -- ^ A choice field comment.
    controller getOwner this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller getOwner this, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner this
    do
      noopImpl this nothing

  choice GetRich : ContractId Token
    with
      byHowMuch : Int
    controller getOwner this
    do
        assert (byHowMuch > 0)
        create $ setAmount this (getAmount this + byHowMuch)

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner
    interface instance Token for Asset where
      view = EmptyInterfaceView
      getOwner = owner
      getAmount = amount
      setAmount x = toInterface @Token (this with amount = x)

      splitImpl splitAmount = do
        assert (splitAmount < amount)
        cid1 <- create this with amount = splitAmount
        cid2 <- create this with amount = amount - splitAmount
        pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

      transferImpl newOwner = do
        cid <- create this with owner = newOwner
        pure (toInterfaceContractId @Token cid)

      noopImpl nothing = do
        [1] === [1] -- make sure `mkMethod` calls are properly erased in the presence of polymorphism.
        pure ()

main = script do
  p <- allocateParty "Alice"
  cidAsset1 <- p `submit` do
    createCmd Asset with
      issuer = p
      owner = p
      amount = 15
  let cidToken1 = toInterfaceContractId @Token cidAsset1
  (cidToken2, cidToken3) <- p `submit` do
    exerciseCmd cidToken1 (Noop ())
    r <- exerciseCmd cidToken1 (Split 10)
    pure r

  token2 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken2
  -- Party is duplicated because p is both observer & issuer
  signatory token2 === [p, p]
  getAmount (toInterface @Token token2) === 10
  amount token2 === 10

  token3 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken3
  getAmount (toInterface @Token token3) === 5
  amount token3 === 5

  cidToken4 <- p `submit` do exerciseCmd cidToken3 (GetRich 20)

  token4 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken4
  getAmount (toInterface @Token token4) === 25
  amount token4 === 25

  pure ()
