-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE

module Interface where

import DA.Assert ((===))

interface Token where
  getOwner : Party
  getAmount : Int
  setAmount : Int -> Token

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token)
    with
      splitAmount : Int
    controller getOwner this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller getOwner this, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner this
    do
      noopImpl this nothing

  choice GetRich : ContractId Token
    with
      byHowMuch : Int
    controller getOwner this
    do
        assert (byHowMuch > 0)
        create $ setAmount this (getAmount this + byHowMuch)

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner
    implements Token where
      let getOwner = owner
      let getAmount = amount
      let setAmount = \x -> toToken (this with amount = x)
        -- TODO https://github.com/digital-asset/daml/issues/10810
        --  (maybe) support `let setAmount x = ...` syntax.

      let splitImpl = \splitAmount -> do
            assert (splitAmount < amount)
            cid1 <- create this with amount = splitAmount
            cid2 <- create this with amount = amount - splitAmount
            pure (toTokenContractId cid1, toTokenContractId cid2)

      let transferImpl = \newOwner -> do
            cid <- create this with owner = newOwner
            pure (toTokenContractId cid)

      let noopImpl = \nothing -> do
            pure ()

main = scenario do
  p <- getParty "Alice"
  p `submit` do
    cidAsset1 <- create Asset with
      issuer = p
      owner = p
      amount = 15
    let cidToken1 = toTokenContractId cidAsset1
    _ <- exercise cidToken1 (Noop ())
    (cidToken2, cidToken3) <- exercise cidToken1 (Split 10)
    token2 <- fetch cidToken2
    getAmount token2 === 10
    case fromToken token2 of
      None -> abort "expected Asset"
      Some Asset {amount} ->
        amount === 10
    token3 <- fetch cidToken3
    getAmount token3 === 5
    case fromToken token3 of
      None -> abort "expected Asset"
      Some Asset {amount} ->
        amount === 5

    cidToken4 <- exercise cidToken3 (GetRich 20)
    token4 <- fetch cidToken4
    getAmount token4 === 25
    case fromToken token4 of
      None -> abort "expected Asset"
      Some Asset {amount} ->
        amount === 25

    pure ()
