-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @INFO range=36:10-36:18; Evaluate
-- @INFO range=50:3-50:13; Evaluate

module Text where

import DA.Text as T
import DA.Assert
import DA.Optional

testExplode = scenario do
  ["a", "b", "c"] === explode "abc"
  [] === explode ""
  ["a"] === explode "a"

testImplode = scenario do
  implode ["a", "b", "c"] === "abc"
  implode [] === ""
  implode ["a"] === "a"

testLength = scenario do
  0 === T.length ""
  1 === T.length "a"
  3 === T.length "abc"

testTrim = scenario do
    assert $  trim "  digital asset  " == "digital asset"

testReplace = scenario do
    assert $ replace "el" "_" "Hello Bella" == "H_lo B_la"
    assert $ replace "el" "e" "Hello"       == "Helo"

testLines = scenario do
  [] === lines ""
  ["one", "two"] === lines "one\ntwo"
  ["", "one", "", "two", ""] === lines "\none\n\ntwo\n\n"

testUnlines = scenario do
  unlines [] === ""
  unlines ["", "one", "two"] === "\none\ntwo\n"

testWords = scenario do
  [] === words ""
  ["one", "two"] === words "one two"
  ["one", "two"] === words " one  two  "

testUnwords = scenario do
  unwords [] === ""
  unwords ["one", "two"] === "one two"

testLinesBy = scenario do
    assert $ linesBy (== "a") "aabbaca"  == ["","","bb","c"]
    assert $ linesBy (== "a") "aabbacaa" == ["","","bb","c",""]
    assert $ null $ linesBy (== "a") ""
    assert $ linesBy (== "a") "a"        == [""]
    assert $ linesBy (== ":") "::xyz:abc::123::" == ["","","xyz","abc","","123",""]
    assert $ linesBy (== ",") "my,list,here" == ["my","list","here"]

testWordsBy = scenario do
    assert $ wordsBy (== "a") "aabbaca"  == ["bb","c"]
    assert $ wordsBy (== "a") "aabbacaa" == ["bb","c"]
    assert $ null $ wordsBy (== "a") ""
    assert $ null $ wordsBy (== "a") "a"
    assert $ wordsBy (== ":") "::xyz:abc::123::" == ["xyz","abc","123"]
    assert $ wordsBy (== ",") "my,list,here" == ["my","list","here"]

testIntercalate = scenario do
  "1, 2, 3" === intercalate ", " ["1", "2", "3"]
  "one\ntwo\nthree" === intercalate "\n" ["one", "two", "three"]
  ", 2, " === intercalate ", " ["", "2", ""]
  "" === intercalate ", " []

testDropPrefix = scenario do
    assert $ dropPrefix "Mr. " "Mr. Men" == "Men"
    assert $ dropPrefix "Mr. " "Dr. Men" == "Dr. Men"

testDropSuffix = scenario do
    assert $ dropSuffix "!" "Hello World!"  == "Hello World"
    assert $ dropSuffix "!" "Hello World!!" == "Hello World!"
    assert $ dropSuffix "!" "Hello World."  == "Hello World."

testStripSuffix = scenario do
    assert $ stripSuffix "bar" "foobar" == Some "foo"
    assert $ stripSuffix ""    "baz"    == Some "baz"
    assert $ isNone $ stripSuffix "foo" "quux"

testStripPrefix = scenario do
    assert $ stripPrefix "foo" "foobar" == Some "bar"
    assert $ stripPrefix ""    "baz"    == Some "baz"
    assert $ isNone $ stripPrefix "foo" "quux"

testIsPrefixOf = scenario do
  True === isPrefixOf "ab" "abcdef"
  False === isPrefixOf "bc" "abcdef"
  True === isPrefixOf "" ""
  True === isPrefixOf "" "abc"

testIsSuffixOf = scenario do
  True === isSuffixOf "ef" "abcdef"
  False === isSuffixOf "de" "abcdef"
  True === isSuffixOf "" ""
  True === isSuffixOf "" "abc"

testIsInfixOf = scenario do
  True === isInfixOf "ab" "abcdef"
  True === isInfixOf "ef" "abcdef"
  True === isInfixOf "cd" "abcdef"
  False === isInfixOf "dc" "abcdef"
  True === isInfixOf "" "abcdef"
  True === isInfixOf "" ""

testTakeWhile = scenario do
  "ab" === T.takeWhile (<"c") "abcba"
  "" === T.takeWhile (<"c") ""
  "aa" === T.takeWhile (=="a") "aabbaa"

testTakeWhileEnd = scenario do
  "ba" === T.takeWhileEnd (<"c") "abcba"
  "" === T.takeWhileEnd (<"c") ""
  "aa" === takeWhileEnd (=="a") "aabbaa"

testDropWhile = scenario do
  "cba" === T.dropWhile (<"c") "abcba"
  "" === T.dropWhile (<"c") ""
  "bbaa" === T.dropWhile (=="a") "aabbaa"

testDropWhileEnd = scenario do
  "abc" === T.dropWhileEnd (<"c") "abcba"
  "" === T.dropWhileEnd (<"c") ""
  "aabb" === T.dropWhileEnd (=="a") "aabbaa"

testSplitOn = scenario do
  ["1", "2", "3"] === T.splitOn "," "1,2,3"
  ["123"] === T.splitOn "," "123"
  ["123"] === T.splitOn "" "123"
  [""] === T.splitOn "," ""
  [""] === T.splitOn "" ""
  ["", "", ""] === T.splitOn "." ".."
  ["1", "2", ",3"] === T.splitOn ",," "1,,2,,,3"
  ["", "a"] === T.splitOn "aa" "aaa"
  ["", ""] === T.splitOn "aa" "aa"
  ["", "a"] === T.splitOn "aa" "aaa"
  ["", "", ""] === T.splitOn "aa" "aaaa"

testSplitAt = scenario do
  ("", "test") === T.splitAt 0 "test"
  ("t", "est") === T.splitAt 1 "test"
  ("test", "") === T.splitAt 4 "test"
  ("test", "") === T.splitAt 100 "test"

testTake = scenario do
  "abc" === T.take 3 "abcdef"
  "abcdef" === T.take 100 "abcdef"
  "" === T.take 0 "abcdef"
  "" === T.take 3 ""

testDrop = scenario do
  "def" === T.drop 3 "abcdef"
  "" === T.drop 100 "abcdef"
  "abcdef" === T.drop 0 "abcdef"
  "" === T.drop 3 ""

testSubstring = scenario do
  "bcd" === substring 1 3 "abcdef"
  "def" === substring 3 5 "abcdef"
  "ab" === substring (-1) 2 "abcdef"
  "bcdef" === substring 1 100 "abcdef"


testIsSpace = scenario do
  True === isSpace " "
  False === isSpace "\t"
  False === isSpace "x"
  False === isSpace " x"
  False === isSpace "x "
  False === isSpace ""

testIsNewLine = scenario do
  True === isNewLine "\n"
  False === isNewLine " "
  False === isNewLine "x"
  False === isNewLine "\nx"
  False === isNewLine "x\n"
  False === isSpace ""

testIsUpper = scenario do
  True === isUpper "A"
  True === isUpper "Z"
  False === isUpper "a"
  False === isUpper "z"
  True === isUpper "AA"
  False === isUpper ""
  False === isUpper "1"

testIsLower = scenario do
  True === isLower "a"
  True === isLower "z"
  False === isLower "A"
  False === isLower "Z"
  True === isLower "aa"
  False === isLower ""
  False === isLower "1"

testIsDigit = scenario do
  True === isDigit "0"
  True === isDigit "9"
  False === isDigit "a"
  False === isDigit "Z"
  True === isDigit "00"
  False === isDigit "1 "
  False === isDigit ""

testIsAlphaNum = scenario do
  True === isDigit "0"
  True === isDigit "9"
  True === isLower "a"
  True === isLower "z"
  True === isUpper "A"
  True === isUpper "Z"
  False === isDigit "0Z"
  False === isDigit "1 "
  False === isDigit ""

testParseInt = scenario do
  Some 0 === parseInt "000"
  Some 123 === parseInt "123"
  Some (-123) === parseInt "-123"
  Some 4567890 === parseInt "4567890"
  Some 0 === parseInt "-0"
  Some 0 === parseInt "+0"
  Some 45=== parseInt "+45"
  None === parseInt "a"
  None === parseInt ""
  None === parseInt "-"
  None === parseInt "+"
  None === parseInt "--1"
  None === parseInt "++1"
  None === parseInt "+-1"
  None === parseInt "-+1"
  None === parseInt " 0"
  parseInt (show @Int maxBound) === Some maxBound
  parseInt (show @Int minBound) === Some minBound
  None === parseInt "1.1234567890123456789"

testParseDecimal = scenario do
  None === parseDecimal ""
  None === parseDecimal "."
  None === parseDecimal "-"
  None === parseDecimal "--"
  None === parseDecimal "-."
  None === parseDecimal ".-"
  None === parseDecimal ".-0"
  None === parseDecimal "0.-"
  None === parseDecimal "-.0"
  None === parseDecimal "-0."
  None === parseDecimal "-.1"
  None === parseDecimal "-1."
  None === parseDecimal "--1.1"
  None === parseDecimal "1."
  None === parseDecimal ".1"
  Some 1.0 === parseDecimal "+1"
  Some 1.1 === parseDecimal "+1.1"
  None === parseDecimal "+"
  None === parseDecimal "+."
  None === parseDecimal "+1."
  None === parseDecimal "+.1"
  None === parseDecimal "++1.1"
  None === parseDecimal "++1"
  None === parseDecimal "+-1.1"
  None === parseDecimal "+-1"
  None === parseDecimal "-+1.1"
  None === parseDecimal "-+1"
  None === parseDecimal " 1.1"
  None === parseDecimal "1.1 "
  Some 0.0 === parseDecimal "-0.0"
  Some 0.0 === parseDecimal "0.0"
  Some 0.0 === parseDecimal "0"
  Some 1.0 === parseDecimal "1"
  Some 1.0 === parseDecimal "1.0"
  Some 0.1 === parseDecimal "0.1"
  Some 123.567 === parseDecimal "123.567"
  Some (-123.567) === parseDecimal "-123.567"
  Some 0.0 === parseDecimal "00"
  Some 10.0 === parseDecimal "0010"
  Some 1.0 === parseDecimal "01.00"
  Some 111111111111111111111111.0 === parseDecimal "111111111111111111111111"
  Some 1.123456789 === parseDecimal "1.123456789"


testReverse = scenario do
  T.reverse "DAML" === "LMAD"

testNuls = scenario do
  "\0" === "\0"
  "£" === "£"
  "£\0" === "£\0"
  "\0DAML" === "\0DAML"
  "DA\0ML" === "DA\0ML"
  T.reverse "DA\0⛄ML" === "LM⛄\0AD"
  T.reverse "\0\1\2\3" === "\3\2\1\0"
  parseInt (T.drop 1 "\0\&123") === Some 123
  T.splitOn "\0" "Hello\0World" === ["Hello","World"]

testCodePoints = scenario do
    T.toCodePoints "Hello" === [72, 101, 108, 108, 111]
    T.fromCodePoints [87, 111, 114, 108, 100] === "World"
