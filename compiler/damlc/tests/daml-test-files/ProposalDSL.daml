-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- A generic proposal workflow using generic templates.
-- @IGNORE
-- @SINCE-LF 1.5
daml 1.2
module ProposalDSL
  ( Proposal (..)
  , Accept (..)
  , ProposalInstance
  ) where

import Prelude hiding (Template (..), TemplateKey (..), Choice (..), Archive (..), create, fetch, archive, fetchByKey, lookupByKey, exercise)
import DA.List
import DA.Text
import GenericTemplates


data Proposal t = Proposal with
    asset : t
    receivers : [Party]
    name : Text
  deriving (Eq, Show)

instance ProposalInstance t => Template (Proposal t) where
    signatory = _signatoryProposal
    observer = _observerProposal
    ensure = _ensureProposal
    agreement = _agreementProposal
    create = _createProposal
    fetch = _fetchProposal
    archive = _archiveProposal

instance ProposalInstance t => TemplateKey (Proposal t) ([Party], Text) where
    key = _keyProposal
    fetchByKey = _fetchByKeyProposal
    lookupByKey = _lookupByKeyProposal

data Accept = Accept{}
  deriving (Eq, Show)

instance ProposalInstance t => Choice (Proposal t) Accept (ContractId t) where
    exercise = _exerciseProposalAccept

instance ProposalInstance t => Choice (Proposal t) Archive () where
    exercise = _exerciseProposalArchive

class Template t => ProposalInstance t where
    _signatoryProposal : Proposal t -> [Party]
    _signatoryProposal this@Proposal{..} = signatory asset \\ receivers
    _observerProposal : Proposal t -> [Party]
    _observerProposal this@Proposal{..} = receivers
    _ensureProposal : Proposal t -> Bool
    _ensureProposal this@Proposal{..} = True
    _agreementProposal : Proposal t -> Text
    _agreementProposal this@Proposal{..} = implode
        [ "Proposal:\n"
        , "* proposers: " <> show (signatory this) <> "\n"
        , "* receivers: " <> show receivers <> "\n"
        , "* agreement: " <> agreement asset
        ]
    _createProposal : Proposal t -> Update (ContractId (Proposal t))
    _createProposal = error "code will be injected by the compiler"
    _fetchProposal : ContractId (Proposal t) -> Update (Proposal t)
    _fetchProposal = error "code will be injected by the compiler"
    _archiveProposal : ContractId (Proposal t) -> Update ()
    _archiveProposal cid = _exerciseProposalArchive cid Archive

    _hasKeyProposal : HasKey (Proposal t)
    _hasKeyProposal = HasKey
    _keyProposal : Proposal t -> ([Party], Text)
    _keyProposal this@Proposal{..} = (signatory this, name)
    _maintainerProposal : HasKey (Proposal t) -> ([Party], Text) -> [Party]
    _maintainerProposal HasKey key = fst key
    _fetchByKeyProposal : ([Party], Text) -> Update (ContractId (Proposal t), Proposal t)
    _fetchByKeyProposal = error "code will be injected by the compiler"
    _lookupByKeyProposal : ([Party], Text) -> Update (Optional (ContractId (Proposal t)))
    _lookupByKeyProposal = error "code will be injected by the compiler"

    _consumptionProposalArchive : PreConsuming (Proposal t)
    _consumptionProposalArchive = PreConsuming
    _controllerProposalArchive : Proposal t -> Archive -> [Party]
    _controllerProposalArchive this@Proposal{..} arg@Archive = _signatoryProposal this
    _actionProposalArchive : ContractId (Proposal t) -> Proposal t -> Archive -> Update ()
    _actionProposalArchive self this@Proposal{..} arg@Archive = do
        pure ()
    _exerciseProposalArchive : ContractId (Proposal t) -> Archive -> Update ()
    _exerciseProposalArchive = error "code will be injected by the compiler"

    _consumptionProposalAccept : PreConsuming (Proposal t)
    _consumptionProposalAccept = PreConsuming
    _controllerProposalAccept : Proposal t -> Accept -> [Party]
    _controllerProposalAccept this@Proposal{..} arg@Accept = receivers
    _actionProposalAccept : ContractId (Proposal t) -> Proposal t -> Accept -> Update (ContractId t)
    _actionProposalAccept self this@Proposal{..} arg@Accept = do
        create asset
    _exerciseProposalAccept : ContractId (Proposal t) -> Accept -> Update (ContractId t)
    _exerciseProposalAccept = error "code will be injected by the compiler"
