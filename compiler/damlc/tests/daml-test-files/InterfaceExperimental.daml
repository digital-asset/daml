-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE

-- TODO https://github.com/digital-asset/daml/issues/10810
-- DROP when we have more meaningful test for create, signatories, observers
module InterfaceExperimental where

import DA.Assert ((===))
import DA.Action (unless)
import DA.Experimental.Interface
import GHC.Types (primitive)

interface Token where
  getAmount : Int

  getOwner : Party

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token)
    with
      splitAmount : Int
    controller getOwner this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller getOwner this, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner this
    do
      noopImpl this nothing


template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer
    observer issuer, owner
    implements Token where
      let getAmount = amount
      let getOwner = owner

      let splitImpl = \splitAmount -> do
            assert (splitAmount < amount)
            cid1 <- create this with amount = splitAmount
            cid2 <- create this with amount = amount - splitAmount
            pure (toInterfaceContractId @_ @Token cid1, toInterfaceContractId @_ @Token cid2)

      let transferImpl = \newOwner -> do
            cid <- create this with owner = newOwner
            pure (toInterfaceContractId @_ @Token cid)

      let noopImpl = \nothing -> do
            pure ()

template NotAsset
  with
    p : Party
  where
    signatory p

    implements Token where
      let getAmount = error "getAmount"

      let getOwner = p

      let splitImpl = \splitAmount -> do
            error "Split"


      let transferImpl = \newOwner -> do
            error "Transfer"

      let noopImpl = \nothing -> do
            error "Noop"

main = scenario do
    alice <- getParty "Alice"
    bob <- getParty "Bob"
    let asset = Asset alice bob 15
    let notAsset = NotAsset alice
    let token = toInterface @_ @Token asset
    submit alice do
      interfaceCreate token
      interfaceSignatory token === [alice]
      interfaceObserver token === [bob, alice]
      unless (interfaceTypeRep @_ @Token token == interfaceTypeRep @_ @Token asset) $ abort "TypeReps are not equal"
      unless (interfaceTypeRep @_ @Token token /= interfaceTypeRep @_ @Token notAsset) $ abort "TypeReps are equal"
      pure ()
