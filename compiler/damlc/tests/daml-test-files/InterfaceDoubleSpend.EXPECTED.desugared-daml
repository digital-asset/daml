module InterfaceDoubleSpend where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token Token where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token Token where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token "getIssuer" (Party)
getIssuer : DA.Internal.Desugar.Implements t Token => t -> Party
getIssuer t
  = GHC.Types.primitiveInterface
      @"getIssuer" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasMethod Token "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t Token => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasMethod Token "getAmount" (Int)
getAmount : DA.Internal.Desugar.Implements t Token => t -> Int
getAmount t
  = GHC.Types.primitiveInterface
      @"getAmount" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasMethod Token "transferImpl" (Party
                                                             -> Update (ContractId Token))
transferImpl :
  DA.Internal.Desugar.Implements t Token =>
  t -> Party -> Update (ContractId Token)
transferImpl t
  = GHC.Types.primitiveInterface
      @"transferImpl" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasToAnyTemplate Token where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Token where
  ensure this = (getAmount this >= 0)
instance DA.Internal.Desugar.HasIsInterfaceType Token where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Token) =>
         DA.Internal.Desugar.HasToAnyChoice t Transfer (ContractId Token) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Token) =>
         DA.Internal.Desugar.HasFromAnyChoice t Transfer (ContractId Token) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token)) =>
         DA.Internal.Desugar.HasExerciseGuarded t Transfer (ContractId Token) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token)) =>
         DA.Internal.Desugar.HasExercise t Transfer (ContractId Token) where
  exercise = DA.Internal.Desugar._exerciseDefault
data Transfer
  = Transfer {newOwner : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "newOwner" Transfer Party where
  getField
    = DA.Internal.Record.getFieldPrim @"newOwner" @Transfer @Party
  setField
    = DA.Internal.Record.setFieldPrim @"newOwner" @Transfer @Party
_choice_TokenTransfer :
  (Token -> Transfer -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token
   -> Token
      -> Transfer -> DA.Internal.Desugar.Update (ContractId Token),
   DA.Internal.Desugar.Consuming Token,
   DA.Internal.Desugar.Optional (Token
                                 -> Transfer -> [DA.Internal.Desugar.Party]))
_choice_TokenTransfer
  = (\ this arg@Transfer {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getIssuer this), 
     \ self this arg@Transfer {..}
       -> let _ = self in
          let _ = this in let _ = arg in do transferImpl this newOwner, 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => Asset
  = Asset {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset @Party
instance DA.Internal.Record.HasField "owner" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset @Party
instance DA.Internal.Record.HasField "amount" Asset Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset @Int
instance DA.Internal.Desugar.HasSignatory Asset where
  signatory this@Asset {..}
    = DA.Internal.Desugar.toParties (issuer)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset where
  observer this@Asset {..}
    = DA.Internal.Desugar.toParties (owner)
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset where
  ensure this@Asset {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset where
  agreement this@Asset {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_AssetArchive :
  (Asset
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset
   -> Asset
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset,
   DA.Internal.Desugar.Optional (Asset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_AssetArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset_Token :
  DA.Internal.Desugar.ImplementsT Asset Token
_implements_Asset_Token = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset Token where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset Token where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset_Token_getOwner :
  DA.Internal.Desugar.Method Asset Token "getOwner"
_method_Asset_Token_getOwner
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"getOwner"
      (\ this@Asset {..}
         -> let _ = this in let getOwner = owner in getOwner)
_method_Asset_Token_getIssuer :
  DA.Internal.Desugar.Method Asset Token "getIssuer"
_method_Asset_Token_getIssuer
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"getIssuer"
      (\ this@Asset {..}
         -> let _ = this in let getIssuer = issuer in getIssuer)
_method_Asset_Token_getAmount :
  DA.Internal.Desugar.Method Asset Token "getAmount"
_method_Asset_Token_getAmount
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"getAmount"
      (\ this@Asset {..}
         -> let _ = this in let getAmount = amount in getAmount)
_method_Asset_Token_transferImpl :
  DA.Internal.Desugar.Method Asset Token "transferImpl"
_method_Asset_Token_transferImpl
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"transferImpl"
      (\ this@Asset {..}
         -> let _ = this in
            let
              transferImpl newOwner
                = do cid <- create this {owner = newOwner}
                     pure (toInterfaceContractId @Token cid)
            in transferImpl)
main
  = scenario
      do alice <- getParty "Alice"
         bob <- getParty "Bob"
         charlie <- getParty "Charlie"
         cidAsset1 <- alice
                        `submit`
                          do create Asset {issuer = alice, owner = alice, amount = 15}
         _ <- alice
                `submitMustFail`
                  do _ <- exercise
                            (toInterfaceContractId @Token cidAsset1) (Transfer bob)
                     _ <- exercise
                            (toInterfaceContractId @Token cidAsset1) (Transfer charlie)
                     pure ()
         pure ()
