-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

module AuthFailure where

import Daml.Script

-- Tests for various(all) different forms of authorization failure detected during execution.
-- Five kinds of authorization failure are tested here.
-- Two others (NoSignatories and NoControllers) are tested in separate files, because the expected error message doesn't contain any indication of which testcase causes it.

template TheContract1
  with
    s : Party
  where
    signatory s

-- @ERROR range=20:1-20:30; failed due to a missing authorization from 'Ivy'
t1_CreateMissingAuthorization : Script ()
t1_CreateMissingAuthorization = script do
  mach <- allocateParty "Mach"
  ivy <- allocateParty "Ivy"
  mach `submit` createCmd (TheContract1 with s = ivy)
  abort "t1 finished"

template TheContract2
  with
    s : Party
    m : Party
    id : Int
  where
    signatory s
    key (m, id) : (Party, Int)
    maintainer key._1

-- @ERROR range=38:1-38:37; failed due to that some parties are maintainers but not signatories: 'Bob'
t2_MaintainersNotSubsetOfSignatories : Script ()
t2_MaintainersNotSubsetOfSignatories = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  alice `submit` createCmd (TheContract2 with s = alice; m = bob; id = 100)
  abort "t2 finished"

template TheContract3
  with
    s : Party
  where
    signatory s

template TheContractBuilder3
  with
    s : Party
    c : Party
  where
    signatory s
    observer c
    choice TheChoice : ContractId TheContract3
      with s2 : Party
      controller c
      do create TheContract3 with s = s2

template Test3
  with
    bob : Party
    cid : ContractId TheContract3
  where
    signatory bob
    choice Call3 : TheContract3
      controller bob
      do fetch @TheContract3 cid

-- @ERROR range=74:1-74:29; failed since none of the stakeholders 'Alice' is in the authorizing set 'Bob'
t3_FetchMissingAuthorization : Script ()
t3_FetchMissingAuthorization = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  builder <- alice `submit`
    createCmd (TheContractBuilder3 with s = alice; c = bob)
  -- note: we use `builder` so `cid` is visible to bob, although he is not a stakeholder
  cid <- bob `submit`
    exerciseCmd builder TheChoice with s2 = alice
  _ <- bob `submit` createAndExerciseCmd (Test3 bob cid) Call3
  abort "t3 finished"

template TheContract4
  with
    ss : [Party]
    ms : [Party]
    os : [Party]
    id : Int
  where
    signatory ss
    key (ms, id) : ([Party], Int)
    maintainer key._1
    observer os

template Test4
  with
    bob : Party
    contractKey : ([Party], Int)
  where
    signatory bob
    choice Call4 : Optional (ContractId TheContract4)
      controller bob
      do lookupByKey @TheContract4 contractKey

-- @ERROR range=109:1-109:35; failed due to a missing authorization from 'Alice'
t4_LookupByKeyMissingAuthorization : Script ()
t4_LookupByKeyMissingAuthorization = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  alice `submit`
    createCmd (TheContract4 with ss = [alice]; ms = [alice]; os = [bob]; id = 100)
  _ <- bob `submit` createAndExerciseCmd (Test4 bob ([alice],100)) Call4
  abort "t4 finished"

template TheContract5
  with
    s : Party
  where
    signatory s
    choice TheChoice5 : () with
        cs : [Party]
      controller cs
      do return ()

-- @ERROR range=129:1-129:32; failed due to a missing authorization from 'Bob'
t5_ExerciseMissingAuthorization : Script ()
t5_ExerciseMissingAuthorization = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  cid <- alice `submit` createCmd (TheContract5 with s = alice)
  alice `submit` exerciseCmd cid TheChoice5 with cs = [bob]
  abort "t5 finished"
