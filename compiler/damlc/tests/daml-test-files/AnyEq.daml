-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @SINCE-LF 1.9

module AnyEq where

import DA.Action

template T1
  with
    x : Int
    p : Party
  where
    signatory p
    key p : Party
    maintainer key
    choice C : ()
      controller p
      do pure ()

template T1'
  with
    x : Int
    p : Party
  where
    signatory p
    key p : Party
    maintainer key

template T2
  with
    y : Text
    p : Party
  where
    signatory p
    key (p, y) : (Party, Text)
    maintainer key._1

-- We donâ€™t have a Show instance for AnyTemplate so we cannot use ===

assertBool : CanAbort m => Text -> Bool -> m ()
assertBool err success = unless success $ abort ("Failure: " <> show err)

main = scenario do
  p <- getParty "alice"
  let t1A = T1 0 p
  let t1B = T1 1 p
  let t1'A = T1' 0 p
  assertBool (show (t1A, t1A)) (toAnyTemplate t1A == toAnyTemplate t1A)
  assertBool (show (t1A, t1B)) (toAnyTemplate t1A /= toAnyTemplate t1B)
  assertBool (show (t1'A, t1'A)) (toAnyTemplate t1'A == toAnyTemplate t1'A)
  assertBool (show (t1A, t1'A)) (toAnyTemplate t1A /= toAnyTemplate t1'A)
  assertBool (show (C, C)) (toAnyChoice @T1 C == toAnyChoice @T1 C)
  assertBool (show (C, Archive)) (toAnyChoice @T1 C /= toAnyChoice @T1 Archive)
  assertBool ("T1, T2" <> show (Archive, Archive)) (toAnyChoice @T1 C /= toAnyChoice @T2 Archive)
  assertBool ("T1, T1'" <> show (p, p)) (toAnyContractKey @T1 p /= toAnyContractKey @T1' p)
  assertBool ("T1, T1" <> show (p, p)) (toAnyContractKey @T1 p == toAnyContractKey @T1 p)
