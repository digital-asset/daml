-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE EmptyCase #-}

daml 1.2
module Generics where

import DA.Generics

----------------------------------------------------------------------------------------------------
-- Non-recursive data structures
----------------------------------------------------------------------------------------------------

data Void deriving Generic

data Unit = Unit () deriving (Generic, Eq)

data UnitRec = UnitRec {} deriving (Generic, Eq)

data Nested a = Nested {nestedL : NestedL a, nestedR : NestedR} deriving Generic

data NestedL a = NestedL {unNestedL : a} deriving Generic

data NestedR = NestedRA | NestedRB Int deriving Generic

----------------------------------------------------------------------------------------------------
-- Recursive data structures
----------------------------------------------------------------------------------------------------

data Tree a = Leaf a | Node (Node0 a) deriving (Generic, Eq)
data Node0 a = Node0 {l : Tree a, r : Tree a} deriving (Generic, Eq)

test = scenario do
  assert $ from (Unit ()) == M1 ( M1 (M1 (K1 ()))) && to (M1 ( M1 (M1 (K1 ())))) == Unit ()
  assert $ from UnitRec == M1 (M1 U1) && to (M1 (M1 U1)) == UnitRec
  assert $ from (Leaf 1) == M1 (L1 (M1 (M1 (K1 1)))) && to (M1 (L1 (M1 (M1 (K1 1))))) == Leaf 1
  assert $ from (Node (Node0 {l = Leaf 1, r = Leaf 2})) == M1 (R1 (M1 (M1 (K1 (Node0 {l = Leaf 1, r = Leaf 2})))))
              && to (M1 (R1 (M1 (M1 (K1 (Node0 {l = Leaf 1, r = Leaf 2})))))) == Node (Node0 {l = Leaf 1, r = Leaf 2})
  assert $ (from $ Node0 {l = Leaf 1, r = Leaf 2}) == M1 (M1 (P1 (M1 (K1 (Leaf 1))) (M1 (K1 (Leaf 2)))))
              && to (M1 (M1 (P1 (M1 (K1 (Leaf 1))) (M1 (K1 (Leaf 2)))))) == Node0 {l = Leaf 1, r = Leaf 2}
