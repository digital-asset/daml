module InterfaceTypeRepCheck where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data GHC.Types.DamlInterface => I = I GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep I where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch I where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface I I where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface I I where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod I "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t I => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @I t)
instance DA.Internal.Desugar.HasToAnyTemplate I where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate I where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep I where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory I where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver I where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate I where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure I where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType I where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq I where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t I) =>
         DA.Internal.Desugar.HasToAnyChoice t MyArchive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t I) =>
         DA.Internal.Desugar.HasFromAnyChoice t MyArchive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t I)) =>
         DA.Internal.Desugar.HasExerciseGuarded t MyArchive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @I cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t I)) =>
         DA.Internal.Desugar.HasExercise t MyArchive (()) where
  exercise = DA.Internal.Desugar._exerciseDefault
data MyArchive
  = MyArchive {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_IMyArchive :
  (I -> MyArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId I
   -> I -> MyArchive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming I,
   DA.Internal.Desugar.Optional (I
                                 -> MyArchive -> [DA.Internal.Desugar.Party]))
_choice_IMyArchive
  = (\ this arg@MyArchive
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@MyArchive
       -> let _ = self in let _ = this in let _ = arg in do pure (), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => T1
  = T1 {owner1 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner1" T1 Party where
  getField = DA.Internal.Record.getFieldPrim @"owner1" @T1 @Party
  setField = DA.Internal.Record.setFieldPrim @"owner1" @T1 @Party
instance DA.Internal.Desugar.HasSignatory T1 where
  signatory this@T1 {..}
    = DA.Internal.Desugar.toParties (owner1)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T1 where
  observer this@T1 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T1 where
  ensure this@T1 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T1 where
  agreement this@T1 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T1 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T1 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T1 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T1 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T1 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T1 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_T1Archive :
  (T1 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T1
   -> T1
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T1,
   DA.Internal.Desugar.Optional (T1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_T1Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_T1_I : DA.Internal.Desugar.ImplementsT T1 I
_implements_T1_I = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T1 I where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T1 I where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T1_I_getOwner : DA.Internal.Desugar.Method T1 I "getOwner"
_method_T1_I_getOwner
  = DA.Internal.Desugar.mkMethod
      @T1
      @I
      @"getOwner"
      (\ this@T1 {..}
         -> let _ = this in let getOwner = owner1 in getOwner)
data GHC.Types.DamlTemplate => T2
  = T2 {owner2 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner2" T2 Party where
  getField = DA.Internal.Record.getFieldPrim @"owner2" @T2 @Party
  setField = DA.Internal.Record.setFieldPrim @"owner2" @T2 @Party
instance DA.Internal.Desugar.HasSignatory T2 where
  signatory this@T2 {..}
    = DA.Internal.Desugar.toParties (owner2)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T2 where
  observer this@T2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T2 where
  ensure this@T2 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T2 where
  agreement this@T2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_T2Archive :
  (T2 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T2
   -> T2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T2,
   DA.Internal.Desugar.Optional (T2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_T2Archive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_T2_I : DA.Internal.Desugar.ImplementsT T2 I
_implements_T2_I = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T2 I where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T2 I where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T2_I_getOwner : DA.Internal.Desugar.Method T2 I "getOwner"
_method_T2_I_getOwner
  = DA.Internal.Desugar.mkMethod
      @T2
      @I
      @"getOwner"
      (\ this@T2 {..}
         -> let _ = this in let getOwner = owner2 in getOwner)
main
  = scenario
      do p <- getParty "Alice"
         submit
           p
           do cidT1 <- create (T1 p)
              let cidT2 = coerceContractId @T1 @T2 cidT1
              exercise cidT2 MyArchive
