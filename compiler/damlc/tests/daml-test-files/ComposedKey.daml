-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This is sketch of how the key of a generic template can depend on the key
-- of the template it is parameterized over. It is not particularly pretty,
-- but the best I could come up with in the absence of type families in
-- DAML-LF.
-- @SINCE-LF 1.5
daml 1.2
module ComposedKey where

import DA.Assert
import DA.Text

template Fact with
    owner : Party
    name : Text
    value : Int
  where
    signatory owner
    key (owner, name) : (Party, Text)
    maintainer key._1


-- For any instantiation, `k` has to be the key type of `t`.
template (Template t, TemplateKey t k) => Proposal t k with
    asset : t
    proposers : [Party]
    receivers : [Party]
  where
    signatory proposers
    observer receivers
    ensure
        let authorizers = proposers ++ receivers
        in all (`elem` authorizers) (signatory asset)
    agreement unlines
        [ "Proposal:"
        , "* proposers: " <> show proposers
        , "* receivers: " <> show receivers
        , "* agreement: " <> agreement asset
        ]

    key (proposers, key asset) : ([Party], k)
    maintainer (fst key)

    controller receivers can
      Accept : ContractId t
        do create asset

-- The instantiation of the generic proposal workflow for `Iou`.
template instance ProposalFact = Proposal Fact (Party, Text)

test = scenario do
    alice <- getParty "Alice"
    bob <- getParty "Bob"
    let fact = Fact with owner = alice; name = "Answer"; value = 23
    let prop = Proposal with asset = fact; proposers = [bob]; receivers = [alice]
    propId <- submit bob do create prop
    (propId', prop') <- submit bob do fetchByKey @(Proposal Fact (Party, Text)) ([bob], (alice, "Answer"))
    propId' === propId
    prop' === prop
