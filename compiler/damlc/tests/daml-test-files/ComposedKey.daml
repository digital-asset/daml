-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This is sketch of how the key of a generic template can depend on the key
-- of the template it is parameterized over. It is not particularly pretty,
-- but the best I could come up with in the absence of type families in
-- DAML-LF.
-- TODO(MH, #1387): Use the new surface syntax.
-- @SINCE-LF 1.5
daml 1.2
module ComposedKey where

import Prelude hiding (Template (..), TemplateKey (..), Choice (..), Archive (..), create, fetch, fetchByKey, archive, exercise)
import DA.Assert
import DA.Text
import GenericTemplates
import GenTemplCompat

-- For any instantiation, `k` has to be the key type of `t`.
data Proposal t k = Proposal with
    asset : t
    proposers : [Party]
    receivers : [Party]
  deriving (Eq, Show)

instance ProposalInstance t k => Template (Proposal t k) where
    signatory = _signatoryProposal
    observer = _observerProposal
    ensure = _ensureProposal
    agreement = _agreementProposal
    create = _createProposal
    fetch = _fetchProposal
    archive = _archiveProposal

instance ProposalInstance t k => TemplateKey (Proposal t k) ([Party], k) where
    key = _keyProposal
    fetchByKey = _fetchByKeyProposal
    lookupByKey = _lookupByKeyProposal

data Accept = Accept{}
  deriving (Eq, Show)

instance ProposalInstance t k => Choice (Proposal t k) Accept (ContractId t) where
    exercise = _exerciseProposalAccept

instance ProposalInstance t k => Choice (Proposal t k) Archive () where
    exercise = _exerciseProposalArchive

class (Template t, TemplateKey t k) => ProposalInstance t k where
    _signatoryProposal : Proposal t k -> [Party]
    _signatoryProposal this@Proposal{..} = proposers
    _observerProposal : Proposal t k -> [Party]
    _observerProposal this@Proposal{..} = receivers
    _ensureProposal : Proposal t k -> Bool
    _ensureProposal this@Proposal{..} =
        let authorizers = proposers ++ receivers
        in all (`elem` authorizers) (signatory asset)
    _agreementProposal : Proposal t k -> Text
    _agreementProposal this@Proposal{..} = unlines
        [ "Proposal:"
        , "* proposers: " <> show proposers
        , "* receivers: " <> show receivers
        , "* agreement: " <> agreement asset
        ]
    _createProposal : Proposal t k -> Update (ContractId (Proposal t k))
    _createProposal = error "code will be injected by the compiler"
    _fetchProposal : ContractId (Proposal t k) -> Update (Proposal t k)
    _fetchProposal = error "code will be injected by the compiler"
    _archiveProposal : ContractId (Proposal t k) -> Update ()
    _archiveProposal cid = _exerciseProposalArchive cid Archive

    _hasKeyProposal : HasKey (Proposal t k)
    _hasKeyProposal = HasKey
    _keyProposal : Proposal t k -> ([Party], k)
    _keyProposal this@Proposal{..} = (proposers, key asset)
    _maintainerProposal : HasKey (Proposal t k) -> ([Party], k) -> [Party]
    _maintainerProposal HasKey key = fst key
    _fetchByKeyProposal : ([Party], k) -> Update (ContractId (Proposal t k), Proposal t k)
    _fetchByKeyProposal = error "code will be injected by the compiler"
    _lookupByKeyProposal : ([Party], k) -> Update (Optional (ContractId (Proposal t k)))
    _lookupByKeyProposal = error "code will be injected by the compiler"

    _consumptionProposalArchive : PreConsuming (Proposal t k)
    _consumptionProposalArchive = PreConsuming
    _controllerProposalArchive : Proposal t k -> Archive -> [Party]
    _controllerProposalArchive this@Proposal{..} arg@Archive = _signatoryProposal this
    _actionProposalArchive : ContractId (Proposal t k) -> Proposal t k -> Archive -> Update ()
    _actionProposalArchive self this@Proposal{..} arg@Archive = do
        pure ()
    _exerciseProposalArchive : ContractId (Proposal t k) -> Archive -> Update ()
    _exerciseProposalArchive = error "code will be injected by the compiler"

    _consumptionProposalAccept : PreConsuming (Proposal t k)
    _consumptionProposalAccept = PreConsuming
    _controllerProposalAccept : Proposal t k -> Accept -> [Party]
    _controllerProposalAccept this@Proposal{..} arg@Accept = receivers
    _actionProposalAccept : ContractId (Proposal t k) -> Proposal t k -> Accept -> Update (ContractId t)
    _actionProposalAccept self this@Proposal{..} arg@Accept = do
        create asset
    _exerciseProposalAccept : ContractId (Proposal t k) -> Accept -> Update (ContractId t)
    _exerciseProposalAccept = error "code will be injected by the compiler"


-- The instantiation of the generic proposal workflow for `Iou`.
newtype ProposalFact = MkProposalFact with unProposalFact : Proposal Fact (Party, Text)

instance ProposalInstance Fact (Party, Text) where

test = scenario do
    alice <- getParty "Alice"
    bob <- getParty "Bob"
    let fact = Fact with owner = alice; name = "Answer"; value = 23
    let prop = Proposal with asset = fact; proposers = [bob]; receivers = [alice]
    propId <- submit bob do create prop
    (propId', prop') <- submit bob do fetchByKey @(Proposal Fact (Party, Text)) ([bob], (alice, "Answer"))
    propId' === propId
    prop' === prop
