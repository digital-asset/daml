-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @UNTIL-LF 1.5
--
-- Tests that DAML-LF <= 1.5 does not enforce "submitter
-- must be in maintainer" rule. See https://github.com/digital-asset/daml/issues/1866

module SubmitterInMaintainers_before_1866 where

-- import DA.Assert

template Delegated
  with
    owner : Party
    k : Text
  where
    signatory owner
    key (owner, k) : (Party, Text)
    maintainer key._1

template Delegation
  with
    owner : Party
    delegate : Party
  where
    signatory owner
    observer delegate

    controller delegate can
      nonconsuming FetchDelegated: Delegated
        with delegated: ContractId Delegated
        do fetch delegated

    controller delegate can
      nonconsuming FetchByKeyDelegated: ()
        with
          p: Party
          k: Text
          expected: ContractId Delegated
        do
          (cid, _) <- fetchByKey @Delegated (p, k)
          assertMsg "fetch matches" (expected == cid)

    controller delegate can
      nonconsuming LookupByKeyDelegated: ()
        with
          p: Party
          k: Text
          expected: Optional (ContractId Delegated)
        do
          actual <- lookupByKey @Delegated (p, k)
          assertMsg "lookup matches" (expected == actual)

template ShowDelegated
  with
    owner: Party
    delegate: Party
  where
    signatory owner
    observer delegate
    controller owner can
      ShowIt : ()
        with delegatedId: ContractId Delegated
        do
          fetch delegatedId
          return ()

setup = do
  owner <- getParty "owner"
  delegate <- getParty "delegate"
  delegated <- owner `submit` create Delegated with owner, k = "key"
  delegation <- owner `submit` create Delegation with owner, delegate
  return (owner, delegate, delegated, delegation)

-- mirrors "reject fetching an undisclosed contract" in
-- in `CommandTransactionChecks.scala`
rejectsFetchingAnUndlisclosedContract = scenario do
  (owner, delegate, delegated, delegation) <- setup
  delegate `submitMustFail` exercise delegation FetchDelegated with delegated
  -- this fetch still fails even if we do not check that the submitter
  -- is in the lookup maintainer, since we have the visibility check
  -- implement as part of #753.
  delegate `submitMustFail` exercise delegation FetchByKeyDelegated with p = owner, k = "key", expected = delegated
  delegate `submit` exercise delegation LookupByKeyDelegated with p = owner, k = "key", expected = None

-- mirrors "permit fetching a divulged contract" in
-- in `CommandTransactionChecks.scala`
permitFetchingADivulgedContract = scenario do
  (owner, delegate, delegated, delegation) <- setup
  showId <- owner `submit` create ShowDelegated with owner, delegate
  owner `submit` exercise showId ShowIt with delegatedId = delegated
  delegate `submit` exercise delegation FetchDelegated with delegated
  delegate `submit` exercise delegation FetchByKeyDelegated with p = owner, k = "key", expected = delegated
  delegate `submit` exercise delegation LookupByKeyDelegated with p = owner, k = "key", expected = Some delegated
