-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{- DLINT ignore -}

module LargeTransaction where

import Daml.Script

import DA.Assert

range: a -> (a -> a) -> Int -> [a]
range x next n =
  if n <= 0 then []
  else reverse (rangeHelper [x] next (n - 1))

rangeHelper: [a] -> (a -> a) -> Int -> [a]
rangeHelper xs next n =
  if n <= 0 then xs
  else
    case xs of
      []     -> []
      h :: _ -> rangeHelper ((next h) :: xs) next (n - 1)

rangeTest : Script ()
rangeTest = script do
  rangeHelper [] (\x -> x + 2)  2 === []
  rangeHelper [] (\x -> x + 2)  0 === []
  rangeHelper [] (\x -> x + 2)  (-1) === []
  rangeHelper [3] (\x -> x + 2) 2 === [7, 5, 3]
  rangeHelper [3] (\x -> x + 2) 0 === [3]
  rangeHelper [3] (\x -> x + 2) (-1) === [3]
  range 1 (\x -> x + 10) 0 === []
  range 1 (\x -> x + 10) (-1) === []
  range 1 (\x -> x + 10) 1 === [1]
  range 7 (\x -> x + 10) 5 === [7, 17, 27, 37, 47]
  range 3 (\x -> x + 2) 7 === [3, 5, 7, 9, 11, 13, 15]

template IntContainer
  with
    party: Party
    value: Int
  where
    signatory party

template ListContainer
  with
    party: Party
    list: [Int]
  where
    signatory party

template RangeOfInts
  with
    party: Party
    start: Int
    step: Int
    size: Int
  where
    signatory party
    choice ToList: [Int]
      controller party
      do return (range start (\x -> x + step) size)
    choice ToListContainer: ContractId ListContainer
      controller party
      do create ListContainer with party = party, list = (range start (\x -> x + step) size)
    choice ToListOfIntContainers: [ContractId IntContainer]
      controller party
      do let xs: [Int] = (range start (\x -> x + step) size)
         mapA (\x -> create IntContainer with party = party, value = x) xs

template ListUtil
  with
    party: Party
  where
    signatory party
    choice Size: ContractId IntContainer
      with list: [Int]
      controller party
      do create IntContainer with party = party, value = (length list)

rangeOfIntsToListTest : Script ()
rangeOfIntsToListTest = script do
    p <- allocateParty "Dummy"
    cid <- submit p do
      createCmd RangeOfInts with
        party = p
        start = 0
        step = 10
        size = 5
    lst <- submit p do exerciseCmd cid ToList
    lst === [0, 10, 20, 30, 40]

rangeOfIntsToListContainerTest : Script ()
rangeOfIntsToListContainerTest = script do
    p <- allocateParty "Dummy"
    cid <- submit p do
      createCmd RangeOfInts with
        party = p
        start = 0
        step = 10
        size = 5
    listContainerCid <- submit p (exerciseCmd cid ToListContainer)
    listContainer <- submit p do createAndExerciseCmd (ListFetchHelper p) (ListFetchExe listContainerCid)
    listContainer.list === [0, 10, 20, 30, 40]

listSizeTest : Script ()
listSizeTest = script do
  p <- allocateParty "Dummy"
  cid <- submit p do
    createCmd ListUtil with party = p
  cid <- submit p (exerciseCmd cid Size with list = [0, 1, 2, 3, 4, 5, 6])
  sizeContainer <- submit p do createAndExerciseCmd (IntFetchHelper p) (IntFetchExe cid)
  sizeContainer.value === 7

largeTransactionWithOneContractTest : Script ()
largeTransactionWithOneContractTest = script do
    let expectedSize: Int = 100
    p: Party <- allocateParty "Dummy"
    cid: ContractId RangeOfInts <- submit p do
      createCmd RangeOfInts with party = p, start = 0, step = 1, size = expectedSize
    cid: ContractId ListContainer <- submit p do exerciseCmd cid ToListContainer
    listContainer <- submit p do createAndExerciseCmd (ListFetchHelper p) (ListFetchExe cid)
    (length listContainer.list) === expectedSize

largeListAsAChoiceArgTest : Script ()
largeListAsAChoiceArgTest = script do
    let expectedSize: Int = 100
    let list: [Int] = range 0 (\x -> x + 1) expectedSize
    p: Party <- allocateParty "Dummy"
    cid: ContractId ListUtil <- submit p do createCmd ListUtil with party = p
    cid: ContractId IntContainer <- submit p do exerciseCmd cid Size with list = list
    sizeContainer: IntContainer <- submit p do createAndExerciseCmd (IntFetchHelper p) (IntFetchExe cid)
    sizeContainer.value === expectedSize

largeTransactionWithManyContractsTest : Script ()
largeTransactionWithManyContractsTest = script do
    let expectedSize: Int = 100
    p: Party <- allocateParty "Dummy"
    cid: ContractId RangeOfInts <- submit p do
      createCmd RangeOfInts with party = p, start = 0, step = 1, size = expectedSize
    cids: [ContractId IntContainer] <- submit p do exerciseCmd cid ToListOfIntContainers
    (length cids) === expectedSize
    list: [Int] <- fetchAllInts p cids
    list === (range 0 (\x -> x + 1) expectedSize)

fetchAllInts: Party -> [ContractId IntContainer] -> Script [Int]
fetchAllInts p cids = mapA (\cid -> (fetchOneInt p cid)) cids

fetchOneInt: Party -> ContractId IntContainer -> Script Int
fetchOneInt p cid = do
  c: IntContainer <- submit p do createAndExerciseCmd (IntFetchHelper p) (IntFetchExe cid)
  return c.value

template IntFetchHelper
  with
    p : Party
  where
    signatory p
    choice IntFetchExe : IntContainer
      with cid : ContractId IntContainer
      controller p
      do fetch cid

template ListFetchHelper
  with
    p : Party
  where
    signatory p
    choice ListFetchExe : ListContainer
      with cid : ContractId ListContainer
      controller p
      do fetch cid

template RangeFetchHelper
  with
    p : Party
  where
    signatory p
    choice RangeFetchExe : RangeOfInts
      with cid : ContractId RangeOfInts
      controller p
      do fetch cid
