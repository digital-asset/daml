-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- An IOU to be proposed using the generic proposal workflow.
-- @SINCE-LF 1.5
daml 1.2
module IouDSL where

import Prelude hiding (Template (..), TemplateKey (..), Choice (..), Archive (..), create, fetch, archive, fetchByKey, lookupByKey, exercise)
import DA.Assert
import GenericTemplates
import ProposalDSL


data Iou = Iou with
    issuer : Party
    owner : Party
    amount : Decimal
  deriving (Eq, Show)

instance IouInstance => Template Iou where
  signatory = _signatoryIou
  observer = _observerIou
  ensure = _ensureIou
  agreement = _agreementIou
  create = _createIou
  fetch = _fetchIou
  archive = _archiveIou

data Burn = Burn{}
  deriving (Eq, Show)

instance IouInstance => Choice Iou Burn () where
  exercise = _exerciseIouBurn

instance IouInstance => Choice Iou Archive () where
  exercise = _exerciseIouArchive

class IouInstance where
  _signatoryIou : Iou -> [Party]
  _signatoryIou this@Iou{..} = [issuer, owner]
  _observerIou : Iou -> [Party]
  _observerIou this@Iou{..} = []
  _ensureIou : Iou -> Bool
  _ensureIou this@Iou{..} = amount > 0.0
  _agreementIou : Iou -> Text
  _agreementIou this@Iou{..} =
      show issuer <> " owns " <> show owner <> " CHF " <> show amount
  _createIou : Iou -> Update (ContractId Iou)
  _createIou = error "code will be injected by the compiler"
  _fetchIou : ContractId Iou -> Update Iou
  _fetchIou = error "code will be injected by the compiler"
  _archiveIou : ContractId Iou -> Update ()
  _archiveIou cid = _exerciseIouArchive cid Archive

  _consumptionIouArchive : PreConsuming Iou
  _consumptionIouArchive = PreConsuming
  _controllerIouArchive : Iou -> Archive -> [Party]
  _controllerIouArchive this@Iou{..} arg@Archive = _signatoryIou this
  _actionIouArchive : ContractId Iou -> Iou -> Archive -> Update ()
  _actionIouArchive self this@Iou{..} arg@Archive = do
    pure ()
  _exerciseIouArchive : ContractId Iou -> Archive -> Update ()
  _exerciseIouArchive = error "code will be injected by the compiler"

  _consumptionIouBurn : PreConsuming Iou
  _consumptionIouBurn = PreConsuming
  _controllerIouBurn : Iou -> Burn -> [Party]
  _controllerIouBurn this@Iou{..} arg@Burn = [owner]
  _actionIouBurn : ContractId Iou -> Iou -> Burn -> Update ()
  _actionIouBurn self this@Iou{..} arg@Burn = do
    pure ()
  _exerciseIouBurn : ContractId Iou -> Burn -> Update ()
  _exerciseIouBurn = error "code will be injected by the compiler"

instance IouInstance where


-- The instantiation of the generic proposal workflow for `Iou`.
newtype ProposalIou = MkProposalIou with unProposalIou : Proposal Iou -- ^ TEMPLATE_INSTANCE

instance ProposalInstance Iou where


-- A scenario.
test = scenario do
  alice <- getParty "alice"
  bank <- getParty "bank"
  let iou = Iou with issuer = bank; owner = alice; amount = 10.0
  let prop = Proposal with asset = iou; receivers = [alice]; name = "present"
  propId <- submit bank do
    create prop
  (propId', prop') <- submit bank do
    fetchByKey @(Proposal Iou) ([bank], "present")
  propId' === propId
  prop' === prop
  mbPropId <- submit bank do
    lookupByKey @(Proposal Iou) ([bank], "present")
  mbPropId === Some propId
  iouId <- submit alice do
    exercise propId Accept
  iou' <- submit alice do
    fetch iouId
  iou' === iou
  submit alice do
    exercise iouId Burn
