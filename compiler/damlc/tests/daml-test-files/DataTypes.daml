-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- Check that various ways to define data types work. We're mostly interested
-- in the generated Daml-LF. Unfortunately, we don't have a way to test for
-- properties of the generated Daml-LF, cf. DEL-6418.

module DataTypes where

import DA.Assert

data Rec = Rec with x: Int

newtype RecNT = RecNT with x: Int

data Unit = Unit{}

data Tag = MkTag Int

untag (MkTag  n) = n

-- NOTE(MH): This is treated like
--
--     data MkTagNT = MkTagNT{unwrap: Int}
newtype MkTagNT = MkTagNT Int

untagNT (MkTagNT n) = n

data Sum
  = Zero
  | Num1 Int
  | Num2 with x: Int
  | Plus with x: Int; y: Int

eval = \case
  Zero -> 0
  Num1 x -> x
  Num2 x -> x
  Plus x y -> x+y


main = scenario do
  (Rec with x = 5).x === 5

  (RecNT with x = 7).x === 7

  assert $ case Unit of {Unit -> True}

  untag (MkTag 3) === 3

  untagNT (MkTagNT 11) === 11

  eval Zero === 0
  eval (Num1 13) === 13
  eval (Num2 with x = 17) === 17
  eval (Plus with x = 19; y = 23) === 42
