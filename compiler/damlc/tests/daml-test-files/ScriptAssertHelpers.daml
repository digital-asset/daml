-- Helper functions for making assertions on Scripts
{-# LANGUAGE AllowAmbiguousTypes #-}

-- TODO: Consider some kind of TestHelpers directory for this
module ScriptAssertHelpers where

import Daml.Script
import DA.Assert
import DA.Functor (void)

cantSee : forall t p. (Show t, Eq t, Template t, HasEnsure t, IsParties p) => p -> ContractId t -> Script ()
cantSee p cid = do
  cArchived <- queryContractId p cid
  cArchived === None

canSee : forall t p. (Show t, Eq t, Template t, HasEnsure t, IsParties p) => p -> ContractId t -> Script ()
canSee p = void . queryAssertContractId p

-- Note that, because of the requirement of specifying `t`, this cannot be used with infix notation, consider renaming
cantSeeKey : forall t k p. (Show t, Eq t, TemplateKey t k, IsParties p) => p -> k -> Script ()
cantSeeKey p k = do
  cArchived <- queryContractKey @t p k
  cArchived === None

canSeeKey : forall t k p. (Show k, TemplateKey t k, IsParties p) => p -> k -> Script ()
canSeeKey p = void . queryAssertContractKey @t p

queryAssertContractId : forall t p. (Template t, HasEnsure t, IsParties p) => p -> ContractId t -> Script t
queryAssertContractId p cid =
  queryContractId @t p cid >>= \case
    Some c -> pure c
    None -> assertFail $ "Couldn't see contract with ID " <> show cid

queryAssertContractKey : forall t k p. (Show k, TemplateKey t k, IsParties p) => p -> k -> Script (ContractId t, t)
queryAssertContractKey p k =
  queryContractKey @t p k >>= \case
    Some c -> pure c
    None -> assertFail $ "Couldn't see contract with key " <> show k
