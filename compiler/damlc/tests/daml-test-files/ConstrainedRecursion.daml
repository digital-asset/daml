-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--
-- @INFO range=12:0-13:20; Use foldl
-- @INFO range=16:0-17:16; Use foldl
-- @INFO range=20:0-21:16; Use foldl

module ConstrainedRecursion where

import DA.Assert

sumInferred z (x :: xs) = sumInferred (z + x) xs
sumInferred z [] = z

sumPoly : Additive a => a -> [a] -> a
sumPoly z (x :: xs) = sumPoly (z + x) xs
sumPoly z [] = z

sumMono : Int -> [Int] -> Int
sumMono z (x :: xs) = sumMono (z + x) xs
sumMono z [] = z

test = scenario do
    sumInferred 0 [1, 2, 3] === 6
    sumInferred 0.0 [1.0, 2.0, 3.0] === (6.0 : Decimal)
    sumPoly 0 [1, 2, 3] === 6
    sumPoly 0.0 [1.0, 2.0, 3.0] === (6.0 : Decimal)
    sumMono 0 [1, 2, 3] === 6
