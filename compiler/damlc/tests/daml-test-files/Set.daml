-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @SINCE-LF 1.3

module Set where

import DA.Next.Set as S
import DA.Assert

testEmpty = scenario do
  0 === size S.empty
  [] === toList (S.empty : Set Decimal)

testSize = scenario do
  0 === size (fromList ([] : [Decimal]))
  3 === size (fromList [1, 2, 3])

testToList = scenario do
  [1, 2, 5] === toList (fromList [2, 5, 1])

testFromList = scenario do
  False === member 2 (fromList [1, 3, 4])
  True === member 3 (fromList [1, 3, 4])
  [1] === toList (fromList [1, 1, 1, 1])

testMember = scenario do
  False === member "a" (fromList ["", "b", "c"])
  True === member "" (fromList ["", "b", "c"])
  False === member 2 (fromList [])

testNull = scenario do
  True === S.null S.empty
  False === S.null (insert 5 S.empty)
  False === S.null (fromList [1, 2, 3])
  True === S.null (fromList ([] : [Int]))

testInsert = scenario do
  [1, 2, 3, 4, 5] === toList (foldl (\a b -> insert b a) S.empty [3, 1, 4, 2, 5, 2, 1])

testFilter = scenario do
  [1, 2] === toList (S.filter (<3) (fromList [3, 1, 4, 2, 5, 2, 1]))

testDelete = scenario do
  [2, 3, 4, 5] === toList (delete 1 (fromList [3, 1, 4, 2, 5, 2, 1]))
  [1, 2] === toList (delete 3 (fromList [2, 1, 2, 1]))

testSingleton = scenario do
  [1] === toList (singleton 1)

testUnion = scenario do
  [1, 2, 3, 4, 5] === toList (fromList [1, 5, 3] `union` fromList [4, 3, 2])
  [2, 4] === toList (S.empty `union` fromList [4, 2])
  [1, 3, 5] === toList (fromList [1, 5, 3] `union` S.empty)
  [] === toList (S.empty `union` fromList ([] : [Int]))

testIntersection = scenario do
  [3, 5, 9] === toList (intersection (fromList [9, 1, 5, 6, 8, 3]) (fromList [4, 3, 7, 2, 5, 9]))
  [] === toList (intersection S.empty (fromList [4, 2]))
  [] === toList (intersection (fromList [1, 5, 3]) S.empty)
  [] === toList (intersection S.empty (fromList ([] : [Int])))

testDifference = scenario do
  [1, 6] === toList (difference (fromList [1, 5, 3, 6]) (fromList [4, 3, 2, 5]))
  [] === toList (difference S.empty (fromList [4, 2]))
  [1, 3, 5] === toList (difference (fromList [1, 5, 3]) S.empty)
  [] === toList (difference S.empty (fromList ([] : [Int])))
