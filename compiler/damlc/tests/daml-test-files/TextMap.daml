-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.
-- @SINCE-LF 1.3

module TextMap where

import DA.TextMap as TM
import DA.Assert

testEmpty = scenario do
  0 === size TM.empty
  [] === toList (TM.empty : TextMap Decimal)

testSize = scenario do
  0 === size (fromList ([] : [(Text, Decimal)]))
  3 === size (fromList ([("1", 2.0), ("2", 9.0), ("3", 2.2)] : [(Text, Decimal)]))

testToList = scenario do
  [("1", "c"), ("2", "a"), ("5", "b")] === toList (fromList [("2", "a"), ("5", "b"), ("1", "c")])

testFromList = scenario do
  False === member "2" (fromList [("1", "a"), ("3", "b"), ("4", "c")])
  True === member "3" (fromList [("1", "a"), ("3", "b"), ("4", "c")])
  fromList [("1", "b")] === fromList [("1", "a"), ("1", "c"), ("1", "b")]

testFromListWith = scenario do
  fromListWith (++) [("A", [1]), ("A", [2]), ("B", [2]), ("B", [1]), ("A", [3])] === fromList [("A", [1, 2, 3]), ("B", [2, 1])]
  fromListWith (++) [] === (empty : TextMap [Int])

testMember = scenario do
  False === member "a" (fromList ([("", 1.0), ("b", 2.0), ("c", 3.0)] : [(Text, Decimal)]))
  True === member "" (fromList ([("", 1.0), ("b", 2.0), ("c", 3.0)] : [(Text, Decimal)]))
  False === member "2" (fromList [])

testLookup = scenario do
  None === TM.lookup "a" (fromList ([("", 1.0), ("b", 2.0), ("c", 3.0)] : [(Text, Decimal)]))
  Some 1.0 === TM.lookup "" (fromList ([("", 1.0), ("b", 2.0), ("c", 3.0)] : [(Text, Decimal)]))
  None === TM.lookup "2" (fromList ([] : [(Text, Text)]))

testNull = scenario do
  True === TM.null TM.empty
  False === TM.null (insert "5" "a" TM.empty)
  False === TM.null (fromList [("1", "a"), ("2", "b"), ("3", "c")])
  True === TM.null (fromList ([] : [(Text, Party)]))

testEq = scenario do
  (TM.empty : TextMap Int) === (TM.empty : TextMap Int)
  assert (TM.empty /= TM.fromList [("1", 1)])
  TM.fromList [("1", 1), ("2", 2), ("3", 3)] === TM.fromList [("1", 1), ("2", 2), ("3", 3)]
  assert (TM.fromList [("1", 1), ("2", 2), ("3", 3)] /= TM.fromList [("1", 2), ("2", 2)])
  assert (TM.fromList [("1", 1), ("2", 2), ("3", 3)] /= TM.fromList [("1", 2), ("2", 2), ("3", 4)])
  assert (TM.fromList [("1", 1), ("2", 2), ("3", 3)] /= TM.fromList [("1", 2), ("2", 2), ("4", 3)])

testInsert = scenario do
  [("1", True), ("2", False), ("3", True), ("4", False), ("5", False)]
    ===
    toList (foldl (\a b -> uncurry TM.insert b a) TM.empty [("3", True), ("1", False), ("4", False), ("2", True), ("5", False), ("2", False), ("1", True)])

testFilterWithKey = scenario do
  fromList [("1", True), ("2", False), ("3", True)]
    ===
    TM.filterWithKey (\k v -> k < "3" || v) (fromList [("3", True), ("1", False), ("4", False), ("2", True), ("5", False), ("2", False), ("1", True)])

testDelete = scenario do
  fromList [("2", False), ("3", True), ("4", False), ("5", False)]
    ===
    delete "1" (fromList [("3", True), ("1", False), ("4", False), ("2", True), ("5", False), ("2", False), ("1", True)])

testMerge = scenario do
  let m1 = fromList [("C", "aa"), ("A", "bb"), ("D", "cc"), ("B", "dd"), ("F", "ee")]
  let m2 = fromList [("A", "a"), ("C", "b"), ("B", "c"), ("E", "d"), ("", "e")]

  [] === toList (merge (\k v -> Some v) (\k v -> Some v) (\k v w -> Some v) empty (empty : TextMap Text))
  [] === toList (merge (\k v -> Some v) (\k v -> Some v) (\k v w -> None) m1 m1)
  [("A", "bb"), ("C", "aa")] === toList (merge (\k v -> if v <= "bb" then Some v else None) (\k v -> Some v) (\k v w -> None) m1 empty)
  [("A", "a"), ("C", "b")] === toList (merge (\k v -> Some v) (\k v -> if v <= "bb" then Some v else None) (\k v w -> None) empty m2)
  [("A","bb"), ("B","dd"), ("C","aa")] === toList (merge (\k v -> None) (\k v -> None) (\k v w -> Some v) m1 m2)
