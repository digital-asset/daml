module InterfaceGuarded where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Exception ( GeneralError(..), throwPure )
data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token Token where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token Token where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token "getOwner" (Party)
getOwner : DA.Internal.Desugar.Implements t Token => t -> Party
getOwner t
  = GHC.Types.primitiveInterface
      @"getOwner" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasMethod Token "getAmount" (Int)
getAmount : DA.Internal.Desugar.Implements t Token => t -> Int
getAmount t
  = GHC.Types.primitiveInterface
      @"getAmount" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasMethod Token "setAmount" (Int
                                                          -> Token)
setAmount :
  DA.Internal.Desugar.Implements t Token => t -> Int -> Token
setAmount t
  = GHC.Types.primitiveInterface
      @"setAmount" (DA.Internal.Desugar._toInterface @_ @Token t)
instance DA.Internal.Desugar.HasToAnyTemplate Token where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure Token where
  ensure this = (getAmount this >= 0)
instance DA.Internal.Desugar.HasIsInterfaceType Token where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t Token) =>
         DA.Internal.Desugar.HasToAnyChoice t GetRich (ContractId Token) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t Token) =>
         DA.Internal.Desugar.HasFromAnyChoice t GetRich (ContractId Token) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token)) =>
         DA.Internal.Desugar.HasExerciseGuarded t GetRich (ContractId Token) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t Token)) =>
         DA.Internal.Desugar.HasExercise t GetRich (ContractId Token) where
  exercise = DA.Internal.Desugar._exerciseDefault
data GetRich
  = GetRich {byHowMuch : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "byHowMuch" GetRich Int where
  getField
    = DA.Internal.Record.getFieldPrim @"byHowMuch" @GetRich @Int
  setField
    = DA.Internal.Record.setFieldPrim @"byHowMuch" @GetRich @Int
_choice_TokenGetRich :
  (Token -> GetRich -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Token
   -> Token
      -> GetRich -> DA.Internal.Desugar.Update (ContractId Token),
   DA.Internal.Desugar.Consuming Token,
   DA.Internal.Desugar.Optional (Token
                                 -> GetRich -> [DA.Internal.Desugar.Party]))
_choice_TokenGetRich
  = (\ this arg@GetRich {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     \ self this arg@GetRich {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do assert (byHowMuch > 0)
               create $ setAmount this (getAmount this + byHowMuch), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlInterface => SubToken
  = SubToken GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep SubToken where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch SubToken where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface SubToken SubToken where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface SubToken SubToken where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
_requires_SubToken_Token :
  DA.Internal.Desugar.RequiresT SubToken Token
_requires_SubToken_Token = DA.Internal.Desugar.RequiresT
instance DA.Internal.Desugar.HasToInterface SubToken Token where
  _toInterface = GHC.Types.primitive @"EToRequiredInterface"
instance DA.Internal.Desugar.HasFromInterface SubToken Token where
  fromInterface = GHC.Types.primitive @"EFromRequiredInterface"
  unsafeFromInterface
    = GHC.Types.primitive @"EUnsafeFromRequiredInterface"
instance DA.Internal.Desugar.HasToAnyTemplate SubToken where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate SubToken where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep SubToken where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory SubToken where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver SubToken where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate SubToken where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure SubToken where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType SubToken where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq SubToken where
  (==) = GHC.Types.primitive @"BEEqual"
data GHC.Types.DamlTemplate => Asset
  = Asset {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset @Party
instance DA.Internal.Record.HasField "owner" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset @Party
instance DA.Internal.Record.HasField "amount" Asset Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset @Int
instance DA.Internal.Desugar.HasSignatory Asset where
  signatory this@Asset {..}
    = DA.Internal.Desugar.toParties (owner)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset where
  observer this@Asset {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset where
  ensure this@Asset {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset where
  agreement this@Asset {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_AssetArchive :
  (Asset
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Asset
   -> Asset
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Asset,
   DA.Internal.Desugar.Optional (Asset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_AssetArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_Asset_Token :
  DA.Internal.Desugar.ImplementsT Asset Token
_implements_Asset_Token = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface Asset Token where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset Token where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_Asset_Token_getOwner :
  DA.Internal.Desugar.Method Asset Token "getOwner"
_method_Asset_Token_getOwner
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"getOwner"
      (\ this@Asset {..}
         -> let _ = this in let getOwner = owner in getOwner)
_method_Asset_Token_getAmount :
  DA.Internal.Desugar.Method Asset Token "getAmount"
_method_Asset_Token_getAmount
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"getAmount"
      (\ this@Asset {..}
         -> let _ = this in let getAmount = amount in getAmount)
_method_Asset_Token_setAmount :
  DA.Internal.Desugar.Method Asset Token "setAmount"
_method_Asset_Token_setAmount
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @"setAmount"
      (\ this@Asset {..}
         -> let _ = this in
            let setAmount x = toInterface @Token (this {amount = x})
            in setAmount)
data GHC.Types.DamlTemplate => AnotherAsset
  = AnotherAsset {owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner" AnotherAsset Party where
  getField
    = DA.Internal.Record.getFieldPrim @"owner" @AnotherAsset @Party
  setField
    = DA.Internal.Record.setFieldPrim @"owner" @AnotherAsset @Party
instance DA.Internal.Record.HasField "amount" AnotherAsset Int where
  getField
    = DA.Internal.Record.getFieldPrim @"amount" @AnotherAsset @Int
  setField
    = DA.Internal.Record.setFieldPrim @"amount" @AnotherAsset @Int
instance DA.Internal.Desugar.HasSignatory AnotherAsset where
  signatory this@AnotherAsset {..}
    = DA.Internal.Desugar.toParties (owner)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver AnotherAsset where
  observer this@AnotherAsset {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure AnotherAsset where
  ensure this@AnotherAsset {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement AnotherAsset where
  agreement this@AnotherAsset {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive AnotherAsset where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate AnotherAsset where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch AnotherAsset where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate AnotherAsset where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate AnotherAsset where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep AnotherAsset where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType AnotherAsset where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise AnotherAsset DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice AnotherAsset DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice AnotherAsset DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_AnotherAssetArchive :
  (AnotherAsset
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId AnotherAsset
   -> AnotherAsset
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming AnotherAsset,
   DA.Internal.Desugar.Optional (AnotherAsset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_AnotherAssetArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_AnotherAsset_Token :
  DA.Internal.Desugar.ImplementsT AnotherAsset Token
_implements_AnotherAsset_Token = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface AnotherAsset Token where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface AnotherAsset Token where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_AnotherAsset_Token_getOwner :
  DA.Internal.Desugar.Method AnotherAsset Token "getOwner"
_method_AnotherAsset_Token_getOwner
  = DA.Internal.Desugar.mkMethod
      @AnotherAsset
      @Token
      @"getOwner"
      (\ this@AnotherAsset {..}
         -> let _ = this in let getOwner = owner in getOwner)
_method_AnotherAsset_Token_getAmount :
  DA.Internal.Desugar.Method AnotherAsset Token "getAmount"
_method_AnotherAsset_Token_getAmount
  = DA.Internal.Desugar.mkMethod
      @AnotherAsset
      @Token
      @"getAmount"
      (\ this@AnotherAsset {..}
         -> let _ = this in let getAmount = amount in getAmount)
_method_AnotherAsset_Token_setAmount :
  DA.Internal.Desugar.Method AnotherAsset Token "setAmount"
_method_AnotherAsset_Token_setAmount
  = DA.Internal.Desugar.mkMethod
      @AnotherAsset
      @Token
      @"setAmount"
      (\ this@AnotherAsset {..}
         -> let _ = this in
            let setAmount x = toInterface @Token (this {amount = x})
            in setAmount)
_implements_AnotherAsset_SubToken :
  DA.Internal.Desugar.ImplementsT AnotherAsset SubToken
_implements_AnotherAsset_SubToken = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface AnotherAsset SubToken where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface AnotherAsset SubToken where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data DA.Internal.Desugar.DamlException => GuardException
  = GuardException {m : Text}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "m" GuardException Text where
  getField
    = DA.Internal.Record.getFieldPrim @"m" @GuardException @Text
  setField
    = DA.Internal.Record.setFieldPrim @"m" @GuardException @Text
instance DA.Internal.Desugar.HasMessage GuardException where
  message this@GuardException {..} = m
instance DA.Internal.Desugar.HasThrow GuardException where
  throwPure = GHC.Types.primitive @"EThrow"
instance DA.Internal.Desugar.HasToAnyException GuardException where
  toAnyException = GHC.Types.primitive @"EToAnyException"
instance DA.Internal.Desugar.HasFromAnyException GuardException where
  fromAnyException = GHC.Types.primitive @"EFromAnyException"
main
  = scenario
      do p <- getParty "Alice"
         let assetTpl = Asset {issuer = p, owner = p, amount = 100}
         let getRich = GetRich {byHowMuch = 1000000}
         p `submit`
             do asset <- create assetTpl
                exerciseGuarded (const True) asset getRich
         p `submitMustFail`
             do asset <- create assetTpl
                exerciseGuarded (const False) asset getRich
         p `submitMustFail`
             do asset <- create assetTpl
                exerciseGuarded (\ _ -> error "foo") asset getRich
         p `submitMustFail`
             do asset <- create assetTpl
                exerciseGuarded
                  (\ _ -> throwPure (GuardException "bar")) asset getRich
         p `submitMustFail`
             do asset <- create assetTpl
                DA.Internal.Desugar._tryCatch
                  \ _ -> do exerciseGuarded (\ _ -> error "foo") asset getRich
                  \case
                    (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some GeneralError {})
                      -> DA.Internal.Desugar.Some
                           pure $ toInterfaceContractId @Token asset
                    _ -> DA.Internal.Desugar.None
         p `submitMustFail`
             do asset <- create assetTpl
                DA.Internal.Desugar._tryCatch
                  \ _
                    -> do exerciseGuarded
                            (\ _ -> throwPure (GuardException "bar")) asset getRich
                  \case
                    (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some GuardException {})
                      -> DA.Internal.Desugar.Some
                           pure $ toInterfaceContractId @Token asset
                    _ -> DA.Internal.Desugar.None
         p `submitMustFail`
             do anotherAsset <- coerceContractId @_ @AnotherAsset
                                  <$> create assetTpl
                exerciseGuarded (const True) anotherAsset getRich
         p `submitMustFail`
             do subToken <- coerceContractId @_ @SubToken <$> create assetTpl
                exerciseGuarded (const True) subToken getRich
         pure ()
