-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

{-# LANGUAGE ApplicativeDo #-}

module Validation where

import DA.NonEmpty
import DA.Validation
import DA.List.Total
import DA.Assert

l : [Int]
l = []

main = scenario do
  let v = run do
      head l <?> "fail"
      y <- tail l <?> "fail"
      return (length y)
  v === Left (NonEmpty with hd = "fail"; tl = ["fail"])
  pure ()

semigroup_two_errors_test = scenario do
  let (v1: Validation Text Int) = invalid "fail1"
      v2 = invalid "fail2"
      expected = Errors $ NonEmpty with hd = "fail1", tl = [ "fail2" ]

  expected === (v1 <> v2)

semigroup_both_success_test = scenario do
  let (v1: Validation Text Int) = ok 1
      v2 = ok 2
      expected = Success 2

  expected === (v1 <> v2)

semigroup_first_error_test = scenario do
  let (v1: Validation Text Int) = invalid "fail"
      v2 = ok 1
      expected = Errors $ NonEmpty with hd = "fail", tl = []

  expected === (v1 <> v2)

semigroup_second_error_test = scenario do
  let (v1: Validation Text Int) = ok 1
      v2 = invalid "fail"
      expected = Errors $ NonEmpty with hd = "fail", tl = []

  expected === (v1 <> v2)

-- @ENABLE-SCENARIOS
