module ExceptionSemantics where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Exception
import DA.Assert ( (===) )
data DA.Internal.Desugar.DamlException => E
  = E {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasMessage E where
  message this@E = "E"
instance DA.Internal.Desugar.HasThrow E where
  throwPure = GHC.Types.primitive @"EThrow"
instance DA.Internal.Desugar.HasToAnyException E where
  toAnyException = GHC.Types.primitive @"EToAnyException"
instance DA.Internal.Desugar.HasFromAnyException E where
  fromAnyException = GHC.Types.primitive @"EFromAnyException"
data GHC.Types.DamlTemplate => K
  = K {p : Party, v : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" K Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @K @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @K @Party
instance DA.Internal.Record.HasField "v" K Int where
  getField = DA.Internal.Record.getFieldPrim @"v" @K @Int
  setField = DA.Internal.Record.setFieldPrim @"v" @K @Int
instance DA.Internal.Desugar.HasSignatory K where
  signatory this@K {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver K where
  observer this@K {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure K where
  ensure this@K {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement K where
  agreement this@K {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive K where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate K where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch K where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate K where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate K where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep K where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType K where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise K DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice K DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice K DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_KArchive :
  (K -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId K
   -> K
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming K,
   DA.Internal.Desugar.Optional (K
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_KArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
instance DA.Internal.Desugar.HasExerciseByKey K (Party,
                                                 Int) DA.Internal.Desugar.Archive (()) where
  _exerciseByKey = GHC.Types.primitive @"UExerciseByKey"
instance DA.Internal.Desugar.HasKey K (Party, Int) where
  key this@K {..}
    = (p, v)
    where
        _ = this
instance DA.Internal.Desugar.HasMaintainer K (Party, Int) where
  _maintainer _ key
    = DA.Internal.Desugar.toParties
        ((DA.Internal.Record.getField @"_1" key))
    where
        _ = key
instance DA.Internal.Desugar.HasFetchByKey K (Party, Int) where
  fetchByKey = GHC.Types.primitive @"UFetchByKey"
instance DA.Internal.Desugar.HasLookupByKey K (Party, Int) where
  lookupByKey = GHC.Types.primitive @"ULookupByKey"
instance DA.Internal.Desugar.HasToAnyContractKey K (Party,
                                                    Int) where
  _toAnyContractKey = GHC.Types.primitive @"EToAnyContractKey"
instance DA.Internal.Desugar.HasFromAnyContractKey K (Party,
                                                      Int) where
  _fromAnyContractKey = GHC.Types.primitive @"EFromAnyContractKey"
data GHC.Types.DamlTemplate => T
  = T {p : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" T Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @T @Party
data Throw
  = Throw {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data Catch
  = Catch {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data ThrowArithmeticError
  = ThrowArithmeticError {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data CatchArithmeticError
  = CatchArithmeticError {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data UncatchableTry
  = UncatchableTry {cid : ContractId K}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "cid" UncatchableTry (ContractId K) where
  getField
    = DA.Internal.Record.getFieldPrim
        @"cid" @UncatchableTry @ContractId K
  setField
    = DA.Internal.Record.setFieldPrim
        @"cid" @UncatchableTry @ContractId K
data TransientDuplicate
  = TransientDuplicate {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "i" TransientDuplicate Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @TransientDuplicate @Int
  setField
    = DA.Internal.Record.setFieldPrim @"i" @TransientDuplicate @Int
data NonTransientDuplicate
  = NonTransientDuplicate {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "i" NonTransientDuplicate Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @NonTransientDuplicate @Int
  setField
    = DA.Internal.Record.setFieldPrim @"i" @NonTransientDuplicate @Int
data RollbackKey
  = RollbackKey {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "i" RollbackKey Int where
  getField = DA.Internal.Record.getFieldPrim @"i" @RollbackKey @Int
  setField = DA.Internal.Record.setFieldPrim @"i" @RollbackKey @Int
data RollbackArchive
  = RollbackArchive {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "i" RollbackArchive Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @RollbackArchive @Int
  setField
    = DA.Internal.Record.setFieldPrim @"i" @RollbackArchive @Int
data NonRollbackArchive
  = NonRollbackArchive {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "i" NonRollbackArchive Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @NonRollbackArchive @Int
  setField
    = DA.Internal.Record.setFieldPrim @"i" @NonRollbackArchive @Int
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T where
  agreement this@T {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T Throw (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T Throw (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T Throw (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T Catch (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T Catch (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T Catch (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T ThrowArithmeticError (Int) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T ThrowArithmeticError (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T ThrowArithmeticError (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T CatchArithmeticError (Int) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T CatchArithmeticError (Int) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T CatchArithmeticError (Int) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T UncatchableTry (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T UncatchableTry (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T UncatchableTry (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T TransientDuplicate (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T TransientDuplicate (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T TransientDuplicate (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T NonTransientDuplicate (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T NonTransientDuplicate (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T NonTransientDuplicate (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T RollbackKey (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T RollbackKey (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T RollbackKey (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T RollbackArchive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T RollbackArchive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T RollbackArchive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise T NonRollbackArchive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T NonRollbackArchive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T NonRollbackArchive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_TArchive :
  (T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T,
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_TArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_choice_TThrow :
  (T -> Throw -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> Throw -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> Throw -> [DA.Internal.Desugar.Party]))
_choice_TThrow
  = (\ this@T {..} arg@Throw
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@Throw
       -> let _ = self in let _ = this in let _ = arg in do throw E, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TCatch :
  (T -> Catch -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> Catch -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> Catch -> [DA.Internal.Desugar.Party]))
_choice_TCatch
  = (\ this@T {..} arg@Catch
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@Catch
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _ -> (exercise self Throw)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TThrowArithmeticError :
  (T -> ThrowArithmeticError -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> ThrowArithmeticError -> DA.Internal.Desugar.Update (Int),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> ThrowArithmeticError -> [DA.Internal.Desugar.Party]))
_choice_TThrowArithmeticError
  = (\ this@T {..} arg@ThrowArithmeticError
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@ThrowArithmeticError
       -> let _ = self in let _ = this in let _ = arg in do pure (1 / 0), 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TCatchArithmeticError :
  (T -> CatchArithmeticError -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> CatchArithmeticError -> DA.Internal.Desugar.Update (Int),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> CatchArithmeticError -> [DA.Internal.Desugar.Party]))
_choice_TCatchArithmeticError
  = (\ this@T {..} arg@CatchArithmeticError
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@CatchArithmeticError
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _ -> (exercise self ThrowArithmeticError)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
                     -> DA.Internal.Desugar.Some pure 42
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TUncatchableTry :
  (T -> UncatchableTry -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> UncatchableTry -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> UncatchableTry -> [DA.Internal.Desugar.Party]))
_choice_TUncatchableTry
  = (\ this@T {..} arg@UncatchableTry {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@UncatchableTry {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _ -> (() <$ fetch cid)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TTransientDuplicate :
  (T -> TransientDuplicate -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> TransientDuplicate -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> TransientDuplicate -> [DA.Internal.Desugar.Party]))
_choice_TTransientDuplicate
  = (\ this@T {..} arg@TransientDuplicate {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@TransientDuplicate {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _
                   -> do create (K p i)
                         create (K p i)
                         throw E
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TNonTransientDuplicate :
  (T -> NonTransientDuplicate -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> NonTransientDuplicate -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> NonTransientDuplicate -> [DA.Internal.Desugar.Party]))
_choice_TNonTransientDuplicate
  = (\ this@T {..} arg@NonTransientDuplicate {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@NonTransientDuplicate {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _
                   -> do create (K p i)
                         throw E
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TRollbackKey :
  (T -> RollbackKey -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> RollbackKey -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> RollbackKey -> [DA.Internal.Desugar.Party]))
_choice_TRollbackKey
  = (\ this@T {..} arg@RollbackKey {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@RollbackKey {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _
                   -> do create (K p i)
                         throw E
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some create (K p i) >> pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TRollbackArchive :
  (T -> RollbackArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> RollbackArchive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> RollbackArchive -> [DA.Internal.Desugar.Party]))
_choice_TRollbackArchive
  = (\ this@T {..} arg@RollbackArchive {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@RollbackArchive {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do cid <- create (K p i)
               DA.Internal.Desugar._tryCatch
                 \ _ -> (archive cid >> throw E)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some archive cid
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
_choice_TNonRollbackArchive :
  (T -> NonRollbackArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T -> NonRollbackArchive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.NonConsuming T,
   DA.Internal.Desugar.Optional (T
                                 -> NonRollbackArchive -> [DA.Internal.Desugar.Party]))
_choice_TNonRollbackArchive
  = (\ this@T {..} arg@NonRollbackArchive {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (p), 
     \ self this@T {..} arg@NonRollbackArchive {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do cid <- create (K p i)
               DA.Internal.Desugar._tryCatch
                 \ _ -> (archive cid)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None
               archive cid, 
     DA.Internal.Desugar.NonConsuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => Fetcher
  = Fetcher {sig : Party, obs : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "sig" Fetcher Party where
  getField = DA.Internal.Record.getFieldPrim @"sig" @Fetcher @Party
  setField = DA.Internal.Record.setFieldPrim @"sig" @Fetcher @Party
instance DA.Internal.Record.HasField "obs" Fetcher Party where
  getField = DA.Internal.Record.getFieldPrim @"obs" @Fetcher @Party
  setField = DA.Internal.Record.setFieldPrim @"obs" @Fetcher @Party
data Fetch
  = Fetch {cid : ContractId K}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "cid" Fetch (ContractId K) where
  getField
    = DA.Internal.Record.getFieldPrim @"cid" @Fetch @ContractId K
  setField
    = DA.Internal.Record.setFieldPrim @"cid" @Fetch @ContractId K
data RollbackFetch
  = RollbackFetch {cid : ContractId K}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "cid" RollbackFetch (ContractId K) where
  getField
    = DA.Internal.Record.getFieldPrim
        @"cid" @RollbackFetch @ContractId K
  setField
    = DA.Internal.Record.setFieldPrim
        @"cid" @RollbackFetch @ContractId K
instance DA.Internal.Desugar.HasSignatory Fetcher where
  signatory this@Fetcher {..}
    = DA.Internal.Desugar.toParties (sig)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Fetcher where
  observer this@Fetcher {..}
    = DA.Internal.Desugar.toParties (obs)
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Fetcher where
  ensure this@Fetcher {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Fetcher where
  agreement this@Fetcher {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Fetcher where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Fetcher where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Fetcher where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Fetcher where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Fetcher where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Fetcher where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Fetcher where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Fetcher DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Fetcher DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Fetcher DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise Fetcher Fetch (K) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Fetcher Fetch (K) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Fetcher Fetch (K) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExercise Fetcher RollbackFetch (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Fetcher RollbackFetch (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Fetcher RollbackFetch (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_FetcherArchive :
  (Fetcher
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Fetcher
   -> Fetcher
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Fetcher,
   DA.Internal.Desugar.Optional (Fetcher
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_FetcherArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_choice_FetcherFetch :
  (Fetcher -> Fetch -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Fetcher
   -> Fetcher -> Fetch -> DA.Internal.Desugar.Update (K),
   DA.Internal.Desugar.Consuming Fetcher,
   DA.Internal.Desugar.Optional (Fetcher
                                 -> Fetch -> [DA.Internal.Desugar.Party]))
_choice_FetcherFetch
  = (\ this@Fetcher {..} arg@Fetch {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (obs), 
     \ self this@Fetcher {..} arg@Fetch {..}
       -> let _ = self in let _ = this in let _ = arg in do fetch cid, 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
_choice_FetcherRollbackFetch :
  (Fetcher -> RollbackFetch -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId Fetcher
   -> Fetcher -> RollbackFetch -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming Fetcher,
   DA.Internal.Desugar.Optional (Fetcher
                                 -> RollbackFetch -> [DA.Internal.Desugar.Party]))
_choice_FetcherRollbackFetch
  = (\ this@Fetcher {..} arg@RollbackFetch {..}
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (obs), 
     \ self this@Fetcher {..} arg@RollbackFetch {..}
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do DA.Internal.Desugar._tryCatch
                 \ _ -> (fetch cid >> throw E)
                 \case
                   (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                     -> DA.Internal.Desugar.Some pure ()
                   _ -> DA.Internal.Desugar.None, 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
uncaughtUserException
  = scenario
      do p <- getParty "p"
         _ <- submitMustFail p $ createAndExercise (T p) Throw
         pure ()
unhandledUserException
  = scenario
      do p <- getParty "p"
         _ <- submit p $ createAndExercise (T p) Throw
         pure ()
handledUserException
  = scenario
      do p <- getParty "p"
         _ <- submit p $ createAndExercise (T p) Catch
         pure ()
uncaughtArithmeticError
  = scenario
      do p <- getParty "p"
         _ <- submitMustFail p
                $ createAndExercise (T p) ThrowArithmeticError
         pure ()
unhandledArithmeticError
  = scenario
      do p <- getParty "p"
         _ <- submit p $ createAndExercise (T p) ThrowArithmeticError
         pure ()
handledArithmeticError
  = scenario
      do p <- getParty "p"
         r <- submit p $ createAndExercise (T p) CatchArithmeticError
         r === 42
duplicateKey
  = scenario
      do p <- getParty "p"
         submitMustFail p $ createAndExercise (T p) (TransientDuplicate 0)
         submit p $ create (K p 1)
         submitMustFail p
           $ createAndExercise (T p) (NonTransientDuplicate 1)
         submit p $ createAndExercise (T p) (RollbackKey 2)
         pure ()
rollbackArchive
  = scenario
      do p <- getParty "p"
         submit p $ createAndExercise (T p) (RollbackArchive 0)
         submitMustFail p $ createAndExercise (T p) (NonRollbackArchive 0)
divulgence
  = scenario
      do p1 <- getParty "p1"
         p2 <- getParty "p2"
         cid <- submit p1 $ create (K p1 0)
         divulger <- submit p2 $ create (Fetcher p2 p1)
         fetcher <- submit p1 $ create (Fetcher p1 p2)
         submitMustFail p2 $ exercise fetcher (Fetch cid)
         submit p1 $ exercise divulger (RollbackFetch cid)
         submit p2 $ exercise fetcher (Fetch cid)
         pure ()
tryContext
  = scenario
      do p <- getParty "p"
         kCid <- submit p $ create (K p 0)
         submit p $ archive kCid
         c <- submit p $ create (T p)
         submit p $ exercise c (UncatchableTry kCid)
