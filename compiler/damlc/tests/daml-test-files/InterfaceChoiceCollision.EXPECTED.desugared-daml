module InterfaceChoiceCollision where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
data GHC.Types.DamlInterface => InterfaceA
  = InterfaceA GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep InterfaceA where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch InterfaceA where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface InterfaceA InterfaceA where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface InterfaceA InterfaceA where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod InterfaceA "getOwnerA" (Party)
getOwnerA :
  DA.Internal.Desugar.Implements t InterfaceA => t -> Party
getOwnerA t
  = GHC.Types.primitiveInterface
      @"getOwnerA" (DA.Internal.Desugar._toInterface @_ @InterfaceA t)
instance DA.Internal.Desugar.HasToAnyTemplate InterfaceA where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate InterfaceA where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep InterfaceA where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory InterfaceA where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver InterfaceA where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate InterfaceA where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure InterfaceA where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType InterfaceA where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq InterfaceA where
  (==) = GHC.Types.primitive @"BEEqual"
instance (DA.Internal.Desugar.Implements t InterfaceA) =>
         DA.Internal.Desugar.HasToAnyChoice t MyArchive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance (DA.Internal.Desugar.Implements t InterfaceA) =>
         DA.Internal.Desugar.HasFromAnyChoice t MyArchive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t InterfaceA)) =>
         DA.Internal.Desugar.HasExerciseGuarded t MyArchive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @InterfaceA cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @InterfaceA cid pred)
instance ((DA.Internal.Desugar.HasIsInterfaceType t),
          (DA.Internal.Desugar.HasTemplateTypeRep t),
          (DA.Internal.Desugar.Implements t InterfaceA)) =>
         DA.Internal.Desugar.HasExercise t MyArchive (()) where
  exercise = DA.Internal.Desugar._exerciseDefault
data MyArchive
  = MyArchive {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice_InterfaceAMyArchive :
  (InterfaceA -> MyArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId InterfaceA
   -> InterfaceA -> MyArchive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming InterfaceA,
   DA.Internal.Desugar.Optional (InterfaceA
                                 -> MyArchive -> [DA.Internal.Desugar.Party]))
_choice_InterfaceAMyArchive
  = (\ this arg@MyArchive
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwnerA this), 
     \ self this arg@MyArchive
       -> let _ = self in let _ = this in let _ = arg in do pure (), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlInterface => InterfaceB
  = InterfaceB GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep InterfaceB where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch InterfaceB where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface InterfaceB InterfaceB where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface InterfaceB InterfaceB where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod InterfaceB "getOwnerB" (Party)
getOwnerB :
  DA.Internal.Desugar.Implements t InterfaceB => t -> Party
getOwnerB t
  = GHC.Types.primitiveInterface
      @"getOwnerB" (DA.Internal.Desugar._toInterface @_ @InterfaceB t)
instance DA.Internal.Desugar.HasToAnyTemplate InterfaceB where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate InterfaceB where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep InterfaceB where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory InterfaceB where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver InterfaceB where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate InterfaceB where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasEnsure InterfaceB where
  ensure this = DA.Internal.Desugar.True
instance DA.Internal.Desugar.HasIsInterfaceType InterfaceB where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq InterfaceB where
  (==) = GHC.Types.primitive @"BEEqual"
_choice_InterfaceBMyArchive :
  (InterfaceB -> MyArchive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId InterfaceB
   -> InterfaceB -> MyArchive -> DA.Internal.Desugar.Update (),
   DA.Internal.Desugar.Consuming InterfaceB,
   DA.Internal.Desugar.Optional (InterfaceB
                                 -> MyArchive -> [DA.Internal.Desugar.Party]))
_choice_InterfaceBMyArchive
  = (\ this _ -> [getOwnerB this], \ _ _ _ -> pure (), 
     DA.Internal.Desugar.Consuming, DA.Internal.Desugar.None)
data GHC.Types.DamlTemplate => T
  = T {owner : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner" T Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @T @Party
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (owner)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T where
  agreement this@T {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
_choice_TArchive :
  (T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()),
   DA.Internal.Desugar.Consuming T,
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]))
_choice_TArchive
  = (\ this _ -> DA.Internal.Desugar.signatory this, 
     \ _ _ _ -> pure (), DA.Internal.Desugar.Consuming, 
     DA.Internal.Desugar.None)
_implements_T_InterfaceA :
  DA.Internal.Desugar.ImplementsT T InterfaceA
_implements_T_InterfaceA = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T InterfaceA where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T InterfaceA where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T_InterfaceA_getOwnerA :
  DA.Internal.Desugar.Method T InterfaceA "getOwnerA"
_method_T_InterfaceA_getOwnerA
  = DA.Internal.Desugar.mkMethod
      @T
      @InterfaceA
      @"getOwnerA"
      (\ this@T {..}
         -> let _ = this in let getOwnerA = owner in getOwnerA)
_implements_T_InterfaceB :
  DA.Internal.Desugar.ImplementsT T InterfaceB
_implements_T_InterfaceB = DA.Internal.Desugar.ImplementsT
instance DA.Internal.Desugar.HasToInterface T InterfaceB where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T InterfaceB where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
_method_T_InterfaceB_getOwnerB :
  DA.Internal.Desugar.Method T InterfaceB "getOwnerB"
_method_T_InterfaceB_getOwnerB
  = DA.Internal.Desugar.mkMethod
      @T
      @InterfaceB
      @"getOwnerB"
      (\ this@T {..}
         -> let _ = this in let getOwnerB = owner in getOwnerB)
