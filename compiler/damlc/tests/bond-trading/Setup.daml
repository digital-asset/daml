-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Setup where

import Bond
import Cash
import Helper

import DA.Date

data MarketSetupEntry = MarketSetupEntry
  with
    party : Party
    bondEntries : [BondEntry]
    cashEntries : [CashEntry]
  deriving (Eq, Show)

data BondEntry = BondEntry
  with
    isin : Text
    amount : Decimal
  deriving (Eq, Show)

data CashEntry = CashEntry
  with
    currency : Text
    amount : Decimal
  deriving (Eq, Show)

data MarketSetupResult = MarketSetupResult
  with
    party : Party
    helperCid : HelperSetupJobId
    bondCids : [BondTransferRequestId]
    cashCids : [CashTransferRequestId]

template MarketSetupJob
  with
    issuer : Party
    entries : [MarketSetupEntry]
  where
    signatory issuer

    controller issuer can
      Process : [MarketSetupResult]
        do
          forA entries $ \mse -> do
          helperCid <- create HelperSetupJob with issuer; party = mse.party

          bondCids <- forA mse.bondEntries $ \be ->
              create BondTransferRequest with
                  issuer; newOwner = mse.party; owner = issuer
                  isin = be.isin; amount = be.amount

          cashCids <- forA mse.cashEntries $ \ce ->
              create CashTransferRequest with
                  issuer; receiver = mse.party
                  owner = issuer
                  currency = ce.currency; amount = ce.amount
                  locker = issuer; lockMaturity = None

          return MarketSetupResult with party = mse.party; helperCid; bondCids; cashCids

type HelperSetupJobId = ContractId HelperSetupJob

template HelperSetupJob
  with
    issuer : Party
    party : Party
  where
    signatory issuer

    controller party can
      Process2 : HelperId
        do
          create Helper with party

marketSetupEntryExample party = do
  party1 <- getParty party
  return MarketSetupEntry with
    party = party1
    bondEntries = [ BondEntry with isin = "1234"; amount = 100.0 ]
    cashEntries = [ CashEntry with currency = "USD"; amount = 100.0 ]

marketSetupJobExample = do
  acme <- getParty "Acme Bank"
  entries <- mapA marketSetupEntryExample ["party1", "party2", "party3", "party4", "party5"]
  return MarketSetupJob with
    issuer = acme
    entries


setupExample = scenario do
    passToDate $ date 2018 May 14

    acme <- getParty "Acme Bank"

    job <- marketSetupJobExample
    submit acme do create job

    return ()

setupExampleFull = scenario do
    acme <- getParty "Acme Bank"

    passToDate $ date 2018 May 14

    job <- marketSetupJobExample
    jobCid <- submit acme do create job

    rs <- submit acme do exercise jobCid Process

    forA rs $ \r -> submit r.party do
      exercise r.helperCid Process2
      forA r.bondCids $ (flip exercise) Bond.Accept
      forA r.cashCids $ (flip exercise) Cash.Accept


main = scenario do
    setupExampleFull
