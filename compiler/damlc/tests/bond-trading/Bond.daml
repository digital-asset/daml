-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Bond where

import Daml.Script

import DA.Assert

type BondId = ContractId Bond

template Bond
  with
    issuer : Party
    owner : Party
    isin : Text
    amount : Decimal
  where
    ensure amount > 0.0
    signatory issuer, owner

    choice Transfer : BondTransferRequestId
      with newOwner : Party
      controller owner
      do create BondTransferRequest with newOwner, ..

    choice Split : (BondId, BondId)
      with splitAmount : Decimal
      controller owner
      do f <- create this with amount = splitAmount
         s <- create this with amount = amount - splitAmount
         return (f, s)

    choice Merge : BondId
      with otherCid : BondId
      controller owner
      do otherBond <- fetch otherCid
         this === otherBond with amount
         archive otherCid
         create this with amount = amount + otherBond.amount

type BondTransferRequestId = ContractId BondTransferRequest

template BondTransferRequest
  with
    issuer : Party
    owner : Party
    newOwner : Party
    isin : Text
    amount : Decimal
  where
    signatory issuer, owner
    observer newOwner

    ensure amount > 0.0

    choice Accept : BondId
      controller newOwner
      do create Bond with owner = newOwner, ..

    choice Reject : BondId
      controller newOwner
      do create Bond with ..

    choice Withdraw : BondId
      controller owner
      do create Bond with ..

bondSplitMay : Party -> BondId -> Decimal -> Update (BondId, Optional BondId)
bondSplitMay owner bondCid splitAmount = do
  bond <- fetch bondCid
  bond.owner === owner
  if bond.amount == splitAmount
    then return (bondCid, None)
    else do
      r <- exercise bondCid Split with splitAmount
      return (fst r, Some $ snd r)

main = script do
  acmeBank <- allocateParty "AcmeBank"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  bondAlice1Cid <- acmeBank `submit` createCmd
    BondTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = alice
      isin = "1234"
      amount = 100.0

  bondAlice1Cid <- alice `submit` exerciseCmd bondAlice1Cid Accept

  bondBob1Cid <- acmeBank `submit` createCmd
    BondTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = bob
      isin = "1234"
      amount = 20.0

  bondBob1Cid <- bob `submit` exerciseCmd bondBob1Cid Accept

  (bondAlice1Cid, bondAlice2Cid) <-
    alice `submit` exerciseCmd bondAlice1Cid Split with splitAmount = 30.0

  bondBob2Cid <-
    alice `submit` exerciseCmd bondAlice1Cid Transfer with newOwner = bob

  bondBob2Cid <-
    bob `submit` exerciseCmd bondBob2Cid Accept

  bondBob2Cid <-
    bob `submit` exerciseCmd bondBob1Cid Merge with otherCid = bondBob2Cid

  Some bondAlice2 <- queryContractId alice bondAlice2Cid
  assertMsg "unexpected issuer" $ bondAlice2.issuer == acmeBank
  assertMsg "unexpected owner" $ bondAlice2.owner == alice
  assertMsg "unexpected isin" $ bondAlice2.isin == "1234"
  assertMsg "unexpected amount" $ bondAlice2.amount == 70.0

  Some bondBob2 <- queryContractId bob bondBob2Cid
  assertMsg "unexpected issuer" $ bondBob2.issuer == acmeBank
  assertMsg "unexpected owner" $ bondBob2.owner == bob
  assertMsg "unexpected isin" $ bondBob2.isin == "1234"
  assertMsg "unexpected amount" $ bondBob2.amount == 50.0
