-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module CopyTrigger where

import DA.List hiding (dedup)

import Daml.Trigger

-- ORIGINAL_TEMPLATE_BEGIN
template Original
  with
    owner : Party
    name : Text
    textdata : Text
  where
    signatory owner

    key (owner, name) : (Party, Text)
    maintainer key._1
-- ORIGINAL_TEMPLATE_END

deriving instance Ord Original

-- SUBSCRIBER_TEMPLATE_BEGIN
template Subscriber
  with
    subscriber : Party
    subscribedTo : Party
  where
    signatory subscriber
    observer subscribedTo
    key (subscriber, subscribedTo) : (Party, Party)
    maintainer key._1
-- SUBSCRIBER_TEMPLATE_END

-- COPY_TEMPLATE_BEGIN
template Copy
  with
    original : Original
    subscriber : Party
  where
    signatory (signatory original)
    observer subscriber
-- COPY_TEMPLATE_END

deriving instance Ord Copy

-- TRIGGER_BEGIN
copyTrigger : Trigger ()
copyTrigger = Trigger
  { initialize = pure ()
  , updateState = \_message -> pure ()
  , rule = copyRule
  , registeredTemplates = AllInDar
  , heartbeat = None
  }
-- TRIGGER_END

-- RULE_SIGNATURE_BEGIN
copyRule : Party -> TriggerA () ()
copyRule party = do
-- RULE_SIGNATURE_END
-- ACS_QUERY_BEGIN
  subscribers : [(ContractId Subscriber, Subscriber)] <- query @Subscriber
  originals : [(ContractId Original, Original)] <- query @Original
  copies : [(ContractId Copy, Copy)] <- query @Copy
-- ACS_QUERY_END

-- ACS_FILTER_BEGIN
  let ownedSubscribers = filter (\(_, s) -> s.subscribedTo == party) subscribers
  let ownedOriginals = filter (\(_, o) -> o.owner == party) originals
  let ownedCopies = filter (\(_, c) -> c.original.owner == party) copies
-- ACS_FILTER_END

-- SUBSCRIBING_PARTIES_BEGIN
  let subscribingParties = map (\(_, s) -> s.subscriber) ownedSubscribers
-- SUBSCRIBING_PARTIES_END

-- GROUP_COPIES_BEGIN
  let groupedCopies : [[(ContractId Copy, Copy)]]
      groupedCopies = groupOn snd $ sortOn snd $ ownedCopies
  let copiesToKeep = map head groupedCopies
  let archiveDuplicateCopies = concatMap tail groupedCopies
-- GROUP_COPIES_END

-- ARCHIVE_COPIES_BEGIN
  let archiveMissingOriginal = filter (\(_, c) -> c.original `notElem` map snd ownedOriginals) copiesToKeep
  let archiveMissingSubscriber = filter (\(_, c) -> c.subscriber `notElem` subscribingParties) copiesToKeep
  let archiveCopies = dedup $ map fst $ archiveDuplicateCopies <> archiveMissingOriginal <> archiveMissingSubscriber
-- ARCHIVE_COPIES_END

-- ARCHIVE_COMMAND_BEGIN
  forA archiveCopies $ \cid -> emitCommands [exerciseCmd cid Archive] [toAnyContractId cid]
-- ARCHIVE_COMMAND_END

-- CREATE_COPIES_BEGIN
  let neededCopies = [Copy m o | (_, m) <- ownedOriginals, o <- subscribingParties]
  let createCopies = filter (\c -> c `notElem` map snd copiesToKeep) neededCopies
  mapA dedupCreate createCopies
-- CREATE_COPIES_END
  pure ()

-- | The dedup function from DA.List requires an Ord constraint which we do not have for `ContractId k`. Therefore,
-- we resort to the n^2 version for now. Once we have Maps we can use those to implement a more efficient dedup.
dedup : Eq k => [k] -> [k]
dedup [] = []
dedup (x :: xs) = x :: dedup (filter (/= x) xs)
