.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
.. SPDX-License-Identifier: Apache-2.0

Custom bindings
###############

This page gets you started with creating custom bindings for the Digital Asset distributed ledger.

Introduction
============

Digital Asset currently provides bindings for the following programming languages:

- :doc:`Java </app-dev/bindings-java/index>`

- :doc:`Scala </app-dev/bindings-scala/index>`

- :doc:`Node.js JavaScript </app-dev/bindings-js>`

However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.

What exactly is "bindings"? X language bindings consists of two main components:

- Ledger API
    Client "stubs" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`

- Codegen
    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.

Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.

Building Create Command
=======================

Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:

.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml
  :language: daml
  :lines: 9-15

Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:

.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala
   :start-after: // <doc-ref:iou-no-codegen-create-command>
   :end-before: // </doc-ref:iou-no-codegen-create-command>

If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands.

When you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look:

.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala
   :start-after: // <doc-ref:iou-contract-instance>
   :end-before: // </doc-ref:iou-contract-instance>

Building Exercise Command
=========================

To build :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` for `Iou_Transfer`:

.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml
  :language: daml
  :lines: 23, 52-55

manually in Scala:

.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala
   :start-after: // <doc-ref:iou-no-codegen-exercise-command>
   :end-before: // </doc-ref:iou-no-codegen-exercise-command>

versus creating the same command using a value class generated by :doc:`Scala codegen </app-dev/bindings-scala/index>`:

.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala
   :start-after: // <doc-ref:iou-exercise-transfer-cmd>
   :end-before: // </doc-ref:iou-exercise-transfer-cmd>

Summary
=======

If you are creating custom bindings for the Digital Asset distributed ledger, you will need to:

- generate **Ledger API** from the gRPC definitions

- decide if you write a codegen to generate contract classes or you manually build commands for all contracts defined in your DAML model.

The above examples should help you get started. Feel free to contact us on the DAML community `Slack <https://damldriven.slack.com/sso/saml/start>`_ or open a `GitHub issue <https://github.com/digital-asset/daml/issues>`_.

Links
=====

- A Scala example that demonstrates how to manually construct ledger commands: https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/iou-no-codegen

- A Scala codegen example: https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala
