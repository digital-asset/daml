-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE PartialTypeSignatures #-}


module MustChoose where

import DA.Time
import DA.Date

before : (Time) -> (Text) -> Update ()
before time message =
  do
    t <- getTime
    assertMsg message (t < time)

after : (Time) -> (Text) -> Update ()
after time message =
  do
    t <- getTime
    assertMsg message (t > time)

between : (Time) -> (Time) -> (Text) -> Update ()
between t1 t2 message =
  do
    now <- getTime
    assertMsg message (t1 <= now && now <= t2)

template Invoice
  with
    payer: Party
    payee: Party
    service: Text
    timeLimit: Time
    amount: Decimal
  where
    signatory payer, payee

    agreement
      show payer <> " will pay " <> show payee <> " " <>
      show amount <> "$ for " <> service <>
      " by " <> show timeLimit

    controller payer can
      Pay : ()
        do
          before timeLimit ("Invoice has to be paid before " <> (show timeLimit))
          return () -- Cash paid here

    controller payee can
      ImposePenalty : ContractId Invoice
        do
          after timeLimit ("Penalty can only be imposed after " <> (show timeLimit))
          now <- getTime
          create Invoice with payer; payee; service; timeLimit = (addRelTime now (days 10)); amount = (amount * 1.03)

template RequestPayment
  with
    payer: Party
    payee: Party
  where
    signatory payee

    controller payer can
      CreateInvoice : ContractId Invoice
        with
          service: Text
          amount: Decimal
          timeLimit: Time
        do
          create Invoice with payer; payee; service; timeLimit; amount

testPaid : Scenario ()  -- test
testPaid =
  do
    payer <- getParty "John Customer"
    payee <- getParty "Acme Corp"
    let timeWindow = days 30
    now <- getTime
    let timeLimit = addRelTime now timeWindow
    requestId <- payee `submit` do
      create RequestPayment with payer; payee
    invoiceId <- payer `submit` do
      exercise requestId CreateInvoice with
        timeLimit
        service = "A job well done"
        amount=130.0
    pass (days 10)
    payer `submit` do exercise invoiceId Pay

testUnpaid : Scenario ()  -- test
testUnpaid =
  do
    payer <- getParty "John Customer"
    payee <- getParty "Acme Corp"
    let timeWindow = days 30
    now <- getTime
    let timeLimit = addRelTime now timeWindow
    requestId <- payee `submit` do
        create RequestPayment with payer; payee
    invoiceId <- payer `submit` do
        exercise requestId CreateInvoice with timeLimit; service = "A job well done"; amount=130.0
    pass (days 40)
    penaltyInvCid <- payee `submit` do exercise invoiceId ImposePenalty

    payee `submit` do
      result <- fetch penaltyInvCid
      assert (result == (Invoice with
        payer = payer
        payee = payee
        service = "A job well done"
        timeLimit = datetime 1970 Feb 20 0 0 0 -- 40 days past + 10 days grace
        amount = (130.0 * 1.03)
       ))
