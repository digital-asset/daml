-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- The RestrictedPayout example.

module RestrictedPayout where


-- One party agrees to pay another five pounds.
template Payout
  with
    receiver : Party
    giver : Party
    qty : Int
  where
    signatory receiver, giver

    agreement
      show giver <> " promise to pay the " <>
      show receiver <> " on demand the sum of" <>
      show qty <> " pounds."

template RestrictedPayout
  with
    receiver : Party
    giver : Party
    blacklisted : Party
    qty : Int
  where
    signatory giver
    observer receiver
    choice Call : ContractId Payout
      controller receiver
      do create Payout with receiver; giver; qty

-- BEGIN_CHOICE_WITH_ASSERT
    choice Transfer : ContractId RestrictedPayout
      with newReceiver : Party
      controller receiver
      do
        assert (newReceiver /= blacklisted)
        create RestrictedPayout with receiver = newReceiver; giver; blacklisted; qty
-- END_CHOICE_WITH_ASSERT

exampleFailureBlacklisted = scenario do
    boe <- getParty "Bank of England"
    alice <- getParty "Alice"
    charlie <- getParty "Charlie"
    ci <- submit boe do
      create RestrictedPayout with
        receiver = alice; giver = boe
        blacklisted = charlie; qty = 5

    submitMustFail alice do
      exercise ci Transfer with newReceiver = charlie
