-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- The CallablePayout example.

module CallablePayout_Call where


-- One party agrees to pay another five pounds.
template Payout
  with
    receiver : Party
    giver : Party
  where
    signatory receiver, giver

    agreement
      show giver <> " promise to pay the " <>
      show receiver <> " on demand the sum of five pounds."

template CallablePayout
  with
    receiver : Party
    giver : Party
  where
    signatory giver

    controller receiver can
      Call : ContractId Payout
        do
          create Payout with receiver; giver

example =
  scenario do
    -- Bank of England creates a contract giving Alice the option
    -- to be paid.
    bankOfEngland <- getParty "Bank of England"
    alice <- getParty "Alice"
    payAlice <- submit bankOfEngland do
      create CallablePayout with
        receiver = alice; giver = bankOfEngland

    -- Alice exercises the contract, and receives payment.
    submit alice do
      exercise payAlice Call

{-

-- .. adding to the Payout module above ...

exampleFailure = scenario do
    submit alice do
      create Payout with
        receiver = 'Alice'; giver = 'Bank of England'
-}
exampleDoubleCall =
  scenario do
    bankOfEngland <- getParty "Bank of England"
    alice <- getParty "Alice"
    -- Bank of England creates a contract giving Alice the option
    -- to be paid.
    payAlice <- submit bankOfEngland do
      create CallablePayout with
        receiver = alice; giver = bankOfEngland

    -- Alice exercises the contract, and receives payment.
    submit alice do
      exercise payAlice Call

    -- If Alice tries to exercise the contract again, it must
    -- fail.
    submitMustFail alice do
      exercise payAlice Call

{-

-- .. adding to the Payout module above ...

test exampleFailure2 =
  scenario
    'Alice' commits
      create Payout with
        receiver = 'Bank of England'; giver = 'Alice'
-}
