-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Test.Intro.Asset.V2 where

import Daml.Script

import Intro.Asset.V2
import Intro.Asset.V2.Role

import Test.Intro.Asset.V2.Role

test_asset = do
  ((alice, bob, bank), assetCid) <- test_issuance

  tp <- submit alice do
    exerciseCmd assetCid ProposeTransfer with
      newOwner = [bob]

  assetCid <- submit bob do
    exerciseByKeyCmd @AssetHolder (AssetHolder bank [bob]) Accept_Transfer with
      transferProposalCid = tp

  Some asset <- queryContractId bank assetCid
  assert (asset == Asset with
      issuer = bank
      owner = [bob]
      symbol = "USD"
      quantity = 100.0
      observers = []
        )

test_split = do
  (setupResult@(alice, bob, bank), assetCid) <- test_issuance

  submitMustFail alice do
    exerciseCmd assetCid Split with
      splitQuantities = [-30.0]

  submitMustFail alice do
    exerciseCmd assetCid Split with
      splitQuantities = [0.0]

  submitMustFail alice do
    exerciseCmd assetCid Split with
      splitQuantities = [101.0]

  splitResult@[remainder, splitAsset] <- submit alice do
    exerciseCmd assetCid Split with
      splitQuantities = [30.0]

  Some splitAsset <- queryContractId bank splitAsset
  Some remainder <- queryContractId bank remainder

  assert (splitAsset.quantity == 30.0)
  assert (remainder.quantity == 70.0)

  return (setupResult, splitResult)

test_merge = do
  ((alice, bob, bank), [remainder, splitAsset]) <- test_split

  submitMustFail alice do
    exerciseCmd splitAsset Merge with
      otherCids = [splitAsset]

  assetCid <- submit alice do
    exerciseCmd splitAsset Merge with
      otherCids = [remainder]

  Some asset <- queryContractId bank assetCid
  assert (asset.quantity == 100.0)
