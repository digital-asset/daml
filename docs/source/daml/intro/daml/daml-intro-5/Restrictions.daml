-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Restrictions where

import DA.Date
import DA.Text as T
import DA.Time
import DA.Tuple


data Cash = Cash with
  currency : Text
  amount : Decimal
    deriving (Eq, Show)

-- RESTRICTED_IOU_BEGIN
template SimpleIou
  with
    issuer : Party
    owner : Party
    cash : Cash
  where
    signatory issuer

    ensure cash.amount > 0.0
        && T.length cash.currency == 3
        && T.isUpper cash.currency
-- RESTRICTED_IOU_END

-- TRANSFER_CHOICE_BEGIN
    controller owner can
      Transfer
        : ContractId SimpleIou
        with
          newOwner : Party
        do
          assertMsg "newOwner cannot be equal to owner." (owner /= newOwner)
          create this with owner = newOwner
-- TRANSFER_CHOICE_END

-- REDEEM_CHOICE_BEGIN
    controller owner can
      Redeem
        : ()
        do
          now <- getTime
          let
            today = toDateUTC now
            dow = dayOfWeek today
            timeofday = now `subTime` time today 0 0 0
            hrs = convertRelTimeToMicroseconds timeofday / 3600000000
          assertMsg
            ("Cannot redeem outside business hours. Current time: " <> show timeofday)
            (hrs >= 8 && hrs <= 18)
          case dow of
            Saturday -> abort "Cannot redeem on a Saturday."
            Sunday -> abort "Cannot redeem on a Sunday."
            _ -> return ()
-- REDEEM_CHOICE_END

-- RESTRICTIONS_TEST_BEGIN
test_restrictions = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  dora <- getParty "Dora"

  -- Dora can't issue negative Ious
  submitMustFail dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = -100.0
        currency = "USD"

  -- Or even zero Ious
  submitMustFail dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = 0.0
        currency = "USD"

  -- Nor positive Ious with invalid currencies
  submitMustFail dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = 100.0
        currency = "Swiss Francs"

  -- But positive Ious still work, of course
  iou <- submit dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = 100.0
        currency = "USD"
-- RESTRICTIONS_TEST_END

-- TRANSFER_TEST_BEGIN
  -- Alice can't transfer to herself
  submitMustFail alice do
    exercise iou Transfer with
      newOwner = alice

  -- but can transfer to bob
  iou2 <- submit alice do
    exercise iou Transfer with
      newOwner = bob
-- TRANSFER_TEST_END


-- REDEEM_TEST_BEGIN
  -- June 1st 2019 is a Saturday
  passToDate (date 2019 Jun 1)
  -- Bob cannot redeem on a Saturday
  submitMustFail bob do
    exercise iou2 Redeem

  -- Not even at mid-day
  pass (hours 12)
  -- Bob cannot redeem on a Saturday
  submitMustFail bob do
    exercise iou2 Redeem

  -- Bob also cannot redeem at 6am on a Monday
  pass (hours 42)
  submitMustFail bob do
    exercise iou2 Redeem

  -- Bob can redeem 8am on Monday.
  pass (hours 2)
  submit bob do
    exercise iou2 Redeem
-- REDEEM_TEST_END

  -- CAUSALITY_TEST_BEGIN
  iou3 <- submit dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = 100.0
        currency = "USD"

  pass (days (-3))
  submitMustFail alice do
    exercise iou3 Redeem
  -- CAUSALITY_TEST_END

-- DO_DEMO_BEGIN
sub_scenario1 : Scenario (ContractId SimpleIou) = scenario do
  alice <- getParty "Alice"
  dora <- getParty "Dora"

  submit dora do
    create SimpleIou with
      issuer = dora
      owner = alice
      cash = Cash with
        amount = 100.0
        currency = "USD"

sub_scenario2 : Scenario Int = scenario do
  getParty "Nobody"
  pass (days 1)
  pass (days (-1))
  return 42

sub_scenario3 : Scenario (ContractId SimpleIou) = scenario do
  bob <- getParty "Bob"
  dora <- getParty "Dora"

  submit dora do
    create SimpleIou with
      issuer = dora
      owner = bob
      cash = Cash with
        amount = 100.0
        currency = "USD"

main_scenario : Scenario () = scenario do
  dora <- getParty "Dora"

  iou1 <- sub_scenario1
  sub_scenario2
  iou2 <- sub_scenario3

  submit dora do
    archive iou1
    archive iou2
-- DO_DEMO_END

-- COIN_BEGIN
data Face = Heads | Tails
  deriving (Eq, Show, Enum)

data CoinGame a = CoinGame with
  play : Coin -> (Coin, a)

flipCoin : CoinGame Face
getCoin : Scenario Coin
-- COIN_END

-- COIN_SCENARIO_BEGIN
coin_test = scenario do
  -- the coin is pseudo-random on LET so change the parameter to change the game
  passToDate (date 2019 Jun 1)
  pass (seconds 2)
  coin <- getCoin
  let
    game = do
      f1r <- flipCoin
      f2r <- flipCoin
      f3r <- flipCoin

      if all (== Heads) [f1r, f2r, f3r]
        then return "Win"
        else return "Loss"
    (newCoin, result) = game.play coin

  assert (result == "Win")
-- COIN_SCENARIO_END

-- What follows is the implementation of the CoinGame Action.
-- Don't worry if this doesn't make sense yet.
type Coin = Int

flipCoin = CoinGame with
  play = (\c ->
    let
      s = next c
    in
      (s, toEnum @Face (s % 2))
    )

next : Int -> Int
next s = (48271 * s) % 2147483647

getCoin = scenario do
  t <- getTime
  let clk = convertRelTimeToMicroseconds $ subTime t (datetime 1970 Jan 1 0 0 0)
  let s = (67826523 + clk) % 2147483647
  return $ next s

instance Functor CoinGame where
  fmap f gs = CoinGame with
    play = (\c -> second f (gs.play c))

instance Applicative CoinGame where
  pure x = CoinGame with
    play = (\c -> (c, x))

  f <*> x = CoinGame with
    play = (\c ->
        let
          (nc1, rf) = f.play c
          (nc2, rx) = x.play nc1
        in (nc2, rf rx)
      )

instance Action CoinGame where
  x >>= f = CoinGame with
    play = (\c ->
        let
          (nc1, rx) = x.play c
          ng = f rx
        in ng.play nc1
      )

-- NON_PERFORMED_ABORT_BEGIN
nonPerformedAbort = scenario do
  let abortScenario = False
  let failingAction : Scenario () = abort "Foo"
  let successfulAction : Scenario () = return ()
  if abortScenario then failingAction else successfulAction
-- NON_PERFORMED_ABORT_END

-- OPTIONAL_POW_BEGIN
optPow : Int -> Int -> Optional Int
optPow x y 
 | y == 0 = Some 1
 | y > 0 = let Some z = optPow x (y - 1)
           in Some (y * z)
 | otherwise = None
-- OPTIONAL_POW_END

-- ERROR_POW_BEGIN
errPow : Int -> Int -> Int
errPow x y 
 | y == 0 = 1
 | y > 0 = y * errPow x (y - 1)
 | otherwise = error "Negative exponent not supported"
-- ERROR_POW_END

{-
-- NON_PERFORMED_ERROR_BEGIN
nonPerformedError = scenario do
  let causeError = False
  let failingComputation = errPow 1 (-1)
  let successfulComputation = errPow 1 1
  return if causeError then failingComputation else successfulComputation
-- NON_PERFORMED_ERROR_END
-}
