-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Intro.Asset where

data SplitResult = SplitResult with
  splitAsset : ContractId Asset
  remainder : ContractId Asset
    deriving (Eq, Show)

-- ASSET_BEGIN
template Asset
  with
    issuer : Party
    owner : Party
    symbol : Text
    quantity : Decimal
    observers : [Party]
  where
    signatory issuer, owner
    ensure quantity > 0.0

    observer observers
-- ASSET_END

    controller owner can

-- MERGE_SPLIT_BEGIN
      Split
        : SplitResult
        with
          splitQuantity : Decimal
        do
          splitAsset <- create this with
            quantity = splitQuantity
          remainder <- create this with
            quantity = quantity - splitQuantity
          return SplitResult with
            splitAsset
            remainder

      Merge
        : ContractId Asset
        with
          otherCid : ContractId Asset
        do
          other <- fetch otherCid
          assertMsg
            "Merge failed: issuer does not match"
            (issuer == other.issuer)
          assertMsg
            "Merge failed: owner does not match"
            (owner == other.owner)
          assertMsg
            "Merge failed: symbol does not match"
            (symbol == other.symbol)
          archive otherCid
          create this with
            quantity = quantity + other.quantity
-- MERGE_SPLIT_END

      ProposeTransfer
        : ContractId TransferProposal
        with
          newOwner : Party
        do
          create TransferProposal with
            asset = this
            newOwner

      SetObservers
        : ContractId Asset
        with
          newObservers : [Party]
        do
          create this with
            observers = newObservers

template TransferProposal
  with
    asset : Asset
    newOwner : Party
  where
    signatory (signatory asset)

    controller asset.issuer, newOwner can
      TransferProposal_Accept
        : ContractId Asset
        do
          create asset with
            owner = newOwner

    controller asset.owner can
      TransferProposal_Cancel
        : ContractId Asset
        do
          create asset with
            observers = []

    controller newOwner can
      TransferProposal_Reject
        : ContractId Asset
        do
          create asset

template TransferApproval
  with
    asset : Asset
    newOwner : Party
  where
    signatory asset.issuer

    controller asset.owner can
      TransferApproval_Cancel
        : ()
        do
          return ()

    controller newOwner can
      TransferApproval_Reject
        : ()
        do
          return ()

    controller [asset.owner, newOwner] can
      TransferApproval_Transfer
        : ContractId Asset
        with
          assetCid : ContractId Asset
        do
          sentAsset <- fetch assetCid
          assertMsg
            "Transfer failed: Assets do not match."
            (asset == sentAsset with
              observers = asset.observers
            )
          archive assetCid
          create asset with
            owner = newOwner
            observers = []
