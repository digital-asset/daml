-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Test.Intro.Asset where

import Intro.Asset
import Intro.Asset.Role

import Test.Intro.Asset.Role

test_asset = scenario do
  ((alice, bob, bank, aha, ahb), assetCid) <- test_issuance

  tp <- submit alice do
    exercise assetCid ProposeTransfer with
      newOwner = bob

  assetCid <- submit bob do
    exercise ahb Accept_Transfer with
      transferProposalCid = tp

  submit bank do
    asset <- fetch assetCid
    assert (asset == Asset with
      issuer = bank
      owner = bob
      symbol = "USD"
      quantity = 100.0
      observers = []
        )

test_split = scenario do
  (setupResult@(alice, bob, bank, _, _), assetCid) <- test_issuance

  submitMustFail alice do
    exercise assetCid Split with
      splitQuantity = -30.0

  submitMustFail alice do
    exercise assetCid Split with
      splitQuantity = 0.0

  submitMustFail alice do
    exercise assetCid Split with
      splitQuantity = 101.0

  splitResult <- submit alice do
    exercise assetCid Split with
      splitQuantity = 30.0

  submit bank do
    splitAsset <- fetch splitResult.splitAsset
    remainder <- fetch splitResult.remainder

    assert (splitAsset.quantity == 30.0)
    assert (remainder.quantity == 70.0)

  return (setupResult, splitResult)

test_merge = scenario do
  ((alice, bob, bank, _, _), splitResult) <- test_split

  submitMustFail alice do
    exercise splitResult.splitAsset Merge with
      otherCid = splitResult.splitAsset

  assetCid <- submit alice do
    exercise splitResult.splitAsset Merge with
      otherCid = splitResult.remainder

  submit bank do
    asset <- fetch assetCid
    assert (asset.quantity == 100.0)
