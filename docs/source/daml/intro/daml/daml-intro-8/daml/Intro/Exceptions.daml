-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Intro.Exceptions where

import DA.Action
import Daml.Script
import DA.Exception

-- IOU_BEGIN
template Iou
  with
    issuer : Party
    owner : Party
    amount : Decimal
  where
    signatory issuer, owner
-- IOU_END

-- ACCOUNT_BEGIN
template Account with
    issuer : Party
    owner : Party
    amount : Decimal
  where
    signatory issuer, owner
    ensure amount > 0.0
    key (issuer, owner) : (Party, Party)
    maintainer key._2

    choice Transfer : () with
        newOwner : Party
        transferredAmount : Decimal
      controller owner, newOwner
      do create this with amount = amount - transferredAmount
         create Iou with issuer = issuer, owner = newOwner, amount = transferredAmount
         pure ()
-- ACCOUNT_END

-- TRANSFER_LIMITED_BEGIN
    choice TransferLimited : () with
        newOwner : Party
        transferredAmount : Decimal
      controller owner, newOwner
      do let limit = 50.0
         when (transferredAmount > limit) $
           throw TransferLimitExceeded with
             limit = limit
             attempted = transferredAmount
         create this with amount = amount - transferredAmount
         create Iou with issuer = issuer, owner = newOwner, amount = transferredAmount
         pure ()
-- TRANSFER_LIMITED_END

-- SHOP_BEGIN
template Shop
  with
    owner : Party
    bank : Party
    observers : [Party]
  where
    signatory owner
    observer observers
    let price: Decimal = 100.0
-- SHOP_END

-- ORDER_BEGIN
    nonconsuming choice OrderItem : ContractId Order
      with
        shopper : Party
      controller shopper
      do exerciseByKey @Account (bank, shopper) (Transfer owner price)
         create Order
           with
             shopOwner = owner
             shopper = shopper
-- ORDER_END

-- ORDER_TRUSTED_BEGIN
    nonconsuming choice OrderItemTrusted : ContractId Order
      with
        shopper : Party
      controller shopper
      do cid <- create Order
           with
             shopOwner = owner
             shopper = shopper
         try do
           exerciseByKey @Account (bank, shopper) (Transfer owner price)
         catch
           PreconditionFailed _ -> do
             create Iou with
               issuer = shopper
               owner = owner
               amount = price
             pure ()
         pure cid
-- ORDER_TRUSTED_END

-- ORDER_TRUSTED_LIMITED_BEGIN
    nonconsuming choice OrderItemTrustedLimited : ContractId Order
      with
        shopper : Party
      controller shopper
      do try do
           exerciseByKey @Account (bank, shopper) (Transfer owner price)
           pure ()
         catch
           PreconditionFailed _ -> do
             create Iou with
               issuer = shopper
               owner = owner
               amount = price
             pure ()
           TransferLimitExceeded _ _ -> do
             create Iou with
               issuer = shopper
               owner = owner
               amount = price
             pure ()
         create Order
           with
             shopOwner = owner
             shopper = shopper
-- ORDER_TRUSTED_LIMITED_END

template Order
  with
    shopOwner : Party
    shopper : Party
  where
    signatory shopOwner, shopper

test = script do
  bank <- allocateParty "Bank"
  alice <- allocateParty "Alice"
  shopOwner <- allocateParty "ShopOwner"

  submitMulti [bank, alice] [] $ createCmd Account with
    issuer = bank
    owner = alice
    amount = 150.0

  shop <- submit shopOwner $ createCmd Shop with
    owner = shopOwner
    bank = bank
    observers = [alice]

  submit alice $ exerciseCmd shop (OrderItemTrusted alice)
  submit alice $ exerciseCmd shop (OrderItemTrusted alice)

  pure ()

-- CUSTOM_EXCEPTION_BEGIN
exception TransferLimitExceeded
  with
    limit : Decimal
    attempted : Decimal
  where
    message "Transfer of " <> show attempted <> " exceeds limit of " <> show limit
-- CUSTOM_EXCEPTION_END
