{-# LANGUAGE ApplicativeDo #-}
module Test.Intro.Asset.Upgrade.V2 where

import Daml.Script

import DA.Action
import DA.Foldable (forA_)

import qualified Intro.Asset as AssetV1
import qualified Intro.Asset.Role as RoleV1

import qualified Intro.Asset.V2.Role as RoleV2

import Intro.Asset.Upgrade.V2


import Test.Intro.Asset.Upgrade.V1Setup

-- Define this type to be able pass in JSON.
-- RELATIONSHIP_BEGIN
data Relationship = Relationship with
  issuer : Party
  owner : Party
    deriving (Eq, Show)
-- RELATIONSHIP_END

initiateUpgrade : Relationship -> Script ()
initiateUpgrade Relationship{..} = do
  -- Upgrade role contracts as needed
  -- If there are relevant RoleV1.AccountHolder contracts, initiate Upgrade.
  -- FORA_EXAMPLE_BEGIN
  v1Roles <- queryFilter @RoleV1.AssetHolder issuer (\c -> c.issuer == issuer && c.owner == owner) 
  forA_ v1Roles (\role -> submit issuer do createCmd UpgradeInvite with ..)
  -- FORA_EXAMPLE_END
  -- If there is a relevant RoleV1.AssetHolderInvite contract, convert to V2
  v1RoleInvites <- queryFilter @RoleV1.AssetHolderInvite issuer (\c -> c.issuer == issuer && c.owner == owner)
  forA_ v1RoleInvites (\(cid, _) -> submit issuer do
      createCmd RoleV2.AssetHolderInvite with
        issuer
        invitedOwners = [owner]
        signedOwners = []
      archiveCmd cid
      return ()
    )

-- `acceptUpgrade` accepts upgrade invites as an owner.
acceptUpgrade : Relationship -> Script ()
acceptUpgrade r = do
  -- Get hold of Role contracts
  v1Roles <- queryFilter @RoleV1.AssetHolder r.owner
    (\c -> c.issuer == r.issuer && c.owner == r.owner) 
  -- Get hold of Upgrade Invites 
  invites <- queryFilter @UpgradeInvite r.owner
    (\c -> c.issuer == r.issuer && c.owner == r.owner) 
  
  -- Match roles and upgrade invites and accept upgrades
  let inviteRolePairs = zip invites v1Roles
  forA_ inviteRolePairs (\((inviteCid, _), (holderCid, _)) -> submit r.owner do
      exerciseCmd inviteCid Accept_Upgrade with holderCid)

-- `performUpgrade` performs the upgrade as an owner.
performUpgrade : Relationship -> Script ()
performUpgrade r = do
  -- Get hold of an upgrade contract
  upgrades <- queryFilter @Upgrade r.owner
    (\c -> c.issuer == r.issuer && c.owner == r.owner) 

  case upgrades of
    [] -> abort ("Can't perform upgrade for " <> show r <> " without an Upgrade contract.")
    (u, _)::_ -> do

      -- Upgrade all assets
      v1Assets <- queryFilter @AssetV1.Asset r.owner
        (\asset -> asset.owner == r.owner && asset.issuer == r.issuer)
      let v1AssetCids = map fst v1Assets
      submit r.owner do
        exerciseCmd u UpgradeContracts with assetCids = v1AssetCids

      -- Cancel all transfer approvals
      v1TransferApprovals <- queryFilter @AssetV1.TransferApproval r.owner
        (\ta -> ta.asset.owner == r.owner && ta.asset.issuer == r.issuer)
      forA_ v1TransferApprovals (\(taCid, _) -> submit r.owner do
        exerciseCmd taCid AssetV1.TransferApproval_Cancel
        )

      -- Cancel all transfer proposals
      v1TransferProposals <- queryFilter @AssetV1.TransferProposal r.owner 
        (\tp -> tp.asset.owner == r.owner && tp.asset.issuer == r.issuer)
      forA_ v1TransferProposals (\(tpCid, _) -> submit r.owner do
        exerciseCmd tpCid AssetV1.TransferProposal_Cancel
        )

-- `checkUpgradeComplete` checks that the given party does not know of any
-- V1 contracts remaining between `issuer` and `owner`.
checkUpgradeComplete : Party -> Relationship -> Script Bool
checkUpgradeComplete p r = do
  v1Assets <- queryFilter @AssetV1.Asset p
    (\asset -> asset.owner == r.owner && asset.issuer == r.issuer)
  v1TransferApprovals <- queryFilter @AssetV1.TransferApproval p 
    (\ta -> ta.asset.owner == r.owner && ta.asset.issuer == r.issuer)
  v1TransferProposals <- queryFilter @AssetV1.TransferProposal p 
    (\tp -> tp.asset.owner == r.owner && tp.asset.issuer == r.issuer)
  v1Roles <- queryFilter @RoleV1.AssetHolder p 
    (\ah -> ah.owner == r.owner && ah.issuer == r.issuer)
  v1RoleInvites <- queryFilter @RoleV1.AssetHolderInvite p 
    (\ahi -> ahi.owner == r.owner && ahi.issuer == r.issuer)
  
  return 
    (  null v1Assets
    && null v1TransferApprovals
    && null v1TransferProposals
    && null v1Roles
    && null v1RoleInvites
    )

ownerCheckUpgradeComplete r = checkUpgradeComplete r.owner r 

confirmCompletion : Relationship -> Script ()
confirmCompletion r = do
  -- Create a confirmation for each Upgrade
  upgrades <- queryFilter @Upgrade r.owner
    (\c -> c.issuer == r.issuer && c.owner == r.owner) 
  forA_ upgrades (\_ -> submit r.owner do 
    createCmd UpgradeConfirmation with
      owner = r.owner
      issuer = r.issuer
    )

issuerCheckUpgradeComplete r = checkUpgradeComplete r.issuer r

completeUpgrade : Relationship -> Script ()
completeUpgrade r = do
    -- Get upgrades and confirmations
    upgrades <- queryFilter @Upgrade r.issuer
      (\c -> c.issuer == r.issuer && c.owner == r.owner) 
    confirmations <- queryFilter @UpgradeConfirmation r.issuer
      (\c -> c.issuer == r.issuer && c.owner == r.owner)
    forA_ (zip upgrades confirmations) (\((upgradeCid, _), (confirmationCid, _)) -> 
      submit r.issuer do
        exerciseCmd upgradeCid CompleteUpgrade with confirmationCid)

-- runCompleteUpgrade runs though the entire upgrade process for relationship
-- RUN_COMPLETE_UPGRADE_BEGIN
runCompleteUpgrade : Relationship -> Script ()
runCompleteUpgrade r = do
  initiateUpgrade r
  acceptUpgrade r
  performUpgrade r
  ownerComplete <- ownerCheckUpgradeComplete r
  when ownerComplete (confirmCompletion r)
  issuerComplete <- issuerCheckUpgradeComplete r
  when issuerComplete (completeUpgrade r)
-- RUN_COMPLETE_UPGRADE_END

testUpgrade = do
  -- Use the V1 Trade Setup Script to set up parties and issue assets:
-- TUPLE_USE_BEGIN
  (alice, bob, usdbank, eurbank, usdha, usdhb, eurha, eurhb, usdCid, eurCid) <- v1Setup
-- TUPLE_USE_END

  let
    relationships = 
      [ Relationship usdbank alice
      , Relationship usdbank bob
      , Relationship eurbank alice
      , Relationship eurbank bob
      ]

  forA_ relationships runCompleteUpgrade