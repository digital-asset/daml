-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


{-# LANGUAGE PartialTypeSignatures #-}

daml 1.2
module MultiplePartyAgreement where

import Utilities
import DA.List

-- start snippet: agreement template
template Agreement
  with
    signatories: [Party]
  where
    signatory signatories
-- end snippet: agreement template

-- start snippet: first half pending template
template Pending
  with
    agree: Agreement
    signed: [Party]
    toSign: [Party]
  where
    signatory signed
    observer toSign

    choice Sign : ContractId Pending with
        signer : Party
      controller signer
        do
          assert (signer `elem` toSign)
          create this with signed = signer :: signed, toSign = delete signer toSign
    -- end snippet: first half pending template
    -- start snippet: second half pending template
    choice Finalize : ContractId Agreement with
        signer : Party
      controller signer
        do
          assert (sort signed == sort agree.signatories)
          create agree
    -- end snippet: second half pending template

multiplePartyAgreementTest : Scenario (ContractId Agreement)  -- test
multiplePartyAgreementTest = do

  -- start snippet: testing setup
  parties@[person1, person2, person3, person4] <- makePartiesFrom ["Alice", "Bob", "Clare", "Dave"]
  let agree = Agreement with signatories = parties

  pending <- person1 `submit` do
    create Pending with agree; signed = [head parties]; toSign = tail parties
  -- end snippet: testing setup
  -- start snippet: testing add agreements
  pending <- person2 `submit` do
    exercise pending Sign with signer = person2
  pending <- person3 `submit` do
    exercise pending Sign with signer = person3
  pending <- person4 `submit` do
    exercise pending Sign with signer = person4
  pendingFailTest <- person3 `submitMustFail` do
    exercise pending Sign with signer = person4
  -- end snippet: testing add agreements
  -- start snippet: testing finalize
  person1 `submit` do
    exercise pending Finalize with signer = person1
  -- end snippet: testing finalize