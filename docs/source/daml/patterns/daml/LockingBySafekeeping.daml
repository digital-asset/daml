-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


{-# LANGUAGE PartialTypeSignatures #-}


module LockingBySafekeeping where

import CoinIssuance
import Utilities
import DA.Time

data LockResult = LockResult {
  coinCid : ContractId Coin;
  lockCid : ContractId LockedCoinV2
}

-- BEGIN_LOCKED_COIN_V2_TEMPLATE
template LockedCoinV2
  with
    coin: Coin
    maturity: Time
    locker: Party
  where
    signatory locker, coin.owner

    choice UnlockV2
      : ContractId Coin
      with coinCid : ContractId Coin
      controller locker
      do
        inputCoin <- fetch coinCid
        assert (inputCoin.owner == locker)
        tpCid <- exercise coinCid Transfer with newOwner = coin.owner
        exercise tpCid AcceptTransfer

    choice ClawbackV2
      : ContractId Coin
      with coinCid : ContractId Coin
      controller coin.owner
      do
        currTime <- getTime
        assert (currTime >= maturity)
        inputCoin <- fetch coinCid
        assert (inputCoin == coin with owner=locker)
        tpCid <- exercise coinCid Transfer with newOwner = coin.owner
        exercise tpCid AcceptTransfer
-- END_LOCKED_COIN_V2_TEMPLATE

-- BEGIN_LOCK_REQUEST_TEMPLATE
template LockRequest
  with
    locker: Party
    maturity: Time
    coin: Coin
  where
    signatory locker
    observer coin.owner

    choice Accept : LockResult
      with coinCid : ContractId Coin
      controller coin.owner
      do
        inputCoin <- fetch coinCid
        assert (inputCoin == coin)
        tpCid <- exercise coinCid Transfer with newOwner = locker
        coinCid <- exercise tpCid AcceptTransfer
        lockCid <- create LockedCoinV2 with locker; maturity; coin
        return LockResult {coinCid; lockCid}
-- END_LOCK_REQUEST_TEMPLATE


locking : Scenario (ContractId Coin)  -- test
locking =
  scenario do

    [issuer, owner, newOwner, locker] <- makePartiesFrom ["Bank", "Me", "You", "Custodian Bank"]

    now <- pass (days 0)

   --when coin is created, owner = locker. it is unlocked
    coinId <- createCoin issuer owner 100.0

    coin <- issuer `submit` do fetch coinId
    lockRequestCid <- locker `submit` do
      create LockRequest with locker; maturity= (addRelTime now (days 2)); coin
    lockResult <- owner `submit` do exercise lockRequestCid Accept with coinCid = coinId

    --since it is locked and maturity time hasn't elapsed yet, owner cannot clawback
    owner `submitMustFail` do exercise lockResult.lockCid ClawbackV2 with coinCid = lockResult.coinCid

    --only after unlock, owner can access the coin
    unlockedCoin <- locker `submit` exercise lockResult.lockCid UnlockV2 with coinCid = lockResult.coinCid
    propId <- owner `submit` exercise unlockedCoin Transfer with newOwner
    newOwner `submit` exercise propId AcceptTransfer
