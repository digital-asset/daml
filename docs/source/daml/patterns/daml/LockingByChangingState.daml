-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


{-# LANGUAGE PartialTypeSignatures #-}


module LockingByChangingState where

import Utilities

template LockableCoin 
  with
    owner: Party
    issuer: Party
    amount: Decimal
    locker: Party
  where
    signatory issuer
    signatory owner
   
    ensure amount > 0.0

    --Transfer can happen only if it is not locked
    controller owner can
      Transfer : ContractId TransferProposal
        with newOwner: Party
        do   
            assert (locker == owner)
            create TransferProposal
             with coin=this; newOwner 
             
      --Lock can be done if owner decides to bring a locker on board
      Lock : ContractId LockableCoin
        with newLocker: Party
        do   
          assert (newLocker /= owner)
          create this with locker = newLocker

    --Unlock only makes sense if the coin is in locked state
    controller locker can 
      Unlock 
        : ContractId LockableCoin
        do   
            assert (locker /= owner)
            create this with locker = owner 


--TransferProposal
template TransferProposal
  with
    coin: LockableCoin
    newOwner: Party
  where
    signatory coin.owner, coin.issuer
 
    controller coin.owner can
      WithdrawTransfer
        : ContractId LockableCoin
        do create coin
  
    controller newOwner can
      AcceptTransfer
        : ContractId LockableCoin
        do create coin with owner = newOwner; locker = newOwner

      RejectTransfer
        : ()
        do return ()

template CoinProposal
  with
    owner: Party
    issuer: Party
    amount: Decimal
  where
    signatory issuer

    controller owner can 
      AcceptProposal 
        : ContractId LockableCoin
        do create LockableCoin with issuer; owner; amount; locker=owner


locking : Scenario (ContractId LockableCoin)  -- test
locking =
  do

    [issuer, owner, newOwner, locker] <- makePartiesFrom ["Bank", "Me", "You", "Custodian Bank"]
    --when coin is created, owner = locker. it is unlocked       
    
    propId <- issuer `submit` do create CoinProposal with owner; issuer; amount=100.0
    coinCid <- owner `submit` do exercise propId AcceptProposal

    --owner can choose to lock it with his custodian bank
    lockedCid <- owner `submit` do exercise coinCid Lock with newLocker=locker
    --since coin is locked, owner cannot transfer
    owner `submitMustFail` do exercise lockedCid Transfer with newOwner

    unlockedCid <- locker `submit` do exercise lockedCid Unlock 

    propId <- owner `submit` do exercise unlockedCid Transfer with newOwner
    newOwner `submit` do exercise propId AcceptTransfer
