-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


{-# LANGUAGE PartialTypeSignatures #-}


module CoinDelegation where

import CoinIssuance
import Utilities

-- Delegation pattern gives A the right to exercise a choice on behalf of B
-- Party A can control a contract instance on the ledger that allows an action
-- to be performed on behalf of a second party B without B explicitly committing the action.
-- Before such delegation takes place, DAML obligable computation will make sure party B has agreed to it.
-- This is to ensure all contracts on the ledger are well-authorized

template CoinPoA
  with
    attorney: Party
    principal: Party
  where
    signatory principal
    
    controller principal can
      WithdrawPoA
        : ()
        do return ()

    -- attorney has the delegated right to Transfer
    -- principal as the signatory on this contract ensures the right to Transfer is delegated voluntarily
    controller attorney can
      nonconsuming TransferCoin
        : ContractId TransferProposal
        with
          coinId: ContractId Coin
          newOwner: Party
        do            
          exercise coinId Transfer with newOwner

delegate : Scenario ()  -- test
delegate =
  scenario do

    [issuer, owner, receiver, attorney] <- makePartiesFrom ["Bank", "Me", "You", "Lawyer"]

    --coin is created without attorney
    newCoinId <- createCoin issuer owner 100.0
    
    --poa is created between owner and attorney
    poa <- owner `submit` do create CoinPoA with principal = owner; attorney

    --owner chooses to disclose coin to the attorney. This is how he devulge his coin to attorney
    disclosedCoinId <- owner `submit` do exercise newCoinId Disclose with p = attorney

    --attorney now can Transfer coin on behalf of the owner
    tprop <- attorney `submit` do exercise poa TransferCoin with coinId = disclosedCoinId; newOwner = receiver

    --receives can accept
    receiver `submit` do
      newCoinId <- exercise tprop AcceptTransfer
      newCoin <- fetch newCoinId

      assert (newCoin.owner == receiver)
      assert (newCoin.issuer == issuer)
      assert (newCoin.amount == 100.0)
