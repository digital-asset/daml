-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Cash where

import Asset qualified

template Cash
  with
    issuer : Party
    owner : Party
    currency : Text
    amount : Decimal
  where
    signatory issuer, owner
    ensure amount > 0.0

    choice ProposeTransfer : ContractId TransferProposal
      with newOwner : Party
      controller owner
      do
        create TransferProposal with
          cash = this
          newOwner = newOwner

    interface instance Asset.Asset for Cash where
      view = Asset.AssetView with
        issuer
        owner
        description = show @Cash this

      setOwner newOwner =
        toInterface @Asset.Asset $
          this with
            owner = newOwner

      toTransferProposal newOwner =
        toInterface @Asset.TransferProposal $
          TransferProposal with
            cash = this
            newOwner

template TransferProposal
  with
    cash : Cash
    newOwner : Party
  where
    signatory (signatory cash)
    observer newOwner

    choice AcceptTransfer : ContractId Cash
      controller newOwner
      do
        create cash with
          owner = newOwner

    -- Note that RejectTransfer and WithdrawProposal are almost identical
    -- except for the controller - the "recipient" (the new owner) can reject
    -- the proposal, while the "sender" (the old owner) can withdraw the
    -- proposal if the recipient hasn't accepted it already. The effect in
    -- either case is the same: the TransferProposal contract is archived and a
    -- new Cash contract is created with the same contents as the original, but
    -- with a new ContractId on the ledger.
    choice RejectTransfer : ContractId Cash
      controller newOwner
      do
        create cash

    choice WithdrawProposal : ContractId Cash
      controller cash.owner
      do
        create cash

    interface instance Asset.TransferProposal for TransferProposal where
      view = Asset.TransferProposalView with
        assetView = Prelude.view (toInterface @Asset.Asset cash)
        newOwner

      asset = toInterface @Asset.Asset cash
