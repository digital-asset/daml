-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Main where

import Daml.Script

import Cash qualified
import NFT qualified

import Asset qualified

data Parties = Parties with
    alice
      , bob
      , charlie
      , dominic
      , emily
      : Party
  deriving (Eq, Ord, Show)

allocateParties : Script Parties
allocateParties = do
  alice <- allocateParty "alice"
  bob <- allocateParty "bob"
  charlie <- allocateParty "charlie"
  dominic <- allocateParty "dominic"
  emily <- allocateParty "emily"
  pure Parties with ..

cashTest : Script ()
cashTest = do
  Parties {..} <- allocateParties

  aliceUsd <-
    alice `submit` do
      createCmd Cash.Cash with
        issuer = alice
        owner = alice
        currency = "USD"
        amount = 42.0

  bobUsdTransferProposal <-
    alice `submit` do
      exerciseCmd aliceUsd Cash.ProposeTransfer with
        newOwner = bob

  bobUsd <-
    bob `submit` do
      exerciseCmd bobUsdTransferProposal Cash.AcceptTransfer

  charlieUsdTransferProposal <-
    bob `submit` do
      exerciseCmd bobUsd Cash.ProposeTransfer with
        newOwner = charlie

  charlieUsd <-
    charlie `submit` do
      exerciseCmd charlieUsdTransferProposal Cash.AcceptTransfer

  dominicUsdTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieUsd Cash.ProposeTransfer with
        newOwner = dominic

  charlieUsd' <-
    dominic `submit` do
      exerciseCmd dominicUsdTransferProposal Cash.RejectTransfer

  emilyUsdTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieUsd' Cash.ProposeTransfer with
        newOwner = emily

  charlieUsd'' <-
    charlie `submit` do
      exerciseCmd emilyUsdTransferProposal Cash.WithdrawProposal

  pure ()

archiveCashTest : Script ()
archiveCashTest = do
  Parties {..} <- allocateParties

  aliceUsd <-
    alice `submit` do
      createCmd Cash.Cash with
        issuer = alice
        owner = alice
        currency = "USD"
        amount = 42.0

  alice `submit` do
    archiveCmd aliceUsd

archiveCashTransferProposalTest : Script ()
archiveCashTransferProposalTest = do
  Parties {..} <- allocateParties

  aliceUsd <-
    alice `submit` do
      createCmd Cash.Cash with
        issuer = alice
        owner = alice
        currency = "USD"
        amount = 42.0

  bobUsdTransferProposal <-
    alice `submit` do
      exerciseCmd aliceUsd Cash.ProposeTransfer with
        newOwner = bob

  alice `submit` do
    archiveCmd bobUsdTransferProposal

nftTest : Script ()
nftTest = do
  Parties {..} <- allocateParties

  aliceMeme <-
    alice `submit` do
      createCmd NFT.NFT with
        issuer = alice
        owner = alice
        url = "https://nyan.feline/"

  bobMemeTransferProposal <-
    alice `submit` do
      exerciseCmd aliceMeme NFT.ProposeTransfer with
        newOwner = bob

  bobMeme <-
    bob `submit` do
      exerciseCmd bobMemeTransferProposal NFT.AcceptTransfer

  charlieMemeTransferProposal <-
    bob `submit` do
      exerciseCmd bobMeme NFT.ProposeTransfer with
        newOwner = charlie

  charlieMeme <-
    charlie `submit` do
      exerciseCmd charlieMemeTransferProposal NFT.AcceptTransfer

  dominicMemeTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieMeme NFT.ProposeTransfer with
        newOwner = dominic

  charlieMeme' <-
    dominic `submit` do
      exerciseCmd dominicMemeTransferProposal NFT.RejectTransfer

  emilyMemeTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieMeme' NFT.ProposeTransfer with
        newOwner = emily

  charlieMeme'' <-
    charlie `submit` do
      exerciseCmd emilyMemeTransferProposal NFT.WithdrawProposal

  pure ()

archiveNftTest : Script ()
archiveNftTest = do
  Parties {..} <- allocateParties

  aliceMeme <-
    alice `submit` do
      createCmd NFT.NFT with
        issuer = alice
        owner = alice
        url = "https://nyan.feline/"

  alice `submit` do
    archiveCmd aliceMeme

archiveNftTransferProposalTest : Script ()
archiveNftTransferProposalTest = do
  Parties {..} <- allocateParties

  aliceMeme <-
    alice `submit` do
      createCmd NFT.NFT with
        issuer = alice
        owner = alice
        url = "https://nyan.feline/"

  bobMemeTransferProposal <-
    alice `submit` do
      exerciseCmd aliceMeme NFT.ProposeTransfer with
        newOwner = bob

  alice `submit` do
    archiveCmd bobMemeTransferProposal

mkAssetTest : (Template t, Implements t Asset.Asset) => (Party -> t) -> Script ()
mkAssetTest mkAsset = do
  Parties {..} <- allocateParties

  aliceAsset <-
    alice `submit` do
      toInterfaceContractId @Asset.Asset <$>
        createCmd (mkAsset alice)

  bobAssetTransferProposal <-
    alice `submit` do
      exerciseCmd aliceAsset Asset.ProposeTransfer with
        newOwner = bob

  bobAsset <-
    bob `submit` do
      exerciseCmd bobAssetTransferProposal Asset.AcceptTransfer

  charlieAssetTransferProposal <-
    bob `submit` do
      exerciseCmd bobAsset Asset.ProposeTransfer with
        newOwner = charlie

  charlieAsset <-
    charlie `submit` do
      exerciseCmd charlieAssetTransferProposal Asset.AcceptTransfer

  dominicAssetTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieAsset Asset.ProposeTransfer with
        newOwner = dominic

  charlieAsset' <-
    dominic `submit` do
      exerciseCmd dominicAssetTransferProposal Asset.RejectTransfer

  emilyAssetTransferProposal <-
    charlie `submit` do
      exerciseCmd charlieAsset' Asset.ProposeTransfer with
        newOwner = emily

  charlieAsset'' <-
    charlie `submit` do
      exerciseCmd emilyAssetTransferProposal Asset.WithdrawProposal

  pure ()

mkArchiveAssetTest : (Template t, Implements t Asset.Asset) => (Party -> t) -> Script ()
mkArchiveAssetTest mkAsset = do
  Parties {..} <- allocateParties

  aliceAsset <-
    alice `submit` do
      toInterfaceContractId @Asset.Asset <$>
        createCmd (mkAsset alice)

  alice `submit` do
    archiveCmd aliceAsset

mkArchiveAssetTransferProposalTest : (Template t, Implements t Asset.Asset) => (Party -> t) -> Script ()
mkArchiveAssetTransferProposalTest mkAsset = do
  Parties {..} <- allocateParties

  aliceAsset <-
    alice `submit` do
      toInterfaceContractId @Asset.Asset <$>
        createCmd (mkAsset alice)

  bobAssetTransferProposal <-
    alice `submit` do
      exerciseCmd aliceAsset Asset.ProposeTransfer with
        newOwner = bob

  alice `submit` do
    archiveCmd bobAssetTransferProposal

mkCash : Party -> Cash.Cash
mkCash party = Cash.Cash with
  issuer = party
  owner = party
  currency = "USD"
  amount = 42.0

cashAssetTest : Script ()
cashAssetTest = mkAssetTest mkCash

cashArchiveAssetTest : Script ()
cashArchiveAssetTest = mkArchiveAssetTest mkCash

cashArchiveAssetTransferProposalTest : Script ()
cashArchiveAssetTransferProposalTest = mkArchiveAssetTransferProposalTest mkCash

mkNft : Party -> NFT.NFT
mkNft party = NFT.NFT with
  issuer = party
  owner = party
  url = "https://nyan.feline/"

nftAssetTest : Script ()
nftAssetTest = mkAssetTest mkNft

nftArchiveAssetTest : Script ()
nftArchiveAssetTest = mkArchiveAssetTest mkNft

nftArchiveAssetTransferProposalTest : Script ()
nftArchiveAssetTransferProposalTest = mkArchiveAssetTransferProposalTest mkNft
