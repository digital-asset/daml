-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module UpgradeTrigger where

import DA.Assert
import DA.Foldable
import qualified DA.Next.Map as Map
import Daml.Trigger
import Daml.Trigger.Assert
import qualified Daml.Script as Script
import Daml.Script (script)

import CarbonV1
import UpgradeFromCarbonCertV1

-- TRIGGER_BOILERPLATE_BEGIN
upgradeTrigger : Trigger ()
upgradeTrigger = Trigger with
  initialize = pure ()
  updateState = \_msg -> pure ()
  registeredTemplates = AllInDar
  heartbeat = None
  rule = triggerRule
-- TRIGGER_BOILERPLATE_END

-- TRIGGER_RULE_BEGIN
triggerRule : Party -> TriggerA () ()
triggerRule issuer = do
  agreements <-
    filter (\(_cid, agreement) -> agreement.issuer == issuer) <$>
    query @UpgradeCarbonCertAgreement
  allCerts <-
    filter (\(_cid, cert) -> cert.issuer == issuer) <$>
    query @CarbonCert
  forA_ agreements $ \(agreementCid, agreement) -> do
    let certsForOwner = filter (\(_cid, cert) -> cert.owner == agreement.owner) allCerts
    forA_ certsForOwner $ \(certCid, _) ->
      emitCommands
        [exerciseCmd agreementCid (Upgrade certCid)]
        [toAnyContractId certCid]
-- TRIGGER_RULE_END

-- TODO (MK) The Bazel rule atm doesnâ€™t run this script, we should fix that.
test = script do
  alice <- Script.allocateParty "Alice"
  bob <- Script.allocateParty "Bob"

  certProposal <- submit alice $ Script.createCmd (CarbonCertProposal alice bob 10)
  cert <- submit bob $ Script.exerciseCmd certProposal CarbonCertProposal_Accept

  upgradeProposal <- submit alice $ Script.createCmd (UpgradeCarbonCertProposal alice bob)
  upgradeAgreement <- submit bob $ Script.exerciseCmd upgradeProposal Accept

  let acs = toACS cert <> toACS upgradeAgreement

  (_, commands) <- testRule upgradeTrigger alice acs Map.empty ()
  let flatCommands = flattenCommands commands
  assertExerciseCmd flatCommands $ \(cid, choiceArg) -> do
    cid === upgradeAgreement
    choiceArg === Upgrade cert
  -- TODO (MK) It would be nice to test for the absence of certain commands as well
  -- or ideally just assert that the list of emitted commands matches an expected
  -- list of commands.
