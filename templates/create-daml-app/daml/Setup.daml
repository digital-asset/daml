module Setup where

import DA.Foldable (forA_)
import DA.Optional (fromSomeNote)
import qualified DA.Text as T
import Daml.Script

import User (Alias(..))

data TestUser = TestUser with
  alias : Text
  public : Party

setup : Script ()
setup = do
  public <- createPublic
  let aliases = ["Alice", "Bob", "Charlie"]
  forA_ aliases $ \alias -> createTestUser $ TestUser alias public

createTestUser : TestUser -> Script Party
createTestUser TestUser{alias, public} = do
  u <- getOrCreateUser alias (Some public)
  let p = getPrimaryParty u
  submit public $ createCmd $ Alias p alias public
  pure p

createPublic : Script Party
createPublic = do
  publicUser <- getOrCreateUser "Public" None
  pure $ getPrimaryParty publicUser


getOrCreateUser : Text -> Optional Party -> Script User
getOrCreateUser alias publicM = do
  userId <- validateUserId $ toUserId alias
  try
    getUser userId
  catch
    UserNotFound _ -> do
      p <- allocateParty alias
      let u = User userId (Some p)
      createUser u $ [CanActAs p] ++ [CanReadAs public | Some public <- [publicM]]
      pure u

toUserId : Text -> Text
toUserId = T.asciiToLower

getPrimaryParty : User -> Party
getPrimaryParty u = fromSomeNote ("User " <> u.userId <> " is missing a primary party.") u.primaryParty
