module Setup where

import DA.Foldable (forA_)
import qualified DA.Text as T
import Daml.Script

setup : Script ()
setup = do

  let displayNames = ["Alice", "Bob", "Charlie"]
  forA_ displayNames $ \displayName -> do
    userId <- validateUserId $ toUserId displayName
    userExists userId >>= \case
      True ->
        -- user already exists do nothing
        pure ()
      False -> do
        let partyIdHint = toPartyIdHint displayName
        p <- allocatePartyWithHint displayName (PartyIdHint partyIdHint)
        createUser (User userId (Some p)) [CanActAs p]
        pure ()

userExists : UserId -> Script Bool
userExists u = do
  try do _ <- getUser u; pure True
  catch UserNotFound _ -> pure False

toUserId : Text -> Text
toUserId = T.asciiToLower

-- TODO Drop hints once we have aliases.
toPartyIdHint : Text -> Text
toPartyIdHint p = "p" <> toUserId p
