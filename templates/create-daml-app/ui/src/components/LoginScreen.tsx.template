// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

import React, { useCallback } from 'react'
import { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react'
import Credentials from '../Credentials';
import Ledger from '@daml/ledger';
import { DamlHubLogin as DamlHubLoginBtn } from '@daml/hub-react';
import { User } from '@daml.js/__PROJECT_NAME__';
import { authConfig, Insecure } from '../config';
import { useAuth0 } from "@auth0/auth0-react";

type Props = {
  onLogin: (credentials: Credentials) => void;
}

/**
 * React component for the login screen of the `App`.
 */
const LoginScreen: React.FC<Props> = ({onLogin}) => {

  const login = useCallback(async (credentials: Credentials) => {
    try {
      const ledger = new Ledger({token: credentials.token});
      let userContract = await ledger.fetchByKey(User.User, credentials.party);
      if (userContract === null) {
        const user = {username: credentials.party, following: [], public: 'public'};
        userContract = await ledger.create(User.User, user);
      }
      onLogin(credentials);
    } catch(error) {
      alert(`Unknown error:\n${JSON.stringify(error)}`);
    }
  }, [onLogin]);

  const wrap: (c: JSX.Element) => JSX.Element = (component) =>
    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>
      <Grid.Column style={{ maxWidth: 450 }}>
        <Header as='h1' textAlign='center' size='huge' style={{color: '#223668'}}>
          <Header.Content>
            Create
            <Image
              as='a'
              href='https://www.daml.com/'
              target='_blank'
              src='/daml.svg'
              alt='Daml Logo'
              spaced
              size='small'
              verticalAlign='bottom'
            />
            App
          </Header.Content>
        </Header>
        <Form size='large' className='test-select-login-screen'>
          <Segment>
            {component}
          </Segment>
        </Form>
      </Grid.Column>
    </Grid>;

  const InsecureLogin: React.FC<{auth: Insecure}> = ({auth}) => {
    const [username, setUsername] = React.useState('');

    const handleLogin = async (event: React.FormEvent) => {
      event.preventDefault();
      const token = auth.makeToken(username);
      const ledger = new Ledger({token: token});
      const primaryParty:string = await auth.userManagement.primaryParty(username, ledger).catch((error) => {
        const errorMsg = error instanceof Error ? error.toString() : JSON.stringify(error);
        alert(`Failed to login as '${username}':\n${errorMsg}`);
        throw error;
      });
      await login({user: {userId: username, primaryParty: primaryParty},
                   party: primaryParty,
                   token: auth.makeToken(username)});
    }

    return wrap(<>
      {/* FORM_BEGIN */}
      <Form.Input fluid
                  placeholder='Username'
                  value={username}
                  className='test-select-username-field'
                  onChange={(e, {value}) => setUsername(value?.toString() ?? '')}
                   />
      <Button primary
              fluid
              className='test-select-login-button'
              onClick={handleLogin}>
        Log in
      </Button>
      {/* FORM_END */}
    </>);
  };

  const DamlHubLogin: React.FC = () => (
    wrap(
      <DamlHubLoginBtn
        onLogin={creds => {
          if (creds) {
            login({party:creds.party, user: {userId: creds.partyName, primaryParty: creds.party}, token:creds.token});
          }
        }}
        options={{
          method: {
            button: {
              render: () => <Button primary fluid/>,
            },
          },
        }}
        />
    )
  );

  const Auth0Login: React.FC = () => {
    const { user, isAuthenticated, isLoading, loginWithRedirect, getAccessTokenSilently } = useAuth0();
    (async function () {
      if (isLoading === false && isAuthenticated === true) {
        if (user !== undefined) {
          const party = user["https://daml.com/ledger-api"];
          const creds: Credentials = {
            user: {userId: user.email ?? user.name ?? party, primaryParty: party},
            party: party,
            token: (await getAccessTokenSilently({
                     audience: "https://daml.com/ledger-api"}))};
          login(creds);
        }
      }
    })();
    return wrap(<Button primary
                        fluid
                        className='test-select-login-button'
                        disabled={isLoading || isAuthenticated}
                        loading={isLoading || isAuthenticated}
                        onClick={loginWithRedirect}>
                  Log in
                </Button>);
  };

  if (authConfig.provider === "none") {
  } else if (authConfig.provider === "daml-hub") {
  } else if (authConfig.provider === "auth0") {
  }
  return authConfig.provider === "none"
       ? <InsecureLogin auth={authConfig} />
       : authConfig.provider === "daml-hub"
       ? <DamlHubLogin />
       : authConfig.provider === "auth0"
       ? <Auth0Login />
       : <div>Invalid configuation.</div>;
};

export default LoginScreen;
