module Scripts.Transfer where

import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentKey(..))

-- IMPLEMENTATION DEPENDENCIES --
import Workflow.Transfer qualified as Transfer

import Scripts.Holding (HoldingState(..), runHolding)

-- | Helper container used to transfer state from one script to another.
data TransferState = TransferState
  with
    alice : Party
    bank : Party
    bob : Party
    public : Party
    aliceAccount : AccountKey
    bobAccount : AccountKey
    cashInstrument : InstrumentKey
    holdingFactoryCid : ContractId Holding.F
    newHoldingCid : ContractId Holding.I
  deriving (Eq, Show)

-- | Test script that transfers a holding from Alice to Bob
runTransfer : Script TransferState
runTransfer = do

  -- Execute the `runHolding` script. Alice now holds USD 1000 in her account.
  HoldingState{alice
    , bank
    , bob
    , public
    , aliceAccount
    , bobAccount
    , cashInstrument
    , holdingFactoryCid
    , aliceCashHoldingCid} <- runHolding

  now <- getTime

  -- Bob requests a cash transfer from Alice
  -- TRANSFER_BEGIN
  transferRequestCid <- submit bob do
    createCmd Transfer.Request with
      receiverAccount = bobAccount
      instrument = cashInstrument
      amount = 1000.0
      currentOwner = alice

  newHoldingCid <- submitMulti [alice] [public] do
    exerciseCmd transferRequestCid Transfer.Accept with holdingCid = aliceCashHoldingCid
  -- TRANSFER_END

  pure TransferState with
    alice
    bank
    bob
    public
    aliceAccount
    bobAccount
    cashInstrument
    holdingFactoryCid
    newHoldingCid
