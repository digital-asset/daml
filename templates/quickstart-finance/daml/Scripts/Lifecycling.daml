module Scripts.Lifecycling where

import DA.Date (toDateUTC)
import DA.Map (empty, fromList)
import DA.Set (singleton)
import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, qty)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..))

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Instrument.Base.Instrument (Instrument(..))
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event(..))
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Lifecycle.Rule.Distribution qualified as Distribution (Rule(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), Unit(..))

import Scripts.Settlement (runSettlement)

-- | Test script that
-- 1. executes the `runSettlement` script
-- 2. creates a distribution lifecycle rule
-- 3. creates a distribution lifecycle event
-- 4. lifecycles the distribution event
-- 5. processes the lifecycle effect
-- 6. settles the distribution
runLifecycling : Script()
runLifecycling = do

  -- Execute the `runSettlement` script.
  -- Bob now holds 10 tokens in his account.
  (alice, bank, bob, public, aliceAccount, bobAccount, usdInstrument, tokenInstrument, settlementFactoryCid, aliceHoldingCid, bobHoldingCid) <- runSettlement

  -- The bank creates a new version of the token instrument (the "ex-distribution" version)
  -- This is the version Bob will hold after claiming the effect further down below.
  -- NEW_VERSION_BEGIN
  let newTokenInstrument = tokenInstrument with version = "1"
  now <- getTime
  tokenInstrumentCid <- toInterfaceContractId @Instrument.I <$> submit bank do
    createCmd Instrument
      with
        depository = bank
        issuer = bank
        id = tokenInstrument.id
        description = "Instrument representing units of a generic token"
        version = "1"
        observers = empty
        validAsOf = now
  -- NEW_VERSION_END

  -- Create clock
  -- CREATE_CLOCK_BEGIN
  clockCid <- toInterfaceContractId <$> submit bank do
    createCmd DateClock with
      u = Unit $ toDateUTC now
      id = Id "CLOCK"
      provider = bank
      observers = empty
  -- CREATE_CLOCK_END

  -- Create lifecycle rules
  -- LIFECYCLE_RULES_BEGIN
  distributionRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit bank do
    createCmd Distribution.Rule with
      provider = bank
      observers = fromList [("Distribution", singleton $ singleton bob)]
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submitMulti [bank, bob] [] do
    createCmd Claim.Rule with
      custodian = bank
      owner = bob
      claimers = singleton bob
      settler = bob
      factoryCid = settlementFactoryCid
  -- LIFECYCLE_RULES_END

  -- Create cash distribution event
  -- CREATE_EVENT_BEGIN
  distributionEventCid <- toInterfaceContractId @Event.I <$> submit bank do
    createCmd Distribution.Event with
      provider = bank
      id = Id "DISTRIBUTION"
      description = "Profit distribution"
      effectiveDate = toDateUTC now
      targetInstrument = tokenInstrument
      newInstrument = newTokenInstrument
      perUnitDistribution = [Instrument.qty 0.02 usdInstrument]
      observers = empty
  -- CREATE_EVENT_END

  -- Lifecycle distribution event
  -- LIFECYCLE_EVENT_BEGIN
  (_, [effectCid]) <- submit bank do
    exerciseCmd distributionRuleCid Lifecycle.Evolve with
      ruleName = "Distribution"
      settler = bank
      observableCids = []
      eventCid = distributionEventCid
      clockCid
  -- LIFECYCLE_EVENT_END

  -- Claim effect
  -- CLAIM_EVENT_BEGIN
  result <- submitMulti [bob] [public] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = bob
      holdingCids = [bobHoldingCid]
      effectCid
  let [instructionCid] = result.instructionCids
  -- CLAIM_EVENT_END

  -- EFFECT_SETTLEMENT_BEGIN
  -- Allocate instruction
  instructionCid <- submit bank do exerciseCmd instructionCid Instruction.Allocate with allocation = CreditReceiver

  -- Approve instruction
  instructionCid <- submit bob do exerciseCmd instructionCid Instruction.Approve with approval = TakeDelivery bobAccount

  -- Settle batch
  submitMulti [bob] [public] do exerciseCmd result.batchCid Batch.Settle
  -- EFFECT_SETTLEMENT_END

  pure ()
