# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# Do not run on PRs
pr: none

# Do not run on merge to main
trigger: none

# Do run on a schedule (daily)
#
# Note: machines are killed every day at 4AM UTC, so we need to either:
# - run sufficiently before that that this doesn't get killed, or
# - run sufficiently after that that machines are initialized.
#
# Targeting 6AM UTC seems to fit that.
schedules:
- cron: "0 6 * * *"
  displayName: daily checks and reporting
  branches:
    include:
    - main
  always: true

jobs:


  - job: bump_canton
    timeoutInMinutes: 60
    pool:
      name: ubuntu_20_04
      demands: assignment -equals default
    steps:
    - checkout: self
    - template: ../bash-lib.yml
      parameters:
        var_name: bash_lib
    - bash: |
        set -euo pipefail

        eval "$(./dev-env/bin/dade-assist)"
        source $(bash_lib)

        https://digitalasset.jfrog.io/artifactory/api/storage/assembly/canton
        https://digitalasset.jfrog.io/artifactory/assembly/canton/20220413/canton-open-source-20220413.tar.gz

        latest_canton=$(curl -u $AUTH \
                             --fail \
                             --location \
                             --silent \
                             https://digitalasset.jfrog.io/artifactory/api/storage/assembly/canton \
                        | jq -r '.children[].uri' \
                        | sed -e 's/^\///'
                        | grep '^[0-9]\{8\}$'
                        | sort
                        | tail -1)
        dir=$(pwd)
        cd $(mktemp -d)
        curl -u $AUTH \
             --fail \
             --location \
             --silent \
             https://digitalasset.jfrog.io/artifactory/assembly/canton/$latest_canton/canton-open-source-$latest_canton.tar.gz \
             > tarball.tar.gz
        canton_sha=$(sha256sum tarball.tar.gz | awk '{print $1}')
        tar xzf tarball.tar.gz
        rm tarball.tar.gz
        canton_prefix=$(ls)
        mv $canton_prefix canton
        canton_local_path=external/$(ls canton/lib/*.jar)
        cd $dir

        sed -i 's|"external/canton/lib/.*|"'$canton_local_path'"|' \
               daml-script/test/src/test-utils/com/daml/lf/engine/script/test/MultiParticipantFixture.scala
        cat <<EOF > canton_dep.bzl
        # Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
        # SPDX-License-Identifier: Apache-2.0

        canton = {
            "sha" : "$canton_sha",
            "prefix" : "$canton_prefix",
            "url" : "https://www.canton.io/releases/canton-open-source-$canton_version.tar.gz",
        }
        EOF

        branch="canton-update-$(Build.BuildId)"

        if git diff --exit-code -- candon_dep.bzl; then
            echo "Already up-to-date with latest Canton snapshot."
            setvar need_to_build false
        else
            git add NOTICES
            open_pr "$branch" "update NOTICES file"
            setvar need_to_build true
        fi
      env:
        AUTH: $(ARTIFACTORY_USERNAME):$(ARTIFACTORY_PASSWORD)

  - job: run_canton_pr_build
    timeoutInMinutes: 60
    dependsOn: ["bump_canton"]
    condition: and(succeeded(),
                   eq(variables['Build.SourceBranchName'], 'main'))
    pool:
      name: 'ubuntu_20_04'
      demands: assignment -equals default
    variables:
      need_to_build: $[ dependencies.bump_canton.outputs['out.need_to_build'] ]
    steps:
      - bash: |
          eval "$(./dev-env/bin/dade-assist)"
          if [ "$(need_to_build)" == "true" ]; then
              branch="canton-update-$(Build.BuildId)"
              az extension add --name azure-devops
              trap "az devops logout" EXIT
              echo "$(System.AccessToken)" | az devops login --org "https://dev.azure.com/digitalasset"
              az pipelines build queue --branch "$branch" \
                                       --definition-name "PRs" \
                                       --org "https://dev.azure.com/digitalasset" \
                                       --project daml
          fi

