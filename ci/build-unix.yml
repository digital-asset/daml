steps:
  - checkout: self

  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

  - bash: ./fmt.sh --test
    displayName: 'Platform-agnostic lints and checks'
    condition: eq(variables['Agent.OS'], 'Linux')

  - bash: ci/build.sh
    displayName: 'Build'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Bazel execution logs'

  - bash: ci/release.sh
    displayName: 'Release'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to connect to bintray
      JFROG_CONFIG_CONTENT: $(JFROG_CONFIG_CONTENT)
