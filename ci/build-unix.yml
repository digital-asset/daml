# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

parameters:
  is_release: ''
  name: ''
  release_tag: ''
  scala_version: ''

steps:
  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'
    condition: and(succeeded(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: and(succeeded(),
                   eq(variables['System.PullRequest.IsFork'], 'False'),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

  - bash: ci/configure-bazel.sh
    displayName: 'Configure Bazel'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
    condition: and(succeeded(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))

  - bash: ./fmt.sh --test
    displayName: 'Platform-agnostic lints and checks'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - bash: |
      set -euo pipefail
      if [ -e bazel-testlogs ]; then
          rm -rf bazel-testlogs/
      fi
    displayName: delete old logs

  - bash: |
      set -euo pipefail
      echo "Agent.BuildDirectory: $(Agent.BuildDirectory)"
      echo "Agent.ContainerMapping: $(Agent.ContainerMapping)"
      echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
      echo "Agent.Id: $(Agent.Id)"
      echo "Agent.JobName: $(Agent.JobName)"
      echo "Agent.JobStatus: $(Agent.JobStatus)"
      echo "Agent.MachineName: $(Agent.MachineName)"
      echo "Agent.Name: $(Agent.Name)"
      echo "Agent.OS: $(Agent.OS)"
      echo "Agent.OSArchitecture: $(Agent.OSArchitecture)"
      echo "Agent.TempDirectory: $(Agent.TempDirectory)"
      echo "Agent.ToolsDirectory: $(Agent.ToolsDirectory)"
      echo "Agent.WorkFolder: $(Agent.WorkFolder)"
      echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
      echo "Build.BuildId: $(Build.BuildId)"
      echo "Build.BuildNumber: $(Build.BuildNumber)"
      echo "Build.BuildUri: $(Build.BuildUri)"
      echo "Build.BinariesDirectory: $(Build.BinariesDirectory)"
      echo "Build.ContainerId: $(Build.ContainerId)"
      echo "Build.CronSchedule.DisplayName: $(Build.CronSchedule.DisplayName)"
      echo "Build.DefinitionName: $(Build.DefinitionName)"
      echo "Build.DefinitionVersion: $(Build.DefinitionVersion)"
      echo "Build.QueuedBy: $(Build.QueuedBy)"
      echo "Build.QueuedById: $(Build.QueuedById)"
      echo "Build.Reason: $(Build.Reason)"
      echo "Build.Repository.Clean: $(Build.Repository.Clean)"
      echo "Build.Repository.LocalPath: $(Build.Repository.LocalPath)"
      echo "Build.Repository.ID: $(Build.Repository.ID)"
      echo "Build.Repository.Name: $(Build.Repository.Name)"
      echo "Build.Repository.Provider: $(Build.Repository.Provider)"
      echo "Build.Repository.Tfvc.Workspace: $(Build.Repository.Tfvc.Workspace)"
      echo "Build.Repository.Uri: $(Build.Repository.Uri)"
      echo "Build.RequestedFor: $(Build.RequestedFor)"
      echo "Build.RequestedForEmail: $(Build.RequestedForEmail)"
      echo "Build.RequestedForId: $(Build.RequestedForId)"
      echo "Build.SourceBranch: $(Build.SourceBranch)"
      echo "Build.SourceBranchName: $(Build.SourceBranchName)"
      echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
      echo "Build.SourceVersion: $(Build.SourceVersion)"
      echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
      echo "Build.StagingDirectory: $(Build.StagingDirectory)"
      echo "Build.Repository.Git.SubmoduleCheckout: $(Build.Repository.Git.SubmoduleCheckout)"
      echo "Build.SourceTfvcShelveset: $(Build.SourceTfvcShelveset)"
      echo "Build.TriggeredBy.BuildId: $(Build.TriggeredBy.BuildId)"
      echo "Build.TriggeredBy.DefinitionId: $(Build.TriggeredBy.DefinitionId)"
      echo "Build.TriggeredBy.DefinitionName: $(Build.TriggeredBy.DefinitionName)"
      echo "Build.TriggeredBy.BuildNumber: $(Build.TriggeredBy.BuildNumber)"
      echo "Build.TriggeredBy.ProjectID: $(Build.TriggeredBy.ProjectID)"
      echo "Common.TestResultsDirectory: $(Common.TestResultsDirectory)"
      echo "Pipeline.Workspace: $(Pipeline.Workspace)"
      echo "Environment.Name: $(Environment.Name)"
      echo "Environment.Id: $(Environment.Id)"
      echo "Environment.ResourceName: $(Environment.ResourceName)"
      echo "Environment.ResourceId: $(Environment.ResourceId)"
      echo "Strategy.Name: $(Strategy.Name)"
      echo "Strategy.CycleName: $(Strategy.CycleName)"
      echo "System.AccessToken: $(System.AccessToken)"
      echo "System.CollectionId: $(System.CollectionId)"
      echo "System.CollectionUri: $(System.CollectionUri)"
      echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
      echo "System.DefinitionId: $(System.DefinitionId)"
      echo "System.HostType: $(System.HostType)"
      echo "System.JobAttempt: $(System.JobAttempt)"
      echo "System.JobDisplayName: $(System.JobDisplayName)"
      echo "System.JobId: $(System.JobId)"
      echo "System.JobName: $(System.JobName)"
      echo "System.PhaseAttempt: $(System.PhaseAttempt)"
      echo "System.PhaseDisplayName: $(System.PhaseDisplayName)"
      echo "System.PhaseName: $(System.PhaseName)"
      echo "System.PlanId: $(System.PlanId)"
      echo "System.PullRequest.IsFork: $(System.PullRequest.IsFork)"
      echo "System.PullRequest.PullRequestId: $(System.PullRequest.PullRequestId)"
      echo "System.PullRequest.PullRequestNumber: $(System.PullRequest.PullRequestNumber)"
      echo "System.PullRequest.targetBranchName: $(System.PullRequest.targetBranchName)"
      echo "System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)"
      echo "System.PullRequest.SourceCommitId: $(System.PullRequest.SourceCommitId)"
      echo "System.PullRequest.SourceRepositoryURI: $(System.PullRequest.SourceRepositoryURI)"
      echo "System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)"
      echo "System.StageAttempt: $(System.StageAttempt)"
      echo "System.StageDisplayName: $(System.StageDisplayName)"
      echo "System.StageName: $(System.StageName)"
      echo "System.TeamFoundationCollectionUri: $(System.TeamFoundationCollectionUri)"
      echo "System.TeamProject: $(System.TeamProject)"
      echo "System.TeamProjectId: $(System.TeamProjectId)"
      echo "System.TimelineId: $(System.TimelineId)"
      echo "TF_BUILD: $(TF_BUILD)"
      echo "Checks.StageAttempt: $(Checks.StageAttempt)"

      p="_${{parameters.name}}"
      a="_$(System.JobAttempt)"
      if [ "$p" == "_m1" ]; then
          ./build.sh $p $a || ./build.sh $p $a || ./build.sh $p $a || ./build.sh $p $a
      else
          ./build.sh $p $a
      fi
    displayName: 'Build'
    env:
      DAML_SDK_RELEASE_VERSION: ${{parameters.release_tag}}
      DAML_SCALA_VERSION: ${{parameters.scala_version}}
      ARTIFACTORY_USERNAME: $(ARTIFACTORY_USERNAME)
      ARTIFACTORY_PASSWORD: $(ARTIFACTORY_PASSWORD)
    condition: and(succeeded(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))

  # Do not publish dar from m1
  - ${{ if ne(parameters.name, 'm1') }}:
    - template: publish-platform-independence-dar.yml
      parameters:
        platform: '${{parameters.name}}'
        is_release: '${{parameters.is_release}}'

  - bash: |
      set -euo pipefail
      cd '$(Build.StagingDirectory)/logs'
      find . -type f | xargs gzip -9
      cd -
      cd bazel-testlogs
      find . -type f | xargs gzip -9

    displayName: compress logs
    condition: and(succeededOrFailed(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))

  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))
    continueOnError: true
    inputs:
      pathtoPublish: '$(Build.StagingDirectory)/logs'
      artifactName: 'Bazel Logs'

  - task: PublishBuildArtifacts@1
    condition: and(failed(),
                   or(eq(${{parameters.is_release}}, 'false'),
                      ne('${{parameters.name}}', 'm1')))
    displayName: 'Publish the bazel test logs'
    inputs:
      pathtoPublish: 'bazel-testlogs/'
      artifactName: 'Test logs ${{parameters.name}}'

  - bash: |
      set -euo pipefail
      eval "$(./dev-env/bin/dade-assist)"
      ./bazel-bin/release/release --release-dir "$(mktemp -d)" --upload
    env:
      DAML_SDK_RELEASE_VERSION: ${{parameters.release_tag}}
      DAML_SCALA_VERSION: ${{parameters.scala_version}}
      GPG_KEY: $(gpg-code-signing)
      MAVEN_USERNAME: $(MAVEN_USERNAME)
      MAVEN_PASSWORD: $(MAVEN_PASSWORD)
      MAVEN_URL: "https://s01.oss.sonatype.org"
      NPM_TOKEN: $(NPM_TOKEN)
    name: publish_npm_mvn
    condition: and(succeeded(),
                   eq(${{parameters.is_release}}, 'true'),
                   eq('${{parameters.scala_version}}', ''),
                   eq(variables['Build.SourceBranchName'], 'main'),
                   in('${{parameters.name}}', 'linux', 'linux-scala-2.12'))
  - template: bash-lib.yml
    parameters:
      var_name: bash-lib
      condition: and(succeeded(),
                     or(eq(${{parameters.is_release}}, 'false'),
                        ne('${{parameters.name}}', 'm1')))
  - bash: |
      set -euo pipefail
      eval "$(./dev-env/bin/dade-assist)"
      mkdir -p $(Build.StagingDirectory)/release
      ./ci/copy-unix-release-artifacts.sh ${{parameters.release_tag}} ${{parameters.name}} $(Build.StagingDirectory)/release
    env:
      DAML_SDK_RELEASE_VERSION: ${{parameters.release_tag}}
    name: publish
    condition: and(succeeded(),
                   ne('${{parameters.name}}', 'm1'),
                   eq(${{parameters.is_release}}, 'true'),
                   eq(variables['Build.SourceBranchName'], 'main'))
  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.StagingDirectory)/release
      artifactName: ${{parameters.name}}-release
    condition: and(succeeded(),
                   ne('${{parameters.name}}', 'm1'),
                   eq(${{parameters.is_release}}, 'true'),
                   eq(variables['Build.SourceBranchName'], 'main'))
