parameters:
  name: ''

steps:
  - checkout: self
    persistCredentials: true

  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

  - bash: ./fmt.sh --test
    displayName: 'Platform-agnostic lints and checks'
    condition: eq(variables['Agent.OS'], 'Linux')

  - bash: ci/configure-bazel.sh
    displayName: 'Configure Bazel'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)

  - bash: ./build.sh "_$(uname)"
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Bazel execution logs'

  - bash: ci/release.sh
    displayName: 'Release'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to connect to bintray
      JFROG_CONFIG_CONTENT: $(JFROG_CONFIG_CONTENT)
  - bash: |
      set -euxo pipefail
      git tag v$(release_tag)
      git push origin v$(release_tag)
      cp bazel-genfiles/release/sdk-release-tarball.tar.gz ./daml-sdk-$(release_tag)-${{ parameters.name }}.tar.gz
    condition: eq(variables['has_released'], 'true')
  - task: GitHubRelease@0
    condition: eq(variables['has_released'], 'true')
    inputs:
      gitHubConnection: 'garyverhaegen-da'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      assets: './daml-sdk-$(release_tag)-${{ parameters.name }}.tar.gz'
      assetUploadMode: 'replace'
      addChangeLog: false
      isDraft: true
  - bash: |
      rm ./daml-sdk-$(release_tag)-${{ parameters.name }}.tar.gz
    condition: eq(variables['has_released'], 'true')
