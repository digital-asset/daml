parameters:
  name: ''

steps:
  - checkout: self

  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

  - bash: ./fmt.sh --test
    displayName: 'Platform-agnostic lints and checks'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - bash: ci/configure-bazel.sh
    displayName: 'Configure Bazel'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)

  - bash: ./build.sh "_$(uname)"
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish the bazel execution logs'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Execution logs'

  - task: PublishBuildArtifacts@1
    condition: failed()
    displayName: 'Publish the bazel test logs'
    inputs:
      pathtoPublish: 'bazel-testlogs/'
      artifactName: 'Test logs'

  - bash: |
      set -euxo pipefail
      eval "$($(dirname "$0")/dev-env/bin/dade-assist)"
      bash <(curl -s https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect) ci-build digitalasset_daml local-bh-npm --logging.level.com.synopsys.integration=DEBUG --detect.npm.include.dev.dependencies=true --detect.yarn.prod.only=false  --detect.tools=DETECTOR --detect.included.detector.types=NPM,YARN --detect.detector.search.exclusion.paths=language-support/ts/codegen/tests/ts,language-support/ts/daml-types,language-support/ts/daml-react,language-support/ts/daml-ledger
    displayName: 'Blackduck Scan'
    env:
      BLACKDUCK_HUBDETECT_TOKEN: $(BLACKDUCK_HUBDETECT_TOKEN)

  # - bash: ci/release.sh
  #   displayName: 'Release'
  #   condition: and(succeeded(),
  #                  eq(variables['System.PullRequest.IsFork'], 'False'))
  #   env:
  #     # to connect to bintray
  #     JFROG_CONFIG_CONTENT: $(JFROG_CONFIG_CONTENT)
  #     # For signing artifacts to be uploaded to Maven Central.
  #     GPG_KEY: $(gpg-code-signing)
  #     # Configuration the Sonatype Open Source Repository Hosting
  #     MAVEN_USERNAME: $(MAVEN_USERNAME)
  #     MAVEN_PASSWORD: $(MAVEN_PASSWORD)
  #     MAVEN_URL: "https://oss.sonatype.org"
  #   name: release
  # - bash: |
  #     set -euo pipefail
  #     ARTIFACT=daml-sdk-$(release_tag)-${{ parameters.name }}.tar.gz
  #     cp bazel-genfiles/release/sdk-release-tarball.tar.gz $(Build.StagingDirectory)/$ARTIFACT
  #     echo "##vso[task.setvariable variable=artifact;isOutput=true]$ARTIFACT"
  #   name: publish
  #   condition: eq(variables['release.has_released'], 'true')
  # - task: PublishPipelineArtifact@0
  #   condition: eq(variables['release.has_released'], 'true')
  #   inputs:
  #     targetPath: $(Build.StagingDirectory)/$(publish.artifact)
  #     artifactName: $(publish.artifact)
