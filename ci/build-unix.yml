parameters:
  name: ''

steps:
  - checkout: self
  - bash: |
       set -euo pipefail
       if [[ ! -e /nix ]]; then
         echo "Installing Nix"
         sudo mkdir -m 0755 /nix
         sudo chown "$(id -u):$(id -g)" /nix
         # 2.2.2 seems to segfault on MacOS in CI so for now we use 2.2.1.
         curl -sfL https://nixos.org/releases/nix/nix-2.2.1/install | bash
       fi
       source dev-env/lib/ensure-nix

       export NIX_CONF_DIR=$PWD/dev-env/etc
       CACHE_KEY="$(nix-instantiate --quiet nix -A tools -A cached)"
       # Strip newlines and spaces to avoid Azure interpreting it as files.
       CACHE_KEY="$(echo $CACHE_KEY | sed 's/\s//g')"
       echo "##vso[task.setvariable variable=CACHE_KEY]$CACHE_KEY"

  - task: CacheBeta@0
    inputs:
      key: $(CACHE_KEY)
      path: /nix/store
    displayName: Cache nix store

  - bash: ci/dev-env-install.sh
    displayName: 'Build/Install the Developer Environment'

  - bash: |
      source dev-env/lib/ensure-nix
      ci/dev-env-push.py
    displayName: 'Push Developer Environment build results'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    env:
      # to upload to the Nix cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
      NIX_SECRET_KEY_CONTENT: $(NIX_SECRET_KEY_CONTENT)

  - bash: ./fmt.sh --test
    displayName: 'Platform-agnostic lints and checks'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - bash: ci/configure-bazel.sh
    displayName: 'Configure Bazel'
    env:
      IS_FORK: $(System.PullRequest.IsFork)
      # to upload to the bazel cache
      GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)

  - bash: ./build.sh "_$(uname)"
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish the bazel execution logs'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Execution logs'

  - task: PublishBuildArtifacts@1
    condition: failed()
    displayName: 'Publish the bazel test logs'
    inputs:
      pathtoPublish: 'bazel-testlogs/'
      artifactName: 'Test logs'

  - bash: ci/release.sh
    displayName: 'Release'
    condition: and(succeeded(),
                   eq(variables['System.PullRequest.IsFork'], 'False'))
    env:
      # to connect to bintray
      JFROG_CONFIG_CONTENT: $(JFROG_CONFIG_CONTENT)
      # For signing artifacts to be uploaded to Maven Central.
      GPG_KEY: $(gpg-code-signing)
      # Configuration the Sonatype Open Source Repository Hosting
      MAVEN_USERNAME: $(MAVEN_USERNAME)
      MAVEN_PASSWORD: $(MAVEN_PASSWORD)
      MAVEN_URL: "https://oss.sonatype.org"
    name: release
  - bash: |
      set -euo pipefail
      ARTIFACT=daml-sdk-$(release_tag)-${{ parameters.name }}.tar.gz
      cp bazel-genfiles/release/sdk-release-tarball.tar.gz $(Build.StagingDirectory)/$ARTIFACT
      echo "##vso[task.setvariable variable=artifact;isOutput=true]$ARTIFACT"
    name: publish
    condition: eq(variables['release.has_released'], 'true')
  - task: PublishPipelineArtifact@0
    condition: eq(variables['release.has_released'], 'true')
    inputs:
      targetPath: $(Build.StagingDirectory)/$(publish.artifact)
      artifactName: $(publish.artifact)
