# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//language-support/scala/codegen:codegen.bzl",
    "dar_to_scala",
)
load(
    "//language-support/java/codegen:codegen.bzl",
    "dar_to_java",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_version_configuration",
    "version_in",
)
load("//ledger-test-tool:conformance.bzl", "testtool_lf_versions")
load("//test-common:test-common.bzl", "da_scala_dar_resources_library")
load("//test-common:test-common.bzl", "merge_test_dars_versioned")
load("//rules_daml:daml.bzl", "daml_compile")
load("//daml-lf/language:daml-lf.bzl", "mangle_for_java")

alias(
    name = "dar-files",
    actual = "dar-files-default",
    visibility = ["//visibility:public"],
)

[
    [
        # alias model-tests-KEYWORD.dar, dar-files-KEYWORD, and dar-files-KEYWORD-lib
        # to model-tests-TAG.dar, dar-files-TAG, dar-files-TAG-lib, and test-common-TAG
        # where : KEYWORD is a keyword like default, latest, or dev
        #         TAG is a (java friendly) version TAG like 1_8
        #         The mapping KEYWORD -> TAG is defined by test_common_configurations
        alias(
            name = "%s-%s%s" % (target_prefix, name, target_suffix),
            actual = ":%s-%s%s" % (target_prefix, lf_version, target_suffix),
            visibility = ["//visibility:public"],
        ),
    ]
    for (target_prefix, target_suffix) in [
        ("benchtool-tests", ".dar"),
        ("model-tests", ".dar"),
        ("dar-files", ""),
        ("dar-files", "-lib"),
    ]
    for (name, lf_version) in lf_version_configuration.items()
]

# Carbon tests helps to test upgrades when packages are dependent on each other
carbon_test_dars = {
    "carbonv1": [],
    "carbonv2": [],  #carbonv2 depends on carbon v1
    "carbonv3": [],  #carbonv3 depends on carbon v2
    "modelext": [],  #modelext depends on model
}

general_test_dars = {
    "benchtool": [],
    "model": [],
    "semantic": [],
    "performance": [],
    "package_management": [],
}

upgrading_test_dars = {"upgrade": [
    "1.0.0",
    "2.0.0",
    "3.0.0",
]}

test_dars = merge_test_dars_versioned(
    carbon_test_dars = carbon_test_dars,
    carbon_test_dars_v1_minor_version_range = ("15", "dev"),
    carbon_test_dars_v2_minor_version_range = ("0", "dev"),
    general_test_dars = general_test_dars,
    lf_versions = testtool_lf_versions,
    upgrading_test_dars = upgrading_test_dars,
    upgrading_test_dars_v1_minor_version_range = ("16", "dev"),
    upgrading_test_dars_v2_minor_version_range = ("0", "dev"),
)

da_scala_dar_resources_library(
    add_maven_tag = True,
    daml_root_dir = "src/main/daml",
    data_dependencies = {
        "carbonv2": ["//test-common:carbonv1-tests-%s.build"],
        "carbonv3": ["//test-common:carbonv2-tests-%s.build"],
        "modelext": ["//test-common:model-tests-%s.build"],
    },
    exclusions = {
        "1.8": [
            "**/*Exception*.daml",
            "**/*Interface*daml",
            "**/Limits.daml",
            "**/Foo.daml",
        ],
        "1.14": [
            "**/*Interface*daml",
        ],
    },
    lf_versions = testtool_lf_versions,
    maven_name_prefix = "test",
    test_dars = test_dars,
    visibility = ["//visibility:public"],
)

[
    [
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "MissingModule",
        "MissingTemplate",
        "MissingDataCon",
        "MissingChoice",
        "RecordFieldsNewNonOptional",
        "TemplateChangedKeyType",
        "ValidUpgrade",

        # Ported from DamlcUpgrades.hs
        "FailsWhenExistingFieldInTemplateChoiceIsChanged",
        "FailsWhenExistingFieldInTemplateIsChanged",
        "FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType",
        "FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType",
        "FailsWhenOldFieldIsDeletedFromTemplate",
        "FailsWhenOldFieldIsDeletedFromTemplateChoice",
        "FailsWhenTemplateAddsKeyType",
        "FailsWhenTemplateChangesKeyType",
        "FailsWhenTemplateChoiceChangesItsReturnType",
        "FailsWhenTemplateRemovesKeyType",
        "SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate",
        "SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice",
        "SucceedsWhenTemplateChoiceInputArgumentHasChanged",
        "SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged",

        # More tests ported from DamlcUpgrades.hs
        "FailsWhenATopLevelEnumChanges",
        "FailsWhenATopLevelRecordAddsANonOptionalField",
        "FailsWhenATopLevelRecordAddsAnOptionalFieldBeforeTheEnd",
        "FailsWhenATopLevelVariantAddsAFieldToAVariantsType",
        "FailsWhenATopLevelVariantAddsAnOptionalFieldToAVariantsType",
        "FailsWhenATopLevelVariantAddsAVariant",
        "FailsWhenATopLevelVariantRemovesAVariant",
        "FailsWhenTwoDeeplyNestedTypeSynonymsResolveToDifferentDatatypes",
        "SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd",
        "SucceedsWhenATopLevelTypeSynonymChanges",
        "SucceedsWhenTwoDeeplyNestedTypeSynonymsResolveToTheSameDatatypes",

        # More more tests ported from DamlcUpgrades.hs
        "FailWhenATopLevelEnumChangesChangesTheOrderOfItsVariants",
        "FailWhenATopLevelVariantChangesChangesTheOrderOfItsVariants",
    ]
]

[
    [
        daml_compile(
            name = "upgrades-{}-v1a".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1a/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1b".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1b/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "CommonVersionFailure",
    ]
]

[
    [
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v3".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v3/*.daml".format(identifier)]),
            dependencies = ["//daml-script/daml:daml-script-1.dev.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "3.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "SuccessUpgradingV2ThenV3",
        "SuccessUpgradingV3ThenV2",
        "FailsWhenUpgradingV2ThenV3",
        "FailsWhenUpgradingV3ThenV2",
    ]
]

[
    [
        [
            dar_to_java(
                name = "%s-tests-%s.java-codegen" % (test_name, target),
                src = ":%s-tests-%s.dar" % (test_name, target),
                package_prefix = "com.daml.ledger.test.java.%s" % test_name,
                tags = ["maven_coordinates=com.daml:test-common-%s-tests-java-%s:__VERSION__" % (
                    test_name.replace("_", "-"),
                    target,
                )],
                visibility = ["//visibility:public"],
            ),
        ]
        for test_name in test_dars.get(target, []).keys()
        if not test_dars[target][test_name]
    ]
    for target in testtool_lf_versions
]

[
    [
        [
            [
                dar_to_java(
                    name = "%s-tests-%s-%s.java-codegen" % (test_name, package_version, target),
                    src = ":%s-tests-%s-%s.dar" % (test_name, package_version, target),
                    package_prefix = "com.daml.ledger.test.java.%s.v%s" % (
                        test_name,
                        mangle_for_java(package_version),
                    ),
                    tags = ["maven_coordinates=com.daml:test-common-%s-tests-java-%s-%s:__VERSION__" % (
                        test_name.replace("_", "-"),
                        package_version,
                        target,
                    )],
                    visibility = ["//visibility:public"],
                ),
            ]
            for package_version in test_dars[target][test_name]
        ]
        for test_name in test_dars.get(target, []).keys()
    ]
    for target in testtool_lf_versions
]
