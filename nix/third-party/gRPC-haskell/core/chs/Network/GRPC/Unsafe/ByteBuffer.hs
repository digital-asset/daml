-- GENERATED by C->Haskell Compiler, version 0.28.6 Switcheroo, 25 November 2017 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}
{-# LANGUAGE StandaloneDeriving #-}

module Network.GRPC.Unsafe.ByteBuffer where
import qualified Foreign.C.Types as C2HSImp
import qualified Foreign.Ptr as C2HSImp










import Network.GRPC.Unsafe.Slice
{-# LINE 12 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}

import Network.GRPC.Unsafe.ChannelArgs
{-# LINE 13 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}

import Control.Exception (bracket)
import qualified Data.ByteString as B
import Foreign.Ptr
import Foreign.C.Types
import Foreign.Storable

-- | Represents a pointer to a gRPC byte buffer containing 1 or more 'Slice's.
-- Must be destroyed manually with 'grpcByteBufferDestroy'.
newtype ByteBuffer = ByteBuffer (C2HSImp.Ptr (ByteBuffer))
{-# LINE 22 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


deriving instance Show ByteBuffer

--Trivial Storable instance because 'ByteBuffer' type is a pointer.
instance Storable ByteBuffer where
  sizeOf (ByteBuffer r) = sizeOf r
  alignment (ByteBuffer r) = alignment r
  peek p = fmap ByteBuffer (peek (castPtr p))
  poke p (ByteBuffer r) = poke (castPtr p) r

--TODO: When I switched this to a ForeignPtr with a finalizer, I got errors
--about freeing un-malloced memory. Calling the same destroy function by hand
--works fine in the same code, though. Until I find a workaround, going to free
--everything by hand.

-- | Represents a pointer to a ByteBufferReader. Must be destroyed manually with
-- 'byteBufferReaderDestroy'.
newtype ByteBufferReader = ByteBufferReader (C2HSImp.Ptr (ByteBufferReader))
{-# LINE 40 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


-- | Creates a pointer to a 'ByteBuffer'. This is used to receive data when
-- creating a GRPC_OP_RECV_MESSAGE op.
createReceivingByteBuffer :: IO ((Ptr ByteBuffer))
createReceivingByteBuffer =
  createReceivingByteBuffer'_ >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 44 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


destroyReceivingByteBuffer :: (Ptr ByteBuffer) -> IO ()
destroyReceivingByteBuffer a1 =
  let {a1' = id a1} in 
  destroyReceivingByteBuffer'_ a1' >>
  return ()

{-# LINE 46 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


withByteBufferPtr :: (Ptr ByteBuffer -> IO a) -> IO a
withByteBufferPtr
  = bracket createReceivingByteBuffer destroyReceivingByteBuffer

-- | Takes an array of slices and the length of the array and returns a
-- 'ByteBuffer'.
grpcRawByteBufferCreate :: (Slice) -> (CULong) -> IO ((ByteBuffer))
grpcRawByteBufferCreate a1 a2 =
  let {a1' = id a1} in 
  let {a2' = fromIntegral a2} in 
  grpcRawByteBufferCreate'_ a1' a2' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 54 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcRawCompressedByteBufferCreate :: (Slice) -> (CULong) -> (CompressionAlgorithm) -> IO ((ByteBuffer))
grpcRawCompressedByteBufferCreate a1 a2 a3 =
  let {a1' = id a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = (fromIntegral . fromEnum) a3} in 
  grpcRawCompressedByteBufferCreate'_ a1' a2' a3' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 57 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcByteBufferCopy :: (ByteBuffer) -> IO ((ByteBuffer))
grpcByteBufferCopy a1 =
  let {a1' = id a1} in 
  grpcByteBufferCopy'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 59 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcByteBufferLength :: (ByteBuffer) -> IO ((CULong))
grpcByteBufferLength a1 =
  let {a1' = id a1} in 
  grpcByteBufferLength'_ a1' >>= \res ->
  let {res' = fromIntegral res} in
  return (res')

{-# LINE 61 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcByteBufferDestroy :: (ByteBuffer) -> IO ()
grpcByteBufferDestroy a1 =
  let {a1' = id a1} in 
  grpcByteBufferDestroy'_ a1' >>
  return ()

{-# LINE 63 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


byteBufferReaderCreate :: (ByteBuffer) -> IO ((ByteBufferReader))
byteBufferReaderCreate a1 =
  let {a1' = id a1} in 
  byteBufferReaderCreate'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 65 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


byteBufferReaderDestroy :: (ByteBufferReader) -> IO ()
byteBufferReaderDestroy a1 =
  let {a1' = id a1} in 
  byteBufferReaderDestroy'_ a1' >>
  return ()

{-# LINE 67 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcByteBufferReaderNext :: (ByteBufferReader) -> (Slice) -> IO ((CInt))
grpcByteBufferReaderNext a1 a2 =
  let {a1' = id a1} in 
  let {a2' = id a2} in 
  grpcByteBufferReaderNext'_ a1' a2' >>= \res ->
  let {res' = fromIntegral res} in
  return (res')

{-# LINE 70 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


-- | Returns a 'Slice' containing the entire contents of the 'ByteBuffer' being
-- read by the given 'ByteBufferReader'.
grpcByteBufferReaderReadall :: (ByteBufferReader) -> IO ((Slice))
grpcByteBufferReaderReadall a1 =
  let {a1' = id a1} in 
  grpcByteBufferReaderReadall'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 74 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


grpcRawByteBufferFromReader :: (ByteBufferReader) -> IO ((ByteBuffer))
grpcRawByteBufferFromReader a1 =
  let {a1' = id a1} in 
  grpcRawByteBufferFromReader'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 77 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/ByteBuffer.chs" #-}


withByteStringAsByteBuffer :: B.ByteString -> (ByteBuffer -> IO a) -> IO a
withByteStringAsByteBuffer bs f = do
  bracket (byteStringToSlice bs) freeSlice $ \slice -> do
    bracket (grpcRawByteBufferCreate slice 1) grpcByteBufferDestroy f

-- Creates a 'ByteBuffer'. We also return the slice we needed to allocate to
-- create it. It is the caller's responsibility to free both when finished using
-- the byte buffer. In most cases, one should prefer to use
-- 'withByteStringAsByteBuffer' if possible.
createByteBuffer :: B.ByteString -> IO (ByteBuffer, Slice)
createByteBuffer bs = do
  slice <- byteStringToSlice bs
  bb <- grpcRawByteBufferCreate slice 1
  return (bb, slice)

copyByteBufferToByteString :: ByteBuffer -> IO B.ByteString
copyByteBufferToByteString bb = do
  bracket (byteBufferReaderCreate bb) byteBufferReaderDestroy $ \bbr -> do
    bracket (grpcByteBufferReaderReadall bbr) freeSlice sliceToByteString

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h create_receiving_byte_buffer"
  createReceivingByteBuffer'_ :: (IO (C2HSImp.Ptr (ByteBuffer)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h destroy_receiving_byte_buffer"
  destroyReceivingByteBuffer'_ :: ((C2HSImp.Ptr (ByteBuffer)) -> (IO ()))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_raw_byte_buffer_create"
  grpcRawByteBufferCreate'_ :: ((Slice) -> (C2HSImp.CULong -> (IO (ByteBuffer))))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_raw_compressed_byte_buffer_create"
  grpcRawCompressedByteBufferCreate'_ :: ((Slice) -> (C2HSImp.CULong -> (C2HSImp.CInt -> (IO (ByteBuffer)))))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_byte_buffer_copy"
  grpcByteBufferCopy'_ :: ((ByteBuffer) -> (IO (ByteBuffer)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_byte_buffer_length"
  grpcByteBufferLength'_ :: ((ByteBuffer) -> (IO C2HSImp.CULong))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_byte_buffer_destroy"
  grpcByteBufferDestroy'_ :: ((ByteBuffer) -> (IO ()))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h byte_buffer_reader_create"
  byteBufferReaderCreate'_ :: ((ByteBuffer) -> (IO (ByteBufferReader)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h byte_buffer_reader_destroy"
  byteBufferReaderDestroy'_ :: ((ByteBufferReader) -> (IO ()))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_byte_buffer_reader_next"
  grpcByteBufferReaderNext'_ :: ((ByteBufferReader) -> ((Slice) -> (IO C2HSImp.CInt)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_byte_buffer_reader_readall_"
  grpcByteBufferReaderReadall'_ :: ((ByteBufferReader) -> (IO (Slice)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_ByteBuffer.chs/Network/GRPC/Unsafe/ByteBuffer.chs.h grpc_raw_byte_buffer_from_reader"
  grpcRawByteBufferFromReader'_ :: ((ByteBufferReader) -> (IO (ByteBuffer)))
