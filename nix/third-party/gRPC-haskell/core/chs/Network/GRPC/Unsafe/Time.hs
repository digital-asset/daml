-- GENERATED by C->Haskell Compiler, version 0.28.6 Switcheroo, 25 November 2017 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}
module Network.GRPC.Unsafe.Time where
import qualified Foreign.C.Types as C2HSImp
import qualified Foreign.Ptr as C2HSImp
import qualified Foreign.Storable as C2HSImp



import Control.Exception (bracket)
import Control.Monad
import Foreign.Storable
import System.Clock





{-# LINE 11 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


newtype CTimeSpec = CTimeSpec { timeSpec :: TimeSpec }
  deriving (Eq, Show)

instance Storable CTimeSpec where
  sizeOf _ = 16
{-# LINE 17 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}

  alignment _ = 8
{-# LINE 18 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}

  peek p = fmap CTimeSpec $ TimeSpec
    <$> liftM fromIntegral ((\ptr -> do {C2HSImp.peekByteOff ptr 0 :: IO C2HSImp.CLong}) p)
    <*> liftM fromIntegral ((\ptr -> do {C2HSImp.peekByteOff ptr 8 :: IO C2HSImp.CInt}) p)
  poke p x = do
    (\ptr val -> do {C2HSImp.pokeByteOff ptr 0 (val :: C2HSImp.CLong)}) p (fromIntegral $ sec $ timeSpec x)
    (\ptr val -> do {C2HSImp.pokeByteOff ptr 8 (val :: C2HSImp.CInt)}) p (fromIntegral $ nsec $ timeSpec x)

data ClockType = GprClockMonotonic
               | GprClockRealtime
               | GprClockPrecise
               | GprTimespan
  deriving (Eq)
instance Enum ClockType where
  succ GprClockMonotonic = GprClockRealtime
  succ GprClockRealtime = GprClockPrecise
  succ GprClockPrecise = GprTimespan
  succ GprTimespan = error "ClockType.succ: GprTimespan has no successor"

  pred GprClockRealtime = GprClockMonotonic
  pred GprClockPrecise = GprClockRealtime
  pred GprTimespan = GprClockPrecise
  pred GprClockMonotonic = error "ClockType.pred: GprClockMonotonic has no predecessor"

  enumFromTo from to = go from
    where
      end = fromEnum to
      go v = case compare (fromEnum v) end of
                 LT -> v : go (succ v)
                 EQ -> [v]
                 GT -> []

  enumFrom from = enumFromTo from GprTimespan

  fromEnum GprClockMonotonic = 0
  fromEnum GprClockRealtime = 1
  fromEnum GprClockPrecise = 2
  fromEnum GprTimespan = 3

  toEnum 0 = GprClockMonotonic
  toEnum 1 = GprClockRealtime
  toEnum 2 = GprClockPrecise
  toEnum 3 = GprTimespan
  toEnum unmatched = error ("ClockType.toEnum: Cannot match " ++ show unmatched)

{-# LINE 26 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


-- | A pointer to a CTimeSpec. Must be destroyed manually with
-- 'timespecDestroy'.
type CTimeSpecPtr = C2HSImp.Ptr (CTimeSpec)
{-# LINE 30 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


timespecDestroy :: (CTimeSpecPtr) -> IO ()
timespecDestroy a1 =
  let {a1' = id a1} in 
  timespecDestroy'_ a1' >>
  return ()

{-# LINE 32 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


gprInfFuture :: (ClockType) -> IO ((CTimeSpecPtr))
gprInfFuture a1 =
  let {a1' = (fromIntegral . fromEnum) a1} in 
  gprInfFuture'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 34 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


-- | Get the current time for the given 'ClockType'. Warning: 'GprTimespan' will
-- cause a crash. Probably only need to use GprClockMonotonic, which returns 0.
gprNow :: (ClockType) -> IO ((CTimeSpecPtr))
gprNow a1 =
  let {a1' = (fromIntegral . fromEnum) a1} in 
  gprNow'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 38 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


gprTimeToMillis :: (CTimeSpecPtr) -> IO ((Int))
gprTimeToMillis a1 =
  let {a1' = id a1} in 
  gprTimeToMillis'_ a1' >>= \res ->
  let {res' = fromIntegral res} in
  return (res')

{-# LINE 40 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


-- | Returns a GprClockMonotonic representing a deadline n seconds in the
-- future.
secondsToDeadline :: (Int) -> IO ((CTimeSpecPtr))
secondsToDeadline a1 =
  let {a1' = fromIntegral a1} in 
  secondsToDeadline'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 44 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


withDeadlineSeconds :: Int -> (CTimeSpecPtr -> IO a) -> IO a
withDeadlineSeconds i = bracket (secondsToDeadline i) timespecDestroy

-- | Returns a GprClockMonotonic representing a deadline n milliseconds
-- in the future.
millisToDeadline :: (Int) -> IO ((CTimeSpecPtr))
millisToDeadline a1 =
  let {a1' = fromIntegral a1} in 
  millisToDeadline'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 51 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


-- | Returns a GprClockMonotonic representing an infinitely distant deadline.
-- wraps gpr_inf_future in the gRPC library.
infiniteDeadline :: IO ((CTimeSpecPtr))
infiniteDeadline =
  infiniteDeadline'_ >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 55 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


withInfiniteDeadline :: (CTimeSpecPtr -> IO a) -> IO a
withInfiniteDeadline = bracket infiniteDeadline timespecDestroy

convertClockType :: (CTimeSpecPtr) -> (ClockType) -> IO ((CTimeSpecPtr))
convertClockType a1 a2 =
  let {a1' = id a1} in 
  let {a2' = (fromIntegral . fromEnum) a2} in 
  convertClockType'_ a1' a2' >>= \res ->
  let {res' = id res} in
  return (res')

{-# LINE 60 "nix/third-party/gRPC-haskell/core/src/Network/GRPC/Unsafe/Time.chs" #-}


withConvertedClockType :: CTimeSpecPtr -> ClockType
                          -> (CTimeSpecPtr -> IO a)
                          -> IO a
withConvertedClockType cptr ctype = bracket (convertClockType cptr ctype)
                                            timespecDestroy

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h timespec_destroy"
  timespecDestroy'_ :: ((CTimeSpecPtr) -> (IO ()))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h gpr_inf_future_"
  gprInfFuture'_ :: (C2HSImp.CInt -> (IO (CTimeSpecPtr)))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h gpr_now_"
  gprNow'_ :: (C2HSImp.CInt -> (IO (CTimeSpecPtr)))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h gpr_time_to_millis_"
  gprTimeToMillis'_ :: ((CTimeSpecPtr) -> (IO C2HSImp.CInt))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h seconds_to_deadline"
  secondsToDeadline'_ :: (C2HSImp.CLong -> (IO (CTimeSpecPtr)))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h millis_to_deadline"
  millisToDeadline'_ :: (C2HSImp.CLong -> (IO (CTimeSpecPtr)))

foreign import ccall unsafe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h infinite_deadline"
  infiniteDeadline'_ :: (IO (CTimeSpecPtr))

foreign import ccall safe "bazel-out/k8-fastbuild/bin/nix/third-party/gRPC-haskell/core/chs-src_Network_GRPC_Unsafe_Time.chs/Network/GRPC/Unsafe/Time.chs.h convert_clock_type"
  convertClockType'_ :: ((CTimeSpecPtr) -> (C2HSImp.CInt -> (IO (CTimeSpecPtr))))
