# This file was partly generated. See 3rdparty/haskell/BUILD.network for more
# details.

load("@ai_formation_hazel//third_party/cabal2bazel:bzl/cabal_package.bzl",
        "cabal_haskell_package"
    )

package = (
struct(
  specVersionRaw = None,
  package = struct( pkgName = "network", pkgVersion = "2.8.0.0", ),
  licenseRaw = None,
  licenseFiles = [ "LICENSE", ],
  copyright = "",
  maintainer = "Kazu Yamamoto, Evan Borden",
  author = "",
  stability = "",
  testedWith =
    [ ( "ghc", "==7.8.4", ),
      ( "ghc", "==7.10.3", ),
      ( "ghc", "==8.0.2", ),
      ( "ghc", "==8.2.2", ),
      ( "ghc", "==8.4.3", ),
    ],
  homepage = "https://github.com/haskell/network",
  pkgUrl = "",
  bugReports = "https://github.com/haskell/network/issues",
  sourceRepos =
    [ struct(
        repoKind = "RepoHead",
        repoType = "Git",
        repoLocation = "git://github.com/haskell/network.git",
        repoModule = None,
        repoBranch = None,
        repoTag = None,
        repoSubdir = None,
      ),
    ],
  synopsis = "Low-level networking interface",
  description =
    "This package provides a low-level networking interface.\n\nIn network-2.6 the @Network.URI@ module was split off into its own\npackage, network-uri-2.6. If you're using the @Network.URI@ module\nyou can automatically get it from the right package by adding this\nto your .cabal file:\n\n> library\n>   build-depends: network-uri-flag",
  category = "Network",
  customFieldsPD = [ ],
  buildTypeRaw = "Configure",
  setupBuildInfo = None,
  library =
    struct(
      libName = None,
      exposedModules =
        [ "Network",
          "Network.BSD",
          "Network.Socket",
          "Network.Socket.ByteString",
          "Network.Socket.ByteString.Lazy",
          "Network.Socket.Internal",
        ],
      reexportedModules = [ ],
      signatures = [ ],
      libExposed = True,
      libBuildInfo =
        struct(
          buildable = True,
          buildTools = [ ],
          buildToolDepends = [ ],
          cppOptions = [ ],
          asmOptions = [ ],
          cmmOptions = [ ],
          ccOptions = [ "-D_GNU_SOURCE", "-Dmingw32_HOST_OS", "-Dx86_64_HOST_ARCH" ],
          cxxOptions = [ ],
          ldOptions = [ ],
          pkgconfigDepends = [ ],
          frameworks = [ ],
          extraFrameworkDirs = [ ],
          asmSources = [ ],
          cmmSources = [ ],
          cSources = [ "cbits/ancilData.c", "cbits/HsNet.c", "cbits/initWinSock.c", "cbits/winSockErr.c", "cbits/asyncAccept.c" ],
          cxxSources = [ ],
          jsSources = [ ],
          hsSourceDirs = [ ],
          otherModules =
            [ "Network.Socket.ByteString.Internal",
              "Network.Socket.Types",
            ],
          virtualModules = [ ],
          autogenModules = [ ],
          defaultLanguage = None,
          otherLanguages = [ ],
          defaultExtensions = [ ],
          otherExtensions = [ ],
          oldExtensions =
            [ "CPP",
              "DeriveDataTypeable",
              "ForeignFunctionInterface",
              "TypeSynonymInstances",
            ],
          extraLibs = [ "network-headers" ],
          extraGHCiLibs = [ ],
          extraBundledLibs = [ ],
          extraLibFlavours = [ ],
          extraLibDirs = [ ],
          includeDirs = [ "include", ],
          includes = [ "HsNet.h", "HsNetDef.h", ],
          installIncludes =
            [ "HsNetworkConfig.h", "HsNet.h", "HsNetDef.h", ],
          options =
            [ ( "ghc", [ "-D_GNU_SOURCE", ], ),
              ( "ghc", [ "-Wall", "-fwarn-tabs", ], ),
            ],
          profOptions = [ ( "ghc", [ "-D_GNU_SOURCE", ], ), ],
          sharedOptions = [ ],
          staticOptions = [ ],
          customFieldsBI = [ ],
          targetBuildDepends =
            [ struct( name = "base", version = ">=4.7 && <5", ),
              struct( name = "bytestring", version = "==0.10.*", ),
            ],
          mixins = [ ],
        ),
    ),
  subLibraries = [ ],
  executables = [ ],
  foreignLibs = [ ],
  testSuites =
    [ struct(
        testName = "spec",
        testInterface =
          struct(
            type = "exitcode-stdio-1.0", version = "1.0", mainIs = "Spec.hs",
          ),
        testBuildInfo =
          struct(
            buildable = True,
            buildTools = [ ],
            buildToolDepends = [ ],
            cppOptions = [ ],
            asmOptions = [ ],
            cmmOptions = [ ],
            ccOptions = [ ],
            cxxOptions = [ ],
            ldOptions = [ ],
            pkgconfigDepends = [ ],
            frameworks = [ ],
            extraFrameworkDirs = [ ],
            asmSources = [ ],
            cmmSources = [ ],
            cSources = [ ],
            cxxSources = [ ],
            jsSources = [ ],
            hsSourceDirs = [ "tests", ],
            otherModules = [ "RegressionSpec", "SimpleSpec", ],
            virtualModules = [ ],
            autogenModules = [ ],
            defaultLanguage = None,
            otherLanguages = [ ],
            defaultExtensions = [ ],
            otherExtensions = [ ],
            oldExtensions = [ ],
            extraLibs = [ ],
            extraGHCiLibs = [ ],
            extraBundledLibs = [ ],
            extraLibFlavours = [ ],
            extraLibDirs = [ ],
            includeDirs = [ ],
            includes = [ ],
            installIncludes = [ ],
            options = [ ( "ghc", [ "-Wall", "-threaded", ], ), ],
            profOptions = [ ],
            sharedOptions = [ ],
            staticOptions = [ ],
            customFieldsBI = [ ],
            targetBuildDepends =
              [ struct( name = "base", version = ">=4.7 && <5", ),
                struct( name = "bytestring", version = "-any", ),
                struct( name = "directory", version = "-any", ),
                struct( name = "HUnit", version = "-any", ),
                struct( name = "network", version = "-any", ),
                struct( name = "hspec", version = "-any", ),
              ],
            mixins = [ ],
          ),
      ),
      struct(
        testName = "doctest",
        testInterface =
          struct(
            type = "exitcode-stdio-1.0",
            version = "1.0",
            mainIs = "doctests.hs",
          ),
        testBuildInfo =
          struct(
            buildable = True,
            buildTools = [ ],
            buildToolDepends = [ ],
            cppOptions = [ ],
            asmOptions = [ ],
            cmmOptions = [ ],
            ccOptions = [ ],
            cxxOptions = [ ],
            ldOptions = [ ],
            pkgconfigDepends = [ ],
            frameworks = [ ],
            extraFrameworkDirs = [ ],
            asmSources = [ ],
            cmmSources = [ ],
            cSources = [ ],
            cxxSources = [ ],
            jsSources = [ ],
            hsSourceDirs = [ "tests", ],
            otherModules = [ ],
            virtualModules = [ ],
            autogenModules = [ ],
            defaultLanguage = None,
            otherLanguages = [ ],
            defaultExtensions = [ ],
            otherExtensions = [ ],
            oldExtensions = [ ],
            extraLibs = [ ],
            extraGHCiLibs = [ ],
            extraBundledLibs = [ ],
            extraLibFlavours = [ ],
            extraLibDirs = [ ],
            includeDirs = [ ],
            includes = [ ],
            installIncludes = [ ],
            options = [ ( "ghc", [ "-Wall", ], ), ],
            profOptions = [ ],
            sharedOptions = [ ],
            staticOptions = [ ],
            customFieldsBI = [ ],
            targetBuildDepends =
              [ struct( name = "base", version = ">=4.7 && <5", ),
                struct( name = "doctest", version = ">=0.10.1", ),
              ],
            mixins = [ ],
          ),
      ),
    ],
  benchmarks = [ ],
  dataFiles = [ ],
  dataDir = "",
  extraSrcFiles =
    [ "README.md",
      "CHANGELOG.md",
      "examples/*.hs",
      "tests/*.hs",
      "config.guess",
      "config.sub",
      "install-sh",
      "configure.ac",
      "configure",
      "network.buildinfo.in",
      "include/HsNetworkConfig.h.in",
      "include/HsNet.h",
      "include/HsNetDef.h",
      "cbits/ancilData.c",
      "cbits/asyncAccept.c",
      "cbits/initWinSock.c",
      "cbits/winSockErr.c",
    ],
  extraTmpFiles =
    [ "config.log",
      "config.status",
      "autom4te.cache",
      "network.buildinfo",
      "include/HsNetworkConfig.h",
    ],
  extraDocFiles = [ ],
)
)

