# Copyright (c) 2019 The DAML Authors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

package(default_visibility = ["//visibility:public"])

load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_binary")
load("@ai_formation_hazel//:hazel.bzl", "hazel_library")

load("@os_info//:os_info.bzl", "is_windows")

depends = [
    hazel_library("aeson"),
    hazel_library("async"),
    hazel_library("base"),
    hazel_library("binary"),
    hazel_library("bytestring"),
    hazel_library("containers"),
    hazel_library("data-default"),
    hazel_library("deepseq"),
    hazel_library("directory"),
    hazel_library("extra"),
    hazel_library("filepath"),
    hazel_library("hashable"),
    hazel_library("haskell-lsp"),
    hazel_library("haskell-lsp-types"),
    hazel_library("lens"),
    hazel_library("mtl"),
    hazel_library("network-uri"),
    hazel_library("prettyprinter"),
    hazel_library("prettyprinter-ansi-terminal"),
    hazel_library("rope-utf16-splay"),
    hazel_library("safe-exceptions"),
    hazel_library("sorted-list"),
    hazel_library("shake"),
    hazel_library("stm"),
    hazel_library("syb"),
    hazel_library("text"),
    hazel_library("time"),
    hazel_library("transformers"),
    hazel_library("unordered-containers"),
    hazel_library("utf8-string"),
] + ([] if is_windows else [hazel_library("unix")])

hidden = [
    "Development.IDE.GHC.CPP",
    "Development.IDE.GHC.Orphans",
    "Development.IDE.Import.FindImports",
    "Development.IDE.LSP.CodeAction",
    "Development.IDE.LSP.Definition",
    "Development.IDE.LSP.Hover",
    "Development.IDE.LSP.Notifications",
    "Development.IDE.Spans.AtPoint",
    "Development.IDE.Spans.Calculate",
    "Development.IDE.Spans.Documentation",
    "Development.IDE.Spans.Type",
]

common_flags = [
   "-XBangPatterns",
   "-XDeriveFunctor",
   "-XDeriveGeneric",
   "-XGeneralizedNewtypeDeriving",
   "-XLambdaCase",
   "-XNamedFieldPuns",
   "-XOverloadedStrings",
   "-XRecordWildCards",
   "-XScopedTypeVariables",
   "-XStandaloneDeriving",
   "-XTupleSections",
   "-XTypeApplications",
   "-XViewPatterns",
   # This is a bit of a hack but it should become unnecessary with the switch to stack_snapshot
   # so there is no point trying to clean it up now.
   "-Iexternal/haskell_ghcide/include",
]

haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs", "include/*.h"]),
    deps = depends + [
        hazel_library("ghc-lib"),
        hazel_library("ghc-lib-parser"),
    ] + ([] if is_windows else [":getmodtime"]),
    compiler_flags = common_flags + ["-DGHC_LIB"],
    hidden_modules = hidden,
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    # We need a version to make sure that the version macros get defined
    version = "0.1.0",
)

haskell_library(
    name = "lib-ghc",
    srcs = glob(["src/**/*.hs", "include/*.h"]),
    deps = depends + [
        hazel_library("ghc"),
        hazel_library("ghc-boot"),
        hazel_library("ghc-boot-th"),
    ] + ([] if is_windows else [":getmodtime"]),
    compiler_flags = common_flags,
    hidden_modules = hidden,
    # Override the -hide-package flags defined in WORKSPACE
    #   -hide-package=ghc-boot-th -hide-package=ghc-boot
    repl_ghci_args = [
        "-package=ghc-boot",
        "-package=ghc-boot-th",
    ],
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    # We need a version to make sure that the version macros get defined
    version = "0.1.0",
)

haskell_library(
    name = "testing",
    srcs = glob(["test/src/**/*.hs"]),
    deps = [
        hazel_library("base"),
        hazel_library("extra"),
        hazel_library("containers"),
        hazel_library("haskell-lsp-types"),
        hazel_library("lens"),
        hazel_library("lsp-test"),
        hazel_library("parser-combinators"),
        hazel_library("tasty-hunit"),
        hazel_library("text"),
    ],
    compiler_flags = [
       "-XBangPatterns",
       "-XDeriveFunctor",
       "-XDeriveGeneric",
       "-XGeneralizedNewtypeDeriving",
       "-XLambdaCase",
       "-XNamedFieldPuns",
       "-XOverloadedStrings",
       "-XRecordWildCards",
       "-XScopedTypeVariables",
       "-XStandaloneDeriving",
       "-XTupleSections",
       "-XTypeApplications",
       "-XViewPatterns",
    ],
    hidden_modules = hidden,
    src_strip_prefix = "test/src",
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "ghcide-exe",
    srcs = glob(["exe/**/*.hs"]),
    compiler_flags = common_flags,
    deps = [
        hazel_library("base"),
        hazel_library("containers"),
        hazel_library("data-default"),
        hazel_library("directory"),
        hazel_library("extra"),
        hazel_library("filepath"),
        hazel_library("ghc-paths"),
        hazel_library("ghc"),
        hazel_library("haskell-lsp"),
        hazel_library("haskell-lsp-types"),
        hazel_library("hie-bios"),
        hazel_library("optparse-applicative"),
        hazel_library("shake"),
        hazel_library("text"),
        ":lib-ghc",
        "ghcide-paths",
    ],
    version = "0.1.0",
    src_strip_prefix = "exe",
    visibility = ["//visibility:public"],
)

# For now, we hack this together manually. This will change
# with stack_snapshot anyway.
haskell_library(
    name = "ghcide-paths",
    srcs = ["@com_github_digital_asset_daml//3rdparty/haskell:Paths_ghcide.hs"],
    compiler_flags = common_flags,
    deps = [
      hazel_library("base")
    ],
    visibility = ["//visibility:public"],
)

# Used in getModificationTimeRule in Development.IDE.Core.FileStore
cc_library(
    name = "getmodtime",
    srcs = glob(["cbits/getmodtime.c"]),
    copts = [
        "-Wall",
        "-Werror",
    ],
) if not is_windows else None
