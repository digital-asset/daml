# Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//rules_daml:daml.bzl", "daml_compile")
load("//bazel_tools:haskell.bzl", "da_haskell_library", "da_haskell_test")
load("@build_environment//:configuration.bzl", "sdk_version")
load("@os_info//:os_info.bzl", "is_linux", "is_windows")

# This rule builds a dar from the daml sources under the 'daml'
# directory. It is referenced from the 'build-and-lint-test' target that
# follows.
daml_compile(
    name = "build-and-lint",
    srcs = glob(["daml/**/*.daml"]),
    version = "1.0.0",
)

# build-and-lint
# ==============
#
# 'build-and-lint.sh' is an integration test. It builds a DAR from
#  some DAML, invokes daml2js on the DAR, uploads the DAR to a ledger
#  and then runs tests on the TypeScript generated by daml2js via a
#  json-api connected to the ledger.
#
#  The main inputs to 'build-and-lint' are:
#     - Bazel artifacts : '@daml/types' and '@daml/ledger' (these are
#       npm packages);
#     - Source artifacts:
#       - 'ts/codegen/tests/daml/*'
#         The DAML that goes into the DAR ('build-and-lint-1.0.0.dar');
#       - 'ts/codegen/tests/ts/*'
#         A yarn workspaces root containing a single TypeScript package
#         'build-and-lint-test' which houses the test driver 'test.ts'.
#
# 'build-and-lint' creates a temp directory ('root' say), and uses the
# above inputs (via filesystem copies, damlc, daml2js and yarn install)
# to produce a filesystem with the following structure:
#
#   root/
#      build-and-lint-test/
#        src/
#          __tests__/
#            test.ts
#      daml2js/
#        build-and-lint-1.0.0/  -- The artifacts generated of 'build-and-lint-1.0.0.dar'
#        057eed/
#        ...
#      package.json  -- Singleton package workspace : build-and-lint-test
#      node_modules/
#        @daml/
#          types/
#          ledger/
#        ...
#
# In more detail, the actions of 'build-and-lint' are to:
#  - Invoke 'daml2js' on 'build-and-lint-1.0.0.dar' to produce bindings
#    (in the 'daml2js' directory);
#  - Invoke from 'root':
#    - 'yarn workspaces run install';
#    - 'yarn workspaces run build';
#    - 'yarn workspaces run lint';
#  - Finally, invoke 'yarn test' from the 'root/build-and-lint' directory.
#
# That last step causes 'build-and-lint/src/__tests__/test.ts' to be executed which:
#  - Spins up a sandbox running the 'build-and-lint-1.0.0.dar';
#  - Spins up a http-json-api connected to the sandbox;
#  - Evaluates assertions of http-json-api specified ledger operations
#    involving contracts defined by the dar;
#  - Gracefully tears down the processes it started when its work is done.
# All in all, a pretty slick bit of work!
sh_test(
    name = "build-and-lint-test",
    size = "large",
    srcs = ["build-and-lint.sh"],
    args = [
        "$(location //:java)",
        "$(location //:yarn)",
        "$(location //:daml2js)",
        "$(location //ledger/sandbox:sandbox-binary_deploy.jar)",
        "$(location //ledger-service/http-json:http-json-binary_deploy.jar)",
        "$(location :build-and-lint.dar)",
        "$(location ts/package.json)",
        "$(location //language-support/ts/daml-types:npm_package)",
        "$(location //language-support/ts/daml-ledger:npm_package)",
        sdk_version,
    ],
    data = [
        "//:java",
        "//:yarn",
        "//:daml2js",
        "//ledger/sandbox:sandbox-binary_deploy.jar",
        "//ledger-service/http-json:http-json-binary_deploy.jar",
        ":build-and-lint.dar",
        "//language-support/ts/daml-types:npm_package",
        "//language-support/ts/daml-ledger:npm_package",
    ] + glob(
        ["ts/**"],
        exclude = [
            "ts/**/node_modules/**",
            "ts/**/lib/**",
        ],
    ),
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
) if not is_windows else None

da_haskell_library(
    name = "daml2js-test-helpers",
    srcs = ["src/DA/Test/Daml2jsUtils.hs"],
    hackage_deps = [
        "aeson",
        "base",
        "bytestring",
        "filepath",
        "hashable",
        "text",
        "unordered-containers",
    ],
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [
        "//libs-haskell/bazel-runfiles",
        "//libs-haskell/da-hs-base",
    ],
)

# daml2js
# =======
#
# This target is a unit-test. It does similar things to 'build-and-test'
# but generates all its inputs as it needs to and stops short of spinning
# up ledgers and/or executing any TypeScript.

da_haskell_test(
    name = "daml2js",
    size = "large",
    srcs = ["src/DA/Test/Daml2js.hs"],
    args = [
        "$(location //:yarn)",
    ],
    data = [
        "//:yarn",
        "//compiler/damlc",
        "//language-support/ts/codegen:daml2js",
        "//language-support/ts/daml-ledger:npm_package",
        "//language-support/ts/daml-types:npm_package",
        "@davl//:released/davl-upgrade-v4-v5.dar",
        "@davl//:released/davl-v4.dar",
        "@davl//:released/davl-v5.dar",
    ],
    hackage_deps = [
        "aeson",
        "base",
        "bytestring",
        "extra",
        "filepath",
        "hashable",
        "process",
        "tasty",
        "tasty-hunit",
        "text",
        "unordered-containers",
    ],
    main_function = "DA.Test.Daml2js.main",
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [
        ":daml2js-test-helpers",
        "//compiler/daml-lf-ast",
        "//libs-haskell/bazel-runfiles",
        "//libs-haskell/da-hs-base",
        "//libs-haskell/test-utils",
    ],
) if not is_windows else None
