# Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "da_scala_test",
    "silencer_plugin",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load("//language-support/scala/codegen:codegen.bzl", "dar_to_scala")
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_dev_version",
    "lf_latest_version",
)

daml_compile(
    name = "MyMain",
    srcs = ["src/main/daml/MyMain.daml"],
    # FIXME https://github.com/digital-asset/daml/issues/2256
    # switch to latest once 1.9 is frozen
    target = lf_dev_version,
)

daml_compile(
    name = "MySecondMain",
    srcs = ["src/main/daml/MySecondMain.daml"],
    target = lf_latest_version,
)

dar_to_scala(
    name = "MyMain-codegen",
    srcs = [
        ":MyMain.dar",
        ":MySecondMain.dar",
        "//daml-lf/encoder:testing-dar-latest",
    ],
    package_prefix = "com.daml.sample",
    srcjar_out = "MyMain.srcjar",
    verbosity = 2,
)

da_scala_library(
    name = "daml-lf-codegen-sample-app",
    srcs = [":MyMain.srcjar"] + glob(["src/main/**/*.scala"]),
    plugins = [
        silencer_plugin,
        "@maven//:org_spire_math_kind_projector_2_12",
    ],
    scalacopts = [
        "-P:silencer:checkUnused",
        # codegen eliminates the vast majority of potential unused warnings. For example,
        # it checks whether tparams are phantom or not and requires evidence only if they
        # are not. It misses the case where a tparam is used in ContractId position, which
        # is essentially phantom for the typeclasses.  The fix requires recurring into
        # referenced types, and only occurs here in this source tree, so I don't consider
        # it worth fixing for now. -SC
        "-P:silencer:lineContentFilters=ContractIdNT (Value|LfEncodable).*?implicit .?ev",
    ],
    visibility = [
        "//visibility:public",
    ],
    exports = [],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        # silencer warns if this is absent, but we don't use it here;
        # buildozer errors if you add it, so silent_annotations can't be used
        # "@maven//:com_github_ghik_silencer_lib_2_12_12",
        "@maven//:org_scalaz_scalaz_core_2_12",
    ],
)

# Sources that do not define test-cases but utilities
# that are used by one or more test-cases.
#
# Consider moving these files into a separate sub-directory
# to enable source globbing for them.
testing_utils = [
    "src/test/scala/com/digitalasset/codegen/util/TestUtil.scala",
]

da_scala_library(
    name = "daml-lf-codegen-sample-app-testing",
    srcs = testing_utils,
    resources = glob(["src/test/resources/**/*"]),
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "@maven//:org_scalaz_scalaz_core_2_12",
    ],
)

da_scala_test(
    name = "tests",
    size = "small",
    srcs = glob(
        [
            "src/test/**/*.scala",
        ],
        exclude = testing_utils + [
            "src/test/scala/com/digitalasset/codegen/ScalaCodeGenIT.scala",
        ],
    ),
    deps = [
        ":daml-lf-codegen-sample-app",
        "//language-support/scala/bindings",
        "@maven//:org_scalacheck_scalacheck_2_12",
        "@maven//:org_scalaz_scalaz_core_2_12",
    ],
)

da_scala_test(
    name = "ScalaCodeGenIT",
    size = "large",
    timeout = "moderate",
    srcs = [
        "src/test/scala/com/digitalasset/codegen/ScalaCodeGenIT.scala",
    ],
    data = [
        "src/test/resources/logback-sandbox.xml",
        ":MyMain.dar",
        ":MySecondMain.dar",
        "//ledger/sandbox-classic:sandbox-classic-binary_deploy.jar",
    ],
    jvm_flags = [
        "-Dcom.daml.sandbox.jar=ledger/sandbox-classic/sandbox-classic-binary_deploy.jar",
    ],
    deps = [
        ":daml-lf-codegen-sample-app",
        ":daml-lf-codegen-sample-app-testing",
        "//daml-lf/data",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//language-support/scala/codegen-testing",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger/caching",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-resources",
        "//ledger/participant-integration-api",
        "//ledger/participant-state",
        "//ledger/sandbox-classic",
        "//ledger/sandbox-classic:sandbox-classic-scala-tests-lib",
        "//ledger/sandbox-common",
        "//ledger/sandbox-common:sandbox-common-scala-tests-lib",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "@maven//:org_scalacheck_scalacheck_2_12",
        "@maven//:org_scalaz_scalaz_core_2_12",
    ],
)
