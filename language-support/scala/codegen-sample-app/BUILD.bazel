# Copyright (c) 2019 The DAML Authors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load("//language-support/scala/codegen:codegen.bzl", "dar_to_scala")
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_dev_version",
    "lf_latest_version",
)

daml_compile(
    name = "MyMain",
    main_src = "src/main/daml/MyMain.daml",
    # FIXME https://github.com/digital-asset/daml/issues/2256
    # switch to latest once 1.8 is frozen
    target = lf_dev_version,
)

daml_compile(
    name = "MySecondMain",
    main_src = "src/main/daml/MySecondMain.daml",
    target = lf_latest_version,
)

dar_to_scala(
    name = "MyMain-codegen",
    srcs = [
        ":MyMain.dar",
        ":MySecondMain.dar",
        "//daml-lf/encoder:testing-dar-latest",
    ],
    package_prefix = "com.digitalasset.sample",
    srcjar_out = "MyMain.srcjar",
    verbosity = 2,
)

da_scala_library(
    name = "daml-lf-codegen-sample-app",
    srcs = [":MyMain.srcjar"] + glob(["src/main/**/*.scala"]),
    plugins = [
        # Plugins have to be specified as JARs.
        "@maven//:org_spire_math_kind_projector_2_12",
    ],
    # Bump stack size to avoid stack overflow in reflection.
    scalac_jvm_flags = [
        "-Xmx2G",
        "-Xss2M",
    ],
    visibility = [
        "//visibility:public",
    ],
    exports = [],
    runtime_deps = [],
    deps = [
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//language-support/scala/codegen-testing",
        "//ledger/ledger-api-client",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:com_typesafe_scala_logging_scala_logging_2_12",
        "@maven//:org_scalaz_scalaz_core_2_12",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

# Sources that do not define test-cases but utilities
# that are used by one or more test-cases.
#
# Consider moving these files into a separate sub-directory
# to enable source globbing for them.
testing_utils = [
    "src/test/scala/com/digitalasset/codegen/util/TestUtil.scala",
]

da_scala_library(
    name = "daml-lf-codegen-sample-app-testing",
    srcs = testing_utils,
    resources = glob(["src/test/resources/**/*"]),
    scalacopts = ["-Xsource:2.13"],
    deps = [
        ":daml-lf-codegen-sample-app",
        "//bazel_tools/runfiles:scala_runfiles",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "@maven//:org_scalacheck_scalacheck_2_12",
        "@maven//:org_scalatest_scalatest_2_12",
        "@maven//:org_scalaz_scalaz_core_2_12",
    ],
)

test_dependencies = [
    "@maven//:io_spray_spray_json_2_12",
    "@maven//:org_scalacheck_scalacheck_2_12",
    "@maven//:org_scalaz_scalaz_core_2_12",
    "//bazel_tools/runfiles:scala_runfiles",
    "//language-support/scala/codegen-testing",
    "//language-support/scala/bindings",
    "//ledger/participant-state",
    ":daml-lf-codegen-sample-app",
    ":daml-lf-codegen-sample-app-testing",
]

da_scala_test(
    name = "tests",
    size = "small",
    srcs = glob(
        [
            "src/test/**/*.scala",
        ],
        exclude = testing_utils + [
            "src/test/scala/com/digitalasset/codegen/ScalaCodeGenIT.scala",
        ],
    ),
    scalacopts = ["-Xsource:2.13"],
    deps = test_dependencies,
)

da_scala_test(
    name = "ScalaCodeGenIT",
    size = "large",
    timeout = "moderate",
    srcs = [
        "src/test/scala/com/digitalasset/codegen/ScalaCodeGenIT.scala",
    ],
    data = [
        "src/test/resources/logback-sandbox.xml",
        ":MyMain.dar",
        ":MySecondMain.dar",
        "//ledger/sandbox:sandbox-binary_deploy.jar",
    ],
    jvm_flags = [
        "-Dcom.digitalasset.sandbox.jar=ledger/sandbox/sandbox-binary_deploy.jar",
    ],
    scalacopts = ["-Xsource:2.13"],
    deps = test_dependencies + [
        "//daml-lf/data",
        "@maven//:com_typesafe_akka_akka_stream_testkit_2_12",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge:rs-grpc-bridge",
        "//ledger-api/rs-grpc-akka",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/sandbox",
    ],
)
