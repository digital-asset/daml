-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module MyMain where

import Prelude hiding (Date, Enum, Maybe)
import qualified DA.TextMap as TM
import DA.Map

type Unit = ()

data OptionPrice = OptionPrice { symbol: Text; price: Decimal }
  deriving (Show, Eq)

type MyDecimal = Decimal

type MyOtherDecimal = MyDecimal

data Option call put = Call call | Put put
  deriving (Show, Eq)

data NestedList = NestedList { options: [Option OptionPrice OptionPrice] }
  deriving (Show, Eq)

type Date = Time

type MyDate = Date

type MyParty = Party

data Maybe a = Nothing | Just a
  deriving (Show, Eq)

data PolyRec a b c = PolyRec { a: a; b: b; c: c }
  deriving (Show, Eq)

data Either a b = Left a | Right b
  deriving (Show, Eq)

type MaybeMaybe a = Maybe (Maybe a);

data AllTypes = AllTypes { text: Text; value: Int; b: Bool }
  deriving (Show, Eq)

data TextToText = TextToText { f: Text -> Text }

data NameClashRecord = NameClashRecord {
  productArity: Int;
  productArity1: Int;
  productArity_: Int;
  productArity__: Int;
  productArity___: Int;
  productIterator: Int;
  productPrefix: Int;
  getClass: Int;
  asInstanceOf: Int;
  equals: Int;
  hashCode: Int;
  isInstanceOf: Int;
  toString: Int;
  notify: Int;
  notifyAll: Int;
  notifyAll_: Int;
  wait: Int;
  wait_: Int
}
  deriving (Show, Eq)

data NameClashVariant notifyAll productArity = NotifyAll notifyAll | ProductArity productArity
  deriving (Show, Eq)

data NameClashRecordVariant =
  NameClashRecordVariantA { wait: Int; wait_: Int; wait__: Int } |
  NameClashRecordVariantB { notifyAll: Int; notifyAll_: Int; notifyAll__: Int }
  deriving (Show, Eq)

data VariantWithUnusedTypeParam a b c = VariantC c | VariantB b
  deriving (Show, Eq)

data MyRecord = MyRecord {a: Int; b: Decimal; c: Party; d: Text; e: Date; f: Unit; g: Bool; h: [Int] }
  deriving (Show, Eq)

data MyVariant = MyVariantA Unit | MyVariantB Unit
  deriving (Show, Eq)

data MyEnum = MyEnumA | MyEnumB
  deriving (Show, Eq)

data RecordWithNestedMyVariantMyEnum = RecordWithNestedMyVariantMyEnum {
  a: MyVariant;
  b: MyEnum
}
  deriving (Show, Eq)

data VariantWithRecordWithVariant =
 VariantWithRecordWithVariantA { record: RecordWithNestedMyVariantMyEnum } |
 Whatever
  deriving (Show, Eq)

data EmptyRecord = EmptyRecord{}
  deriving (Show, Eq)

data EmptyRecordWithTParam a = EmptyRecordWithTParam{}
  deriving (Show, Eq)

data TrialVariant a b c = TLeft a | TRight { one: b; two: b }
  deriving (Show, Eq)

-- Unit supposed to be serializable, so the following template should work
template TemplateWithUnitParam
  with
    owner: Party
    -- TODO: see https://digitalasset.atlassian.net/browse/SDK-12
    -- unit: Unit
  where
    signatory owner


template TemplateWithCustomTypes
  with
    owner: Party
    field1: NameClashRecord
    field2: (NameClashVariant Int Text)
    field3: NameClashRecordVariant
  where
    signatory owner


template TemplateWithTypeAliases
  with
    owner: Party
    number1: Decimal
    number2: MyDecimal
    number3: MyOtherDecimal
  where
    signatory owner


template PartyAgrees
  with
    p: Party
    text: Text
  where
    signatory p
    agreement "party " <> show p
              <> "agrees " <> text

template DateAndInstantTest
  with
    p: Party
    d: Date
    t: Time
  where
    signatory p
    agreement show p <> " agrees " <> show t


template PayOut
  with
    receiver: Party
    giver: Party
  where
    signatory receiver
    signatory giver
    agreement
      show giver <> " must pay to "
      <> show receiver <> " the sum of five pounds."


template CallablePayout
  with
    giver: Party
    receiver: Party
  where
    signatory giver
    controller receiver can
      Call2 : ContractId PayOut
        do create PayOut with receiver; giver
      Transfer : ContractId CallablePayout
        with newReceiver: Party
        do create this with receiver = newReceiver


template BuyOption
  with
    owner: MyParty
    seller: MyParty
    option: Option OptionPrice OptionPrice
  where
    signatory owner
    controller seller can
      Sell : Option (ContractId ExerciseCall) (ContractId ExercisePut)
        do mkOption owner seller option

-- bi-traversal
bitOptionUpdate (f: a -> Update b)
                (g: c -> Update d)
                (o: Option a c):
      Update (Option b d) =
  case o of
    Call a -> do
      b <- f a
      return (Call b)
    Put c -> do
      d <- g c
      return (Put d)


mkOption (owner: Party)
         (seller: Party)
         (option: Option OptionPrice OptionPrice):
    Update (Option (ContractId ExerciseCall) (ContractId ExercisePut)) =
  let exerciseCall (optionPrice: OptionPrice) =
                          create ExerciseCall with owner; seller; optionPrice
      exercisePut (optionPrice: OptionPrice) =
                          create ExercisePut with owner; seller; optionPrice
  in bitOptionUpdate exerciseCall exercisePut option


template ExerciseCall
  with
    owner: Party
    seller: Party
    optionPrice: OptionPrice
  where
    signatory seller
    controller owner can
      ExerciseOption : ContractId OptionCall
        with newPrice: Decimal
        do create OptionCall with owner; seller; optionPrice; newPrice


template ExercisePut
  with
    owner: Party
    seller: Party
    optionPrice: OptionPrice
  where
    signatory seller
    controller owner can
      ExerciseOption2 : ContractId OptionPut
        with newPrice: Decimal
        do create OptionPut with owner; seller; optionPrice; newPrice


template OptionCall
  with
    owner: Party
    seller: Party
    optionPrice: OptionPrice
    newPrice: Decimal
  where
    signatory owner
    signatory seller
    agreement
      show owner <> " buys stock " <> optionPrice.symbol <> " at "
      <> show optionPrice.price
      <> " making a profit of " <> show (optionPrice.price - newPrice)


template OptionPut
  with
    owner: Party
    seller: Party
    optionPrice: OptionPrice
    newPrice: Decimal
  where
    signatory owner
    signatory seller
    agreement
      show owner <> " sells stock " <> optionPrice.symbol <> " at "
      <> show optionPrice.price
      <> " making a profit of " <> show (newPrice - optionPrice.price)


template SimpleListExample
  with
    p: Party
    xs: [Int]
  where
    signatory p
    controller p can
      Go : ContractId MkListExample
        do create MkListExample with p; xs


template MkListExample
  with
    p: Party
    xs: [Int]
  where
    signatory p
    agreement
      let add = \(x: Int) (y: Int) -> x + y
      in "I am worth " <> show (foldl add 0 xs)


-- Function parameters used to be unsupported
template TemplateWithFunctionParameter
  with
    p: Party
    t: Text
    -- f: TextToText
  where
    signatory p
    agreement show p <> " agrees "
    -- <> f t


template TemplateWithSelfReference
  with
    party: Party
    parent: Maybe (ContractId TemplateWithSelfReference)
  where
    signatory party


template TemplateWithCyclicDependencyA
  with
    party: Party
    templateB: Maybe (ContractId TemplateWithCyclicDependencyB)
  where
    signatory party


template TemplateWithCyclicDependencyB
  with
    party: Party
    templateA: ContractId TemplateWithCyclicDependencyA
  where
    signatory party


template TemplateWithNestedRecordsVariantsAndEnums
  with
    party: Party
    myRecord: MyRecord
    myVariant: MyVariant
    myEnum: MyEnum
    recordWithNestedMyVariantMyEnum: RecordWithNestedMyVariantMyEnum
    variantWithRecordWithVariant: VariantWithRecordWithVariant
  where signatory party


template TemplateWithEmptyRecords
  with
    party: Party
    emptyRecord: EmptyRecord
    emptyRecordWithTParam: EmptyRecordWithTParam Int
    polyRec: (PolyRec Int Text Date)
  where signatory party


template TrialTemplate
  with
    party: Party
    trial: (TrialVariant Int Text Party)
  where signatory party


template TemplateWithUnusedTypeParam
  with
    party: Party
    x: (VariantWithUnusedTypeParam Int Text Date)
  where signatory party



{-
SC commented out with DEL-6727's daml 1.2 port as we don't run them anyway

test s0 = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  c1 <- alice commits create CallablePayout with {
    giver = alice;
    receiver = bob
  }
  charlie <- getParty "Charlie"
  c1 <- bob commits exercise c1 Transfer with newReceiver = charlie
  bob fails exercise c1 Transfer with newReceiver = charlie
  charlie commits exercise c1 Call


test s1 = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  c1 <- bob commits create BuyOption with {
    owner = bob;
    seller = alice;
    option = Call (OptionPrice { symbol = "BHP"; price = 61.30 })
  }
  c2 <- alice commits exercise c1 Sell
  bob commits exerciseOption bob 52.50 c2
  alice fails exercise c1 Sell
  bob fails exerciseOption bob 52.50 c2
-}


exerciseOption (owner: Party)
               (newPrice: Decimal)
               (option: Option (ContractId ExerciseCall) (ContractId ExercisePut)):
      Update (Option (ContractId OptionCall) (ContractId OptionPut)) =
  case option of
      Call c -> do
        oid <- exercise c (ExerciseOption with newPrice)
        return (Call oid)
      Put c -> do
        oid <- exercise c (ExerciseOption2 with newPrice)
        return (Put oid)

-- make sure that we do not stumble upon Scala's 22 function args limit in
-- generated code
template TemplateWith23Arguments
  with
    arg1: Party
    arg2: Bool
    arg3: Bool
    arg4: Bool
    arg5: Bool
    arg6: Bool
    arg7: Bool
    arg8: Bool
    arg9: Bool
    arg10: Bool
    arg11: Bool
    arg12: Bool
    arg13: Bool
    arg14: Bool
    arg15: Bool
    arg16: Bool
    arg17: Bool
    arg18: Bool
    arg19: Bool
    arg20: Bool
    arg21: Bool
    arg22: Bool
    arg23: Bool
  where signatory arg1

data Enum = E1 | E2 Unit | E3
  deriving (Show, Eq)

data AlmostEnum = AE1 | AE2 Bool | AE3 Unit
  deriving (Show, Eq)

template Enums
  with
    party: Party
    enum: Enum
    almostEnum: AlmostEnum
  where
    signatory party

template Twoples
  with
    party: Party
    aPair: (Int, Int)
  where
    signatory party

template Maybes
  with
    party: Party
    intPlusOne: Optional Int
    intPlusTwo: Optional (Optional Int)
    listOfEm: [Optional Int]
    optList: Optional [Int]
  where
    signatory party

template OptTextMapInt
   with
      party: Party
      optMap: Optional (TM.TextMap Int)
    where
      signatory party

template ListTextMapInt
   with
      party: Party
      listMap: [TM.TextMap Int]
    where
      signatory party

template TextMapTextMapInt
   with
      party: Party
      mapMap: TM.TextMap (TM.TextMap Int)
    where
      signatory party


template TextMapInt
   with
      party: Party
      aMap: TM.TextMap Int
    where
      signatory party


template TextMapText
   with
      party: Party
      aMap: TM.TextMap Text
    where
      signatory party

template OptMapInt
   with
      party: Party
      optMap: Optional (Map Int Int)
    where
      signatory party

template ListMapInt
   with
      party: Party
      listMap: [Map Int Int]
    where
      signatory party

template MapMapInt
   with
      party: Party
      mapMap: Map (Map Int Int) (Map Int Int)
    where
      signatory party

template MapInt
   with
      party: Party
      aMap: Map Int Int
    where
      signatory party

template MapText
   with
      party: Party
      aMap: Map Text Text
    where
      signatory party

data ContractIdNT a = ContractIdNT with unContractIdNT : ContractId a
  deriving (Eq, Show)

template SelfContractIdReferent
    with
       party: Party
       it: ContractIdNT SelfContractIdReferent
     where
       signatory party

