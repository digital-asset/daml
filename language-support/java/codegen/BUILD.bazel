# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load(
    ":codegen.bzl",
    "dar_to_java",
    "mangle_for_java",
)
load(
    "@com_github_johnynek_bazel_jar_jar//:jar_jar.bzl",
    "jar_jar",
)
load("//bazel_tools:pom_file.bzl", "pom_file")

da_scala_binary(
    name = "codegen",
    data = ["//:COMPONENT-VERSION"],
    main_class = "com.digitalasset.daml.lf.codegen.StandaloneMain",
    visibility = ["//visibility:public"],
    deps = [":lib"],
)

da_scala_library(
    name = "lib",
    srcs = glob(["src/main/**/*.scala"]),
    resources = [
        "src/main/resources/logback.xml",
        "//:COMPONENT-VERSION",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//3rdparty/jvm/ch/qos/logback:logback_classic",
        "//3rdparty/jvm/com/github/scopt",
        "//3rdparty/jvm/com/google/protobuf:protobuf_java",
        "//3rdparty/jvm/com/squareup:javapoet",
        "//3rdparty/jvm/com/typesafe/scala_logging",
        "//3rdparty/jvm/org/scalaz:scalaz_core",
        "//daml-lf/archive:daml_lf_archive_scala",
        "//daml-lf/archive:daml_lf_java_proto",
        "//daml-lf/data",
        "//daml-lf/interface",
        "//language-support/java/bindings:bindings-java",
    ],
)

test_deps = [
    ":lib",
    "//3rdparty/jvm/ch/qos/logback:logback_classic",
    "//3rdparty/jvm/com/github/scopt",
    "//3rdparty/jvm/com/squareup:javapoet",
    "//3rdparty/jvm/com/typesafe/scala_logging",
    "//3rdparty/jvm/org/scalacheck",
    "//3rdparty/jvm/org/scalatest",
    "//3rdparty/jvm/org/scalaz:scalaz_core",
    "//3rdparty/jvm/com/google/protobuf:protobuf_java",
    "//daml-lf/archive:daml_lf_java_proto",
    "//daml-lf/data",
    "//daml-lf/interface",
    "//language-support/java/bindings:bindings-java",
]

########################################################
####  Unit Tests
########################################################
da_scala_test(
    name = "test",
    srcs = glob(["src/test/**/*.scala"]),
    data = [":test-daml.dar"],
    resource_strip_prefix = "language-support/java/codegen/src/test/resources",
    resources = glob(["src/test/resources/**/*"]),
    deps = test_deps,
)

daml_compile(
    name = "test-daml",
    main_src = "src/test/daml/test.daml",
    target = "1.3",
)

jar_jar(
    name = "shaded_binary",
    input_jar = "//language-support/java/codegen:codegen_deploy.jar",
    rules = "shade_rule",
    tags = ["maven_coordinates=com.daml.java:codegen:__VERSION__"],
)

pom_file(
    name = "shaded_binary_pom",
    target = ":shaded_binary",
)

daml_lf_target_versions = [
    "1.0",
    "1.1",
    "1.3",
]

########################################################
####  Integration Tests
########################################################
[
    #
    # Compile the DAR files with and without a package to allow
    # DAML-LF version agnostic tests to be run using generated
    # Java classes with the same qualified name, while the DAML-LF
    # specific tests run using Java classes generated with a
    # package name qualified by the DAML-LF version.
    #
    [
        daml_compile(
            name = "integration-tests-model-%s" % target,
            srcs = glob(["src/it/daml/**/*.daml"]),
            main_src = "src/it/daml/Lib.daml",
            target = target,
        ),
        dar_to_java(
            name = "integration-tests-model-noprefix-%s" % target,
            src = ":integration-tests-model-%s.dar" % target,
        ),
        dar_to_java(
            name = "integration-tests-model-%s" % target,
            src = ":integration-tests-model-%s.dar" % target,
            package_prefix = "lf%s" % mangle_for_java(target),
        ),
    ]
    for target in daml_lf_target_versions
]

[
    java_test(
        name = "integration-tests-%s" % target,
        srcs = glob([
            "src/it/java-%s/**/*.java" % target,
            "src/it/java/**/*.java",
        ]),
        test_class = "com.digitalasset.lf%s.AllTests" % mangle_for_java(target),
        deps = [
            ":integration-tests-model-%s.jar" % target,
            ":integration-tests-model-noprefix-%s.jar" % target,
            "//3rdparty/jvm/com/google/protobuf:protobuf_java",
            "//3rdparty/jvm/org/junit/jupiter:junit_jupiter_api",
            "//3rdparty/jvm/org/junit/jupiter:junit_jupiter_engine",
            "//3rdparty/jvm/org/junit/platform:junit_platform_runner",
            "//language-support/java/bindings:bindings-java",
            "//ledger/sandbox:sandbox-scala-tests-lib",
        ],
    )
    for target in daml_lf_target_versions
]

########################################################
####  Ledger Tests
########################################################

daml_compile(
    name = "ledger-tests-model",
    srcs = glob(["src/ledger-tests/daml/**/*.daml"]),
    main_src = "src/ledger-tests/daml/Wolpertinger.daml",
    target = "1.1",
)

dar_to_java(
    name = "ledger-tests-model",
    src = "ledger-tests-model.dar",
)

da_scala_test(
    name = "ledger-tests",
    srcs = glob(["src/ledger-tests/scala/**/*.scala"]),
    data = [
        ":ledger-tests-model.dar",
    ],
    resource_strip_prefix = "language-support/java/codegen/src/ledger-tests/resources",
    resources = glob(["src/it/resources/**/*"]),
    deps = test_deps + [
        ":ledger-tests-model.jar",
        "//ledger/sandbox:sandbox",
        "//ledger/sandbox:sandbox-scala-tests-lib",
        "//ledger-api/testing-utils",
        "//ledger/ledger-api-common:ledger-api-common",
        "//3rdparty/jvm/io/grpc:grpc_core",
        "//3rdparty/jvm/io/grpc:grpc_stub",
        "//3rdparty/jvm/io/reactivex/rxjava2:rxjava",
    ],
)
