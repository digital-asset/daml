-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0



module Nim where

template GameOffer
    with
        offerer : Party
        offerees : [Party]
    where
        signatory offerer
        observer offerees
        choice GameOffer_Accept : ContractId GameInProgress with acceptor : Party
            controller acceptor
            do
                if acceptor `notElem` offerees
                    then error "acceptor not an offeree"
                    else create GameInProgress with
                        game = Game with
                             player1 = offerer
                             player2 = acceptor
                             piles = initPiles


data Game = Game with
    player1 : Party
    player2 : Party
    piles : [Int]
        deriving (Eq,Show)

initPiles = [7,5,3]

data Move = Move with
    pileNum : Int -- numbered 1,2,3...
    howMany : Int
        deriving (Eq,Show)

{-
-- (i)
isLegalMove : Move -> Game -> Bool
applyMove : Move -> Game -> Game

-- (ii)
tryMove : Move -> Game -> Optional Game

-- (iii)
playMove : Move -> Game -> Either RejectionMessage Game
-}


template GameInProgress
    with
        game : Game
    where
        ensure sum game.piles >= 0
        signatory game.player1, game.player2
        controller game.player1 can
            Game_Take : ContractId GameInProgress with move : Move do
                case playMove move game of
                    Left m -> error m
                    Right game -> create this with game


playMove : Move -> Game -> Either RejectionMessage Game
playMove Move{pileNum,howMany} Game{player1,player2,piles} =
    if pileNum < 1 || pileNum > length piles then Left "no such pile" else
    case splitAt (pileNum - 1) piles of
        (before,selected::after)
            | howMany < 1               -> Left "must take at least 1"
            | howMany > 3               -> Left "may only take 1,2 or 3"
            | selected < howMany        -> Left "not that many in pile"
            | otherwise ->
                Right Game with
                        player1 = player2
                        player2 = player1
                        piles = before ++ [selected - howMany] ++ after
        (_, []) -> Left "empty piles, should not happen"

type RejectionMessage = Text
