-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0



-- DAML chat-room model, with support for multiple chat-groups with entry by invitation.

module GroupChat where

import DA.Optional

-- A Message sent to a Group, with recipient authority.
template Message
    with
        sender : Party
        recipients : [Party]
        body : Text
    where
        signatory sender::recipients

-- A Group is a list of Members, who exchange Messages.
template Group
    with
        origin : Optional (ContractId Group)
        members : [Party]
        invitees : [Party]

    where
        signatory members
        observer invitees

        choice Group_Invite : ContractId Group with inviter : Party, candidate : Party
            controller inviter
            do
                assert (candidate `notElem` (members ++ invitees))
                assert (inviter `elem` members)
                create Group with
                    origin = origin `defaulting` self
                    members
                    invitees = candidate :: invitees

        choice Group_Join : ContractId Group with joiner : Party
            controller joiner
            do
                assert (joiner `elem` invitees)
                create Group with
                    origin = origin `defaulting` self
                    members = joiner :: members
                    invitees = filter (/= joiner) invitees

        choice Group_Leave : ContractId Group with leaver : Party
            controller leaver
            do
                assert (leaver `elem` members)
                if members == [leaver] then return self
                else
                    create Group with
                        origin = origin `defaulting` self
                        members = filter (/= leaver) members
                        invitees

        nonconsuming choice Group_Send : ContractId Message with sender : Party, body : Text
            controller sender
            do
                assert (sender `elem` members)
                create Message with
                    sender
                    recipients = members
                    body


-- The `origin` of a Group is the initial contract of a series of linked contracts, which
-- are created as the Group evolves through choices: Invite, Join, Leave.
-- We can use the `origin` field as a proxy for the Group identity.
-- When `origin` is None, this contract is the first of the series, so `self` is the identity.

defaulting x y = Some (DA.Optional.fromOptional y x)


-- Testing

only_members_see_messages = scenario do

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    g  <- submit alice do create     Group        with members = [alice], invitees = [], origin = None
    g  <- submit alice do exercise g Group_Invite with inviter = alice, candidate = bob
    g  <- submit alice do exercise g Group_Invite with inviter = alice, candidate = chris
    g  <- submit bob   do exercise g Group_Join   with joiner = bob
    m1 <- submit bob   do exercise g Group_Send   with sender = bob, body = "From Alice"
    g  <- submit chris do exercise g Group_Join   with joiner = chris
    m2 <- submit bob   do exercise g Group_Send   with sender = bob, body = "From Bob"
    g  <- submit alice do exercise g Group_Leave  with leaver = alice
    m3 <- submit chris do exercise g Group_Send   with sender = chris, body = "From Chris"

    submit         alice do fetch m1
    submit         bob   do fetch m1
    submitMustFail chris do fetch m1

    submit         alice do fetch m2
    submit         bob   do fetch m2
    submit         chris do fetch m2

    submitMustFail alice do fetch m3
    submit         bob   do fetch m3
    submit         chris do fetch m3

    return ()


non_members_cant_send = scenario do -- and two groups don't interfere

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    ga <- submit   alice do create      Group        with members = [alice], invitees = [], origin = None
    gb <- submit   bob   do create      Group        with members = [bob],   invitees = [], origin = None
    ga <- submit   alice do exercise ga Group_Invite with inviter = alice, candidate = chris
    gb <- submit   bob   do exercise gb Group_Invite with inviter = bob,   candidate = chris
    ga <- submit   chris do exercise ga Group_Join   with joiner = chris
    gb <- submit   chris do exercise gb Group_Join   with joiner = chris

    submit         alice do exercise ga Group_Send   with sender = alice, body = "1"
    submitMustFail bob   do exercise ga Group_Send   with sender = bob,   body = "2"
    submit         chris do exercise ga Group_Send   with sender = chris, body = "3"

    submitMustFail alice do exercise gb Group_Send   with sender = alice, body = "4"
    submit         bob   do exercise gb Group_Send   with sender = bob,   body = "5"
    submit         chris do exercise gb Group_Send   with sender = chris, body = "6"


no_join_without_invite = scenario do

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    g <- submit         alice do create     Group        with members = [alice], invitees = [], origin = None
    _ <- submitMustFail bob   do exercise g Group_Join   with joiner = bob
    g <- submit         alice do exercise g Group_Invite with inviter = alice, candidate = bob
    g <- submit         bob   do exercise g Group_Join   with joiner = bob
    _ <- submitMustFail chris do exercise g Group_Join   with joiner = chris

    return ()


transitive_invite = scenario do

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    g <- submit         alice do create     Group        with members = [alice], invitees = [], origin = None
    g <- submit         alice do exercise g Group_Invite with inviter = alice, candidate = bob
    g <- submit         bob   do exercise g Group_Join   with joiner = bob
    g <- submit         bob   do exercise g Group_Invite with inviter = bob, candidate = chris
    g <- submit         chris do exercise g Group_Join   with joiner = chris

    return ()


non_member_cant_invite = scenario do

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    g <- submit         alice do create     Group        with members = [alice], invitees = [], origin = None
    g <- submitMustFail bob   do exercise g Group_Invite with inviter = bob, candidate = chris

    return ()


last_member_may_leave = scenario do -- and group is shutdown

    alice <- getParty "Alice"
    bob   <- getParty "Bob"
    chris <- getParty "Chris"

    g  <- submit         alice do create     Group        with members = [alice], invitees = [], origin = None
    g  <- submit         alice do exercise g Group_Invite with inviter = alice, candidate = bob
    g  <- submit         bob   do exercise g Group_Join   with joiner = bob
    g  <- submit         alice do exercise g Group_Leave  with leaver = alice

    g <- submit bob do exercise g Group_Leave  with leaver = bob
    -- g is no longer active. How can this be tested?

    return ()
