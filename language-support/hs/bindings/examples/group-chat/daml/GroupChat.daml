-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0



-- Daml chat-room model, with support for multiple chat-groups with entry by invitation.

module GroupChat where

import Daml.Script

import DA.Optional

-- A Message sent to a Group, with recipient authority.
template Message
    with
        sender : Party
        recipients : [Party]
        body : Text
    where
        signatory sender::recipients

-- A Group is a list of Members, who exchange Messages.
template Group
    with
        origin : Optional (ContractId Group)
        members : [Party]
        invitees : [Party]

    where
        signatory members
        observer invitees

        choice Group_Invite : ContractId Group with inviter : Party, candidate : Party
            controller inviter
            do
                assert (candidate `notElem` (members ++ invitees))
                assert (inviter `elem` members)
                create Group with
                    origin = origin `defaulting` self
                    members
                    invitees = candidate :: invitees

        choice Group_Join : ContractId Group with joiner : Party
            controller joiner
            do
                assert (joiner `elem` invitees)
                create Group with
                    origin = origin `defaulting` self
                    members = joiner :: members
                    invitees = filter (/= joiner) invitees

        choice Group_Leave : ContractId Group with leaver : Party
            controller leaver
            do
                assert (leaver `elem` members)
                if members == [leaver] then return self
                else
                    create Group with
                        origin = origin `defaulting` self
                        members = filter (/= leaver) members
                        invitees

        nonconsuming choice Group_Send : ContractId Message with sender : Party, body : Text
            controller sender
            do
                assert (sender `elem` members)
                create Message with
                    sender
                    recipients = members
                    body


-- The `origin` of a Group is the initial contract of a series of linked contracts, which
-- are created as the Group evolves through choices: Invite, Join, Leave.
-- We can use the `origin` field as a proxy for the Group identity.
-- When `origin` is None, this contract is the first of the series, so `self` is the identity.

defaulting x y = Some (DA.Optional.fromOptional y x)


-- Testing

template Helper
  with
    p : Party
  where
    signatory p

    choice Fetch : Message
      with
        messageCid : ContractId Message
      controller p
      do fetch messageCid

only_members_see_messages = script do

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    g  <- submit alice do createCmd     Group        with members = [alice], invitees = [], origin = None
    g  <- submit alice do exerciseCmd g Group_Invite with inviter = alice, candidate = bob
    g  <- submit alice do exerciseCmd g Group_Invite with inviter = alice, candidate = chris
    g  <- submit bob   do exerciseCmd g Group_Join   with joiner = bob
    m1 <- submit bob   do exerciseCmd g Group_Send   with sender = bob, body = "From Alice"
    g  <- submit chris do exerciseCmd g Group_Join   with joiner = chris
    m2 <- submit bob   do exerciseCmd g Group_Send   with sender = bob, body = "From Bob"
    g  <- submit alice do exerciseCmd g Group_Leave  with leaver = alice
    m3 <- submit chris do exerciseCmd g Group_Send   with sender = chris, body = "From Chris"

    submit         alice do Helper alice `createAndExerciseCmd` Fetch m1
    submit         bob   do Helper bob   `createAndExerciseCmd` Fetch  m1
    submitMustFail chris do Helper chris `createAndExerciseCmd` Fetch  m1

    submit         alice do Helper alice `createAndExerciseCmd` Fetch  m2
    submit         bob   do Helper bob   `createAndExerciseCmd` Fetch  m2
    submit         chris do Helper chris `createAndExerciseCmd` Fetch  m2

    submitMustFail alice do Helper alice `createAndExerciseCmd` Fetch  m3
    submit         bob   do Helper bob   `createAndExerciseCmd` Fetch  m3
    submit         chris do Helper chris `createAndExerciseCmd` Fetch  m3

    return ()


non_members_cant_send = script do -- and two groups don't interfere

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    ga <- submit   alice do createCmd      Group        with members = [alice], invitees = [], origin = None
    gb <- submit   bob   do createCmd      Group        with members = [bob],   invitees = [], origin = None
    ga <- submit   alice do exerciseCmd ga Group_Invite with inviter = alice, candidate = chris
    gb <- submit   bob   do exerciseCmd gb Group_Invite with inviter = bob,   candidate = chris
    ga <- submit   chris do exerciseCmd ga Group_Join   with joiner = chris
    gb <- submit   chris do exerciseCmd gb Group_Join   with joiner = chris

    submit         alice do exerciseCmd ga Group_Send   with sender = alice, body = "1"
    submitMustFail bob   do exerciseCmd ga Group_Send   with sender = bob,   body = "2"
    submit         chris do exerciseCmd ga Group_Send   with sender = chris, body = "3"

    submitMustFail alice do exerciseCmd gb Group_Send   with sender = alice, body = "4"
    submit         bob   do exerciseCmd gb Group_Send   with sender = bob,   body = "5"
    submit         chris do exerciseCmd gb Group_Send   with sender = chris, body = "6"


no_join_without_invite = script do

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    g <- submit         alice do createCmd     Group        with members = [alice], invitees = [], origin = None
    _ <- submitMustFail bob   do exerciseCmd g Group_Join   with joiner = bob
    g <- submit         alice do exerciseCmd g Group_Invite with inviter = alice, candidate = bob
    g <- submit         bob   do exerciseCmd g Group_Join   with joiner = bob
    _ <- submitMustFail chris do exerciseCmd g Group_Join   with joiner = chris

    return ()


transitive_invite = script do

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    g <- submit         alice do createCmd     Group        with members = [alice], invitees = [], origin = None
    g <- submit         alice do exerciseCmd g Group_Invite with inviter = alice, candidate = bob
    g <- submit         bob   do exerciseCmd g Group_Join   with joiner = bob
    g <- submit         bob   do exerciseCmd g Group_Invite with inviter = bob, candidate = chris
    g <- submit         chris do exerciseCmd g Group_Join   with joiner = chris

    return ()


non_member_cant_invite = script do

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    g <- submit         alice do createCmd     Group        with members = [alice], invitees = [], origin = None
    g <- submitMustFail bob   do exerciseCmd g Group_Invite with inviter = bob, candidate = chris

    return ()


last_member_may_leave = script do -- and group is shutdown

    alice <- allocateParty "Alice"
    bob   <- allocateParty "Bob"
    chris <- allocateParty "Chris"

    g  <- submit         alice do createCmd     Group        with members = [alice], invitees = [], origin = None
    g  <- submit         alice do exerciseCmd g Group_Invite with inviter = alice, candidate = bob
    g  <- submit         bob   do exerciseCmd g Group_Join   with joiner = bob
    g  <- submit         alice do exerciseCmd g Group_Leave  with leaver = alice

    g <- submit bob do exerciseCmd g Group_Leave  with leaver = bob
    -- g is no longer active. How can this be tested?

    return ()
