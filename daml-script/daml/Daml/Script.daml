-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Daml.Script where

import DA.Optional

-- | A free monad
data Free f a
  = Pure a
  | Free (f (Free f a))

instance Functor f => Functor (Free f) where
  fmap f (Pure a) = Pure (f a)
  fmap f (Free x) = Free (fmap f <$> x)

instance Functor f => Applicative (Free f) where
  pure = Pure
  Pure f <*> Pure a = Pure (f a)
  Pure f <*> Free x = Free (fmap f <$> x)
  Free x <*> my     = Free ((<*> my) <$> x)

instance Functor f => Action (Free f) where
  Pure a >>= f = f a
  Free x >>= f = Free ((>>= f) <$> x)

-- | A free applicative, since we donâ€™t have existentials we have to use the weird RankNTypes encoding, this is isomorphic to
-- forall b. Ap f b (Ap f (b -> a))
data Ap f a
  = PureA a
  | Ap (forall r. (forall b. f b -> Ap f (b -> a) -> r) -> r)

instance Functor (Ap f) where
  fmap f (PureA x) = PureA (f x)
  fmap f (Ap c) = Ap (\c' -> c (\a b -> c' a (fmap (f .) b)))

instance Applicative (Ap f) where
  pure = PureA
  PureA f <*> x = fmap f x
  Ap c <*> x = Ap (\c' -> c (\a b -> c' a (flip <$> b <*> x)))

data CommandsF a
  = Create { argC : AnyTemplate, continueC : ContractId () -> a }
  | Exercise { tplId : TemplateTypeRep, cId : ContractId (), argE : AnyChoice, continueE : LedgerValue -> a }
  deriving Functor

type Commands = Ap CommandsF

data ScriptF a
  = Submit (SubmitCmd a)
  | Query (QueryACS a)
  | AllocParty (AllocateParty a)
  deriving Functor

data QueryACS a = QueryACS
  { party : Party
  , tplId : TemplateTypeRep
  , continue : [AnyTemplate] -> a
  } deriving Functor

query : forall t. Template t => Party -> Script [t]
query p = Free $ Query (QueryACS p (templateTypeRep @t) (pure . map (fromSome . fromAnyTemplate)))

data AllocateParty a = AllocateParty
  { displayName : Text
  , continue : Party -> a
  } deriving Functor

allocateParty : Text -> Script Party
allocateParty displayName = Free (AllocParty $ AllocateParty displayName pure)

data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a }
  deriving Functor

submit : Party -> Commands a -> Script a
submit p cmds = Free (fmap pure $ Submit $ SubmitCmd p cmds)

type Script = Free ScriptF

data LedgerValue = LedgerValue {}

fromLedgerValue : LedgerValue -> a
fromLedgerValue = error "foobar"

createCmd : Template t => t -> Commands (ContractId t)
createCmd arg = Ap (\f -> f (Create (toAnyTemplate arg) identity) (pure coerceContractId))

exerciseCmd : forall t c r. Choice t c r => ContractId t -> c -> Commands r
exerciseCmd cId arg = Ap (\f -> f (Exercise (templateTypeRep @t) (coerceContractId cId) (toAnyChoice @t arg) identity) (pure fromLedgerValue))

