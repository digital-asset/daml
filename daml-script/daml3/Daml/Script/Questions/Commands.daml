-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE InstanceSigs #-}

module Daml.Script.Questions.Commands where

import Daml.Script.Internal hiding (IsQuestion (..))
import DA.Bifunctor

data Command
  = Create with
      argC : AnyTemplate
  | Exercise with
      tplId : TemplateTypeRep
      cId : ContractId ()
      argE : AnyChoice
  | ExerciseByKey with
      tplId : TemplateTypeRep
      keyE : AnyContractKey
      argE : AnyChoice
  | CreateAndExercise with
      tplArgCE : AnyTemplate
      choiceArgCE : AnyChoice

data CommandWithMeta = CommandWithMeta with
  command : Command
  explicitPackageId : Bool

-- The ledger api can only return create and exercise results, therefore `Exercise`, `ExerciseByKey` and `CreateByExercise` all return `ExerciseResult`s
data CommandResult
  = CreateResult (ContractId ())
  | ExerciseResult LedgerValue

instance Show CommandResult where
  show CreateResult {} = "CreateResult"
  show ExerciseResult {} = "ExerciseResult"

-- | This is used to build up the commands send as part of `submit`.
-- If you enable the `ApplicativeDo` extension by adding
-- `{-# LANGUAGE ApplicativeDo #-}` at the top of your file, you can
-- use `do`-notation but the individual commands must not depend
-- on each other and the last statement in a `do` block
-- must be of the form ``return expr`` or ``pure expr``.
data Commands a = Commands with
    commands : [CommandWithMeta]
    continue : [CommandResult] -> a
  deriving Functor
  
data Disclosure = Disclosure with
   templateId: TemplateTypeRep
   contractId : ContractId ()
   blob: Text
 deriving (Eq, Ord)

-- Expected number of command results for a given command
expectedCommandResults : Command -> Int
expectedCommandResults Create {} = 1
expectedCommandResults Exercise {} = 1
expectedCommandResults ExerciseByKey {} = 1
-- Create and exercise gives 2 results, so we account for that here
expectedCommandResults CreateAndExercise {} = 2

-- Expected number of command results for a list of commands
expectedCommandsResults : [CommandWithMeta] -> Int
expectedCommandsResults = foldr ((+) . expectedCommandResults . command) 0

instance Applicative Commands where
  pure : a -> Commands a
  pure x = Commands [] (const x)

  liftA2 : (a -> b -> c) -> Commands a -> Commands b -> Commands c
  liftA2 f a b = Commands
    { commands = a.commands <> b.commands
    , continue = \results -> 
        let (aResults, bResults) = splitAt (expectedCommandsResults a.commands) results
        in f (a.continue aResults) (b.continue bResults)
    }

-- | HIDE A version of 'createCmd' without constraints.
internalCreateCmd : AnyTemplate -> Bool -> Commands (ContractId ())
internalCreateCmd arg explicitPackageId = Commands [CommandWithMeta (Create arg) explicitPackageId] $ \case
  [CreateResult res] -> res
  res -> error $ "Expected [CreateResult], got " <> show res

-- | HIDE A version of 'exerciseCmd' without constraints.
internalExerciseCmd : TemplateTypeRep -> ContractId () -> AnyChoice -> Bool -> Commands LedgerValue
internalExerciseCmd tplTypeRep cId arg explicitPackageId = Commands [CommandWithMeta (Exercise tplTypeRep cId arg) explicitPackageId] $ \case
  [ExerciseResult res] -> res
  res -> error $ "Expected [ExerciseResult], got " <> show res

-- | HIDE A version of 'exerciseByKeyCmd' without constraints.
internalExerciseByKeyCmd : TemplateTypeRep -> AnyContractKey -> AnyChoice -> Bool -> Commands LedgerValue
internalExerciseByKeyCmd tplTypeRep key arg explicitPackageId = Commands [CommandWithMeta (ExerciseByKey tplTypeRep key arg) explicitPackageId] $ \case
  [ExerciseResult res] -> res
  res -> error $ "Expected [ExerciseResult], got " <> show res

-- | HIDE A version of 'createAndExerciseCmd' without constraints.
-- Create and exercise gives a create result and exercise result.
internalCreateAndExerciseCmd : AnyTemplate -> AnyChoice -> Bool -> Commands (ContractId (), LedgerValue)
internalCreateAndExerciseCmd tplArg choiceArg explicitPackageId = Commands [CommandWithMeta (CreateAndExercise tplArg choiceArg) explicitPackageId] $ \case
  [CreateResult cId, ExerciseResult res] -> (cId, res)
  res -> error $ "Expected [CreateResult, ExerciseResult], got " <> show res

-- Typed commands but still internal as explicitPackageId not determined
-- | HIDE
internalTypedCreateCmd : (Template t, HasEnsure t) => t -> Bool -> Commands (ContractId t)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
internalTypedCreateCmd arg explicitPackageId =
  coerceContractId <$> internalCreateCmd (toAnyTemplate arg) explicitPackageId

-- | HIDE
internalTypedExerciseCmd : forall t c r. Choice t c r => ContractId t -> c -> Bool -> Commands r
internalTypedExerciseCmd cId arg explicitPackageId =
  fromLedgerValue @r <$> internalExerciseCmd (templateTypeRep @t) (coerceContractId cId) (toAnyChoice @t arg) explicitPackageId

-- | HIDE
internalTypedExerciseByKeyCmd : forall t k c r. (TemplateKey t k, Choice t c r) => k -> c -> Bool -> Commands r
internalTypedExerciseByKeyCmd key arg explicitPackageId =
  fromLedgerValue @r <$> internalExerciseByKeyCmd (templateTypeRep @t) (toAnyContractKey @t key) (toAnyChoice @t arg) explicitPackageId

-- | HIDE
internalTypedCreateAndExerciseCmdWithCid : forall t c r. (Template t, Choice t c r, HasEnsure t) => t -> c -> Bool -> Commands (ContractId t, r)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
internalTypedCreateAndExerciseCmdWithCid tplArg choiceArg explicitPackageId =
  bimap coerceContractId (fromLedgerValue @r) <$> internalCreateAndExerciseCmd (toAnyTemplate tplArg) (toAnyChoice @t choiceArg) explicitPackageId

-- Main command API, without explicit package ids
-- | Create a contract of the given template.
createCmd : (Template t, HasEnsure t) => t -> Commands (ContractId t)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createCmd arg = internalTypedCreateCmd arg False

-- | Exercise a choice on the given contract.
exerciseCmd : forall t c r. Choice t c r => ContractId t -> c -> Commands r
exerciseCmd cId arg = internalTypedExerciseCmd cId arg False

-- | Exercise a choice on the contract with the given key.
exerciseByKeyCmd : forall t k c r. (TemplateKey t k, Choice t c r) => k -> c -> Commands r
exerciseByKeyCmd key arg = internalTypedExerciseByKeyCmd @t key arg False

-- | Create a contract and exercise a choice on it in the same transaction, returns the created ContractId, and the choice result.
createAndExerciseWithCidCmd : forall t c r. (Template t, Choice t c r, HasEnsure t) => t -> c -> Commands (ContractId t, r)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createAndExerciseWithCidCmd tplArg choiceArg = internalTypedCreateAndExerciseCmdWithCid tplArg choiceArg False

-- | Create a contract and exercise a choice on it in the same transaction, returns only the choice result.
createAndExerciseCmd : forall t c r. (Template t, Choice t c r, HasEnsure t) => t -> c -> Commands r
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createAndExerciseCmd tplArg choiceArg = snd <$> createAndExerciseWithCidCmd tplArg choiceArg

-- Main command API, WITH explicit package ids
-- | Create a contract of the given template, using the exact package ID of the template given - upgrades are disabled.
createExactCmd : (Template t, HasEnsure t) => t -> Commands (ContractId t)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createExactCmd arg = internalTypedCreateCmd arg True

-- | Exercise a choice on the given contract, using the exact package ID of the template given - upgrades are disabled.
exerciseExactCmd : forall t c r. Choice t c r => ContractId t -> c -> Commands r
exerciseExactCmd cId arg = internalTypedExerciseCmd cId arg True

-- | Exercise a choice on the contract with the given key, using the exact package ID of the template given - upgrades are disabled.
exerciseByKeyExactCmd : forall t k c r. (TemplateKey t k, Choice t c r) => k -> c -> Commands r
exerciseByKeyExactCmd key arg = internalTypedExerciseByKeyCmd @t key arg True

-- | Create a contract and exercise a choice on it in the same transaction, returns the created ContractId, and the choice result.
-- Uses the exact package ID of the template given - upgrades are disabled.
createAndExerciseWithCidExactCmd : forall t c r. (Template t, Choice t c r, HasEnsure t) => t -> c -> Commands (ContractId t, r)
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createAndExerciseWithCidExactCmd tplArg choiceArg = internalTypedCreateAndExerciseCmdWithCid tplArg choiceArg True

-- | Create a contract and exercise a choice on it in the same transaction, returns only the choice result.
createAndExerciseExactCmd : forall t c r. (Template t, Choice t c r, HasEnsure t) => t -> c -> Commands r
-- The 'HasEnsure t' constraint prevents this function from being used on interface types.
createAndExerciseExactCmd tplArg choiceArg = snd <$> createAndExerciseWithCidExactCmd tplArg choiceArg

-- | Archive the given contract.
--
-- `archiveCmd cid` is equivalent to `exerciseCmd cid Archive`.
archiveCmd : Choice t Archive () => ContractId t -> Commands ()
archiveCmd cId = exerciseCmd cId Archive
