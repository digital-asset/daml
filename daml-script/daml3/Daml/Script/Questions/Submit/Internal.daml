-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Questions.Submit.Internal
  ( module Daml.Script.Questions.Submit.Internal
  ) where

import Daml.Script.Internal
import Daml.Script.Questions.Commands
import Daml.Script.Questions.Submit.Error
import DA.NonEmpty
import DA.Stack

actAsNonEmpty : [Party] -> NonEmpty Party
actAsNonEmpty ps = case toParties ps of
  [] -> error "actAs must be non-empty"
  p :: ps -> NonEmpty p ps

-- New TrySubmitConcurrently logic

data TrySubmitConcurrently = TrySubmitConcurrently with
  actAs : NonEmpty Party
  readAs : [Party]
  commands : [[Command]]
instance IsQuestion TrySubmitConcurrently [Either SubmitError [CommandResult]] where command = "TrySubmitConcurrently"

trySubmitConcurrentlyInternal : HasCallStack => [Party] -> [Party] -> [Commands a] -> Script [Either SubmitError a]
trySubmitConcurrentlyInternal actAs readAs cmdss =
  let (continues, commands) = unzip (fmap (\c -> (c.continue, c.commands)) cmdss)
  in
    fmap @Script (zipWith (fmap @(Either SubmitError)) continues) $ lift $ TrySubmitConcurrently with
      actAs = actAsNonEmpty actAs
      readAs = readAs
      commands = commands

trySubmitConcurrently : HasCallStack => Party -> [Commands a] -> Script [Either SubmitError a]
trySubmitConcurrently p = trySubmitConcurrentlyInternal [p] []

trySubmitMultiConcurrently : HasCallStack => [Party] -> [Party] -> [Commands a] -> Script [Either SubmitError a]
trySubmitMultiConcurrently = trySubmitConcurrentlyInternal
