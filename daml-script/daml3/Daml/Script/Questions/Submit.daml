-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Questions.Submit
  ( module Daml.Script.Questions.Submit
  , module Daml.Script.Questions.Submit.Error
  ) where

import Daml.Script.Internal
import Daml.Script.Questions.Commands
import Daml.Script.Questions.Submit.Error
import Daml.Script.Questions.TransactionTree
import DA.NonEmpty
import DA.Stack

-- | The @submit@ command.
data Submit = Submit with
  actAs : NonEmpty Party
  readAs : [Party]
  commands : [Command]
instance IsQuestion Submit [CommandResult] where command = "Submit"

actAsNonEmpty : [Party] -> NonEmpty Party
actAsNonEmpty ps = case toParties ps of
  [] -> error "actAs must be non-empty"
  p :: ps -> NonEmpty p ps

submitInternal : HasCallStack => [Party] -> [Party] -> Commands a -> Script a
submitInternal actAs readAs cmds =
  fmap cmds.continue $ lift $ Submit with
    actAs = actAsNonEmpty actAs
    readAs = readAs
    commands = cmds.commands

-- | Details of the @submitMustFail@ command.
data SubmitMustFail = SubmitMustFail with
  actAs : NonEmpty Party
  readAs : [Party]
  commands : [Command]
instance IsQuestion SubmitMustFail () where command = "SubmitMustFail"

submitMustFailInternal : HasCallStack => [Party] -> [Party] -> Commands a -> Script ()
submitMustFailInternal actAs readAs cmds =
  lift $ SubmitMustFail with
    actAs = actAsNonEmpty actAs
    readAs = readAs
    commands = cmds.commands

-- | Submit the commands as a single transaction.

-- This will error if the submission fails.

instance HasSubmit Script Commands where
  submit p cmds = submitInternal [p] [] cmds
  submitMustFail p cmds = submitMustFailInternal [p] [] cmds

-- There are a few different options for passing the parties here:
--
-- 1. NonEmpty Party -> [Party] -> …
--    This is the safest one but it’s rather awkward to use since NonEmpty is
--    long and fairly uncommon. Given that Daml Script is primarily used during
--    testing and development, the extra safety is also not that crucial.
--    It is also different from signatories which also needs to be nonempty but
--    does not enforce this statically.
-- 2. (IsParties p1, IsParties p2) => p1 -> p2 -> …
--    This leads to type inference problems if you use empty lists which is super common
--    for readAs.
-- 3. (IsParties p1) => p1 -> [Party] -> …
--    clearly inconsistent but better type inference since actAs must be non-empty.
-- 4. [Party] -> [Party] -> …
--    concise, good type inference but runtime error.
--
-- In the end, we chose 4.

-- | `submitMulti actAs readAs cmds` submits `cmds` as a single transaction
-- authorized by `actAs`. Fetched contracts must be visible to at least
-- one party in the union of actAs and readAs.
submitMulti : HasCallStack => [Party] -> [Party] -> Commands a -> Script a
submitMulti = submitInternal

-- | `submitMultiMustFail actAs readAs cmds` behaves like `submitMulti actAs readAs cmds`
-- but fails when `submitMulti` succeeds and the other way around.
submitMultiMustFail : HasCallStack => [Party] -> [Party] -> Commands a -> Script ()
submitMultiMustFail = submitMustFailInternal

data SubmitTree = SubmitTree with
  actAs : NonEmpty Party
  readAs : [Party]
  commands : [Command]
instance IsQuestion SubmitTree TransactionTree where command = "SubmitTree"

submitTreeInternal : HasCallStack => [Party] -> [Party] -> Commands a -> Script TransactionTree
submitTreeInternal actAs readAs cmds =
  lift $ SubmitTree with
    actAs = actAsNonEmpty actAs
    readAs = readAs
    commands = cmds.commands

-- | HIDE Equivalent to `submit` but returns the full transaction tree.
-- This is an early access feature.
submitTree : HasCallStack => Party -> Commands a -> Script TransactionTree
submitTree p cmds = submitTreeInternal [p] [] cmds

-- | HIDE Equivalent to `submitMulti` but returns the full transaction tree.
-- This is an early access feature.
submitTreeMulti : HasCallStack => [Party] -> [Party] -> Commands a -> Script TransactionTree
submitTreeMulti = submitTreeInternal

-- New TrySubmit logic

data TrySubmit = TrySubmit with
  actAs : NonEmpty Party
  readAs : [Party]
  commands : [Command]
instance IsQuestion TrySubmit (Either SubmitError [CommandResult]) where command = "TrySubmit"

trySubmitInternal : HasCallStack => [Party] -> [Party] -> Commands a -> Script (Either SubmitError a)
trySubmitInternal actAs readAs cmds =
  fmap (fmap cmds.continue) $ lift $ TrySubmit with
    actAs = actAsNonEmpty actAs
    readAs = readAs
    commands = cmds.commands

-- | Submit a transaction and recieve back either the result, or a `SubmitError`.
-- In the majority of failures, this will not crash at runtime.
trySubmit : HasCallStack => Party -> Commands a -> Script (Either SubmitError a)
trySubmit p cmds = trySubmitInternal [p] [] cmds

-- | Alternate version of `trySubmit` that allows specifying the actAs and readAs parties.
trySubmitMulti : HasCallStack => [Party] -> [Party] -> Commands a -> Script (Either SubmitError a)
trySubmitMulti = trySubmitInternal
