-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- TODO[SW]: Add some kind of warning here saying this _only_ works for IdeLedgerClient

module Daml.Script.Questions.Packages where

import Daml.Script.Internal
import Daml.Script.Questions.PartyManagement (ParticipantName (..))
import Daml.Script.Questions.Time (sleep)
import DA.Stack
import DA.Time

data VetPackages = VetPackages with
  packages : [PackageName]
instance IsQuestion VetPackages () where command = "VetPackages"

data UnvetPackages = UnvetPackages with
  packages : [PackageName]
instance IsQuestion UnvetPackages () where command = "UnvetPackages"

data ListVettedPackages = ListVettedPackages {}
instance IsQuestion ListVettedPackages [PackageName] where command = "ListVettedPackages"

data ListAllPackages = ListAllPackages {}
instance IsQuestion ListAllPackages [PackageName] where command = "ListAllPackages"

data PackageName = PackageName
  with
    name : Text
    version : Text
  deriving (Eq, Ord)

instance Show PackageName where
  show (PackageName name version) = name <> "-" <> version

vetPackages : HasCallStack => [PackageName] -> Script ()
vetPackages = lift . VetPackages

unvetPackages : HasCallStack => [PackageName] -> Script ()
unvetPackages = lift . UnvetPackages

listVettedPackages : HasCallStack => Script [PackageName]
listVettedPackages = lift ListVettedPackages

listAllPackages : HasCallStack => Script [PackageName]
listAllPackages = lift ListAllPackages

data VetDar = VetDar with
  darName : Text
  participant : Optional Text
instance IsQuestion VetDar () where command = "VetDar"

data UnvetDar = UnvetDar with
  darName : Text
  participant : Optional Text
instance IsQuestion UnvetDar () where command = "UnvetDar"

-- Add a wait after performing the action, as vetting and unvetting takes a little bit of time
-- https://github.com/digital-asset/daml/issues/17707
thenWait : Script a -> Script a
thenWait s = s <* sleep (seconds 1)

vetDar : HasCallStack => Text -> Script ()
vetDar darName = thenWait $ lift $ VetDar darName None

vetDarOnParticipant : HasCallStack => Text -> ParticipantName -> Script ()
vetDarOnParticipant darName (ParticipantName participant) = thenWait $ lift $ VetDar darName (Some participant)

unvetDar : HasCallStack => Text -> Script ()
unvetDar darName = thenWait $ lift $ UnvetDar darName None

unvetDarOnParticipant : HasCallStack => Text -> ParticipantName -> Script ()
unvetDarOnParticipant darName (ParticipantName participant) = thenWait $ lift $ UnvetDar darName (Some participant)

-- | This does not wait for the topology transaction to land, be sure to sleep for 1 second between calling this and using a template from the given package
unsafeVetDarOnParticipant : HasCallStack => Text -> Optional ParticipantName -> Script ()
unsafeVetDarOnParticipant darName mParticipantName = lift $ VetDar darName (participantName <$> mParticipantName)

-- | This does not wait for the topology transaction to land, be sure to sleep for 1 second between calling this and using a template from the given package
unsafeUnvetDarOnParticipant : HasCallStack => Text -> Optional ParticipantName -> Script ()
unsafeUnvetDarOnParticipant darName mParticipantName = lift $ UnvetDar darName (participantName <$> mParticipantName)
