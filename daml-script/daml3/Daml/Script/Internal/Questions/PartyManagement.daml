-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Internal.Questions.PartyManagement where

import Daml.Script.Internal.LowLevel
import DA.Stack

data AllocateParty = AllocateParty with
  displayName : Text
  idHint : Text
  participant : Optional Text
instance IsQuestion AllocateParty Party where command = "AllocateParty"

-- | A hint to the backing participant what party id to allocate.
-- Must be a valid PartyIdString (as described in @value.proto@).
newtype PartyIdHint = PartyIdHint { partyIdHint : Text }

newtype ParticipantName = ParticipantName { participantName : Text }

-- | Allocate a party with the given display name
-- using the party management service.
allocateParty : HasCallStack => Text -> Script Party
allocateParty displayName = lift $ AllocateParty with
  displayName
  idHint = ""
  participant = None

-- | Allocate a party with the given display name and id hint
-- using the party management service.
allocatePartyWithHint : HasCallStack => Text -> PartyIdHint -> Script Party
allocatePartyWithHint displayName (PartyIdHint idHint) = lift $ AllocateParty with
  displayName
  idHint = idHint
  participant = None

-- | Allocate a party with the given display name
-- on the specified participant using the party management service.
allocatePartyOn : Text -> ParticipantName -> Script Party
allocatePartyOn displayName (ParticipantName participant) = lift $ AllocateParty with
  displayName
  idHint = ""
  participant = Some participant

-- | Allocate a party with the given display name and id hint
-- on the specified participant using the party management service.
allocatePartyWithHintOn : Text -> PartyIdHint -> ParticipantName -> Script Party
allocatePartyWithHintOn displayName (PartyIdHint idHint) (ParticipantName participant) = lift $ AllocateParty with
  displayName
  idHint = idHint
  participant = Some participant

-- | The party details returned by the party management service.
data PartyDetails = PartyDetails
  with
    party : Party -- ^ Party id
    displayName : Optional Text -- ^ Optional display name
    isLocal : Bool -- ^ True if party is hosted by the backing participant.
  deriving (Eq, Ord, Show)

data ListKnownParties = ListKnownParties with
  participant : Optional Text
instance IsQuestion ListKnownParties [PartyDetails] where command = "ListKnownParties"

-- | List the parties known to the default participant.
listKnownParties : HasCallStack => Script [PartyDetails]
listKnownParties = lift $ ListKnownParties None

-- | List the parties known to the given participant.
listKnownPartiesOn : HasCallStack => ParticipantName -> Script [PartyDetails]
listKnownPartiesOn (ParticipantName participant) = lift $ ListKnownParties $ Some participant
