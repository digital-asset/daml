{-# LANGUAGE ApplicativeDo #-}
module Export where
import Daml.Script
import qualified DA.Stack
import qualified DA.TextMap
import qualified DA.Traversable
import qualified InterfaceChoices.Asset
import qualified InterfaceChoices.Token

-- | Mapping from party names in the original ledger state
-- to parties to be used in 'export'.
type Parties = DA.TextMap.TextMap Party

-- | Look-up a party based on the party name in the original ledger state.
lookupParty : DA.Stack.HasCallStack => Text -> Parties -> Party
lookupParty old parties =
  case DA.TextMap.lookup old parties of
    None -> error ("Missing party " <> old)
    Some new -> new

-- | Allocates fresh parties from the party management service.
allocateParties : Script Parties
allocateParties = DA.Traversable.mapA allocateParty (DA.TextMap.fromList
  [ ("Alice::XXXXXXXX",
    "Alice::XXXXXXXX")
  , ("Bob::XXXXXXXX",
    "Bob::XXXXXXXX")
  , ("Charlie::XXXXXXXX",
    "Charlie::XXXXXXXX") ])

-- | Mapping from missing contract ids to replacement contract ids.
--
-- You can provide replacement contract ids in an input file to
-- the @--input-file@ argument of @daml script@, or you can provide
-- replacements from within Daml script.
--
-- >>> (replacement, _):_ <- query @T alice_0
-- >>> let args = Args with
-- >>>   parties = Parties with alice_0
-- >>>   contracts = DA.TextMap.fromList [("00737...", replacement)]
-- >>> export args
type Contracts = DA.TextMap.TextMap (ContractId ())

-- | Look-up a replacement for a missing contract id. Fails if none is found.
lookupContract : DA.Stack.HasCallStack => Text -> Contracts -> ContractId a
lookupContract old contracts =
  case DA.TextMap.lookup old contracts of
    None -> error ("Missing contract id " <> old)
    Some new -> coerceContractId new

-- | Arguments to 'export'. See 'Parties' and 'Contracts' for details.
data Args = Args with
  parties : Parties
  contracts : Contracts

-- | Test 'export' with freshly allocated parties and
-- no replacements for missing contract ids.
testExport : Script ()
testExport = do
  parties <- allocateParties
  let contracts = DA.TextMap.empty
  export Args with ..

-- | The Daml ledger export.
export : Args -> Script ()
export Args{parties, contracts} = do
  let party_0 = lookupParty "Alice::XXXXXXXX" parties
  let party_1 = lookupParty "Bob::XXXXXXXX" parties
  let party_2 = lookupParty "Charlie::XXXXXXXX" parties
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_1_0) <- submit party_0 do
    createCmd (InterfaceChoices.Asset.Asset {issuer = party_0, owner = party_0,
        name = "Koin", amount = 260, notes = []})
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_2_0) <- submit party_0 do
    exerciseCmd asset_1_0 (InterfaceChoices.Asset.Give {newOwner = party_1})
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_3_0) <- submit party_0 do
    createCmd (InterfaceChoices.Asset.Asset {issuer = party_0, owner = party_0,
        name = "Qoin", amount = 10, notes = []})
  _ <- submit party_0 do
    exerciseCmd asset_3_0 (InterfaceChoices.Asset.Give {newOwner = party_2})
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_5_0) <- submit party_1 do
    exerciseCmd (toInterfaceContractId @InterfaceChoices.Token.Token asset_2_0) (InterfaceChoices.Token.Transfer {newOwner = party_2})
  tree <- submitTree party_2 do
    exerciseCmd (toInterfaceContractId @InterfaceChoices.Token.Token asset_5_0) (InterfaceChoices.Token.Split {splitAmount = 120})
  let (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_6_0) = fromTree tree $
        exercised @InterfaceChoices.Token.Token "Split" $
        created @InterfaceChoices.Asset.Asset
  let (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_6_1) = fromTree tree $
        exercised @InterfaceChoices.Token.Token "Split" $
        createdN @InterfaceChoices.Asset.Asset 1
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_7_1) <- submit party_2 do
    _ <- exerciseCmd (toInterfaceContractId @InterfaceChoices.Token.Token asset_6_0) (InterfaceChoices.Token.Transfer {newOwner = party_0})
    (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_7_1) <- exerciseCmd (toInterfaceContractId @InterfaceChoices.Token.Token asset_6_1) (InterfaceChoices.Token.Transfer {newOwner = party_1})
    pure asset_7_1
  (coerceContractId @_ @InterfaceChoices.Asset.Asset -> asset_8_0) <- submit party_1 do
    exerciseCmd asset_7_1 (InterfaceChoices.Asset.Annotate {note = "Thank you Alice"})
  _ <- submit party_1 do
    exerciseCmd asset_8_0 (InterfaceChoices.Asset.Give {newOwner = party_0})
  pure ()