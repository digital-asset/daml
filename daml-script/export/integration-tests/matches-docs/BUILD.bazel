# Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@build_environment//:configuration.bzl", "ghc_version")
load(
    "//bazel_tools/client_server:client_server_build.bzl",
    "client_server_build",
)
load(
    "//bazel_tools/sh:sh.bzl",
    "sh_inline_test",
)
load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
)

da_scala_binary(
    name = "example-export-client",
    srcs = ["scala/com/daml/script/export/ExampleExportClient.scala"],
    main_class = "com.daml.script.export.ExampleExportClient",
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
    ],
    deps = [
        "//daml-lf/data",
        "//daml-script/export",
        "//daml-script/runner:script-runner-lib",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger/ledger-api-common",
        "//libs-scala/auth-utils",
        "//libs-scala/fs-utils",
    ],
)

client_server_build(
    name = "example-export",
    outs = [
        "example-export/Export.daml",
        "example-export/args.json",
        "example-export/daml.yaml",
    ],
    client = ":example-export-client",
    client_files = ["//daml-script/test:script-test.dar"],
    data = ["//daml-script/test:script-test.dar"],
    output_env = "EXPORT_OUT",
    server = "//ledger/sandbox:sandbox-binary",
    server_args = [
        "--port",
        "0",
    ],
    server_files = ["//daml-script/test:script-test.dar"],
)

# Compare the generated Daml ledger export to the example export used in the
# documentation. This functions as both a golden test on ledger exports and to
# make sure that the documentation stays up-to-date.
#
# Normalizes the expected output by removing the copyright header and any
# documentation import markers and normalizes the actual output by adding a
# newline to the last line if missing.
#
# Normalizes the data-dependencies by replacing the SDK version, package-id
# hashes with a placeholder, and Windows path separators by Unix separators.
sh_inline_test(
    name = "example-export-compare",
    cmd = """\
EXPECTED_EXPORT=$$(canonicalize_rlocation $(rootpath //docs:source/tools/export/output-root/Export.daml))
EXPECTED_ARGS=$$(canonicalize_rlocation $(rootpath //docs:source/tools/export/output-root/args.json))
EXPECTED_YAML=$$(canonicalize_rlocation $(rootpath //docs:source/tools/export/output-root/daml.yaml))
ACTUAL_EXPORT=$$(canonicalize_rlocation $(rootpath :example-export/Export.daml))
ACTUAL_ARGS=$$(canonicalize_rlocation $(rootpath :example-export/args.json))
ACTUAL_YAML=$$(canonicalize_rlocation $(rootpath :example-export/daml.yaml))
# Normalize the expected file by removing the copyright header and any documentation import markers.
# Normalize the actual output by adding a newline to the last line if missing.
$(POSIX_DIFF) -Naur --strip-trailing-cr <($(POSIX_SED) '1,3d;/^-- EXPORT/d' $$EXPECTED_EXPORT) <($(POSIX_SED) '$$a\\' $$ACTUAL_EXPORT) || {{
  echo "$$EXPECTED_EXPORT did not match $$ACTUAL_EXPORT"
  exit 1
}}
$(POSIX_DIFF) -Naur --strip-trailing-cr $$EXPECTED_ARGS <($(POSIX_SED) '$$a\\' $$ACTUAL_ARGS) || {{
  echo "$$EXPECTED_ARGS did not match $$ACTUAL_ARGS"
  exit 1
}}
# Normalize the expected file by removing the copyright header and any documentation import markers.
# Normalize the data-dependencies by replacing the SDK version, package-id hashes with a placeholder, and Windows path separators by Unix separators.
$(POSIX_DIFF) -Naur --strip-trailing-cr <($(POSIX_SED) '1,3d;s/[0-9a-f]\\{{64\\}}/HASH/;s/daml-\\(script\\|stdlib\\)-0\\.0\\.0/daml-\\1-{ghc_version}/' $$EXPECTED_YAML) <($(POSIX_SED) 's/[0-9a-f]\\{{64\\}}/HASH/;s,\\\\,/,g;$$a\\' $$ACTUAL_YAML) || {{
  echo "$$EXPECTED_YAML did not match $$ACTUAL_YAML"
  exit 1
}}
""".format(
        ghc_version = ghc_version,
    ),
    data = [
        ":example-export/Export.daml",
        ":example-export/args.json",
        ":example-export/daml.yaml",
        "//docs:source/tools/export/output-root/Export.daml",
        "//docs:source/tools/export/output-root/args.json",
        "//docs:source/tools/export/output-root/daml.yaml",
    ],
    toolchains = ["@rules_sh//sh/posix:make_variables"],
)
