-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module Values where

import Daml.Script
import DA.Date
import DA.Map
import DA.TextMap
import DA.Time

template Token
  with
    owner : Party
  where
    signatory owner

template Container
  with
    owner : Party
    unit : ()
    bool : Bool
    dec : Decimal
    int : Int
    text : Text
    date : Date
    time : Time
    cid : ContractId Token
    tuple2 : (Int, Text)
    tuple3 : (Int, Text, Bool)
    tuple4 : (Int, Text, Bool, ())
    enums : [Letter]
    record : Record
    hkRecord : HkRecord Letter Int
    intList : [Int]
    tuple2List : [(Int, Text)]
    textMap : TextMap Record
    genMap : Map Letter Record
    intOpts : [Optional Int]
    intListOpts : [Optional [Int]]
    variants : [Variant]
    hkVariants : [HkVariant Letter Int ()]
  where
    signatory owner

data Letter
  = Aye
  | Bee
  | Cee
  | Dee
  deriving (Eq, Ord, Show)

data Record = Record with
    int : Int
    text : Text
    bool : Bool
  deriving (Eq, Ord, Show)

data HkRecord a b = HkRecord with
    int : Int
    text : Text
    bool : Bool
    aye : a
    bee : b
    ayeBees : [(a, b)]
  deriving (Eq, Ord, Show)

data Variant
  = VarUnit
  {-  The compiler warns
        > Variant type Variant constructor VarExplicitUnit has a single argument
        > of type (). The argument will not be preserved when importing this
        > package via data-dependencies.
      so we don't test this case.
  | VarExplicitUnit ()
  -}
  | VarInt Int
  | VarText Text
  | VarRec Record
  | VarFields with
      rec : Record
      int : Int
      text : Text
  deriving (Eq, Ord, Show)

data HkVariant a b c
  = HkVarUnit
  | HkVarInt Int
  | HkVarText Text
  | HkVarAye a
  | HkVarBee b
  | HkVarCee c
  | HkVarRec (HkRecord a b)
  | HkVarFields with
      hkRec : HkRecord a b
      int : Int
      text : Text
      ayeBeeCees : [(a, b, c)]
  deriving (Eq, Ord, Show)

data LedgerParties = LedgerParties with
  bank : Party

allocateParties : Script LedgerParties
allocateParties = do
  bank <- allocatePartyWithHint "Bank" (PartyIdHint "Bank")
  pure (LedgerParties bank)

initializeWith : LedgerParties -> Script ()
initializeWith LedgerParties {bank} = do
  tokenCid <- bank `submit` do
    createCmd Token with
      owner = bank
  bank `submit` do
    createCmd Container with
      owner = bank
      unit = ()
      bool = False
      dec = 3.1415926535
      int = 42
      text = "43"
      date = DA.Date.date 2021 Aug 01
      time = DA.Time.time (DA.Date.date 2022 Sep 02) 22 10 30
      cid = tokenCid
      tuple2 = (44, "45")
      tuple3 = (46, "47", False)
      tuple4 = (48, "49", True, ())
      enums = [Aye, Bee, Cee, Dee]
      record = Record with
        int = 50
        text = "51"
        bool = True
      hkRecord = HkRecord with
        int = 52
        text = "53"
        bool = True
        aye = Bee
        bee = 54
        ayeBees = [(Aye, 55), (Cee, 56)]
      intList = [57, 58, 59, 60]
      tuple2List = [(61, "62"), (63, "64"), (65, "66")]
      textMap = DA.TextMap.fromList
        [ ("67", Record 68 "69" False)
        , ("70", Record 71 "72" True)
        ]
      genMap = DA.Map.fromList
        [ (Aye, Record 73 "74" False)
        , (Dee, Record 75 "76" True)
        ]
      intOpts = [None, Some 77, None, Some 78]
      intListOpts = [None, Some [], Some [79], Some [80, 81, 82]]
      variants =
        [ {-
          VarUnit -- TODO: Handle sums of products properly
                  -- Currently exported with a spurious argument as
                  -- ```
                  -- Values.VarUnit ()`
                  -- ```
                  -- https://github.com/digital-asset/daml/issues/14723
        , -}
          VarInt 83
        , VarText "84"
        , VarRec (Record with
            int = 85
            text = "86"
            bool = True)
          {-
        , (VarFields with -- TODO: Handle sums of products properly
                          -- Currently exported with a spurious record
                          -- constructor `Values.Variant.VarFields` as
                          -- ```
                          -- (Values.VarFields (Values.Variant.VarFields
                          --     { rec = (Values.Record
                          --         { int = 87
                          --         , text = "88"
                          --         , bool = True })
                          --     , int = 89
                          --     , text = "90" }))
                          -- ```
                          -- https://github.com/digital-asset/daml/issues/14723
            rec = Record with
              int = 87
              text = "88"
              bool = True
            int = 89
            text = "90")
          -}
        ]
      hkVariants =
        [ {-
          HkVarUnit -- TODO: Handle sums of products properly
                    -- Currently exported with a spurious argument as
                    -- ```
                    -- Values.HkVarUnit ()`
                    -- ```
                    -- https://github.com/digital-asset/daml/issues/14723
        , -}
          HkVarInt 91
        , HkVarText "92"
        , HkVarAye Cee
        , HkVarBee 93
        , HkVarCee ()
        , HkVarRec (HkRecord with
            int = 94
            text = "95"
            bool = True
            aye = Bee
            bee = 96
            ayeBees = [(Aye, 97), (Cee, 98)])
          {-
        , (HkVarFields with -- TODO: Handle sums of products properly
                            -- Currently exported with a spurious record
                            -- constructor `Values.HkVariant.HkVarFields` as
                            -- ```
                            -- (Values.HkVarFields (Values.HkVariant.HkVarFields
                            --     { hkRec = (Values.HkRecord
                            --         { int = 99
                            --         , text = "100"
                            --         , bool = True
                            --         , aye = Values.Dee
                            --         , bee = 101
                            --         , ayeBees = [(Values.Bee, 102), (Values.Cee, 103)]})
                            --     , int = 104
                            --     , text = "105"
                            --     , ayeBeeCees = [(Values.Dee, 106, ()), (Values.Aye, 107, ())]}))
                            -- ```
                            -- https://github.com/digital-asset/daml/issues/14723
            hkRec = HkRecord with
              int = 99
              text = "100"
              bool = True
              aye = Dee
              bee = 101
              ayeBees = [(Bee, 102), (Cee, 103)]
            int = 104
            text = "105"
            ayeBeeCees = [(Dee, 106, ()), (Aye, 107, ())])
          -}
        ]
  pure ()

initialize : Script ()
initialize = initializeWith =<< allocateParties
