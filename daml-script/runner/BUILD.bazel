# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "lf_scalacopts_stricter",
)
load("//rules_daml:daml.bzl", "daml_compile")
load("//bazel_tools:proto.bzl", "proto_jars")

proto_jars(
    name = "admin_package_service_proto",
    srcs = ["src/main/protobuf/com/daml/lf/engine/script/admin_package_service.proto"],
    grpc = True,
    maven_artifact_prefix = "daml-script-",
    maven_group = "com.daml",
    strip_import_prefix = "src/main/protobuf/",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_protobuf//:empty_proto",
    ],
)

test_script_sources = [
    "src/main/scala/com/digitalasset/daml/lf/engine/script/TestMain.scala",
]

# Should match RunnerMainTestBase.DAR_COUNT
test_dar_count = 5

da_scala_library(
    name = "script-runner-lib",
    srcs = glob(
        ["src/main/scala/**/*.scala"],
    ),
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_typesafe_akka_akka_http",
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:com_typesafe_akka_akka_http_spray_json",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:com_typesafe_akka_akka_parsing",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_typelevel_paiges_core",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["maven_coordinates=com.daml:daml-script-runner:__VERSION__"],
    visibility = ["//visibility:public"],
    deps = [
        ":admin_package_service_proto_scala",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/scenario-interpreter",
        "//daml-lf/transaction",
        "//daml-script/converter",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-service/cli-opts",
        "//ledger-service/lf-value-json",
        "//ledger/error",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-auth-client",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/participant-local-store",
        "//libs-scala/auth-utils",
        "//libs-scala/contextualized-logging",
        "//libs-scala/jwt",
        "//libs-scala/nonempty",
        "@maven//:com_google_guava_guava",
    ],
)

da_scala_test(
    name = "tests",
    srcs = glob(
        ["src/test/scala/**/*.scala"],
    ),
    data =
        glob(["src/test/resources/**/*"]) + [
            ":daml-script-binary",
            ":failing-test-script.dar",
            "//test-common/test-certificates",
        ] + [":test-script{n}.dar".format(n = n) for n in range(
            1,
            test_dar_count + 1,
        )],
    scala_deps = [
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalaz_scalaz_core",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger-service/http-json:http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/http-json-testing:ce",
        "//ledger/ledger-api-common",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/scala-utils",
        "//test-common/canton/it-lib",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_binary(
    name = "daml-script-binary",
    main_class = "com.daml.lf.engine.script.ScriptMain",
    resources = glob(["src/main/resources/**/*"]),
    scala_runtime_deps = [
        "@maven//:com_typesafe_akka_akka_slf4j",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["ee-jar-license"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [
        ":script-runner-lib",
    ],
)

[
    daml_compile(
        name = "test-script{n}".format(n = n),
        srcs = glob(["src/test/resources/TestScript.daml"]),
        dependencies = ["//daml-script/daml:daml-script.dar"],
    )
    for n in range(
        1,
        test_dar_count + 1,
    )
]

daml_compile(
    name = "failing-test-script",
    srcs = glob(["src/test/resources/FailingTestScript.daml"]),
    dependencies = ["//daml-script/daml:daml-script.dar"],
)

exports_files(["src/main/resources/logback.xml"])
