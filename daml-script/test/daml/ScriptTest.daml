-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module ScriptTest where

import DA.Action
import DA.Assert
import DA.Date
import DA.Foldable hiding (length)
import DA.List
import DA.Stack
import DA.Time
import Daml.Script

template T
  with
    p1 : Party
    p2 : Party
  where
    signatory p1, p2

template TProposal
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice Accept : (ContractId T, Int)
      controller p2
      do cid <- create T { p1, p2 }
         pure (cid, 42)

template C
  with
    p : Party
    v : Int
  where
    signatory p

    choice ShouldFail : ()
      controller p
      do assert False

    choice GetCValue : Int
      controller p
      do pure v

template NumericTpl
  with
    p : Party
    v : Numeric 11
  where
    signatory p

    nonconsuming choice GetV : Numeric 11
      controller p
      do pure v

template WithKey
  with
    p : Party
  where
    signatory p
    key p : Party
    maintainer key

    nonconsuming choice GetCid : ContractId WithKey
      controller p
      do pure self

template TTupleKey
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    key (p1, p2) : (Party, Party)
    maintainer key._1

test0 : Script (Party, Party, [T], [TProposal], [C])
test0 = do
  alice <- allocateParty "alice"
  bob <- allocateParty "bob"
  (cId1, cId2) <- submit alice $ do
    cid1 <- createCmd (TProposal alice bob)
    cid2 <- createCmd (TProposal alice bob)
    pure (cid1, cid2)
  r <- submit bob $ do
    ~(_, r) <- exerciseCmd cId1 Accept
    exerciseCmd cId2 Accept
    pure r
  _ <- submit alice $ createCmd (C alice r)
  ts <- query @T alice
  tProposals <- query @TProposal alice
  cs <- query @C alice
  pure (alice, bob, map snd ts, map snd tProposals, map snd cs)

test1 : Script (Numeric 11)
test1 = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (NumericTpl alice 1.06)
  ts <- query @NumericTpl alice
  let v = case ts of
        [(_cid, NumericTpl _ v)] -> v
        _ -> error $ "Expected exactly one NumericTpl but got " <> show ts
  v' <- submit alice $ exerciseCmd cid GetV
  pure (v + v')

test2 : C -> Script Int
test2 (C _ i) = pure i

test3 : Script ()
test3 = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (C alice 42)
  submitMustFail alice $ exerciseCmd cid ShouldFail
  pure ()

test4 : Script (ContractId C, ContractId C)
test4 = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (C alice 42)
  [(cid', _)] <- query @C alice
  pure (cid, cid')

testKey : Script (ContractId WithKey, ContractId WithKey)
testKey = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (WithKey alice)
  cid' <- submit alice $ exerciseByKeyCmd @WithKey alice GetCid
  pure (cid, cid')

testCreateAndExercise : Script Int
testCreateAndExercise = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (C alice 41)
  -- We send a couple of commands to make sure that we properly handle the fact that
  -- we get two event results from a CreateAndExercise
  (_, r, _) <- submit alice $
    (,,)
      <$> createCmd (C alice 42)
      <*> createAndExerciseCmd (C alice 42) GetCValue
      <*> exerciseCmd cid GetCValue
  pure r

-- Used in daml script --all test-case.
failingTest : Script ()
failingTest = do
  alice <- allocateParty "alice"
  cid <- submit alice $ createCmd (C alice 42)
  submit alice $ exerciseCmd cid ShouldFail
  pure ()

-- | This used to produce a stackoverflow
testStack : Script ()
testStack = do
  p <- allocateParty "p"
  results <- submit p $ replicateA 1000 (createCmd (C p 42))
  assert (length results == 1000)

testGetTime : Script (Time, Time)
testGetTime = do
  t1 <- getTime
  t2 <- getTime
  assert (t1 <= t2)
  pure (t1, t2)

sleepTest : Script (Time, Time, Time)
sleepTest = do
  t1 <- getTime
  sleep (seconds 1)
  t2 <- getTime
  sleep (seconds 2)
  t3 <- getTime
  pure (t1, t2, t3)

partyIdHintTest : Script (Party, Party)
partyIdHintTest = do
  carol <- allocatePartyWithHint "carol" (PartyIdHint "carol")
  dan <- allocatePartyWithHint "dan" (PartyIdHint "dan")
  pure (carol, dan)

listKnownPartiesTest : Script ([PartyDetails], Party)
listKnownPartiesTest = do
  before <- listKnownParties
  p <- allocateParty "myparty"
  after <- listKnownParties
  let new = after \\ before
  new === [PartyDetails p (Some "myparty") True]
  pure (new, p)

auth : (Party, Party) -> Script ()
auth (alice, bob) = do
  proposal <- submit alice $ createCmd (TProposal alice bob)
  _ <- submit bob $ exerciseCmd proposal Accept
  pure ()

traceOrder : Script ()
traceOrder = do
  let y: Script () = abort "foobar"
  forA_ [0,1] $ \i -> do
    debugRaw "abc"
    x <- getTime
    debugRaw "def"

jsonBasic : Party -> Script Int
jsonBasic p = do
  cid <- submit p $ createCmd (TProposal p p)
  (cid, r) <- submit p $ exerciseCmd cid Accept
  results <- query @T p
  results === [(cid, T p p)]
  pure r

jsonCreateAndExercise : Party -> Script Int
jsonCreateAndExercise p =
  fmap snd $ submit p $ createAndExerciseCmd (TProposal p p) Accept

jsonExerciseByKey : Party -> Script (ContractId WithKey, ContractId WithKey)
jsonExerciseByKey p = do
  cid1 <- submit p $ createCmd (WithKey p)
  cid2 <- submit p $ exerciseByKeyCmd @WithKey p GetCid
  pure (cid1, cid2)

jsonCreate : Party -> Script (ContractId TProposal)
jsonCreate p = submit p $ createCmd (TProposal p p)

jsonQuery : Party -> Script [(ContractId TProposal, TProposal)]
jsonQuery p = query @TProposal p

jsonFailingCreateAndExercise : Party -> Script ()
jsonFailingCreateAndExercise p = submit p $ createAndExerciseCmd (C p 0) ShouldFail

jsonExpectedFailureCreateAndExercise : Party -> Script ()
jsonExpectedFailureCreateAndExercise p = submitMustFail p $ createAndExerciseCmd (C p 0) ShouldFail

jsonAllocateParty : Text -> Script Party
jsonAllocateParty p = do
  pre <- listKnownParties
  r <- allocatePartyWithHint p (PartyIdHint p)
  post <- listKnownParties
  sort (PartyDetails r (Some p) True :: pre) === sort post
  pure r

jsonMultiParty : (Party, Party) -> Script ()
jsonMultiParty (alice, bob) = do
  assert (alice /= bob)
  c <- submit alice $ createCmd (TProposal alice bob)
  submit bob (exerciseCmd c Accept)
  pure ()

jsonMissingTemplateId : Party -> Script Int
jsonMissingTemplateId p = do
  cid <- submit p (createCmd $ TProposal p p)
  snd <$> submit p (exerciseCmd cid Accept)

-- maxInboundMessageSize

template MessageSize
  with
    p : Party
  where
    signatory p
    nonconsuming choice CreateN : ()
      with
        n : Int
      controller p
      do
        res <- forA [1..n] (\_ -> do
              create this
          )
        return()

testMaxInboundMessageSize : Script () = do
  p <- allocateParty "p"
  b <- submit p do createCmd (MessageSize p)
  submit p do exerciseCmd b CreateN with n = 1
  return ()

testSetTime : Script (Time, Time) = do
  t0 <- getTime
  setTime (time (date 2000 Feb 2) 0 1 2)
  t1 <- getTime
  pure (t0, t1)

testMultiPartyQueries : Script () = do
  p0 <- allocateParty "p0"
  p1 <- allocateParty "p1"
  cids <- multiPartyQueryCreate (p0, p1)
  multiPartyQueryQuery ((p0, p1), cids)

multiPartyQueryCreate (p0, p1) = do
  cid0 <- submit p0 $ createCmd (C p0 42)
  cid1 <- submit p1 $ createCmd (C p1 23)
  cidKey0 <- submit p0 $ createCmd (WithKey p0)
  cidKey1 <- submit p1 $ createCmd (WithKey p1)
  pure (cid0, cid1, cidKey0, cidKey1)

multiPartyQueryQuery ((p0, p1), (cid0, cid1, cidKey0, cidKey1)) = do
  r <- query @C [p0, p1]
  sortOn (\(_, c) -> c.v) r === [(cid1, C p1 23), (cid0, C p0 42)]
  Some r <- queryContractId @C [p0, p1] cid0
  r === C p0 42
  Some r <- queryContractId @C [p0, p1] cid1
  r === C p1 23
  Some (r, _) <- queryContractKey @WithKey [p0, p1] p0
  r === cidKey0
  Some (r, _) <- queryContractKey @WithKey [p0, p1] p1
  r === cidKey1

testQueryContractId : Script () = do
  p <- allocateParty "p"
  jsonQueryContractId p

jsonQueryContractId p = do
  cid <- submit p do createCmd (C p 42)
  optR <- queryContractId p cid
  optR === Some (C p 42)
  submit p do archiveCmd cid
  optR <- queryContractId p cid
  optR === None

testQueryContractKey : Script () = do
  p <- allocateParty "p"
  jsonQueryContractKey p

jsonQueryContractKey p = do
  cid <- submit p do createCmd (WithKey p)
  optR <- queryContractKey @WithKey p p
  optR === Some (cid, WithKey p)
  submit p do archiveCmd cid
  optR <- queryContractKey @WithKey p p
  optR === None

template MultiPartyContract
  with
    parties: [Party]
  where
    signatory parties

    nonconsuming choice MPFetchOther : ()
      with
        cid: ContractId MultiPartyContract
        actor: Party
      controller actor
      do
        actualContract <- fetch cid
        return ()

deriving instance Ord MultiPartyContract

multiPartySubmission : Script ()
multiPartySubmission = do
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  submitMultiMustFail [p1] [] (createCmd (MultiPartyContract [p1, p2]))
  shared <- submitMulti [p1, p2] [] (createCmd (MultiPartyContract [p1, p2]))
  single <- submitMulti [p1] [] (createCmd (MultiPartyContract [p1]))
  submitMultiMustFail [p2] [] (exerciseCmd shared (MPFetchOther single p2))
  submitMulti [p2] [p1] (exerciseCmd shared (MPFetchOther single p2))
  pure ()

tupleKey : Script ()
tupleKey = do
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  cid <- submit p1 (createCmd (TTupleKey p1 p2))
  r <- queryContractKey @TTupleKey p1 (p1, p2)
  r === Some (cid, TTupleKey p1 p2)
  pure ()

tree : Script ()
tree = do
  p1 <- allocateParty "p1"
  TransactionTree [CreatedEvent (Created cid arg)] <- submitTree p1 (createCmd (T p1 p1))
  fromAnyTemplate arg === Some (T p1 p1)
  let Some cid' = fromAnyContractId @T cid
  optT <- queryContractId p1 cid'
  optT === Some (T p1 p1)
  cid <- submit p1 (createCmd (MessageSize p1))
  TransactionTree [ExercisedEvent ex] <- submitTree p1 (exerciseCmd cid (CreateN 3))
  fromAnyContractId @MessageSize ex.contractId === Some cid
  let [CreatedEvent c1, CreatedEvent c2, CreatedEvent c3] = ex.childEvents
  fromAnyTemplate c1.argument === Some (MessageSize p1)
  fromAnyTemplate c2.argument === Some (MessageSize p1)
  fromAnyTemplate c3.argument === Some (MessageSize p1)
  pure ()

mySubmit : HasCallStack => Party -> Commands a -> Script a
mySubmit p cmds = submit p cmds

stackTrace : Script ()
stackTrace = do
  p <- allocateParty "p"
  mySubmit p $ createAndExerciseCmd (C p 42) ShouldFail

-- Create a contract only visible to one party to test readAs
jsonMultiPartySubmissionCreateSingle : Party -> Script (ContractId MultiPartyContract)
jsonMultiPartySubmissionCreateSingle p = do
  submit p (createCmd (MultiPartyContract [p]))

-- Create a contract only visible to one party to test readAs
jsonMultiPartySubmissionCreate : (Party, Party) -> Script (ContractId MultiPartyContract)
jsonMultiPartySubmissionCreate (p1, p2) = do
  submitMulti [p1, p2] [] (createCmd (MultiPartyContract [p1, p2]))

-- Create a contract only visible to one party to test readAs
jsonMultiPartySubmissionExercise : (Party, Party, ContractId MultiPartyContract, ContractId MultiPartyContract) -> Script ()
jsonMultiPartySubmissionExercise (p1, p2, cid, cidFetch) = do
  submitMulti [p2] [p1] (exerciseCmd cid (MPFetchOther cidFetch p2))

-- Run a test with a token with actAs = [p1, p2], readAs = []
jsonMultiPartyPartySets : (Party, Party) -> Script ()
jsonMultiPartyPartySets (p1, p2) = do
  -- We can use authority from both parties
  submitMulti [p1, p2] [] $ createCmd (T p1 p2)
  -- Despite having a multi-party token we can still do single-party submissions
  submitMulti [p1] [] $ createCmd (T p1 p1)
  submitMulti [p2] [] $ createCmd (T p2 p2)
  -- A single party submission that requires authority from both fails
  submitMultiMustFail [p1] [] $ createCmd (T p1 p2)
  submitMultiMustFail [p2] [] $ createCmd (T p1 p2)
  -- We can also use the parties as readAs since actAs implies readAs
  cid <- submitMulti [p1, p2] [] $ createCmd (MultiPartyContract [p1, p2])
  ownedByP1 <- submitMulti [p1] [] $ createCmd (MultiPartyContract [p1])
  submitMultiMustFail [p2] [] $ exerciseCmd cid (MPFetchOther ownedByP1 p2)
  submitMulti [p2] [p1] $ exerciseCmd cid (MPFetchOther ownedByP1 p2)
  -- Query works for both parties
  rs <- query @MultiPartyContract [p1, p2]
  sort (map snd rs) === [MultiPartyContract [p1], MultiPartyContract [p1, p2]]
  -- Query works for a single party
  rs <- query @MultiPartyContract p2
  sort (map snd rs) === [MultiPartyContract [p1, p2]]
  r <- queryContractId p1 ownedByP1
  r === Some (MultiPartyContract [p1])
  r <- queryContractId p2 ownedByP1
  r === None
  pure ()

-- User created by Sandbox by default.
getParticipantAdmin : () -> Script User
getParticipantAdmin () = do
  participant_admin <- validateUserId "participant_admin"
  pure $ User participant_admin None

isValidUserId : Text -> Script Bool
isValidUserId name = try do _ <- validateUserId name; pure True catch InvalidUserId _ -> pure False

userExists : UserId -> Script Bool
userExists u = do try do _ <- getUser u; pure True catch UserNotFound _ -> pure False

expectUserNotFound : Script a -> Script ()
expectUserNotFound script = try do _ <- script; undefined catch UserNotFound _ -> pure ()

testUserManagementForParty : Party -> Script ()
testUserManagementForParty p1 = do
  True <- isValidUserId "good"
  False <- isValidUserId "BAD"
  participantAdmin <- getParticipantAdmin ()
  users <- listAllUsers
  users === [participantAdmin]
  u1 <- validateUserId "u1"
  u2 <- validateUserId "u2"
  let user1 = User u1 (Some p1)
  let user2 = User u2 None
  userIdToText u1 === "u1"
  userIdToText u2 === "u2"
  users <- listAllUsers
  users === [participantAdmin]
  False <- userExists u1
  createUser user1 []
  True <- userExists u1
  False <- userExists u2
  try do _ <- createUser user1 []; undefined catch UserAlreadyExists _ -> pure ()
  createUser user2 []
  True <- userExists u1
  True <- userExists u2
  u <- getUser u1
  u === user1
  u <- getUser u2
  u === user2
  nonexistent <- validateUserId "nonexistent"
  expectUserNotFound (getUser nonexistent)
  expectUserNotFound (deleteUser nonexistent)
  users <- listAllUsers
  sort users === [participantAdmin, user1, user2]
  deleteUser u1
  users <- listAllUsers
  sort users === [participantAdmin, user2]
  deleteUser u2
  users <- listAllUsers
  users === [participantAdmin]
  pure ()

testUserRightManagementForParties : Party -> Party -> Script ()
testUserRightManagementForParties p1 p2 = do
  u1 <- validateUserId "user1_for_rights"
  createUser (User u1 None) []
  rights <- listUserRights u1
  rights === []
  newRights <- grantUserRights u1 [ParticipantAdmin]
  newRights === [ParticipantAdmin]
  newRights <- grantUserRights u1 [ParticipantAdmin]
  newRights === []
  rights <- listUserRights u1
  rights === [ParticipantAdmin]
  newRights <- grantUserRights u1 [CanActAs p1, CanReadAs p2]
  newRights === [CanActAs p1, CanReadAs p2]
  rights <- listUserRights u1
  rights === [ParticipantAdmin, CanActAs p1, CanReadAs p2]
  revoked <- revokeUserRights u1 [ParticipantAdmin]
  revoked === [ParticipantAdmin]
  revoked <- revokeUserRights u1 [ParticipantAdmin]
  revoked === []
  rights <- listUserRights u1
  rights === [CanActAs p1, CanReadAs p2]
  revoked <- revokeUserRights u1 [CanActAs p1, CanReadAs p2]
  revoked === [CanActAs p1, CanReadAs p2]
  rights <- listUserRights u1
  rights === []
  nonexistent <- validateUserId "nonexistent"
  expectUserNotFound (listUserRights nonexistent)
  expectUserNotFound (revokeUserRights nonexistent [])
  expectUserNotFound (grantUserRights nonexistent [])
  u2 <- validateUserId "user2_for_rights"
  createUser (User u2 None) [ParticipantAdmin]
  rights <- listUserRights u2
  rights === [ParticipantAdmin]
  pure ()

testUserManagement = do
  clearUsers
  p1 <- allocateParty "p1"
  testUserManagementForParty p1

testUserRightManagement = do
  clearUsers
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  testUserRightManagementForParties p1 p2

jsonUserManagement : Party -> Script ()
jsonUserManagement p1 = do
  testUserManagementForParty p1

jsonUserRightManagement : Party -> Script ()
jsonUserRightManagement p1 = do
  testUserRightManagementForParties p1 p1

clearUsers : Script ()
clearUsers = do
  admin <- validateUserId "participant_admin"
  users <- listAllUsers
  forA_ users $ \u ->
    when (u.userId /= admin) $ deleteUser u.userId

testUserListPagination = do
  participantAdmin <- getParticipantAdmin ()
  let names = [ "u" <> show n | n <- [1..500] ]
  ids <- mapA validateUserId names
  let users = [ User id None | id <- ids ]
  sequence [ createUser user [] | user <- users ]
  users2 <- listAllUsers
  sort users2 === sort (users ++ [participantAdmin])
  sequence [ deleteUser id | id <- ids ]
  pure ()
