-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module TestWithAuthority where

import Daml.Script

template HasConsortiumAutority
  with
    consortiumParty: Party
  where
    signatory consortiumParty

template ProposeConsortiumAuthority
  with
    proposer: Party
    accepted: [Party]
    obs: [Party]
    consortiumParty: Party
  where
    signatory proposer, accepted
    observer obs

    choice Accept : ContractId ProposeConsortiumAuthority
      with who: Party
      controller who
      do create this with accepted = who :: this.accepted

    choice Ratify : ContractId HasConsortiumAutority controller proposer
      do
        withAuthorityOf accepted $ do
          withAuthorityOf [consortiumParty] $ do
            create HasConsortiumAutority with consortiumParty


test : Script ()
test = do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  charlie <- allocateParty "Charlie"

  org <- allocateParty "TheOrg"

  prop <- submit alice do
    createCmd ProposeConsortiumAuthority with
      proposer = alice
      accepted = []
      obs = [bob,charlie]

      -- Currently we have only a dummy implememation for the withAuthorityOf primitive.
      -- It ignores the parties and returns it's 2nd argument; no authority is gained.
      -- So to make this example work for now...
      consortiumParty = alice
      -- consortiumParty = org -- TODO #15882 -- This is what we want to write

  prop <- submit bob do exerciseCmd prop Accept with who = bob
  prop <- submit charlie do exerciseCmd prop Accept with who = charlie

  submit alice do exerciseCmd prop Ratify

  pure ()
