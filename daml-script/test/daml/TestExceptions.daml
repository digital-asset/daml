-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module TestExceptions where

import Daml.Script
import DA.Assert
import DA.Exception

exception Test1
  with
    m : Text
  where
    message m

exception Test2
  with
    m : Text
  where
    message m

test = script do
  noExc <-
    try (pure 42) catch
      Test1 _ -> pure 43
  noExc === 42
  exc <-
    try (throw (Test1 "abc")) catch
      Test1 _ -> pure 43
  exc === 43
  -- scoping
  exc <-
    try do
      try (pure 41) catch
        Test1 _ -> pure 42
      throw (Test1 "abc")
    catch
      Test1 _ -> pure 43
  exc === 43
  -- multiple exceptions and rethrow
  exc <-
    try (throw (Test1 "abc")) catch
      Test1 _ -> pure 42
      Test2 _ -> pure 43
  exc === 42
  exc <-
    try (throw (Test2 "abc")) catch
      Test1 _ -> pure 42
      Test2 _ -> pure 43
  exc === 43

  -- throw during evaluation
  exc <-
    try (let _ = throwPure (Test2 "abc") in pure 42) catch
      Test2 _ -> pure 43
  exc === 43
  -- throw during execution of exception handler
  exc <-
    try do
      try (throw (Test1 "abc")) catch
        Test1 _ -> throw (Test2 "abc")
    catch
      Test2 _ -> pure 42
  exc === 42
  -- throw during evaluation of exception handler
  exc <-
    try do
      try (throw (Test1 "abc")) catch
        Test1 _ -> let _ = throwPure (Test2 "abc") in pure 43
    catch
      Test2 _ -> pure 42
  exc === 42

-- tests that the error from {- 6 -} doesn't get caught in {- 3 -} (#16132)
try_catch_then_error : Script ()
try_catch_then_error = do
  {- 1 -} wasThrown <-
  {- 2 -}   try do pure False
  {- 3 -}   catch (_ : AnyException) -> pure True
  {- 4 -} if wasThrown
  {- 5 -}   then pure ()
  {- 6 -}   else error "expected exception"

-- tests that the error from {- 6 -} doesn't get caught in {- 3 -} (#16132)
try_catch_then_fail : Script ()
try_catch_then_fail = do
  {- 1 -} wasThrown <-
  {- 2 -}   try do pure False
  {- 3 -}   catch (_ : AnyException) -> pure True
  {- 4 -} if wasThrown
  {- 5 -}   then pure ()
  {- 6 -}   else fail "expected exception"

-- tests that the error from {- 6 -} doesn't get caught in {- 3 -} (#16132)
try_catch_then_abort : Script ()
try_catch_then_abort = do
  {- 1 -} wasThrown <-
  {- 2 -}   try do pure False
  {- 3 -}   catch (_ : AnyException) -> pure True
  {- 4 -} if wasThrown
  {- 5 -}   then pure ()
  {- 6 -}   else abort "expected exception"

try_catch_recover : Script ()
try_catch_recover = do
  x <-
    try do error "uh-oh"
    catch (e : AnyException) -> pure (message e <> "!")
  x === "uh-oh!"
