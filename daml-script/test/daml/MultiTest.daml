-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module MultiTest where

import DA.List
import DA.Time
import Daml.Script

template T
  with
    p1 : Party
    p2 : Party
  where
    signatory p1, p2

template TProposal
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice Accept : (ContractId T, Int)
      controller p2
      do cid <- create T { p1, p2 }
         pure (cid, 42)

multiTest : Script Int
multiTest = do
  alice <- allocatePartyOn "alice" (ParticipantName "one")
  bob <- allocatePartyOn "bob" (ParticipantName "two")
  proposalCid <- submit alice $ createCmd (TProposal alice bob)
  _ <- waitForCid tries bob proposalCid
  r <- submit bob $ exerciseCmd proposalCid Accept
  pure (snd r)

partyIdHintTest : Script (Party, Party)
partyIdHintTest = do
  alice <- allocatePartyWithHintOn "alice" (PartyIdHint "alice") (ParticipantName "one")
  bob <- allocatePartyWithHintOn "bob" (PartyIdHint "bob") (ParticipantName "two")
  pure (alice, bob)

listKnownPartiesTest : Script ([(Optional Text, Bool)], [(Optional Text, Bool)])
listKnownPartiesTest = do
  parties1 <- listKnownPartiesOn (ParticipantName "one")
  parties2 <- listKnownPartiesOn (ParticipantName "two")
  p2 <- allocatePartyOn "p2" (ParticipantName "two")
  p1 <- allocatePartyOn "p1" (ParticipantName "one")
  -- Synchronize by submitting transactions in both directions. This matches
  -- what the ledger API test tool uses for synchronization.
  -- note that since p2 is allocated before p1 through the ledger API,
  -- we are guaranteed that that one will know about p2 before p1
  proposalCid <- submit p1 $ createCmd (TProposal p1 p2)
  waitForCid tries p2 proposalCid
  (tCid, _) <- submit p2 $ exerciseCmd proposalCid Accept
  waitForCid tries p1 tCid
  parties1' <- listKnownPartiesOn (ParticipantName "one")
  parties2' <- listKnownPartiesOn (ParticipantName "two")
  pure
    ( map toTuple $ sortOn displayName (parties1' \\ parties1)
    , map toTuple $ sortOn displayName (parties2' \\ parties2)
    )
 where
  toTuple PartyDetails{..} = (displayName, isLocal)

tries : Int
tries = 60


waitForCid : (Template t, HasAgreement t) => Int -> Party -> ContractId t -> Script ()
waitForCid tries p cid
  | tries <= 0 = abort $ "Cid " <> show cid <> " did not appear"
  | otherwise = do
    r <- queryContractId p cid
    case r of
      None -> do
        sleep delay
        waitForCid (tries - 1) p cid
      Some _ -> pure ()
  where delay = seconds 1
