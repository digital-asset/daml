-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module MultiTest where

import DA.List
import Daml.Script

template T
  with
    p1 : Party
    p2 : Party
  where
    signatory p1, p2

template TProposal
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice Accept : (ContractId T, Int)
      controller p2
      do cid <- create T { p1, p2 }
         pure (cid, 42)

multiTest : Script Int
multiTest = do
  alice <- allocatePartyOn "alice" (ParticipantName "one")
  bob <- allocatePartyOn "bob" (ParticipantName "two")
  cid <- submit alice $ createCmd (TProposal alice bob)
  r <- submit bob $ exerciseCmd cid Accept
  pure (snd r)

partyIdHintTest : Script (Party, Party)
partyIdHintTest = do
  alice <- allocatePartyWithHintOn "alice" (PartyIdHint "alice") (ParticipantName "one")
  bob <- allocatePartyWithHintOn "bob" (PartyIdHint "bob") (ParticipantName "two")
  pure (alice, bob)

listKnownPartiesTest : Script ([PartyDetails], [PartyDetails])
listKnownPartiesTest = do
  parties1 <- listKnownPartiesOn (ParticipantName "one")
  parties2 <- listKnownPartiesOn (ParticipantName "two")
  p1 <- allocatePartyOn "p1" (ParticipantName "one")
  p2 <- allocatePartyOn "p2" (ParticipantName "two")
  parties1' <- listKnownPartiesOn (ParticipantName "one")
  parties2' <- listKnownPartiesOn (ParticipantName "two")
  pure (parties1' \\ parties1, parties2' \\ parties2)
