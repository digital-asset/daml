-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module DataChanges (main) where

import UpgradeTestLib
-- TODO[SW] Consider having all "PACKAGE" defs in a file become one dar, or an alternative "EXTEND-PACKAGE" syntax
import qualified V1.NameChanges as V1
import qualified V1.FieldsRemoved as V1
import qualified V1.FieldsRemovedNested as V1
import qualified V1.NonOptionalFieldsAdded as V1
import qualified V1.NonOptionalFieldsAddedNested as V1
import qualified V1.VariantUnchanged as V1
import qualified V1.VariantRemoved as V1
import qualified V1.VariantAdditional as V1

import qualified V2.NameChanges as V2
import qualified V2.FieldsRemoved as V2
import qualified V2.FieldsRemovedNested as V2
import qualified V2.NonOptionalFieldsAdded as V2
import qualified V2.NonOptionalFieldsAddedNested as V2
import qualified V2.VariantUnchanged as V2
import qualified V2.VariantRemoved as V2
import qualified V2.VariantAdditional as V2
import DA.Text

main : Script ()
main = tests
  [ ("Fails if the template name changes", templateNameChanges)
  , ("Fails if fields are removed", templateFieldsRemoved)
  , ("Fails if non-optional fields are added", templateNonOptionalFieldsAdded)
  , ("Fails if nested fields are removed", templateFieldsRemovedNested)
  , ("Fails if nested non-optional fields are added", templateNonOptionalFieldsAddedNested)
  , ("Succeeds if a nested variant is unchanged", templateVariantUnchanged)
  , ("Succeeds if a nested variant is upgraded and extended", templateVariantUpgradeFromOld)
  , ("Succeeds if a nested variant is an old case when downgrading", templateVariantDowngradeFromOld)
  , ("Fails if a nested variant is a removed case", templateVariantUpgradeToRemoved)
  , ("Fails if a nested variant is an additional case when downgrading", templateVariantDowngradeFromNew)
  ]

templateInvalidChange : forall t2 t1 c2. (Template t1, HasEnsure t1, Choice t2 c2 Text) => Bool -> (Party -> t1) -> c2 -> Script ()
templateInvalidChange shouldSucceed makeV1Contract v2Choice = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` exerciseCmd cidV2 v2Choice

  case (res, shouldSucceed) of
    (Right "V2", True) -> pure ()
    (Left (WronglyTypedContract {}), False) -> pure ()
    (Left (UnknownError msg), False) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "specific failure") <> " but got " <> show res

{- PACKAGE
name: data-changes
versions: 2
-}

{- MODULE
package: data-changes
contents: |
  module NameChanges where

  template NameChanges              -- @V 1
  template NameChangesOops          -- @V  2
    with
      party : Party
    where
      signatory party
      choice NameChangesCall : Text
        controller party
        do pure "V1"                -- @V 1
        do pure "V2"                -- @V  2
-}

templateNameChanges : Script ()
templateNameChanges = templateInvalidChange @V2.NameChangesOops False V1.NameChanges V2.NameChangesCall

{- MODULE
package: data-changes
contents: |
  module FieldsRemoved where
  template FieldsRemoved
    with
      party : Party
      someData : Int                  -- @V 1
    where
      signatory party
      choice FieldsRemovedCall : Text
        controller party
        do pure "V1"                  -- @V 1
        do pure "V2"                  -- @V  2
-}

templateFieldsRemoved : Script ()
templateFieldsRemoved = templateInvalidChange @V2.FieldsRemoved False (`V1.FieldsRemoved` 1) V2.FieldsRemovedCall

{- MODULE
package: data-changes
contents: |
  module FieldsRemovedNested where
  data FieldsRemovedNestedData = FieldsRemovedNestedData
    with
      party : Party
      someData : Int                        -- @V 1
    deriving (Eq, Show)

  template FieldsRemovedNested
    with
      nestedData : FieldsRemovedNestedData
    where
      signatory nestedData.party
      choice FieldsRemovedNestedCall : Text
        controller nestedData.party
        do pure "V1"                        -- @V 1
        do pure "V2"                        -- @V  2
-}

templateFieldsRemovedNested : Script ()
templateFieldsRemovedNested =
  templateInvalidChange
    @V2.FieldsRemovedNested
    False
    (\p -> V1.FieldsRemovedNested $ V1.FieldsRemovedNestedData p 1)
    V2.FieldsRemovedNestedCall

{- MODULE
package: data-changes
contents: |
  module NonOptionalFieldsAdded where

  template NonOptionalFieldsAdded
    with
      party : Party
      newField : Int                           -- @V  2
    where
      signatory party
      choice NonOptionalFieldsAddedCall : Text
        controller party
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
-}

templateNonOptionalFieldsAdded : Script ()
templateNonOptionalFieldsAdded = templateInvalidChange @V2.NonOptionalFieldsAdded False V1.NonOptionalFieldsAdded V2.NonOptionalFieldsAddedCall

{- MODULE
package: data-changes
contents: |
  module NonOptionalFieldsAddedNested where

  data NonOptionalFieldsAddedNestedData = NonOptionalFieldsAddedNestedData
    with
      party : Party
      newField : Int                                 -- @V  2
    deriving (Eq, Show)

  template NonOptionalFieldsAddedNested
    with
      nestedData : NonOptionalFieldsAddedNestedData
    where
      signatory nestedData.party
      choice NonOptionalFieldsAddedNestedCall : Text
        controller nestedData.party
        do pure "V1"                                 -- @V 1
        do pure "V2"                                 -- @V  2
-}

templateNonOptionalFieldsAddedNested : Script ()
templateNonOptionalFieldsAddedNested =
  templateInvalidChange
    @V2.NonOptionalFieldsAddedNested
    False
    (V1.NonOptionalFieldsAddedNested . V1.NonOptionalFieldsAddedNestedData)
    V2.NonOptionalFieldsAddedNestedCall

{- MODULE
package: data-changes
contents: |
  module VariantUnchanged where

  data VariantUnchangedData
    = VariantUnchangedData1
    | VariantUnchangedData2
    deriving (Eq, Show)
  template VariantUnchanged
    with
      party : Party
      nestedData : VariantUnchangedData
    where
      signatory party
      choice VariantUnchangedCall : Text
        controller party
        do pure "V1"                     -- @V 1
        do pure "V2"                     -- @V  2
-}

templateVariantUnchanged : Script ()
templateVariantUnchanged =
  templateInvalidChange
    @V2.VariantUnchanged
    True
    (`V1.VariantUnchanged` V1.VariantUnchangedData1)
    V2.VariantUnchangedCall

{- MODULE
package: data-changes
contents: |
  module VariantRemoved where

  data VariantRemovedData
    = VariantRemovedData1
    | VariantRemovedData2              -- @V 1
    deriving (Eq, Show)
  template VariantRemoved
    with
      party : Party
      nestedData : VariantRemovedData
    where
      signatory party
      choice VariantRemovedCall : Text
        controller party
        do pure "V1"                   -- @V 1
        do pure "V2"                   -- @V  2
-}

templateVariantUpgradeToRemoved : Script ()
templateVariantUpgradeToRemoved =
  templateInvalidChange
    @V2.VariantRemoved
    False
    (`V1.VariantRemoved` V1.VariantRemovedData2)
    V2.VariantRemovedCall

{- MODULE
package: data-changes
contents: |
  module VariantAdditional where

  data VariantAdditionalData
    = VariantAdditionalData1
    | VariantAdditionalData2
    | VariantAdditionalData3              -- @V  2
    deriving (Eq, Show)
  template VariantAdditional
    with
      party : Party
      nestedData : VariantAdditionalData
    where
      signatory party
      choice VariantAdditionalCall : Text
        controller party
        do pure "V1"                      -- @V 1
        do pure "V2"                      -- @V  2
-}

templateVariantDowngradeFromNew : Script ()
templateVariantDowngradeFromNew = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.VariantAdditional with party = a, nestedData = V2.VariantAdditionalData3

  let cidV1 = coerceContractId @V2.VariantAdditional @V1.VariantAdditional cid

  -- Ensure we can only call the V1 choice
  res <- a `trySubmit` exerciseExactCmd cidV1 V1.VariantAdditionalCall

  case res of
    Left (UnknownError msg) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected specific failure but got " <> show res

templateVariantUpgradeFromOld : Script ()
templateVariantUpgradeFromOld =
  templateInvalidChange
    @V2.VariantAdditional
    True
    (`V1.VariantAdditional` V1.VariantAdditionalData1)
    V2.VariantAdditionalCall

templateVariantDowngradeFromOld : Script ()
templateVariantDowngradeFromOld =
  templateInvalidChange
    @V1.VariantAdditional
    True
    (`V2.VariantAdditional` V2.VariantAdditionalData1)
    V1.VariantAdditionalCall

