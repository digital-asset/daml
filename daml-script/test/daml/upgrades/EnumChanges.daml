-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module EnumChanges (main) where

import UpgradeTestLib
import DA.Text

import qualified V1.EnumUnchanged as V1
import qualified V1.EnumRemoved as V1
import qualified V1.EnumAdditional as V1

import qualified V2.EnumUnchanged as V2
import qualified V2.EnumRemoved as V2
import qualified V2.EnumAdditional as V2

main : Script ()
main = tests
  [ ("Succeeds if a nested enum is unchanged", templateEnumUnchanged)
  , ("Succeeds if a nested enum is upgraded and extended", templateEnumUpgradeFromOld)
  , ("Succeeds if a nested enum is an old case when downgrading", templateEnumDowngradeFromOld)
  , ("Fails if a nested enum is a removed case", templateEnumUpgradeToRemoved)
  , ("Fails if a nested enum is an additional case when downgrading", templateEnumDowngradeFromNew)
  ]

templateInvalidChange : forall t2 t1 c2. (Template t1, HasEnsure t1, Choice t2 c2 Text) => Bool -> (Party -> t1) -> c2 -> Script ()
templateInvalidChange shouldSucceed makeV1Contract v2Choice = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` exerciseExactCmd cidV2 v2Choice

  case (res, shouldSucceed) of
    (Right "V1", True) -> pure ()
    (Right "V2", True) -> pure ()
    (Left (WronglyTypedContract {}), False) -> pure ()
    (Left (UnknownError msg), False) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "specific failure") <> " but got " <> show res

{- PACKAGE
name: enum-changes
versions: 2
-}

{- MODULE
package: enum-changes
contents: |
  module EnumUnchanged where

  data EnumUnchangedData
    = EnumUnchangedData1
    | EnumUnchangedData2
    deriving (Eq, Show, Enum)
  template EnumUnchanged
    with
      party : Party
      nestedData : EnumUnchangedData
    where
      signatory party
      choice EnumUnchangedCall : Text
        controller party
        do pure "V1"                     -- @V 1
        do pure "V2"                     -- @V  2
-}

templateEnumUnchanged : Script ()
templateEnumUnchanged =
  templateInvalidChange
    @V2.EnumUnchanged
    True
    (`V1.EnumUnchanged` V1.EnumUnchangedData1)
    V2.EnumUnchangedCall

{- MODULE
package: enum-changes
contents: |
  module EnumRemoved where

  data EnumRemovedData
    = EnumRemovedData1
    | EnumRemovedData2
    | EnumRemovedData3                 -- @V 1
    deriving (Eq, Show, Enum)
  template EnumRemoved
    with
      party : Party
      nestedData : EnumRemovedData
    where
      signatory party
      choice EnumRemovedCall : Text
        controller party
        do pure "V1"                   -- @V 1
        do pure "V2"                   -- @V  2
-}

templateEnumUpgradeToRemoved : Script ()
templateEnumUpgradeToRemoved =
  templateInvalidChange
    @V2.EnumRemoved
    False
    (`V1.EnumRemoved` V1.EnumRemovedData3)
    V2.EnumRemovedCall

{- MODULE
package: enum-changes
contents: |
  module EnumAdditional where

  data EnumAdditionalData
    = EnumAdditionalData1
    | EnumAdditionalData2
    | EnumAdditionalData3                 -- @V  2
    deriving (Eq, Show, Enum)
  template EnumAdditional
    with
      party : Party
      nestedData : EnumAdditionalData
    where
      signatory party
      choice EnumAdditionalCall : Text
        controller party
        do pure "V1"                      -- @V 1
        do pure "V2"                      -- @V  2
-}

templateEnumDowngradeFromNew : Script ()
templateEnumDowngradeFromNew =
  templateInvalidChange
    @V1.EnumAdditional
    False
    (`V2.EnumAdditional` V2.EnumAdditionalData3)
    V1.EnumAdditionalCall

templateEnumUpgradeFromOld : Script ()
templateEnumUpgradeFromOld =
  templateInvalidChange
    @V2.EnumAdditional
    True
    (`V1.EnumAdditional` V1.EnumAdditionalData1)
    V2.EnumAdditionalCall

templateEnumDowngradeFromOld : Script ()
templateEnumDowngradeFromOld =
  templateInvalidChange
    @V1.EnumAdditional
    True
    (`V2.EnumAdditional` V2.EnumAdditionalData1)
    V1.EnumAdditionalCall
