-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module RecordChanges (main) where

import UpgradeTestLib
import qualified V1.NameChanges as V1
import qualified V1.FieldsRemoved as V1
import qualified V1.FieldsRemovedNested as V1
import qualified V1.NonOptionalFieldsAdded as V1
import qualified V1.NonOptionalFieldsAddedNested as V1
import qualified V1.NonLastOptionalFieldsAdded as V1
import qualified V1.NonLastOptionalFieldsAddedNested as V1
import qualified V1.TypeChanges as V1
import qualified V1.TypeChangesNested as V1
import qualified V1.ModuleFrom as V1

import qualified V2.NameChanges as V2
import qualified V2.FieldsRemoved as V2
import qualified V2.FieldsRemovedNested as V2
import qualified V2.NonOptionalFieldsAdded as V2
import qualified V2.NonOptionalFieldsAddedNested as V2
import qualified V2.NonLastOptionalFieldsAdded as V2
import qualified V2.NonLastOptionalFieldsAddedNested as V2
import qualified V2.TypeChanges as V2
import qualified V2.TypeChangesNested as V2
import qualified V2.ModuleTo as V2
import DA.Text

main : Script ()
main = tests
  [ ("Fails if the template name changes", templateNameChanges)
  , ("Fails if fields are removed", templateFieldsRemoved)
  , ("Fails if non-optional fields are added", templateNonOptionalFieldsAdded)
  , ("Fails if nested fields are removed", templateFieldsRemovedNested)
  , ("Fails if nested non-optional fields are added", templateNonOptionalFieldsAddedNested)
  , ("Fails if the template module changes", moduleNameChanges)
  , ("Fails if a non-optional field is added not at the end of a template", templateNonLastOptionalFieldsAdded)
  , ("Fails if a non-optional field is added not at the end of a nested datatype", templateNonLastOptionalFieldsAddedNested)
  , broken ("Fails if a template field changes type", templateFieldTypeChanges)
  , broken ("Fails if a nested data types' field changes type", templateFieldTypeChangesNested)
  ]

templateInvalidChange : forall t2 t1 c2. (Template t1, HasEnsure t1, Choice t2 c2 Text) => Bool -> (Party -> t1) -> c2 -> Script ()
templateInvalidChange shouldSucceed makeV1Contract v2Choice = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` exerciseExactCmd cidV2 v2Choice

  case (res, shouldSucceed) of
    (Right "V1", True) -> pure ()
    (Right "V2", True) -> pure ()
    (Left (WronglyTypedContract {}), False) -> pure ()
    (Left (UnknownError msg), False) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "specific failure") <> " but got " <> show res

{- PACKAGE
name: record-changes
versions: 2
-}

{- MODULE
package: record-changes
contents: |
  module NameChanges where

  template NameChanges              -- @V 1
  template NameChangesOops          -- @V  2
    with
      party : Party
    where
      signatory party
      choice NameChangesCall : Text
        controller party
        do pure "V1"                -- @V 1
        do pure "V2"                -- @V  2
-}

templateNameChanges : Script ()
templateNameChanges = templateInvalidChange @V2.NameChangesOops False V1.NameChanges V2.NameChangesCall

{- MODULE
package: record-changes
contents: |
  module FieldsRemoved where
  template FieldsRemoved
    with
      party : Party
      someData : Int                  -- @V 1
    where
      signatory party
      choice FieldsRemovedCall : Text
        controller party
        do pure "V1"                  -- @V 1
        do pure "V2"                  -- @V  2
-}

templateFieldsRemoved : Script ()
templateFieldsRemoved = templateInvalidChange @V2.FieldsRemoved False (`V1.FieldsRemoved` 1) V2.FieldsRemovedCall

{- MODULE
package: record-changes
contents: |
  module FieldsRemovedNested where
  data FieldsRemovedNestedData = FieldsRemovedNestedData
    with
      party : Party
      someData : Int                        -- @V 1
    deriving (Eq, Show)

  template FieldsRemovedNested
    with
      nestedData : FieldsRemovedNestedData
    where
      signatory nestedData.party
      choice FieldsRemovedNestedCall : Text
        controller nestedData.party
        do pure "V1"                        -- @V 1
        do pure "V2"                        -- @V  2
-}

templateFieldsRemovedNested : Script ()
templateFieldsRemovedNested =
  templateInvalidChange
    @V2.FieldsRemovedNested
    False
    (\p -> V1.FieldsRemovedNested $ V1.FieldsRemovedNestedData p 1)
    V2.FieldsRemovedNestedCall

{- MODULE
package: record-changes
contents: |
  module NonOptionalFieldsAdded where

  template NonOptionalFieldsAdded
    with
      party : Party
      newField : Int                           -- @V  2
    where
      signatory party
      choice NonOptionalFieldsAddedCall : Text
        controller party
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
-}

templateNonOptionalFieldsAdded : Script ()
templateNonOptionalFieldsAdded = templateInvalidChange @V2.NonOptionalFieldsAdded False V1.NonOptionalFieldsAdded V2.NonOptionalFieldsAddedCall

{- MODULE
package: record-changes
contents: |
  module NonOptionalFieldsAddedNested where

  data NonOptionalFieldsAddedNestedData = NonOptionalFieldsAddedNestedData
    with
      party : Party
      newField : Int                                 -- @V  2
    deriving (Eq, Show)

  template NonOptionalFieldsAddedNested
    with
      nestedData : NonOptionalFieldsAddedNestedData
    where
      signatory nestedData.party
      choice NonOptionalFieldsAddedNestedCall : Text
        controller nestedData.party
        do pure "V1"                                 -- @V 1
        do pure "V2"                                 -- @V  2
-}

templateNonOptionalFieldsAddedNested : Script ()
templateNonOptionalFieldsAddedNested =
  templateInvalidChange
    @V2.NonOptionalFieldsAddedNested
    False
    (V1.NonOptionalFieldsAddedNested . V1.NonOptionalFieldsAddedNestedData)
    V2.NonOptionalFieldsAddedNestedCall

{- MODULE
package: record-changes
contents: |
  module ModuleFrom where  -- @V 1
  module ModuleTo where    -- @V  2
  template ModuleChanges
    with 
      party : Party
    where
      signatory party
      choice ModuleChangesCall : Text
        controller party
        do pure "V1"       -- @V 1
        do pure "V2"       -- @V  2
-}

moduleNameChanges : Script ()
moduleNameChanges = templateInvalidChange @V2.ModuleChanges False V1.ModuleChanges V2.ModuleChangesCall


{- MODULE
package: record-changes
contents: |
  module NonLastOptionalFieldsAdded where

  template NonLastOptionalFieldsAdded
    with
      party : Party
      newField : Optional Int -- @V 2
      oldField : Int
    where
      signatory party
      choice NonLastOptionalFieldsAddedCall : Text
        controller party
        do pure "V1"          -- @V 1
        do pure "V2"          -- @V  2
-}

templateNonLastOptionalFieldsAdded : Script ()
templateNonLastOptionalFieldsAdded = templateInvalidChange @V2.NonLastOptionalFieldsAdded False (`V1.NonLastOptionalFieldsAdded` 1) V2.NonLastOptionalFieldsAddedCall

{- MODULE
package: record-changes
contents: |
  module NonLastOptionalFieldsAddedNested where

  data NonLastOptionalFieldsAddedNestedData = NonLastOptionalFieldsAddedNestedData
    with
      party : Party
      newField : Int                    -- @V 2
      oldField : Int
    deriving (Eq, Show)

  template NonLastOptionalFieldsAddedNested
    with
      nestedData : NonLastOptionalFieldsAddedNestedData
    where
      signatory nestedData.party
      choice NonLastOptionalFieldsAddedNestedCall : Text
        controller nestedData.party
        do pure "V1"                    -- @V 1
        do pure "V2"                    -- @V  2
-}

templateNonLastOptionalFieldsAddedNested : Script ()
templateNonLastOptionalFieldsAddedNested =
  templateInvalidChange
    @V2.NonLastOptionalFieldsAddedNested
    False
    (\p -> V1.NonLastOptionalFieldsAddedNested $ V1.NonLastOptionalFieldsAddedNestedData p 1)
    V2.NonLastOptionalFieldsAddedNestedCall

{- MODULE
package: record-changes
contents: |
  module TypeChanges where

  template TypeChanges
    with 
      party : Party
      changingType : Int         -- @V 1
      changingType : Text        -- @V  2
    where
      signatory party
      choice TypeChangesCall : Text
        controller party
        do pure "V1"             -- @V 1
        do pure "V2"             -- @V  2
-}

templateFieldTypeChanges : Script ()
templateFieldTypeChanges = templateInvalidChange @V2.TypeChanges False (`V1.TypeChanges` 1) V2.TypeChangesCall

{- MODULE
package: record-changes
contents: |
  module TypeChangesNested where

  data TypeChangesNestedData = TypeChangesNestedData with
      party : Party
      changingType : Int      -- @V 1
      changingType : Text     -- @V  2
    deriving (Eq, Show)

  template TypeChangesNested
    with 
      nestedData : TypeChangesNestedData
    where
      signatory (party nestedData)
      choice TypeChangesNestedCall : Text
        controller (party nestedData)
        do pure "V1"          -- @V 1
        do pure "V2"          -- @V  2
-}

templateFieldTypeChangesNested : Script ()
templateFieldTypeChangesNested =
  templateInvalidChange 
    @V2.TypeChangesNested
    False
    (\p -> V1.TypeChangesNested $ V1.TypeChangesNestedData p 1)
    V2.TypeChangesNestedCall