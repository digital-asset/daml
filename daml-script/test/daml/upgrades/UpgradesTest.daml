-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}

-- IMPORTANT: We do not track vetting state in these tests, it is your responsibility as the test writer to re-vet all packages you unvetted as part of your test at the end
module UpgradesTest where

import DA.Assert
import DA.Exception
import DA.Foldable
import DA.Text
import Daml.Script
import Daml.Script.Questions.Exceptions (tryToEither)
import Daml.Script.Questions.Testing.Internal
import qualified V1.MyTemplates as V1
import qualified V2.MyTemplates as V2
import V1.MyTemplates hiding (ValidUpgrade, SameTypeChoice)
import V2.MyTemplates hiding (ValidUpgrade, SameTypeChoice)

v1DarName : Text
v1DarName = "upgrades-my-templates-v1"

v2DarName : Text
v2DarName = "upgrades-my-templates-v2"

participant0 : ParticipantName
participant0 = ParticipantName "participant0"

participant1 : ParticipantName
participant1 = ParticipantName "participant1"

-- The error given back for unknown templates is either PACKAGE_NOT_FOUND (if the dar was never uploaded)
-- or NO_DOMAIN_FOR_SUBMISSION. We always upload all dars before the test, so we'll never hit the former error.
-- We've not yet implemented variants in the SubmitError type for NoDomainForSubmission, so we capture this error via UnknownError
assertUnknownPackageError : Either SubmitError a -> Script ()
assertUnknownPackageError (Left (UnknownError msg)) | "NO_DOMAIN_FOR_SUBMISSION" `isInfixOf` msg = pure ()
assertUnknownPackageError (Left err) = assertFail $ "Expected NO_DOMAIN_FOR_SUBMISSION error, but got: " <> show err
assertUnknownPackageError (Right _) = assertFail $ "Expected missing package error, but submission succeeded"

-- Convenient wrapper we can inline with the submit call
liftAssertUnknownPackageError : Script (Either SubmitError a) -> Script ()
liftAssertUnknownPackageError s = s >>= assertUnknownPackageError

main : Script ()
main = forA_ tests $ \(testName, test) -> do
  debugRaw $ "Testing: " <> testName
  test

-- | Used to tag a test as failing by erroring in any way, once all this behaviour works, this function can be removed
brokenScript : Script () -> Script ()
brokenScript act = do
  tryToEither (\() -> liftFailedCommandToException act) >>= \case
    Right _ -> assertFail "Expected failed and got success! Did you fix this logic? Remove the wrapping `failure` to mark this as working."
    Left _ -> do
      -- Cleanup so next test can run.
      vetDarOnParticipant v1DarName participant0
      vetDarOnParticipant v1DarName participant1
      vetDarOnParticipant v2DarName participant0
      vetDarOnParticipant v2DarName participant1

broken : (Text, Script ()) -> (Text, Script ())
broken (name, act) = ("(BROKEN) " <> name, brokenScript act)

tests : [(Text, Script ())]
tests = mconcat
  [ -- "Single" participant tests
    -- (we only submit/read from one participant, but by nature of having multiple participants on the same domain, version selection is affected)
    [ -- daml3-script query tests
      ("Upgrade a contract when querying", queryUpgraded)
    , ("Downgrade a contract with Nones when querying", queryDowngradedNone)
    , ("Fail to downgrade a contract with Somes when querying", queryDowngradedSome)

    , -- Fetching tests
      ("Upgrade a contract when fetching", fetchUpgraded)
    , ("Downgrade a contract with Nones when fetching", fetchDowngradedNone)
    , ("Fail to downgrade a contract with Somes when fetching", fetchDowngradedSome)

    , -- Fetching tests with unvetted sources (BROKEN)
      broken ("Upgrade a contract when fetching where the source package (V1) is unvetted", fetchUpgradedSourceUnvetted)
    , broken ("Downgrade a contract with Nones when fetching where the source package (V2) is unvetted", fetchDowngradedNoneSourceUnvetted)

    , -- Template payload upgrading/downgrading from exercises within choice bodies
      -- The expected behaviour here is that the outer templates have fixed the choice version they wish to call
      -- So the ledger must coerce the real data to match the expected data. Regardless of what the "most recent" version of that package is
      ("Call a V1 choice on a V1 contract from within a choice body, expect V1 implementation is used regardless of the possible upgrade.", exerciseV1ChoiceV1ContractSameType)
    , ("Call a V1 choice on a V2 contract from within a choice body, expect V1 implementation is used, via a downgrade.", exerciseV1ChoiceV2ContractSameType)
    , ("Call a V1 choice on a V2 contract with Some field from within a choice body, expect V1 implementation to attempt to be used, but fail downgrade", exerciseV1ChoiceV2ContractSameTypeSome)
    , ("Call a V2 choice on a V1 contract from within a choice body, expect V2 implementation is used, via an upgrade", exerciseV2ChoiceV1ContractSameType)
    , ("Call a V2 choice on a V2 contract from within a choice body, expect V2 implementation is used, for sanity", exerciseV2ChoiceV2ContractSameType)

    , -- Choice upgrading
      ("Explicitly call a V1 choice on a V1 contract over the ledger-api, expect V1 implementation used.", explicitV1ChoiceV1Contract)
    , ("Explicitly call a V2 choice on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", explicitV2ChoiceV1Contract)
    , ("Call a V1 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, contract + argument upgraded, daml-script downgrades return type.", inferredV1ChoiceV1Contract)
    , ("Call a V2 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", inferredV2ChoiceV1Contract)
    , broken ("Call a V2 choice without package ID on a V1 contract over the ledger-api, with V2 unvetted, expect V1 implementation used, argument downgraded, daml-script upgrades return type.", inferredV1ChoiceV1ContractWithoutV2)
    , ("Explicitly call a V1 choice on a V2 contract over the ledger-api, expect V1 implementation used, and contract downgraded.", explicitV1ChoiceV2Contract)
    , ("Explicitly call a V2 choice on a V2 contract over the ledger-api, expect V2 implementation used.", explicitV2ChoiceV2Contract)

    , -- Choice upgrading nested (same as above but with various data types nested)
      ("Explicitly call a V1 choice on a V1 contract over the ledger-api, expect V1 implementation used. (Nested)", explicitV1ChoiceV1ContractNested)
    , ("Explicitly call a V2 choice on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded. (Nested)", explicitV2ChoiceV1ContractNested)
    , ("Call a V1 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, contract + argument upgraded, daml-script downgrades return type. (Nested)", inferredV1ChoiceV1ContractNested)
    , ("Call a V2 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded. (Nested)", inferredV2ChoiceV1ContractNested)
    , broken ("Call a V2 choice without package ID on a V1 contract over the ledger-api, with V2 unvetted, expect V1 implementation used, argument downgraded, daml-script upgrades return type. (Nested)", inferredV1ChoiceV1ContractWithoutV2Nested)
    , ("Explicitly call a V1 choice on a V2 contract over the ledger-api, expect V1 implementation used, and contract downgraded. (Nested)", explicitV1ChoiceV2ContractNested)
    , ("Explicitly call a V2 choice on a V2 contract over the ledger-api, expect V2 implementation used. (Nested)", explicitV2ChoiceV2ContractNested)

    , -- Added/removed choices
      ("Succeeds explicitly calling a new V2 choice on a V1 contract", explicitNewV2ChoiceV1Contract)
    , ("Succeeds implicitly calling a new V2 choice on a V1 contract", implicitNewV2ChoiceV1Contract)
    , -- These cases should not be possible once upload time checks are implemented
      ("Succeeds explicitly calling a removed V1 choice on a V2 contract", explicitRemovedV1ChoiceV2Contract)
    , ("Fails implicitly calling a removed V1 choice on a V2 contract, as V2 is selected", implicitRemovedV1ChoiceV2Contract)
    , ("Fails implicitly calling a removed V1 choice on a V1 contract, as V2 is selected", implicitRemovedV1ChoiceV1Contract)
    
    , -- Invalid signatory/observer changes
      ("Succeeds if the signatories don't change", unchangedSignatoryUpgrade)
    , ("Fails if the signatories set gets larger", largerSignatoryUpgrade)
    , ("Fails if the signatories set gets smaller", smallerSignatoryUpgrade)
    , ("Succeeds if the observers don't change", unchangeObserverUpgrade)
    , ("Fails if the observers set gets larger", largerObserverUpgrade)
    , ("Fails if the observers set gets smaller", smallerObserverUpgrade)
    , ("Succeeds if the observer set loses parties that are already signatories", canRemoveObserversThatAreSignatories)

    , -- Ensure clause changes
      ("Fails if the ensure clause changes such that V1 is not longer valid", ensureClauseBecomesInvalid)
    , ("Succeeds when implicitly creating a V1 contract such that the ensure clause only passes in V2", onlyV2EnsureClauseRequiredForImplicitUpgrade)
    , ("Fails when explicitly calling a V1 choice on a V2 contract that doesn't pass the ensure clause in V1", ensureClauseDowngradeToNoLongerValid)

    , -- Invalid data upgrades (compile time checks repeated at runtime)
      ("Fails if the template name changes", templateNameChanges)
    , broken ("Fails if a nested data-type's name changes", templateNameChangesNested)
    , ("Fails if fields are removed", templateFieldsRemoved)
    , ("Fails if non-optional fields are added", templateNonOptionalFieldsAdded)
    , broken ("Fails if fields are renamed", templateFieldsRenamed)
    , ("Fails if nested fields are removed", templateFieldsRemovedNested)
    , ("Fails if nested non-optional fields are added", templateNonOptionalFieldsAddedNested)
    , broken ("Fails if nested fields are renamed", templateFieldsRenamedNested)
    , ("Succeeds if a nested variant is unchanged", templateVariantUnchanged)
    , ("Fails if a nested variant is a removed case", templateVariantUpgradeToRemoved)
    , ("Fails if a nested variant is an additional case when downgrading", templateVariantDowngradeFromNew)

    , -- Edge behaviour
      -- https://github.com/DACH-NY/canton/issues/14718
      broken ("Chooses the v1 contract if v2 is unvetted and package id is omitted.", packageSelectionChoosesUnvettedPackages)
      -- TODO: Weird numeric case from Moritz/Remy - Requires disclosed contracts, daml3-script does not support this.
      -- Cannot be tested.
      -- I believe the case is - old contract with a Decimal, attempt to use it by disclosing and upgrading at the same time, something breaks
    ]
  , -- Multi participant tests
    [ ("Both participants have v2, upgraded create succeeds.", bothParticipantsV2)
    , ("Submitting participant has v2, other has v1, failure.", submitV1OtherV2)
    , ("Submitting participant has v1, other has v2, failure.", submitV2OtherV1)
      -- TODO: Consider a final test where both participants have v2 disabled. Sadly this cannot work given the
      -- packageSelectionChoosesUnvettedPackages shows that even an individual participant will pick v2 in this case.
    ]
  ]

queryUpgraded : Script ()
queryUpgraded = do
  a <- allocatePartyOn "alice" participant0

  cid <- a `submit` createExactCmd V1.ValidUpgrade with party = a
  let v2Cid = coerceContractId @V1.ValidUpgrade @V2.ValidUpgrade cid
  v2Name <- queryContractId a v2Cid
  v2Name === Some V2.ValidUpgrade with party = a, newField = None

queryDowngradedNone : Script ()
queryDowngradedNone = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = None
  let v1Cid = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid
  v1Name <- queryContractId a v1Cid
  v1Name === Some V1.ValidUpgrade with party = a
  pure ()

queryDowngradedSome : Script ()
queryDowngradedSome = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = Some("Text")
  let v1Cid = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid
  res <- tryCommands $ queryContractId a v1Cid
  case res of
    Left (FailedCmd (CommandName "QueryContractId") _ _) -> pure ()
    _ -> assertFail $ "Expected QueryContractId to error, but got " <> show res

exerciseV1Util : Choice V1Utils c r => Party -> c -> Script r
exerciseV1Util p c = p `submit` createAndExerciseCmd (V1Utils with party = p) c

exerciseV2Util : Choice V2Utils c r => Party -> c -> Script r
exerciseV2Util p c = p `submit` createAndExerciseCmd (V2Utils with party = p) c

tryExerciseV1Util : Choice V1Utils c r => Party -> c -> Script (Either SubmitError r)
tryExerciseV1Util p c = p `trySubmit` createAndExerciseCmd (V1Utils with party = p) c

tryExerciseV1UtilExact : Choice V1Utils c r => Party -> c -> Script (Either SubmitError r)
tryExerciseV1UtilExact p c = p `trySubmit` createAndExerciseExactCmd (V1Utils with party = p) c

tryExerciseV2Util : Choice V2Utils c r => Party -> c -> Script (Either SubmitError r)
tryExerciseV2Util p c = p `trySubmit` createAndExerciseCmd (V2Utils with party = p) c

fetchUpgraded : Script ()
fetchUpgraded = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.ValidUpgrade with party = a

  let v2Cid = coerceContractId @V1.ValidUpgrade @V2.ValidUpgrade cid
  v2Name <- a `exerciseV2Util` V2Fetch with cid = v2Cid
  v2Name === V2.ValidUpgrade with party = a, newField = None

fetchDowngradedNone : Script ()
fetchDowngradedNone = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = None
  let v1Cid = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid
  v1Name <- a `exerciseV1Util` V1Fetch with cid = v1Cid
  v1Name === V1.ValidUpgrade with party = a

fetchDowngradedSome : Script ()
fetchDowngradedSome = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = Some "hi"
  let v1Cid = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid
  eV1Name <- a `tryExerciseV1Util` V1Fetch with cid = v1Cid
  
  case eV1Name of
    Left (DevError Upgrade msg)
      | "An optional contract field with a value of Some may not be dropped during downgrading" `isInfixOf` msg
      -> pure ()
    res -> assertFail $ "Expected DevError Upgrade, got " <> show res

fetchUpgradedSourceUnvetted : Script ()
fetchUpgradedSourceUnvetted = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.ValidUpgrade with party = a

  -- Unvet v1, so the engine cannot have type information about the real packageid of the contract
  unvetDarOnParticipant v1DarName participant0
  let v2Cid = coerceContractId @V1.ValidUpgrade @V2.ValidUpgrade cid
  res <- a `tryExerciseV2Util` V2Fetch with cid = v2Cid
  case res of
    Right v2Name -> v2Name === V2.ValidUpgrade with party = a, newField = None
    Left err -> assertFail $ "Expected success but got " <> show err

  -- Cleanup
  vetDarOnParticipant v1DarName participant0

fetchDowngradedNoneSourceUnvetted : Script ()
fetchDowngradedNoneSourceUnvetted = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = None

  -- Unvet the upgraded type and ensure downgrade occurs
  unvetDarOnParticipant v2DarName participant0
  let v1Cid = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid
  res <- a `tryExerciseV1UtilExact` V1Fetch with cid = v1Cid

  case res of
    Right v1Name -> v1Name === V1.ValidUpgrade with party = a
    Left err -> assertFail $ "Expected success but got " <> show err

  -- Cleanup
  vetDarOnParticipant v2DarName participant0

exerciseV1ChoiceV1ContractSameType : Script ()
exerciseV1ChoiceV1ContractSameType = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.ValidUpgrade with party = a

  sameTypeResult <- a `exerciseV1Util` V1SameChoiceExercise with cid = cid
  sameTypeResult === "V1"

exerciseV1ChoiceV2ContractSameType : Script ()
exerciseV1ChoiceV2ContractSameType = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = None
  let cidV1 = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid

  sameTypeResult <- a `exerciseV1Util` V1SameChoiceExercise with cid = cidV1
  sameTypeResult === "V1"

exerciseV1ChoiceV2ContractSameTypeSome : Script ()
exerciseV1ChoiceV2ContractSameTypeSome = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = Some "hi"
  let cidV1 = coerceContractId @V2.ValidUpgrade @V1.ValidUpgrade cid

  sameTypeResult <- a `tryExerciseV1Util` V1SameChoiceExercise with cid = cidV1
  case sameTypeResult of
    Left _ -> pure ()
    Right _ -> assertFail "Wrong"

exerciseV2ChoiceV1ContractSameType : Script ()
exerciseV2ChoiceV1ContractSameType = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V1.ValidUpgrade with party = a
  let cidV2 = coerceContractId @V1.ValidUpgrade @V2.ValidUpgrade cid

  sameTypeResult <- a `exerciseV2Util` V2SameChoiceExercise with cid = cidV2
  sameTypeResult === "V2"

exerciseV2ChoiceV2ContractSameType : Script ()
exerciseV2ChoiceV2ContractSameType = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.ValidUpgrade with party = a, newField = Some "hi"

  sameTypeResult <- a `exerciseV2Util` V2SameChoiceExercise with cid = cid
  sameTypeResult === "V2"

genericUpgradeTest 
  : forall t2 t1 c2 r
  . (Template t1, HasAgreement t1, Choice t2 c2 r)
  => (Party -> t1)
  -> c2
  -> Bool
  -> (Either SubmitError r -> Script ())
  -> Script ()
genericUpgradeTest makeV1Contract v2Choice explicitPackageIds handleRes = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` (if explicitPackageIds then exerciseExactCmd else exerciseCmd) cidV2 v2Choice
  handleRes res

choiceTest : forall t2 t1 c2 r. (Template t1, HasAgreement t1, Choice t2 c2 r, Eq r, Show r) => (Party -> t1) -> c2 -> Bool -> r -> Script ()
choiceTest makeV1Contract v2Choice explicitPackageIds expectedResult = genericUpgradeTest @t2 makeV1Contract v2Choice explicitPackageIds $ \res ->
  case res of
    Right returnValue -> returnValue === expectedResult
    Left err -> assertFail $ "Expected " <> show expectedResult <> " but got " <> show err

explicitV1ChoiceV1Contract : Script ()
explicitV1ChoiceV1Contract =
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (V1.UpgradedChoice "v1 to v1") True (V1.UpgradedChoiceReturn "v1 to v1:V1")

explicitV2ChoiceV1Contract : Script ()
explicitV2ChoiceV1Contract =
  choiceTest @V2.ValidUpgrade V1.ValidUpgrade (V2.UpgradedChoice "v2 to v1" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- When inferring, the V1 contract and choice argument is upgraded, and the return type is downgraded directly by daml script.
-- As such, we get the v2 implementation called, with the additional field set to None (as shown in the choice return)
-- and since the extra data in the return will also be none, the downgrade can succeed.
inferredV1ChoiceV1Contract : Script ()
inferredV1ChoiceV1Contract =
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (V1.UpgradedChoice "v1 to v1") False (V1.UpgradedChoiceReturn "v1 to v1:V2:None")

inferredV2ChoiceV1Contract : Script ()
inferredV2ChoiceV1Contract =
  choiceTest @V2.ValidUpgrade V1.ValidUpgrade (V2.UpgradedChoice "v2 to v1" $ Some "extra") False (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- If v2 isn't vetted, then omitting a package id and giving v1 arguments should use the v1 implementation
-- TODO: This test fails for several reasons:
--   first it tries to use v2 even through its unvetted <- this is not correct behaviour
--   second it doesn't hit a NO_DOMAIN_FOR_SUBMISSION error before attempting to directly upgrade the data type <- this is also not correct behaviour
inferredV1ChoiceV1ContractWithoutV2 : Script ()
inferredV1ChoiceV1ContractWithoutV2 = do
  unvetDarOnParticipant v2DarName participant0
  unvetDarOnParticipant v2DarName participant1
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (V1.UpgradedChoice "v1 to v1") False (V1.UpgradedChoiceReturn "v1 to v1:V1")
  vetDarOnParticipant v2DarName participant0
  vetDarOnParticipant v2DarName participant1

explicitV1ChoiceV2Contract : Script ()
explicitV1ChoiceV2Contract =
  choiceTest @V1.ValidUpgrade (`V2.ValidUpgrade` None) (V1.UpgradedChoice "v1 to v2") True (V1.UpgradedChoiceReturn "v1 to v2:V1")

explicitV2ChoiceV2Contract : Script ()
explicitV2ChoiceV2Contract =
  choiceTest @V2.ValidUpgrade (`V2.ValidUpgrade` Some "text") (V2.UpgradedChoice "v2 to v2" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v2:V2:Some \"extra\"" $ Some "extra")

-- Convenience wrappers for the nested varients of these tests
v1ChoiceNested : Text -> V1.UpgradedChoiceNested
v1ChoiceNested = V1.UpgradedChoiceNested . V1.UpgradedChoiceData

v1ChoiceReturnNested : Text -> V1.UpgradedChoiceReturnWrapper
v1ChoiceReturnNested = V1.UpgradedChoiceReturnWrapper . V1.UpgradedChoiceReturn

v2ChoiceNested : Text -> Optional Text -> V2.UpgradedChoiceNested
v2ChoiceNested t = V2.UpgradedChoiceNested . V2.UpgradedChoiceData t

v2ChoiceReturnNested : Text -> Optional Text -> V2.UpgradedChoiceReturnWrapper
v2ChoiceReturnNested t = V2.UpgradedChoiceReturnWrapper . V2.UpgradedChoiceReturn t

explicitV1ChoiceV1ContractNested : Script ()
explicitV1ChoiceV1ContractNested =
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (v1ChoiceNested "v1 to v1") True (v1ChoiceReturnNested "v1 to v1:V1")

explicitV2ChoiceV1ContractNested : Script ()
explicitV2ChoiceV1ContractNested =
  choiceTest @V2.ValidUpgrade V1.ValidUpgrade (v2ChoiceNested "v2 to v1" $ Some "extra") True (v2ChoiceReturnNested "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- When inferring, the V1 contract and choice argument is upgraded, and the return type is downgraded directly by daml script.
-- As such, we get the v2 implementation called, with the additional field set to None (as shown in the choice return)
-- and since the extra data in the return will also be none, the downgrade can succeed.
inferredV1ChoiceV1ContractNested : Script ()
inferredV1ChoiceV1ContractNested =
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (v1ChoiceNested "v1 to v1") False (v1ChoiceReturnNested "v1 to v1:V2:None")

inferredV2ChoiceV1ContractNested : Script ()
inferredV2ChoiceV1ContractNested =
  choiceTest @V2.ValidUpgrade V1.ValidUpgrade (v2ChoiceNested "v2 to v1" $ Some "extra") False (v2ChoiceReturnNested "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- If v2 isn't vetted, then omitting a package id and giving v1 arguments should use the v1 implementation
-- TODO: This test fails for several reason:
--   first it tries to use v2 even through its unvetted <- this is not correct behaviour
--   second it doesn't hit a NO_DOMAIN_FOR_SUBMISSION error before attempting to directly upgrade the data type <- this is also not correct behaviour
--   lastly, it hits the same error as inferredV1ChoiceV1Contract, which is that choice argument upgrading isn't supported
inferredV1ChoiceV1ContractWithoutV2Nested : Script ()
inferredV1ChoiceV1ContractWithoutV2Nested = do
  unvetDarOnParticipant v2DarName participant0
  unvetDarOnParticipant v2DarName participant1
  choiceTest @V1.ValidUpgrade V1.ValidUpgrade (v1ChoiceNested "v1 to v1") False (v1ChoiceReturnNested "v1 to v1:V1")
  vetDarOnParticipant v2DarName participant0
  vetDarOnParticipant v2DarName participant1

explicitV1ChoiceV2ContractNested : Script ()
explicitV1ChoiceV2ContractNested =
  choiceTest @V1.ValidUpgrade (`V2.ValidUpgrade` None) (v1ChoiceNested "v1 to v2") True (v1ChoiceReturnNested "v1 to v2:V1")

explicitV2ChoiceV2ContractNested : Script ()
explicitV2ChoiceV2ContractNested =
  choiceTest @V2.ValidUpgrade (`V2.ValidUpgrade` Some "text") (v2ChoiceNested "v2 to v2" $ Some "extra") True (v2ChoiceReturnNested "v2 to v2:V2:Some \"extra\"" $ Some "extra")

explicitNewV2ChoiceV1Contract : Script ()
explicitNewV2ChoiceV1Contract = choiceTest @V2.ValidUpgrade V1.ValidUpgrade V2.NewAddedChoice True "V2"

implicitNewV2ChoiceV1Contract : Script ()
implicitNewV2ChoiceV1Contract = choiceTest @V2.ValidUpgrade V1.ValidUpgrade V2.NewAddedChoice False "V2"

explicitRemovedV1ChoiceV2Contract : Script ()
explicitRemovedV1ChoiceV2Contract = choiceTest @V1.ValidUpgrade (`V2.ValidUpgrade` None) V1.OldRemovedChoice True "V1"

implicitRemovedV1ChoiceV2Contract : Script ()
implicitRemovedV1ChoiceV2Contract =
  genericUpgradeTest @V1.ValidUpgrade (`V2.ValidUpgrade` None) V1.OldRemovedChoice False $ \case
    Left (UnknownError msg) | "unknown choice OldRemovedChoice" `isInfixOf` msg -> pure ()
    res -> assertFail $ "Expected unknown choice error, got " <> show res

implicitRemovedV1ChoiceV1Contract : Script ()
implicitRemovedV1ChoiceV1Contract =
  genericUpgradeTest @V1.ValidUpgrade V1.ValidUpgrade V1.OldRemovedChoice False $ \case
    Left (UnknownError msg) | "unknown choice OldRemovedChoice" `isInfixOf` msg -> pure ()
    res -> assertFail $ "Expected unknown choice error, got " <> show res

-- Given a function that maps a set of 3 parties to the pre-upgrade and post-upgrade signatory set
-- and the same for observers
-- along side an expected result flag (success or failure), test the upgrade behaviour
signatoryObserverUpgrade
  :  Bool
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> Script ()
signatoryObserverUpgrade shouldSucceed sigF obsF = do
  alice <- allocatePartyOn "alice" participant0
  bob <- allocatePartyOn "bob" participant0
  charlie <- allocatePartyOn "charlie" participant0
  let (preSignatories, postSignatories) = sigF (alice, bob, charlie)
      (preObservers, postObservers) = obsF (alice, bob, charlie)
  
  cid <- submitMulti [alice, bob, charlie] [] $ createExactCmd V1.InvalidUpgradeStakeholders with
    signatories = preSignatories
    observers = preObservers
    replacementSignatories = postSignatories
    replacementObservers = postObservers

  let cidV2 = coerceContractId @V1.InvalidUpgradeStakeholders @V2.InvalidUpgradeStakeholders cid
  res <- trySubmitMulti [alice, bob, charlie] [] $ exerciseCmd cidV2 V2.InvalidUpgradeStakeholdersCall
  case (res, shouldSucceed) of
    (Right _, True) -> pure ()
    (Left (DevError Upgrade msg), False)
      | "Verify that neither the signatories, nor the observers, nor the contract key, nor the key's maintainers have changed" `isInfixOf` msg
      -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "Upgrade error") <> " but got " <> show res

unchanged : (Party, Party, Party) -> ([Party], [Party])
unchanged (alice, bob, charlie) = ([alice], [alice])

signatoryUpgrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
signatoryUpgrade shouldSucceed f = signatoryObserverUpgrade shouldSucceed f unchanged

observerUpgrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
observerUpgrade shouldSucceed = signatoryObserverUpgrade shouldSucceed unchanged

unchangedSignatoryUpgrade : Script ()
unchangedSignatoryUpgrade = signatoryUpgrade True unchanged

largerSignatoryUpgrade : Script ()
largerSignatoryUpgrade = signatoryUpgrade False $ \(alice, bob, charlie) -> ([alice, bob], [alice, bob, charlie])

smallerSignatoryUpgrade : Script ()
smallerSignatoryUpgrade = signatoryUpgrade False $ \(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])

unchangeObserverUpgrade : Script ()
unchangeObserverUpgrade = observerUpgrade True unchanged

largerObserverUpgrade : Script ()
largerObserverUpgrade = observerUpgrade False $ \(alice, bob, charlie) -> ([alice, bob], [alice, bob, charlie])

smallerObserverUpgrade : Script ()
smallerObserverUpgrade = observerUpgrade False $ \(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])

canRemoveObserversThatAreSignatories : Script ()
canRemoveObserversThatAreSignatories = 
  signatoryObserverUpgrade
    True
    (\(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob, charlie])) -- signatories
    (\(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])) -- observers

ensureClauseBecomesInvalid : Script ()
ensureClauseBecomesInvalid =
  genericUpgradeTest @V2.EnsureChanges (V1.EnsureChanges True False) V2.EnsureChangesCall False $ \case
    Left (UnhandledException (Some (fromAnyException -> Some (PreconditionFailed _)))) -> pure ()
    res -> assertFail $ "Expected PreconditionFailed, got " <> show res

onlyV2EnsureClauseRequiredForImplicitUpgrade : Script ()
onlyV2EnsureClauseRequiredForImplicitUpgrade = do
  a <- allocatePartyOn "alice" participant0
  -- The V1 should be implicitly upgraded to V2 before evaluating the ensure clause.
  a `submit` createCmd (V1.EnsureChanges False True a)
  pure ()

ensureClauseDowngradeToNoLongerValid : Script ()
ensureClauseDowngradeToNoLongerValid =
  genericUpgradeTest @V1.EnsureChanges (V2.EnsureChanges False True) V1.EnsureChangesCall True $ \case
    Left (UnhandledException (Some (fromAnyException -> Some (PreconditionFailed _)))) -> pure ()
    res -> assertFail $ "Expected PreconditionFailed, got " <> show res

templateInvalidChange : forall t2 t1 c2. (Template t1, HasAgreement t1, Choice t2 c2 Text) => Bool -> (Party -> t1) -> c2 -> Script ()
templateInvalidChange shouldSucceed makeV1Contract v2Choice =
  genericUpgradeTest @t2 makeV1Contract v2Choice False $ \res ->
    case (res, shouldSucceed) of
      (Right "V2", True) -> pure ()
      (Left (WronglyTypedContract {}), False) -> pure ()
      (Left (UnknownError msg), False) | "An error occurred." `isInfixOf` msg -> pure ()
      _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "specific failure") <> " but got " <> show res

templateNameChanges : Script ()
templateNameChanges = templateInvalidChange @V2.NameChangesOops False V1.NameChanges V2.NameChangesCall

templateNameChangesNested : Script ()
templateNameChangesNested = templateInvalidChange @V2.NameChangesNested False (`V1.NameChangesNested` NameChangesNestedData 1) V2.NameChangesNestedCall

templateFieldsRemoved : Script ()
templateFieldsRemoved = templateInvalidChange @V2.FieldsRemoved False (`V1.FieldsRemoved` 1) V2.FieldsRemovedCall

templateNonOptionalFieldsAdded : Script ()
templateNonOptionalFieldsAdded = templateInvalidChange @V2.NonOptionalFieldsAdded False V1.NonOptionalFieldsAdded V2.NonOptionalFieldsAddedCall

templateFieldsRenamed : Script ()
templateFieldsRenamed = templateInvalidChange @V2.FieldsRenamed False (`V1.FieldsRenamed` 1) V2.FieldsRenamedCall

templateFieldsRemovedNested : Script ()
templateFieldsRemovedNested =
  templateInvalidChange
    @V2.FieldsRemovedNested
    False 
    (\p -> V1.FieldsRemovedNested $ V1.FieldsRemovedNestedData p 1)
    V2.FieldsRemovedNestedCall

templateNonOptionalFieldsAddedNested : Script ()
templateNonOptionalFieldsAddedNested =
  templateInvalidChange
    @V2.NonOptionalFieldsAddedNested
    False
    (V1.NonOptionalFieldsAddedNested . V1.NonOptionalFieldsAddedNestedData)
    V2.NonOptionalFieldsAddedNestedCall

templateFieldsRenamedNested : Script ()
templateFieldsRenamedNested =
  templateInvalidChange
    @V2.FieldsRenamedNested
    False
    (\p -> V1.FieldsRenamedNested $ V1.FieldsRenamedNestedData p 1)
    V2.FieldsRenamedNestedCall

templateVariantUnchanged : Script ()
templateVariantUnchanged =
  templateInvalidChange
    @V2.VariantUnchanged
    True
    (`V1.VariantUnchanged` V1.VariantUnchangedData1)
    V2.VariantUnchangedCall

templateVariantUpgradeToRemoved : Script ()
templateVariantUpgradeToRemoved =
  templateInvalidChange
    @V2.VariantRemoved
    False
    (`V1.VariantRemoved` V1.VariantRemovedData2)
    V2.VariantRemovedCall

templateVariantDowngradeFromNew : Script ()
templateVariantDowngradeFromNew = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.VariantAdditional with party = a, nestedData = V2.VariantAdditionalData3

  let cidV1 = coerceContractId @V2.VariantAdditional @V1.VariantAdditional cid

  -- Ensure we can only call the V1 choice
  res <- a `trySubmit` exerciseExactCmd cidV1 V1.VariantAdditionalCall

  case res of
    Left (UnknownError msg) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected specific failure but got " <> show res

packageSelectionChoosesUnvettedPackages : Script ()
packageSelectionChoosesUnvettedPackages = do
  -- Unvet the v2 dar on all participants on the domain
  unvetDarOnParticipant v2DarName participant0
  unvetDarOnParticipant v2DarName participant1

  a <- allocatePartyOn "alice" participant0
  -- Attempt to create a v1 contract, without specifying package id, expecting that the v1 package will be selected as v2 is unvetted
  res <- a `trySubmit` createCmd V1.ValidUpgrade with party=a

  -- What actually happens is the submitting participant chooses the v2 package, finds none of the participants on the domain have this package
  -- and gives a NO_DOMAIN_FOR_SUBMISSION error
  case res of
    Right cid -> pure ()
    _ -> assertFail $ "Expected success but got " <> show res

  -- Cleanup
  vetDarOnParticipant v2DarName participant0
  vetDarOnParticipant v2DarName participant1

bothParticipantsV2 : Script ()
bothParticipantsV2 = do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1
  a `submit` createCmd V1.SharedTemplate with party = a, ob = b
  pure ()

submitV1OtherV2 : Script ()
submitV1OtherV2 = do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1
  unvetDarOnParticipant v2DarName participant0
  liftAssertUnknownPackageError $ a `trySubmit` createCmd V1.SharedTemplate with party = a, ob = b
  vetDarOnParticipant v2DarName participant0

submitV2OtherV1 : Script ()
submitV2OtherV1 = do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1
  unvetDarOnParticipant v2DarName participant1
  liftAssertUnknownPackageError $ a `trySubmit` createCmd V1.SharedTemplate with party = a, ob = b
  vetDarOnParticipant v2DarName participant1
