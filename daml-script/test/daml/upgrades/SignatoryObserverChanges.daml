-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module SignatoryObserverChanges (main) where

import UpgradeTestLib
import qualified V1.SignatoryObserverChanges as V1
import qualified V1.SignatoryObserverOptionalExtension as V1
import qualified V1.SignatoryRequiredOptionalExtension as V1
import qualified V1.ObserverRequiredOptionalExtension as V1

import qualified V2.SignatoryObserverChanges as V2
import qualified V2.SignatoryObserverOptionalExtension as V2
import qualified V2.SignatoryRequiredOptionalExtension as V2
import qualified V2.ObserverRequiredOptionalExtension as V2
import DA.Text
import DA.Optional
import DA.Exception.GeneralError
import DA.Exception

{- PACKAGE
name: signatory-observer-changes
versions: 2
-}

main : Script ()
main = tests
  [ ("Succeeds if the signatories don't change on upgrade", unchangedSignatoryUpgrade)
  , ("Succeeds if the signatories don't change on downgrade", unchangedSignatoryDowngrade)
  , ("Fails if the signatories set gets larger", largerSignatoryUpgrade)
  , ("Fails if the signatories set gets smaller", smallerSignatoryUpgrade)
  , ("Succeeds if the observers don't change on upgrade", unchangeObserverUpgrade)
  , ("Succeeds if the observers don't change on downgrade", unchangeObserverDowngrade)
  , ("Fails if the observers set gets larger", largerObserverUpgrade)
  , ("Fails if the observers set gets smaller", smallerObserverUpgrade)
  , ("Succeeds if the observer set loses parties that are already signatories on upgrade", canRemoveObserversThatAreSignatoriesUpgrade)
  , ("Succeeds if the observer set loses parties that are already signatories on downgrade", canRemoveObserversThatAreSignatoriesDowngrade)
  , ("Succeeds if signatories extended with new optional field on upgrade", optionalSignatoryExtensionUpgrade)
  , ("Succeeds if observers extended with new optional field on upgrade", optionalObserverExtensionUpgrade)
  , ("Succeeds if signatories extended with new required field on downgrade", optionalSignatoryExtensionDowngrade)
  , ("Succeeds if observers extended with new required field on downgrade", optionalObserverExtensionDowngrade)
  ]

{- MODULE
package: signatory-observer-changes
contents: |
  module SignatoryObserverChanges where

  template SignatoryObserverChangesTemplate
    with
      signatories : [Party]
      observers : [Party]
      replacementSignatories : [Party]
      replacementObservers : [Party]
    where
      signatory signatories                           -- @V 1
      signatory replacementSignatories                -- @V  2
      observer observers                              -- @V 1
      observer replacementObservers                   -- @V  2

      choice SignatoryObserverChangesCall : () with
        controller signatory this
        do pure ()
-}

-- Given a function that maps a set of 3 parties to the pre-upgrade and post-upgrade signatory set
-- and the same for observers
-- along side an expected result flag (success or failure), test the upgrade behaviour
signatoryObserverChange
  :  forall t2 t1 c2
  .  (Template t1, HasEnsure t1, Template t2, Choice t2 c2 ())
  => ([Party] -> [Party] -> [Party] -> [Party] -> t1)
  -> c2
  -> Bool
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> Script ()
signatoryObserverChange makeV1 choiceV2 shouldSucceed sigF obsF = do
  alice <- allocatePartyOn "alice" participant0
  bob <- allocatePartyOn "bob" participant0
  charlie <- allocatePartyOn "charlie" participant0
  let (preSignatories, postSignatories) = sigF (alice, bob, charlie)
      (preObservers, postObservers) = obsF (alice, bob, charlie)

  let v1Contract = makeV1 preSignatories preObservers postSignatories postObservers
  cid <- submitMulti [alice, bob, charlie] [] $ createExactCmd v1Contract

  let cidV2 = coerceContractId @_ @t2 cid
  res <- trySubmitMulti [alice, bob, charlie] [] $ exerciseExactCmd cidV2 choiceV2
  case (res, shouldSucceed) of
    (Right _, True) -> pure ()
    (Left (DevError Upgrade msg), False)
      | "Verify that neither the signatories, nor the observers, nor the contract key, nor the key's maintainers have changed" `isInfixOf` msg
      -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "Upgrade error") <> " but got " <> show res

signatoryObserverUpgrade
  :  Bool
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> Script ()
signatoryObserverUpgrade =
  signatoryObserverChange @V2.SignatoryObserverChangesTemplate V1.SignatoryObserverChangesTemplate V2.SignatoryObserverChangesCall

signatoryObserverDowngrade
  :  Bool
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> ((Party, Party, Party) -> ([Party], [Party]))
  -> Script ()
signatoryObserverDowngrade =
  signatoryObserverChange @V1.SignatoryObserverChangesTemplate V2.SignatoryObserverChangesTemplate V1.SignatoryObserverChangesCall

unchanged : (Party, Party, Party) -> ([Party], [Party])
unchanged (alice, bob, charlie) = ([alice], [alice])

signatoryUpgrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
signatoryUpgrade shouldSucceed f = signatoryObserverUpgrade shouldSucceed f unchanged

observerUpgrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
observerUpgrade shouldSucceed = signatoryObserverUpgrade shouldSucceed unchanged

signatoryDowngrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
signatoryDowngrade shouldSucceed f = signatoryObserverDowngrade shouldSucceed f unchanged

observerDowngrade : Bool -> ((Party, Party, Party) -> ([Party], [Party])) -> Script ()
observerDowngrade shouldSucceed = signatoryObserverDowngrade shouldSucceed unchanged

unchangedSignatoryUpgrade : Script ()
unchangedSignatoryUpgrade = signatoryUpgrade True unchanged

unchangedSignatoryDowngrade : Script ()
unchangedSignatoryDowngrade = signatoryDowngrade True unchanged

largerSignatoryUpgrade : Script ()
largerSignatoryUpgrade = signatoryUpgrade False $ \(alice, bob, charlie) -> ([alice, bob], [alice, bob, charlie])

smallerSignatoryUpgrade : Script ()
smallerSignatoryUpgrade = signatoryUpgrade False $ \(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])

unchangeObserverUpgrade : Script ()
unchangeObserverUpgrade = observerUpgrade True unchanged

unchangeObserverDowngrade : Script ()
unchangeObserverDowngrade = observerDowngrade True unchanged

largerObserverUpgrade : Script ()
largerObserverUpgrade = observerUpgrade False $ \(alice, bob, charlie) -> ([alice, bob], [alice, bob, charlie])

smallerObserverUpgrade : Script ()
smallerObserverUpgrade = observerUpgrade False $ \(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])

canRemoveObserversThatAreSignatoriesUpgrade : Script ()
canRemoveObserversThatAreSignatoriesUpgrade =
  signatoryObserverUpgrade
    True
    (\(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob, charlie])) -- signatories
    (\(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob])) -- observers

canRemoveObserversThatAreSignatoriesDowngrade : Script ()
canRemoveObserversThatAreSignatoriesDowngrade =
  signatoryObserverDowngrade
    True
    (\(alice, bob, charlie) -> ([alice, bob, charlie], [alice, bob, charlie])) -- signatories
    (\(alice, bob, charlie) -> ([alice, bob], [alice, bob, charlie])) -- observers

{- MODULE
package: signatory-observer-changes
contents: |
  module SignatoryObserverOptionalExtension where

  template SignatoryObserverOptionalExtensionTemplate
    with
      signatories : [Party]
      observers : [Party]
      signatoryExtension : Optional Party                   -- @V  2
      observerExtension : Optional Party                    -- @V  2
    where
      signatory signatories                                 -- @V 1
      signatory signatories ++ toParties signatoryExtension -- @V  2
      observer observers                                    -- @V 1
      observer observers ++ toParties observerExtension     -- @V  2
      choice SignatoryObserverOptionalExtensionCall : ()
        controller signatory this
        do pure ()
-}

optionalSignatoryExtensionUpgrade : Script ()
optionalSignatoryExtensionUpgrade = do
  a <- allocateParty "alice"
  -- Test the upgrade works (signatories unchanged)
  cid <- a `submit` createExactCmd V1.SignatoryObserverOptionalExtensionTemplate with signatories = [a], observers = [a]
  let cid2 = coerceContractId @_ @V2.SignatoryObserverOptionalExtensionTemplate cid
  a `submit` exerciseExactCmd cid2 V2.SignatoryObserverOptionalExtensionCall

  -- Test we can create the v2 with the extended signatories
  b <- allocateParty "bob"
  submitMulti [a, b] [] $ createExactCmd V2.SignatoryObserverOptionalExtensionTemplate with
    signatories = [a]
    observers = [a]
    signatoryExtension = Some b
    observerExtension = None

  -- Test the optional signatory is required
  res <- a `trySubmit` createExactCmd V2.SignatoryObserverOptionalExtensionTemplate with
    signatories = [a]
    observers = [a]
    signatoryExtension = Some b
    observerExtension = None
  
  case res of
    Left (AuthorizationError _) -> pure ()
    _ -> error $ "Expected authorization failure but got " <> show res

optionalObserverExtensionUpgrade : Script ()
optionalObserverExtensionUpgrade = do
  a <- allocateParty "alice"
  -- Test the upgrade works (observers unchanged)
  cid <- a `submit` createExactCmd V1.SignatoryObserverOptionalExtensionTemplate with signatories = [a], observers = [a]
  let cid2 = coerceContractId @_ @V2.SignatoryObserverOptionalExtensionTemplate cid
  a `submit` exerciseExactCmd cid2 V2.SignatoryObserverOptionalExtensionCall


  -- Create the v2 with the extended observers
  b <- allocateParty "bob"
  cid <- a `submit` createExactCmd V2.SignatoryObserverOptionalExtensionTemplate with
    signatories = [a]
    observers = [a]
    signatoryExtension = None
    observerExtension = Some b
  -- Test bob can see it
  res <- b `queryContractId` cid
  if isNone res then error "Bob could not see upgraded contract" else pure ()

{- MODULE
package: signatory-observer-changes
contents: |
  module SignatoryRequiredOptionalExtension where

  import DA.Optional
  template SignatoryRequiredOptionalExtensionTemplate
    with
      signatories : [Party]
      signatoryExtension : Optional Party                   -- @V  2
    where
      signatory signatories                                 -- @V 1
      signatory fromSome signatoryExtension :: signatories   -- @V  2
      choice SignatoryRequiredOptionalExtensionCall : ()
        controller signatory this
        do pure ()
-}

optionalSignatoryExtensionDowngrade : Script ()
optionalSignatoryExtensionDowngrade = do
  a <- allocateParty "alice"
  -- Test the old version can be created
  cid <- a `submit` createExactCmd V1.SignatoryRequiredOptionalExtensionTemplate with signatories = [a]

  -- Test that it cannot be upgraded
  let cid2 = coerceContractId @_ @V2.SignatoryRequiredOptionalExtensionTemplate cid
  res <- a `trySubmit` exerciseExactCmd cid2 V2.SignatoryRequiredOptionalExtensionCall

  case res of
    Left (UnhandledException (Some (fromAnyException -> Some (GeneralError "fromSome: None")))) -> pure ()
    e -> error $ "Expected fromSome error and got " <> show e

  b <- allocateParty "bob"
  -- Test that the new version can be created
  [a, b] `submit` createExactCmd V2.SignatoryRequiredOptionalExtensionTemplate with 
    signatories = [a]
    signatoryExtension = Some b

  pure ()

{- MODULE
package: signatory-observer-changes
contents: |
  module ObserverRequiredOptionalExtension where

  import DA.Optional
  template ObserverRequiredOptionalExtensionTemplate
    with
      party : Party
      observers : [Party]
      observerExtension : Optional Party                    -- @V  2
    where
      signatory party
      observer observers                                    -- @V 1
      observer fromSome observerExtension :: observers       -- @V  2
      choice ObserverRequiredOptionalExtensionCall : ()
        controller signatory this
        do pure ()
-}

optionalObserverExtensionDowngrade : Script ()
optionalObserverExtensionDowngrade = do
  a <- allocateParty "alice"
  b <- allocateParty "bob"
  -- Test the old version can be created
  cid <- a `submit` createExactCmd V1.ObserverRequiredOptionalExtensionTemplate with party = a, observers = [b]

  -- Test that it cannot be upgraded
  let cid2 = coerceContractId @_ @V2.ObserverRequiredOptionalExtensionTemplate cid
  res <- a `trySubmit` exerciseExactCmd cid2 V2.ObserverRequiredOptionalExtensionCall

  case res of
    Left (UnhandledException (Some (fromAnyException -> Some (GeneralError "fromSome: None")))) -> pure ()
    e -> error $ "Expected fromSome error and got " <> show e

  c <- allocateParty "charlie"
  -- Test that the new version can be created
  cid <- a `submit` createExactCmd V2.ObserverRequiredOptionalExtensionTemplate with
    party = a
    observers = [b]
    observerExtension = Some c

  -- Test that Charlie can see the new version
  res <- c `queryContractId` cid
  if isNone res then error "Charlie could not see upgraded contract" else pure ()
