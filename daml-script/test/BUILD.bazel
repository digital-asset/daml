# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "lf_scalacopts_stricter",
)
load("//bazel_tools:haskell.bzl", "da_haskell_test")
load("@build_environment//:configuration.bzl", "sdk_version")
load("@os_info//:os_info.bzl", "is_windows")

genrule(
    name = "script-test",
    srcs =
        glob(["**/*.daml"]) + [
            "//daml-script/daml:daml-script-1.15.dar",
            "//docs:source/daml-script/template-root/src/ScriptExample.daml",
        ],
    outs = ["script-test.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/ScriptTest.daml) $$TMP_DIR/daml
      cp -L $(location :daml/MultiTest.daml) $$TMP_DIR/daml
      cp -L $(location //docs:source/daml-script/template-root/src/ScriptExample.daml) $$TMP_DIR/daml
      cat << EOF >> $$TMP_DIR/daml/ScriptExample.daml
initializeFixed : Script ()
initializeFixed = do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  bank <- allocatePartyWithHint "Bank" (PartyIdHint "Bank")
  let parties = LedgerParties{{..}}
  initialize parties
EOF
      cp -L $(location //daml-script/daml:daml-script-1.15.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script-1.15.dar
build-options:
  - --target=1.15
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
    visibility = ["//visibility:public"],
)

# Test DAR in 1.dev to test new features.
genrule(
    name = "script-test-1.dev",
    srcs =
        glob(["**/*.daml"]) + ["//daml-script/daml:daml-script-1.dev.dar"],
    outs = ["script-test-1.dev.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/TestContractId.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestExceptions.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestInterfaces.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestWithAuthority.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/daml:daml-script-1.dev.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test-v1dev
version: 0.0.1
source: daml
build-options:
  - --target=1.dev
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script-1.dev.dar
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test-1.dev.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
    visibility = ["//visibility:public"],
)

# A variant of script-test that has not been uploaded to the ledger
# to test missing template ids. We only care that this has a different package id.
genrule(
    name = "script-test-no-ledger",
    srcs =
        glob(["**/*.daml"]) + [
            "//daml-script/daml:daml-script.dar",
            "//docs:source/daml-script/template-root/src/ScriptExample.daml",
        ],
    outs = ["script-test-no-ledger.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/ScriptTest.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/daml:daml-script.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test-no-ledger
source: daml
version: 0.0.2
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test-no-ledger.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
    visibility = ["//visibility:public"],
)

da_scala_library(
    name = "test-utils",
    srcs = glob(["src/test-utils/**/*.scala"]),
    scala_deps = [
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalatest_scalatest_wordspec",
        "@maven//:org_scalaz_scalaz_core",
    ],
    scalacopts = lf_scalacopts_stricter,
    visibility = ["//visibility:public"],
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//ledger/ledger-runner-common",
        "//ledger/participant-integration-api",
        "//ledger/sandbox-on-x",
        "//ledger/sandbox-on-x:sandbox-on-x-test-lib",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/ports:ports-testing",
        "//libs-scala/resources",
        "//libs-scala/resources-akka",
        "//libs-scala/resources-grpc",
        "//libs-scala/scala-utils",
        "//libs-scala/timer-utils",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

MultiParticipantIT = "src/com/digitalasset/daml/lf/engine/script/test/MultiParticipantIT.scala"

da_scala_test_suite(
    name = "test",
    srcs = glob(
        ["src/com/**/*.scala"],
        exclude = [MultiParticipantIT],
    ),
    data = [
        ":script-test.dar",
        ":script-test-1.dev.dar",
        ":script-test-no-ledger.dar",
        "//test-common/test-certificates",
        "@canton//:lib",
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:com_typesafe_akka_akka_http",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalaz_scalaz_core",
    ],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger-service/cli-opts",
        "//ledger-service/http-json:http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/lf-value-json",
        "//ledger-service/metrics",
        "//ledger-service/utils",
        "//ledger/caching",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//ledger/ledger-configuration",
        "//ledger/ledger-runner-common",
        "//ledger/metrics",
        "//ledger/participant-integration-api",
        "//ledger/participant-integration-api:participant-integration-api-tests-lib",
        "//ledger/participant-state",
        "//ledger/sandbox-on-x",
        "//ledger/sandbox-on-x:sandbox-on-x-test-lib",
        "//libs-scala/contextualized-logging",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/logging-entries",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/resources-akka",
        "//libs-scala/resources-grpc",
        "//observability/metrics",
        "//test-common",
        "@maven//:com_auth0_java_jwt",
        "@maven//:io_dropwizard_metrics_metrics_core",
    ],
)

# TODO: https://github.com/digital-asset/daml/issues/13737
#  the test is flaky on windows.
#  merge it back in scala suite `test` once fixed.
da_scala_test(
    name = "multi-participant-integration-test",
    srcs = [MultiParticipantIT],
    data = [
        ":script-test.dar",
        ":script-test-1.dev.dar",
        ":script-test-no-ledger.dar",
        "//test-common/test-certificates",
        "@canton//:lib",
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = ["@maven//:io_spray_spray_json"],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-script/runner:script-runner-lib",
        "//language-support/scala/bindings",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
    ],
)

sh_test(
    name = "test_daml_script_test_runner",
    srcs = [":daml-script-test-runner.sh"],
    args = [
        "$(rootpath //daml-script/runner:daml-script-binary)",
        "$(rootpath :script-test.dar)",
        "$(POSIX_DIFF)",
        "$(POSIX_GREP)",
        "$(POSIX_SED)",
        "$(rootpath //ledger/sandbox-on-x:app)",
    ],
    data = [
        ":script-test.dar",
        "//daml-script/runner:daml-script-binary",
        "//ledger/sandbox-on-x:app",
    ],
    toolchains = ["@rules_sh//sh/posix:make_variables"],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
