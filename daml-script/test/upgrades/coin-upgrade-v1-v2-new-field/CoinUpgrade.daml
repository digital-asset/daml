-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module CoinUpgrade where

import DA.Assert ((===))

import Daml.Script
import Coin_1.Coin qualified
import Coin_2.Coin qualified

template Aux
  with
    party : Party
  where
    signatory party

    choice Fetch_Coin_1 : (Text, Coin_1.Coin.Coin)
      with cid : ContractId Coin_1.Coin.Coin
      controller party
      do
        coin <- fetch cid
        pure $
          ( "fetch v1\n" <> show coin
          , coin
          )

    choice Fetch_Coin_2 : (Text, Coin_2.Coin.Coin)
      with cid : ContractId Coin_2.Coin.Coin
      controller party
      do
        coin <- fetch cid
        pure $
          ( "fetch v2\n" <> show coin
          , coin
          )

create_v1_fetch_v2 : Script ()
create_v1_fetch_v2 = do
  alice <- allocateParty "alice"
  cid <- alice `submit` createCmd Coin_1.Coin.Coin with
    issuer = alice
    owner = alice
    obs = []
  (_, coin) <- alice `submit` createAndExerciseCmd (Aux alice) Fetch_Coin_2 with
    cid = coerceContractId cid
  -- the new field is empty
  coin.ccy === None
  -- the new field can be set
  (coin with ccy = Some "USD").ccy === Some "USD"
  pure ()

create_v2_none_fetch_v1 : Script ()
create_v2_none_fetch_v1 = do
  alice <- allocateParty "alice"
  cid <- alice `submit` createCmd Coin_2.Coin.Coin with
    issuer = alice
    owner = alice
    obs = []
    ccy = None
  _ <- alice `submit` createAndExerciseCmd (Aux alice) Fetch_Coin_1 with -- Downgrade/drop-None
    cid = coerceContractId cid
  pure ()

create_v2_some_fetch_v1 : Script ()
create_v2_some_fetch_v1 = do
  alice <- allocateParty "alice"
  cid <- alice `submit` createCmd Coin_2.Coin.Coin with
    issuer = alice
    owner = alice
    obs = []
    ccy = Some "CHF"
  _ <- alice `submitMustFail` createAndExerciseCmd (Aux alice) Fetch_Coin_1 with -- refuse Downgrade/drop-Some
    cid = coerceContractId cid
  pure ()
