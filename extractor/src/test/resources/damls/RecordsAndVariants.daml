-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module RecordsAndVariants where

import Daml.Script

data EitherM a b = LeftM a | RightM b deriving (Eq, Show)

data Maybe a = Nope | Just a deriving (Eq, Show)

data SimpleRecord = SimpleRecord { foo: Bool } deriving (Eq, Show)

data RecordAB a b = RecordAB { foo: a; baz: b } deriving (Eq, Show)

data MaybeRec = JustRec SimpleRecord | NotRec deriving (Eq, Show)

data MaybeRecA a b = JustRecA (RecordAB a b) | NotRecA deriving (Eq, Show)

data HRec = HRec { foo: Bool; mrea: MaybeRecA Text Bool } deriving (Eq, Show)

data MaybeRecRecordAB a b c d = MaybeRecRecordABLeft (MaybeRecA a [c]) | MaybeRecRecordABRight (RecordAB c d)  deriving (Eq, Show)

data EitherSimple = EitherLeft | EitherRight deriving (Eq, Show)

template RecordsAndVariants
  with
    reference: Text
    party: Party
    simpleRecord: SimpleRecord
    recordTextInt: RecordAB Text Int
    eitherVariant: EitherM Text Int
    enum: EitherSimple
    deepNested: MaybeRecRecordAB Text Text [Optional [Int]] (RecordAB Text Bool)
  where
    signatory party

    agreement
      "whatevs"

suite =
  script do
    party <- allocatePartyWithHint "Suite" (PartyIdHint "Suite")
    submit party do
      createCmd RecordsAndVariants with
        reference = "All-in-one"
        party = party
        simpleRecord = SimpleRecord with foo = True
        recordTextInt = RecordAB with foo = "Foo", baz = 6
        eitherVariant = RightM 7
        enum = EitherRight
        deepNested = MaybeRecRecordABRight $ RecordAB with
          foo = [Some [1, 2, 3], None, Some [4, 5, 6], None, Some [7, 8, 9]]
          baz = RecordAB with
            foo = "foo"
            baz = False

template Solo
  with
    party: Party
    tick: Int
  where
    signatory party

template Duo
  with
    party: Party
    other: Party
    tick: Int
  where
    signatory party
    observer other

multiParty = script do
  p1 <- allocatePartyWithHint "MultiParty1" (PartyIdHint "MultiParty1")
  p2 <- allocatePartyWithHint "MultiParty2" (PartyIdHint "MultiParty2")
  p3 <- allocatePartyWithHint "MultiParty3" (PartyIdHint "MultiParty3")
  -- visible to MultiParty1, MultiParty2: 1, 2, 4, 5, 7
  submit p1 do createCmd (Solo p1 1)
  submit p2 do createCmd (Solo p2 2)
  submit p3 do createCmd (Solo p3 3)
  submit p1 do createCmd (Duo p1 p3 4)
  submit p3 do createCmd (Duo p3 p2 5)
  submit p3 do createCmd (Duo p3 p3 6)
  submit p1 do createCmd (Duo p1 p2 7) -- ensure not seen twice
