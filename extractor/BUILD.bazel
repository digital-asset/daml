# Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
    "silencer_plugin",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_version_configuration",
)
load(
    ":extractor.bzl",
    "extractor_test",
)
load("@build_environment//:configuration.bzl", "sdk_version")

genrule(
    name = "test-dar",
    srcs = [
        "//daml-script/daml:daml-script.dar",
        ":src/test/resources/damls/EnumMod.daml",
        ":src/test/resources/damls/GenMapMod.daml",
        ":src/test/resources/damls/PrimitiveTypes.daml",
        ":src/test/resources/damls/RecordsAndVariants.daml",
        ":src/test/resources/damls/TransactionExample.daml",
    ],
    outs = ["test.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :src/test/resources/damls/EnumMod.daml) $$TMP_DIR/daml
      cp -L $(location :src/test/resources/damls/GenMapMod.daml) $$TMP_DIR/daml
      cp -L $(location :src/test/resources/damls/RecordsAndVariants.daml) $$TMP_DIR/daml
      cp -L $(location :src/test/resources/damls/PrimitiveTypes.daml) $$TMP_DIR/daml
      cp -L $(location :src/test/resources/damls/TransactionExample.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/daml:daml-script.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: test
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location test.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
)

genrule(
    name = "VeryLargeArchive_src",
    outs = ["VeryLargeArchive/Blobs.daml"] + ["VeryLargeArchive/Blob%s.daml" % n for n in range(
        1,
        32 + 1,
    )],
    cmd =
        '''
        filecount=32
        outs=($(OUTS))
        main="$${outs[0]}"
        echo '
module VeryLargeArchive.Blobs where
import VeryLargeArchive.Blob1()' > "$$main"
        firstfil="$${outs[1]}"
        echo '
module VeryLargeArchive.Blob1 where
' > "$$firstfil"
        { for linen in `seq 1 1024`; do
            echo -n "x$$linen = "\\"
            for charn in `seq 1 16`; do
                echo -n qqqqqqqq
            done;
            echo \\"
        done; } >> $$firstfil
        for filen in `seq 2 $$filecount`; do
            echo "import VeryLargeArchive.Blob$$filen()" >> "$$main"
            sed -e '2s/^\\(module .*\\)1/\\1'$$filen/ "$$firstfil" > "$${outs[$$filen]}"
        done
        ''',
)

daml_compile(
    name = "VeryLargeArchive",
    srcs = [
        ":VeryLargeArchive/Blobs.daml",
        ":VeryLargeArchive_src",
    ],
)

da_scala_library(
    name = "extractor",
    srcs = glob(["src/main/scala/**/*.scala"]),
    data = [
        "//daml-script/test:script-test.dar",
        "//daml-script/test:script-test-1.dev.dar",
        "//extractor:test-dar",
    ],
    plugins = [
        silencer_plugin,
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_chuusai_shapeless",
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_lihaoyi_fansi",
        "@maven//:com_lihaoyi_pprint",
        "@maven//:com_typesafe_akka_akka_actor",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_circe_circe_core",
        "@maven//:io_circe_circe_generic",
        "@maven//:io_circe_circe_parser",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scala_lang_modules_scala_collection_compat",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_tpolecat_doobie_core",
        "@maven//:org_tpolecat_doobie_free",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_effect",
        "@maven//:org_typelevel_cats_free",
        "@maven//:org_typelevel_cats_kernel",
    ],
    scala_runtime_deps = [
        "@maven//:org_tpolecat_doobie_postgres",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
    ],
    deps = [
        "//daml-lf/data",
        "//daml-lf/interface",
        "//daml-lf/transaction",
        "//language-support/scala/bindings",
        "//ledger-api/rs-grpc-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-service/cli-opts",
        "//ledger-service/lf-value-json",
        "//ledger-service/utils",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//libs-scala/auth-utils",
        "//libs-scala/grpc-utils",
        "//libs-scala/ports",
        "//libs-scala/timer-utils",
        "@maven//:io_netty_netty_handler",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

da_scala_binary(
    name = "extractor-binary",
    main_class = "com.daml.extractor.Main",
    tags = [
        "maven_coordinates=com.daml:extractor:__VERSION__",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":extractor",
    ],
)

da_scala_library(
    name = "extractor-scala-tests-lib",
    srcs = glob(["src/test/lib/**/*.scala"]),
    plugins = [
        silencer_plugin,
    ],
    scala_deps = [
        "@maven//:com_chuusai_shapeless",
        "@maven//:com_typesafe_akka_akka_actor",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_circe_circe_core",
        "@maven//:io_circe_circe_parser",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalacheck_scalacheck",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_tpolecat_doobie_core",
        "@maven//:org_tpolecat_doobie_free",
        "@maven//:org_tpolecat_typename",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_effect",
        "@maven//:org_typelevel_cats_free",
        "@maven//:org_typelevel_cats_kernel",
    ],
    scala_runtime_deps = [
        "@maven//:org_tpolecat_doobie_postgres",
    ],
    scalacopts = [
        "-P:silencer:lineContentFilters=import (services.)?Types._",
    ],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:io_grpc_grpc_netty",
    ],
    deps = [
        ":extractor",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/interface",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-script/runner:script-runner-lib",
        "//daml-script/test:test-utils",
        "//language-support/scala/bindings",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger-service/utils",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//ledger/sandbox",
        "//ledger/sandbox:sandbox-scala-tests-lib",
        "//ledger/sandbox-common",
        "//ledger/sandbox-common:sandbox-common-scala-tests-lib",
        "//libs-scala/auth-utils",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "@maven//:io_netty_netty_handler",
        "@maven//:org_postgresql_postgresql",
        "@maven//:org_scalatest_scalatest_compatible",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

extractor_test(
    name = "extractor-scala-tests",
    srcs = glob(["src/test/suite/**/*.scala"]),
    flaky = False,
)

extractor_test(
    name = "extractor-scala-tests-flaky",
    srcs = glob(["src/test/suite-flaky/**/*.scala"]),
    flaky = True,
)

exports_files(["src/main/resources/logback.xml"])
