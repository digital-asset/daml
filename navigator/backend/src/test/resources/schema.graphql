type Choice {
  name: String!
  parameter: DamlLfType!
  consuming: Boolean!
}

interface Command {
  id: ID!
  workflowId: ID!
  index: Int!
  platformTime: Time!
  status: CommandStatus!
}


type CommandEdge {
  node: Command!
  cursor: String!
}

scalar CommandId

type CommandPagination {
  beforeCount: Int!
  totalCount: Int!
  sortings: [Sorting!]
  edges: [CommandEdge!]!
}

interface CommandStatus {
  completed: Boolean!
}

type CommandStatusWaiting implements CommandStatus

type CommandStatusSuccess implements CommandStatus {
  transaction: Transaction!
}

type CommandStatusError implements CommandStatus {
  code: String!
  details: String!
}

type CommandStatusUnknown implements CommandStatus

type Contract implements Node {
  id: ID!
  template: Template!
  createEvent: CreatedEvent!
  archiveEvent: ExercisedEvent
  exerciseEvents: [ExercisedEvent!]!
  argument: DamlLfValueRecord!
  agreementText: String
  signatories: [String!]!
  observers: [String!]!
  key: DamlLfValue
}

type ContractEdge {
  node: Contract!
  cursor: String!
}

type ContractPagination {
  beforeCount: Int!
  totalCount: Int!
  sortings: [Sorting!]
  edges: [ContractEdge!]!
}

type CreateCommand implements Node & Command {
  template: Template
  templateId: String!
  argument: DamlLfValueRecord!
}

type CreatedEvent implements Node & Event {
  id: ID!
  parent: Event
  transaction: Transaction!
  witnessParties: [Party!]!
  workflowId: String!
  contract: Contract!
  argument: DamlLfValueRecord!
}

scalar DamlLfDataType

type DamlLfDefDataType implements Node & DamlLfNode {
  id: ID!
  package: String!
  module: String!
  name: String!
  dataType: DamlLfDataType!
  typeVars: [String!]!
  dependencies(depth: Int): [DamlLfDefDataType!]!
}

interface DamlLfNode {
  id: ID!
  package: String!
  module: String!
  name: String!
}

scalar DamlLfType

scalar DamlLfValue

scalar DamlLfValueRecord

enum Direction {
  ASCENDING
  DESCENDING
}

interface Event {
  id: ID!
  parent: Event
  transaction: Transaction!
  witnessParties: [Party!]!
  workflowId: String!
}

type ExerciseCommand implements Node & Command {
  contract: Contract
  contractId: String!
  choice: String!
  argument: DamlLfValue!
}

type ExercisedEvent implements Node & Event {
  id: ID!
  parent: Event
  transaction: Transaction!
  witnessParties: [Party!]!
  workflowId: String!
  contract: Contract!
  choice: String!
  argument: DamlLfValue!
  actingParties: [Party!]!
  consuming: Boolean!
  children: [Event!]!
}

input FilterCriterion {
  field: String!
  value: String!
}

scalar LedgerOffset

type LedgerTime {
  id: ID!
  time: Time!
  type: TimeType!
}

type Mutation {
  advanceTime(time: Time!): LedgerTime!
  create(templateId: ID!, argument: DamlLfValue): CommandId!
  exercise(contractId: ID!, choiceId: ID!, argument: DamlLfValue): CommandId!
}

interface Node {
  id: ID!
}

scalar Party

type Query {
  ledgerTime: LedgerTime!
  latestTransaction: Transaction
  node(typename: String!, id: ID!): Node
  nodes(typename: String!, ids: [ID!]!): [Node!]!
  template(topLevelDecl: String!): [Template!]!
  commandStatus(id: ID!): CommandStatus
  templates(search: String, filter: [FilterCriterion!], count: Int, start: String, sort: [SortCriterion!]): TemplatePagination!
  contracts(search: String, filter: [FilterCriterion!], includeArchived: Boolean, count: Int, start: String, sort: [SortCriterion!]): ContractPagination!
  commands(search: String, filter: [FilterCriterion!], count: Int, start: String, sort: [SortCriterion!]): CommandPagination!
}

input SortCriterion {
  field: String!
  direction: Direction!
}

type Sorting {
  field: String!
  direction: Direction!
}

type Template implements Node & DamlLfNode {
  id: ID!
  package: String!
  module: String!
  name: String!
  topLevelDecl: String!
  parameter: DamlLfType!
  parameterDef: DamlLfDefDataType!
  choices: [Choice!]!
  contracts(search: String, filter: [FilterCriterion!], includeArchived: Boolean, count: Int, start: String, sort: [SortCriterion!]): ContractPagination!
}

type TemplateEdge {
  node: Template!
  cursor: String!
}

type TemplatePagination {
  beforeCount: Int!
  totalCount: Int!
  sortings: [Sorting!]
  edges: [TemplateEdge!]!
}

scalar Time

enum TimeType {
  static
  wallclock
  simulated
}

type Transaction implements Node {
  id: ID!
  offset: LedgerOffset!
  effectiveAt: Time!
  commandId: CommandId
  events: [Event!]!
}
