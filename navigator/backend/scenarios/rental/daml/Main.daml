-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Main where

import DA.Date
import DA.Time

--------------------------------------------------------------------------------
-- Basic example
--------------------------------------------------------------------------------

template RightOfUseAgreement
  with
    landlord: Party
    tenant: Party
    address: Text
    expirationDate: Date
  where
    signatory landlord
    signatory tenant

    key (tenant, address): (Party, Text)
    maintainer key._1

    agreement
      show landlord <> " promises to let " <>
      show tenant <> " live at " <> show address <>
      " until " <> show expirationDate

template RightOfUseOffer
  with
    landlord: Party
    tenant: Party
    address: Text
    expirationDate: Date
  where
    signatory landlord

    controller tenant can
      Accept: ContractId RightOfUseAgreement
        do
          create RightOfUseAgreement with landlord; tenant; address; expirationDate

--------------------------------------------------------------------------------
-- Helpers for creating lots of contracts
--------------------------------------------------------------------------------

{-
explode10 : Text -> List Text
explode10 t = [
  t <> "0",
  t <> "1",
  t <> "2",
  t <> "3",
  t <> "4",
  t <> "5",
  t <> "6",
  t <> "7",
  t <> "8",
  t <> "9"
  ]

explode10s : List Text -> List Text
explode10s ts = concat (map explode10 ts)

oneString: List Text = cons "" nil

manyStrings = explode10s (explode10s (explode10s oneString))


createCounter : Party -> Text -> Scenario ()
createCounter p i = scenario do
  submit p do (create Counter with index = i; owner = p)
  pass (seconds 1)
  return ()
createManyCounters : Party -> Scenario ()
createManyCounters p = scenario do
  mapS (\i -> createCounter p i) manyStrings 
  return ()
-}

template Counter
  with
    index: Text
    owner: Party
  where
    signatory owner

    controller owner can
      CArchive: ()
        do
          return ()

    controller owner can
      Recreate: ContractId Counter
        do
          create Counter with index; owner


createCounters : Int -> Text -> Party -> Scenario ()
createCounters 0 t p = scenario do
  submit p do (create Counter with index = t; owner = p)
  return ()
createCounters i t p = scenario do
  createCounters (i-1) (t <> "0") p
  createCounters (i-1) (t <> "1") p
  createCounters (i-1) (t <> "2") p
  createCounters (i-1) (t <> "3") p
  createCounters (i-1) (t <> "4") p
  createCounters (i-1) (t <> "5") p
  createCounters (i-1) (t <> "6") p
  createCounters (i-1) (t <> "7") p
  createCounters (i-1) (t <> "8") p
  createCounters (i-1) (t <> "9") p
  return ()

-- Creates 10^i contracts
createManyCounters : Int -> Party -> Scenario ()
createManyCounters i p = createCounters i "" p

--------------------------------------------------------------------------------
-- Types
--------------------------------------------------------------------------------
-- Stdlib types
data UserMaybe a = UserNothing | UserJust a deriving (Eq, Show);
data UserEither a b = UserLeft a | UserRight b deriving (Eq, Show);

-- Nested types
data Record0 a = Record0
  with
    fprimitive: a
    flistR: [Record1 a]
    flistV: [UserMaybe a]
    flistL: [[a]]
    fvariantR: UserMaybe (Record1 a)
    fvariantV: UserMaybe (UserMaybe a)
    fvariantL: UserMaybe ([a])
    frecord: Record1 a
  deriving (Eq, Show)

data Record1 a = Record1
  with
    fprimitive: a
    flistR: [Record2 a]
    flistV: [UserMaybe a]
    flistL: [[a]]
    fvariantR: UserMaybe (Record2 a)
    fvariantV: UserMaybe (UserMaybe a)
    fvariantL: UserMaybe ([a])
    frecord: Record2 a
  deriving (Eq, Show)

data Record2 a = Record2
  with
    fprimitive: a
    flistR: [Record3 a]
    flistV: [UserMaybe a]
    flistL: [[a]]
    fvariantR: UserMaybe (Record3 a)
    fvariantV: UserMaybe (UserMaybe a)
    fvariantL: UserMaybe ([a])
    frecord: Record3 a
  deriving (Eq, Show)

data Record3 a = Record3
  with
    fprimitive: a
  deriving (Eq, Show)

-- Example values
valDate = date 1970 Jan 1
valTime = time valDate 0 0 0 
valListT: [Text] = ["A"]
valMaybeT: UserMaybe Text = UserJust "A"
valRecord3T: Record3 Text = Record3 with
  fprimitive = "A"
valRecord2T: Record2 Text = Record2 with
  fprimitive = "A"
  flistR = [valRecord3T]
  flistV = [valMaybeT]
  flistL = [valListT]
  fvariantR = UserJust valRecord3T
  fvariantV = UserJust valMaybeT
  fvariantL = UserJust valListT
  frecord = valRecord3T
valRecord1T: Record1 Text = Record1 with
  fprimitive = "A"
  flistR = [valRecord2T]
  flistV = [valMaybeT]
  flistL = [valListT]
  fvariantR = UserJust valRecord2T
  fvariantV = UserJust valMaybeT
  fvariantL = UserJust valListT
  frecord = valRecord2T
valRecord0T: Record0 Text = Record0 with
  fprimitive = "A"
  flistR = [valRecord1T]
  flistV = [valMaybeT]
  flistL = [valListT]
  fvariantR = UserJust valRecord1T
  fvariantV = UserJust valMaybeT
  fvariantL = UserJust valListT
  frecord = valRecord1T

template ParameterShowcase
  with
    foperator: Party
    finteger: Int
    fdecimal: Decimal
    ftext: Text
    fbool: Bool
    ftime: Time
    --freltime: RelTime
    fdate: Date
    fnestedTypes: Record0 Text
    fintegerList: [Int]
    fmaybeInteger: UserMaybe Int
    foptionInteger: Optional Int
  where
    signatory foperator

    controller foperator can
      SCArchive: ()
        do
          return ()

--------------------------------------------------------------------------------
-- Non-serializable types
--------------------------------------------------------------------------------

-- Function
data UnserializableF = UnserializableF {f : Int -> Int}

-- Tuple
data UnserializableT = UnserializableT {x : (Int, Int)}

-- Forall (DAML 1.2)
data Box = Box (forall a. a -> a)

--------------------------------------------------------------------------------
-- Recursive types
--------------------------------------------------------------------------------
data RTree a = Leaf a | Node {left: RTree a, right: RTree a} deriving (Eq, Show)
data RList a = Nil | Cons {value: a, next: RList a} deriving (Eq, Show)

template TList
  with
    owner: Party
    value: RList Text
  where
    signatory owner

    controller owner can
      Append: ContractId TList
        with
          newValue : Text
        do
          create TList with owner; value = Cons {value=newValue, next=value}

createRList : Int -> Text -> RList Text
createRList 0 t = Nil
createRList i t = Cons {value=(t<>show i), next=(createRList (i-1) t)}

--------------------------------------------------------------------------------
-- Scenario
--------------------------------------------------------------------------------

example =
  scenario do
    betina_Beakley <- getParty "Betina_Beakley"
    scrooge_McDuck <- getParty "Scrooge_McDuck"
    operator       <- getParty "OPERATOR"

    -- Betina_Beakley offers Scrooge_McDuck room at McDuck Manor
    offer <- submit betina_Beakley do
      create RightOfUseOffer with
        landlord = betina_Beakley
        tenant = scrooge_McDuck
        address = "McDuck Manor, Duckburg"
        expirationDate = valDate

    -- Scrooge_McDuck accepts the offer, which creates a RightOfUseAgreement
    submit scrooge_McDuck do exercise offer Accept

    -- Operator creates 10^3 contracts
    createManyCounters 3 operator

    -- Complex contract
    submit operator do
      create ParameterShowcase with
        foperator = operator
        finteger = 10
        fdecimal = 10.0
        ftext = "ABC"
        fbool = True
        ftime = valTime
        --freltime = seconds 120
        fdate = valDate
        fnestedTypes = valRecord0T
        fintegerList = [1, 2, 3]
        fmaybeInteger = UserJust 10
        foptionInteger = Some 10

    -- Long recursive value
    submit operator do
      create TList with
        owner = operator
        value = createRList 45 "X"
