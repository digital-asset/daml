# Copyright (c) 2019 The DAML Authors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
)
load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load("//bazel_tools:pom_file.bzl", "pom_file")
load(
    "//ledger/ledger-api-test-tool:conformance.bzl",
    "conformance_test",
)

compileDependencies = [
    # grpc_services has to come first other as somehow a different instance of grpc-core.jar
    "//3rdparty/jvm/io/grpc:grpc_services",
    "//3rdparty/jvm/ch/qos/logback:logback_classic",
    "//daml-lf/scenario-interpreter",
    "//daml-lf/transaction",
    "//daml-lf/engine",
    "//daml-lf/data",
    "//daml-lf/language",
    "//daml-lf/archive:daml_lf_java_proto",
    "//daml-lf/archive:daml_lf_archive_scala",
    "//daml-lf/interpreter",
    "//daml-lf/transaction/src/main/protobuf:value_java_proto",
    "//daml-lf/transaction/src/main/protobuf:transaction_java_proto",
    "//ledger-api/rs-grpc-bridge",
    "//ledger-api/rs-grpc-akka",
    "//ledger/ledger-api-akka",
    "//ledger/ledger-api-scala-logging",
    "//language-support/scala/bindings",
    "//ledger/ledger-api-domain:ledger-api-domain",
    "//ledger/ledger-api-common:ledger-api-common",
    "//ledger/ledger-api-client:ledger-api-client",
    "//ledger/participant-state",
    "//ledger/participant-state-index:participant-state-index",
    "//3rdparty/jvm/com/typesafe/scala_logging:scala_logging",
    "//3rdparty/jvm/org/slf4j:slf4j_api",
    "//3rdparty/jvm/org/scalaz:scalaz_core",
    "//3rdparty/jvm/org/scalaz:scalaz_concurrent",
    "//3rdparty/jvm/io/netty:netty_codec_http2",
    "//3rdparty/jvm/io/netty:netty_tcnative_boringssl_static",
    "//3rdparty/jvm/io/grpc:grpc_netty",
    "//3rdparty/jvm/io/netty:netty_handler",
    "//3rdparty/jvm/com/github/scopt:scopt",
    "//3rdparty/jvm/com/typesafe/akka:akka_stream",
    "//3rdparty/jvm/com/typesafe/akka:akka_actor",
    "//3rdparty/jvm/com/google/guava:guava",
    "//3rdparty/jvm/org/postgresql:postgresql",
    "//3rdparty/jvm/com/h2database:h2",
    "//3rdparty/jvm/com/zaxxer:HikariCP",
    "//3rdparty/jvm/org/flywaydb:flyway_core",
    "//3rdparty/jvm/com/typesafe/play:anorm",
    "//3rdparty/jvm/com/typesafe/play:anorm_akka",
    "//3rdparty/jvm/io/dropwizard/metrics:metrics_core",
    "//3rdparty/jvm/io/dropwizard/metrics:metrics_jmx",
    "//3rdparty/jvm/io/zipkin/brave",
]

da_scala_library(
    name = "sandbox",
    srcs = glob(["src/main/scala/**/*.scala"]),
    resources =
        glob(
            ["src/main/resources/**/*"],
            # Do not include logback.xml into the library: let the user
            # of the sandbox-as-a-library decide how to log.
            exclude = ["src/main/resources/logback.xml"],
        ) + [
            "//:COMPONENT-VERSION",
        ],
    tags = ["maven_coordinates=com.digitalasset.platform:sandbox:__VERSION__"],
    visibility = [
        "//visibility:public",
    ],
    runtime_deps = [
        "//3rdparty/jvm/ch/qos/logback:logback_classic",
        "//3rdparty/jvm/ch/qos/logback:logback_core",
    ],
    deps = compileDependencies + ["//ledger/test-common"],
)

da_scala_binary(
    name = "sandbox-binary",
    main_class = "com.digitalasset.platform.sandbox.SandboxMain",
    resources = ["src/main/resources/logback.xml"],
    visibility = ["//visibility:public"],
    deps = [
        ":sandbox",
    ],
)

da_scala_binary(
    name = "sandbox-ephemeral-postgres",
    main_class = "com.digitalasset.platform.sandbox.persistence.EphemeralPostgresSandboxMain",
    resources = ["src/main/resources/logback.xml"],
    visibility = ["//visibility:public"],
    deps = [
        ":sandbox",
        ":sandbox-scala-tests-lib",
    ],
)

genrule(
    name = "sandbox-tarball",
    srcs = [
        ":sandbox-binary_deploy.jar",
        "//:component-version",
    ],
    outs = ["sandbox-tarball.tar.gz"],
    cmd = """
        VERSION=$$(cat $(location //:component-version))
        mkdir -p sandbox-tarball/sandbox
        cp -L $(location :sandbox-binary_deploy.jar) sandbox-tarball/sandbox/sandbox-$$VERSION.jar
        out=$$(realpath $@)
        cd sandbox-tarball
        tar zcf $$out sandbox
    """,
    visibility = ["//visibility:public"],
)

alias(
    name = "Test-1.5.dar",
    actual = ":historical-dars/Test-1.5.dar",
    visibility = ["//visibility:public"],
)

#TODO: generate dynamic BuildInfo.scala

testDependencies = [
    ":sandbox",
    "//ledger/test-common:test-common",
    "//ledger-api/testing-utils",
    "//3rdparty/jvm/org/scalatest:scalatest",
    "//3rdparty/jvm/org/scalacheck:scalacheck",
    "//3rdparty/jvm/org/awaitility:awaitility",
    "//3rdparty/jvm/commons_io:commons_io",
    "//bazel_tools/runfiles:scala_runfiles",
] + compileDependencies

da_scala_library(
    name = "sandbox-scala-tests-lib",
    srcs = glob(["src/test/lib/**/*.scala"]),
    visibility = ["//visibility:public"],
    deps = testDependencies,
)

da_scala_test_suite(
    name = "sandbox-scala-tests",
    srcs = glob(
        ["src/test/suite/**/*.scala"],
    ),
    data = [
        "//ledger/test-common:Test-stable.dar",
        "@postgresql_dev_env//:all",
        "@postgresql_dev_env//:createdb",
        "@postgresql_dev_env//:initdb",
        "@postgresql_dev_env//:pg_ctl",
    ],
    resources = glob(["src/test/resources/**/*"]),
    deps = [
        ":sandbox-scala-tests-lib",
    ] + testDependencies,
)

conformance_test(
    name = "conformance-test-static-time",
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--static-time",
        "--eager-package-loading",
    ],
    test_tool_args = [
        "--all-tests",
        "--timeout-scale-factor=10",
    ],
)

conformance_test(
    name = "conformance-test-wall-clock",
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--wall-clock-time",
        "--eager-package-loading",
    ],
    test_tool_args = [
        "--all-tests",
        "--exclude TimeIT",
        "--timeout-scale-factor=10",
    ],
)

conformance_test(
    name = "conformance-test-static-time-postgres",
    extra_data = [
        "@postgresql_dev_env//:all",
        "@postgresql_dev_env//:createdb",
        "@postgresql_dev_env//:initdb",
        "@postgresql_dev_env//:pg_ctl",
    ],
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--static-time",
        "--eager-package-loading",
    ],
    test_tool_args = [
        "--all-tests",
        "--timeout-scale-factor=10",
    ],
)

conformance_test(
    name = "conformance-test-wall-clock-postgres",
    extra_data = [
        "@postgresql_dev_env//:all",
        "@postgresql_dev_env//:createdb",
        "@postgresql_dev_env//:initdb",
        "@postgresql_dev_env//:pg_ctl",
    ],
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--wall-clock-time",
        "--eager-package-loading",
    ],
    test_tool_args = [
        "--all-tests",
        "--exclude TimeIT",
        "--timeout-scale-factor=10",
    ],
)

conformance_test(
    name = "conformance-test-static-time-h2database",
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--static-time",
        "--eager-package-loading",
        # db_close_delay=-1 is needed so that the in-memory database is not closed (and therefore lost)
        # after the flyway migration
        "--sql-backend-jdbcurl jdbc:h2:mem:static_time;db_close_delay=-1",
    ],
    test_tool_args = [
        "--all-tests",
        "--timeout-scale-factor=10",
    ],
)

conformance_test(
    name = "conformance-test-wall-clock-h2database",
    server = ":sandbox-binary",
    server_args = [
        "--port 6865",
        "--wall-clock-time",
        "--eager-package-loading",
        # db_close_delay=-1 is needed so that the in-memory database is not closed (and therefore lost)
        # after the flyway migration
        "--sql-backend-jdbcurl jdbc:h2:mem:wall_clock_time;db_close_delay=-1",
    ],
    test_tool_args = [
        "--all-tests",
        "--exclude TimeIT",
        "--timeout-scale-factor=10",
    ],
)
