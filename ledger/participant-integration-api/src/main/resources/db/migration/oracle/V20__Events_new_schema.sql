-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

create table participant_events
(
    event_id                      VARCHAR2(1000) primary key                      not null,
    event_offset                  BLOB                                            not null,
    contract_id                   VARCHAR2(1000)                                  not null,
    transaction_id                VARCHAR2(1000)                                  not null,
    ledger_effective_time         TIMESTAMP                                       not null,
    template_id                   VARCHAR2(1000)                                  not null,
    node_index                    NUMBER                                          not null, -- post-traversal order of an event within a transaction

    -- these fields can be null if the transaction originated in another participant
    command_id                    VARCHAR2(1000),
    workflow_id                   VARCHAR2(1000),                                           -- null unless provided by a Ledger API call
    application_id                VARCHAR2(1000),
    submitters                    VARCHAR_ARRAY,

    -- non-null iff this event is a create
    create_argument               BLOB,
    create_signatories            VARCHAR_ARRAY,
    create_observers              VARCHAR_ARRAY,
    create_agreement_text         VARCHAR2(1000),                                           -- null if agreement text is not provided
    create_consumed_at            BLOB,                                                     -- null if the contract created by this event is active
    create_key_value              BLOB,                                                     -- null if the contract created by this event has no key

    -- non-null iff this event is an exercise
    exercise_consuming            NUMBER(1, 0),
    exercise_choice               VARCHAR2(1000),
    exercise_argument             BLOB,
    exercise_result               BLOB,
    exercise_actors               VARCHAR_ARRAY,
    exercise_child_event_ids      VARCHAR_ARRAY,                                            -- event identifiers of consequences of this exercise

    flat_event_witnesses          VARCHAR_ARRAY                                   not null,
    tree_event_witnesses          VARCHAR_ARRAY                                   not null,

    event_sequential_id           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY not null,
    create_argument_compression   NUMBER,
    create_key_value_compression  NUMBER,
    exercise_argument_compression NUMBER,
    exercise_result_compression   NUMBER
);

-- support ordering by offset and transaction, ready for serving via the Ledger API
create index participant_events_offset_txn_node_idx on participant_events (ORA_HASH(event_offset), transaction_id, node_index);

-- support looking up a create event by the identifier of the contract it created, so that
-- consuming exercise events can use it to set the value of create_consumed_at
create index participant_events_contract_idx on participant_events (contract_id);

-- support requests of transactions by transaction_id
create index participant_events_transaction_idx on participant_events (transaction_id);

-- support filtering by template
create index participant_events_template_ids on participant_events (template_id);

-- 4. create a new index involving event_sequential_id
create index participant_events_event_sequential_id on participant_events (event_sequential_id);

-- 5. we need this index to convert event_offset to event_sequential_id
create index participant_events_event_offset on participant_events (ORA_HASH(event_offset));

-- TODO BH -- cannot create index on custom VARRAY fields
-- https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE-INDEX.html#GUID-1F89BBC0-825F-4215-AF71-7588E31D8BFE
-- create index participant_events_flat_event_witnesses_idx on participant_events (flat_event_witnesses);
-- create index participant_events_tree_event_witnesses_idx on participant_events (tree_event_witnesses);


