# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_library_suite",
    "da_scala_test_suite",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_version_configuration",
    "lf_version_configuration_versions",
)
load("//ledger/ledger-api-tests:conformance.bzl", "conformance_test")
load("@os_info//:os_info.bzl", "is_windows")

# we release ledger-api-test-tool-stable as ledger-api-test-tool
da_scala_binary(
    name = "ledger-api-test-tool",
    srcs = [],
    main_class = "com.daml.ledger.api.testtool.Main",
    resources = glob(["src/main/resources/**/*"]),
    tags = [
        "maven_coordinates=com.daml:ledger-api-test-tool:__VERSION__",
        # We release this as a fat jar so this tag ensures that the dependencies in the generated
        # POM file are set correctly.
        "fat_jar",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [":tool-default"],
)

[
    alias(
        name = "tool-%s" % name,
        actual = ":tool-%s" % lf_target,
        visibility = ["//visibility:public"],
    )
    for (name, lf_target) in lf_version_configuration.items()
]

[
    da_scala_binary(
        name = "tool-%s" % lf_version,
        srcs = glob([
            "src/main/scala/**/*.scala",
            "src/lf-v%s/scala/**/*.scala" % lf_version,
        ]),
        main_class = "com.daml.ledger.api.testtool.Main",
        resources = glob(["src/main/resources/**/*"]),
        scala_deps = [
            "@maven//:com_github_scopt_scopt",
        ],
        tags = [
            "maven_coordinates=com.daml:ledger-api-test-tool-{}:__VERSION__".format(lf_version),
            # We release this as a fat jar so this tag ensures that the dependencies in the generated
            # POM file are set correctly.
            "fat_jar",
            "no_scala_version_suffix",
        ],
        visibility = ["//visibility:public"],
        runtime_deps = [
            "@maven//:ch_qos_logback_logback_classic",
        ],
        deps = [
            "//ledger/ledger-api-common",
            "//ledger/ledger-api-tests/infrastructure:infrastructure-%s" % lf_version,
            "//ledger/ledger-api-tests/performance:performance-%s" % lf_version,
            "//ledger/ledger-api-tests/runner:runner-%s" % lf_version,
            "//ledger/ledger-api-tests/suites:suites-%s" % lf_version,
            "//libs-scala/build-info",
            "@maven//:io_netty_netty_handler",
        ],
    )
    for lf_version in lf_version_configuration_versions
]

conformance_test(
    name = "conformance-test",
    extra_data = [
        "//ledger/test-common/test-certificates:client.crt",
        "//ledger/test-common/test-certificates:client.pem",
        "//ledger/test-common/test-certificates:server.crt",
        "//ledger/test-common/test-certificates:server.pem",
        "//ledger/test-common/test-certificates:server.pem.enc",
        "//ledger/test-common/test-certificates:ca.crt",
    ],
    lf_versions = lf_version_configuration_versions,
    ports = [6865],
    server = "//ledger/ledger-on-sql:test-server-postgresql-bin",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant=participant-id=example,port=6865",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.pem.enc))",
        "--tls-secrets-url https://raw.githubusercontent.com/digital-asset/daml/main/ledger/test-common/files/server-pem-decryption-parameters.json",
        "--min-tls-version 1.3",
    ],
    test_tool_args = [
        "--verbose",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.pem))",
        "--additional=TLSOnePointThreeIT",
    ],
)

conformance_test(
    name = "conformance-test-tls1.2-or-newer",
    extra_data = [
        "//ledger/test-common/test-certificates:client.crt",
        "//ledger/test-common/test-certificates:client.pem",
        "//ledger/test-common/test-certificates:server.crt",
        "//ledger/test-common/test-certificates:server.pem",
        "//ledger/test-common/test-certificates:server.pem.enc",
        "//ledger/test-common/test-certificates:ca.crt",
    ],
    lf_versions = lf_version_configuration_versions,
    ports = [6865],
    server = "//ledger/ledger-on-sql:test-server-postgresql-bin",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant=participant-id=example,port=6865",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.pem.enc))",
        "--tls-secrets-url https://raw.githubusercontent.com/digital-asset/daml/main/ledger/test-common/files/server-pem-decryption-parameters.json",
    ],
    test_tool_args = [
        "--verbose",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.pem))",
        "--include=TLSAtLeastOnePointTwoIT",
    ],
)

# This deliberately uses the deploy.jar since thatâ€™s what we ship
# and we want to test that the extract option works there.
# Given subleties in classpaths, it could potentially work
# in the non-deploy jar.
sh_test(
    name = "test-extract",
    srcs = ["test-extract.sh"],
    args = [
        "$(location @local_jdk//:bin/java.exe)" if is_windows else "$(location @local_jdk//:bin/java)",
        "$(location :ledger-api-test-tool_deploy.jar)",
    ],
    data = [
        ":ledger-api-test-tool_deploy.jar",
        "@local_jdk//:bin/java.exe" if is_windows else "@local_jdk//:bin/java",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)
