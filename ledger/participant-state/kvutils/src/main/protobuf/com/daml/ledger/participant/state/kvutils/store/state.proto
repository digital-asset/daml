// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package com.daml.ledger.participant.state.kvutils.store;

option java_package = "com.daml.ledger.participant.state.kvutils.store";
option java_multiple_files = true;
option csharp_namespace = "Com.Daml.Ledger.Participant.State.KVUtils.Store";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/configuration.proto";


// Daml state key. [[KeyValueCommitting]] produces effects that are committed
// to the ledger from the `DamlSubmission`: a log entry to be created, and
// the set of Daml state updates.
// The field numbers below must match with the corresponding entries in `DamlStateValue`.
message DamlStateKey {
  oneof key {
    string package_id = 1;
    string contract_id = 2;
    DamlCommandDedupKey command_dedup = 3;
    string party = 4;
    DamlContractKey contract_key = 5;
    google.protobuf.Empty configuration = 6;
    DamlSubmissionDedupKey submission_dedup = 7;
  }
}

// Daml state values pointed to by `DamlStateKey`.
// The field numbers below must match with the corresponding entries in `DamlStateKey`.
message DamlStateValue {
  oneof value {
    // A Daml-LF archive stored as bytes (see daml_lf_dev.Archive).
    bytes archive = 1;
    DamlContractState contract_state = 2;
    DamlCommandDedupValue command_dedup = 3;
    DamlPartyAllocation party = 4;
    DamlContractKeyState contract_key_state = 5;
    com.daml.ledger.participant.state.kvutils.store.events.DamlConfigurationEntry configuration_entry = 6;
    DamlSubmissionDedupValue submission_dedup = 7;
  }
}

message DamlCommandDedupKey {
  repeated string submitters = 1;
  string application_id = 2;
  string command_id = 3;
}

message DamlCommandDedupValue {
  reserved 1; // was record_time
  oneof time {
    // The time until when future commands with the same
    // deduplication key will be rejected due to a duplicate submission.
    // Read-only for backwards compatibility
    google.protobuf.Timestamp deduplicated_until = 2 [deprecated = true];
    google.protobuf.Timestamp record_time = 3;
    PreExecutionDeduplicationBounds record_time_bounds = 4;
  }
  string submission_id = 5;
  google.protobuf.Timestamp prunable_from = 6;
}

message PreExecutionDeduplicationBounds {
  // record_time is not available during pre-execution
  google.protobuf.Timestamp max_record_time = 1;
  google.protobuf.Timestamp min_record_time = 2;
}

message DamlSubmissionDedupKey {
  enum SubmissionKind {
    PARTY_ALLOCATION = 0;
    PACKAGE_UPLOAD = 1;
    CONFIGURATION = 2;
  }

  SubmissionKind submission_kind = 1;

  // A unique string scoped to a particular participant.
  string submission_id = 2;

  // Uploading participant's id.
  string participant_id = 3;
}

message DamlSubmissionDedupValue {
  reserved 1; // was record_time
}

// Daml contract state, recording the activeness state of a contract.
// The contract instance itself is stored within the transaction in a log entry.
// See https://github.com/digital-asset/daml/issues/734 for future work on contract
// instance storage.
message DamlContractState {
  // The time from which the contract is active.
  // This is the same value as the ledger_effective_time of the transaction
  // that created this contract.
  google.protobuf.Timestamp active_at = 1;

  // Optional, if set the contract has been archived.
  google.protobuf.Timestamp archived_at = 2;

  reserved 3; // was archived_by_entry

  // The parties to which this contract has been explicitly disclosed, that is,
  // the parties which witnessed the creation of the contract.
  repeated string locally_disclosed_to = 4;

  // The parties to which this contract has been disclosed to after the creation
  // of the contract (i.e. divulged to).
  // https://docs.daml.com/concepts/ledger-model/ledger-privacy.html#divulgence-when-non-stakeholders-see-contracts
  repeated string divulged_to = 5;

  // The contract key set by the contract. Optional.
  DamlContractKey contract_key = 6;

  // The contract instance stored as bytes (see com.daml.lf.transaction.ContractInstance).
  bytes raw_contract_instance = 7;
}

message DamlContractKey {
  // The Daml template identifier of the contract that created this key.
  Identifier template_id = 1;

  reserved 2; // This was key serialized as a VersionedValue. Replaced by hash.

  // Hash of the contract key value, produced by KeyHasher.
  bytes hash = 3;
}

// A copy of com.daml.lf.value.Identifier.
message Identifier {
  string package_id = 1;
  repeated string module_name = 2;
  repeated string name = 3;
}

// Stored information about a given party.
// Party tenancy is immutable and cannot change once recorded.
// TODO: Add concept of party allocation time. It would have to follow similar pattern
// as LET for transactions, so that party allocation submissions remain verifiable by
// the committers/validators.
message DamlPartyAllocation {
  // Id of participant where the party is hosted.
  string participant_id = 1;
  // A display name associated with the given party.
  string display_name = 2;
}

// The state of a contract key.
message DamlContractKeyState {
  // The contract to which the key points to.
  // If unset the key is inactive.
  string contract_id = 1;

  // The time from which the contract is active.
  // This is the same value as the ledger_effective_time of the transaction
  // that created this contract.
  google.protobuf.Timestamp active_at = 2;
}
