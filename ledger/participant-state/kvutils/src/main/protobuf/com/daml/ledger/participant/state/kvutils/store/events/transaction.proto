// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

//
// Protocol buffer messages used by the participant state key-value utilities
// for implementing a Daml ledger backed by a key-value store.
//
// These messages should only be produced and consumed by the methods in
// `KeyValueCommitting`, `KeyValueConsumption` and `KeyValueSubmission` objects.
//

syntax = "proto3";

package com.daml.ledger.participant.state.kvutils.store.events;

option java_package = "com.daml.ledger.participant.state.kvutils.store.events";
option java_multiple_files = true;
option csharp_namespace = "Com.Daml.Ledger.Participant.State.KVUtils.Store.Events";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/rejection_reason.proto";

message DamlSubmitterInfo {
  repeated string submitters = 1;
  string command_id = 2;
  string application_id = 3;
  reserved 4; // was maximum_record_time
  oneof deduplication_period {
    google.protobuf.Timestamp deduplicate_until = 5 [deprecated = true]; // Read-only for backwards compatibility
    google.protobuf.Duration deduplication_duration = 6;
    string deduplication_offset = 7;
  }
  optional string submission_id = 9;
}

// Daml transaction entry, used in both `DamlSubmission` and `DamlLogEntry`.
// Contains the original relative transaction as produced by Daml Engine, along
// with submitter information and metadata (see Ledger API `commands.proto` for
// their source).
message DamlTransactionEntry {
  // The originally submitted transaction (see com.daml.lf.transaction.Transaction).
  bytes raw_transaction = 1;

  // The submitting party and metadata about the submitted command.
  // The submitting party is authorized against the submitting participant
  // by looking at the party allocation. The metadata is used to deduplicate
  // command submissions.
  DamlSubmitterInfo submitter_info = 2;

  // Workflow identifier is an opaque string specific to the
  // submitting application that is visible over Ledger API. The workflow
  // identifier has no predefined meaning and applications are free to use
  // it as they see fit.
  string workflow_id = 3;

  // The ledger effective time of the transaction. This timestamp is used
  // during validation/reinterpretation of the transaction as the source of
  // time. This timestamp is checked against the ledger configuration which defines
  // the bounds for valid timestamps in relation to the ledger record time
  // (the time at which the transaction is committed).
  google.protobuf.Timestamp ledger_effective_time = 4;

  // The nonce used to generate contract ids
  bytes submission_seed = 5;

  // The time used to derive contract ids
  google.protobuf.Timestamp submission_time = 6;

  // The pre-computed transaction blinding information.
  DamlTransactionBlindingInfo blinding_info = 7;
}

// A transaction's blinding information, consisting of disclosure and
// divulgence info.
//
// See com.daml.lf.transaction.BlindingInfo for more details.
message DamlTransactionBlindingInfo {
  // The disclosure of a transaction node to a set of local parties.
  message DisclosureEntry {
    string node_id = 1;
    repeated string disclosed_to_local_parties = 2;
  }

  // The divulgence of a contract to a set of local parties.
  message DivulgenceEntry {
    string contract_id = 1;
    repeated string divulged_to_local_parties = 2;
    // The contract instance stored as bytes (see com.daml.lf.transaction.ContractInstance).
    bytes raw_contract_instance = 3;
  }

  // Disclosure, specified in terms of local transaction node IDs.
  repeated DisclosureEntry disclosures = 1;

  // Divulgence, specified in terms of contract IDs.
  // Note: if this info was produced by blinding a transaction
  // containing only contract ids, it may also contain contracts
  // produced in the same transaction.
  repeated DivulgenceEntry divulgences = 2;
}

// A transaction rejection entry.
message DamlTransactionRejectionEntry {
  DamlSubmitterInfo submitter_info = 1;
  reserved 5; // was reason.maximum_record_time_exceeded

  // Whether this rejection should be considered a definite answer; i.e., whether this rejection
  // signals that no other transaction with the same change-id can be accepted or rejected.
  //
  // False for all rejections before the rank-based deduplication is implemented.
  bool definite_answer = 22;

  oneof reason {

    // Rejections used by both participant.state v1 and v2 API.
    Duplicate duplicate_command = 6;
    SubmitterCannotActViaParticipant submitter_cannot_act_via_participant = 8;
    InvalidLedgerTime invalid_ledger_time = 9;

    //
    // Rejections used by participant.state.v1 API.
    // Note that these are deprecated.
    //
    Inconsistent inconsistent = 2 [deprecated = true];
    Disputed disputed = 3 [deprecated = true];
    ResourcesExhausted resources_exhausted = 4 [deprecated = true];
    PartyNotKnownOnLedger party_not_known_on_ledger = 7 [deprecated = true];

    //
    // Rejections used by participant.state.v2 API.
    //
    ValidationFailure validation_failure = 10;
    DuplicateKeys internally_duplicate_keys = 11;
    InconsistentKeys internally_inconsistent_keys = 12;
    InconsistentContracts externally_inconsistent_contracts = 13;
    DuplicateKeys externally_duplicate_keys = 14;
    InconsistentKeys externally_inconsistent_keys = 15;
    MissingInputState missing_input_state = 16;
    RecordTimeOutOfRange record_time_out_of_range = 17;
    CausalMonotonicityViolated causal_monotonicity_violated = 18;
    SubmittingPartyNotKnownOnLedger submitting_party_not_known_on_ledger = 19;
    PartiesNotKnownOnLedger parties_not_known_on_ledger = 20;
    InvalidParticipantState invalid_participant_state = 21;
  }
}
