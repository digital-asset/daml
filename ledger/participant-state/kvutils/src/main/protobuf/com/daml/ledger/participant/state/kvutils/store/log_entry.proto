// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.participant.state.kvutils.store;

option java_package = "com.daml.ledger.participant.state.kvutils.store";
option java_multiple_files = true;
option csharp_namespace = "Com.Daml.Ledger.Participant.State.KVUtils.Store";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/configuration.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/configuration_rejection.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/package_upload.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/party_allocation.proto";
import "com/daml/ledger/participant/state/kvutils/store/events/transaction.proto";

// A log entry for a committed Daml submission.
// Produced by [[KeyValueCommitting]] from the `DamlSubmission` message.
// Each entry can be converted into a participant state `Update` event
// with [[KeyValueConsumption]], except for a time update entry.
//
// Please read comments in [[com.daml.ledger.participant.state.v2.package]]
// and  [[com.daml.ledger.participant.state.kvutils.package]] for background
// information.
message DamlLogEntry {
  // The record time at which this entry was committed.
  google.protobuf.Timestamp record_time = 1;

  oneof payload {
    // A committed Daml transaction.
    // Can be converted into `Update.TransactionAccepted`.
    com.daml.ledger.participant.state.kvutils.store.events.DamlTransactionEntry transaction_entry = 2;

    // A rejected transaction.
    com.daml.ledger.participant.state.kvutils.store.events.DamlTransactionRejectionEntry transaction_rejection_entry = 3;

    // A collection of Daml-LF archives uploaded together by a participant.
    com.daml.ledger.participant.state.kvutils.store.events.DamlPackageUploadEntry package_upload_entry = 4;

    // A rejection of package upload.
    com.daml.ledger.participant.state.kvutils.store.events.DamlPackageUploadRejectionEntry package_upload_rejection_entry = 5;

    // A Daml ledger configuration change.
    com.daml.ledger.participant.state.kvutils.store.events.DamlConfigurationEntry configuration_entry = 6;

    // A rejected configuration change.
    com.daml.ledger.participant.state.kvutils.store.events.DamlConfigurationRejectionEntry configuration_rejection_entry = 7;

    // Allocation of a new Daml party and its assignment to a participant.
    com.daml.ledger.participant.state.kvutils.store.events.DamlPartyAllocationEntry party_allocation_entry = 8;

    // A rejection of party allocation request.
    com.daml.ledger.participant.state.kvutils.store.events.DamlPartyAllocationRejectionEntry party_allocation_rejection_entry = 9;

    // A rejection of a pre-executed submission because of out-of-time-bounds.
    DamlOutOfTimeBoundsEntry out_of_time_bounds_entry = 10;

    // A log entry whose purpose is to transmit a current record time for pre-executed submissions.
    google.protobuf.Empty time_update_entry = 101;
  }
}

message DamlLogEntryId {
  // Entry identifiers are opaque bytestrings chosen by the implementation that provide a unique
  // reference to the entry. They do not need to be comparable, as long as the implementation can
  // provide an ordered sequence of log entries.
  // The entry identifier is used:
  // * to lookup the log entry when producing `Update`.
  // * as the Daml transaction identifier and rendered as hexadecimal.
  // * as part of contract identifiers.
  bytes entry_id = 1;
}

// There's a circular dependency between DamlLogEntry and DamlOutOfTimeBoundsEntry so we must define them in the same file
// Indicates that a submission has been rejected after pre-execution.
// [[KeyValueConsumption.logEntryToUpdate]] will pick the right rejection reason based on current
// record time.
message DamlOutOfTimeBoundsEntry {
  // We don't expect entry.recordTime to be present.
  DamlLogEntry entry = 1;
  // Read-only for backwards compatibility, will not be set for new entries
  google.protobuf.Timestamp duplicate_until = 2 [deprecated = true];
  google.protobuf.Timestamp too_early_until = 3;
  google.protobuf.Timestamp too_late_from = 4;
}
