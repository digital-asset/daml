// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

//
// Protocol buffer messages used by the participant state key-value utilities
// for implementing a DAML ledger backed by a key-value store.
//
// These messages must only be produced and consumed by the methods in
// `KeyValueCommitting`, `KeyValueConsumption` and `KeyValueSubmission` objects.
// You must not embed these messages in other protocol buffer messages.
//
// TODO(JM): We're consistently using the 'Daml' prefix to allow unqualified import
// of the generated classes and to distinguish these from the scala types in participant-state.
// Might want to use a more telling prefix.

syntax = "proto3";
package com.daml.ledger.participant.state.kvutils;
option java_package = "com.daml.ledger.participant.state.kvutils";
option csharp_namespace = "Com.Daml.Ledger.Participant.State.KVUtils";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "da/daml_lf.proto";
import "daml-lf/transaction/src/main/protobuf/transaction.proto";


// A submission to the ledger: a payload and its inputs if any.
// Produced by [[KeyValueSubmission]].
// Transformed into `DamlLogEntry` when committed.
message DamlSubmission {
  repeated DamlLogEntryId input_log_entries = 1;
  repeated DamlStateKey input_daml_state = 2;
  oneof payload {
    DamlTransactionEntry transaction_entry = 3;
    DamlPackageUploadEntry package_upload_entry = 4;
    DamlConfigurationEntry configuration_entry = 5;
    DamlPartyAllocationEntry party_allocation_entry = 6;
  }
}

// A log entry for a committed DAML submission.
// Produced by [[KeyValueCommitting]] from the `DamlSubmission` message.
// Each entry can be converted into a participant state `Update` event
// with [[KeyValueConsumption]].
//
// Please read comments in [[com.daml.ledger.participant.state.v1.package]]
// and  [[com.daml.ledger.participant.state.kvutils.package]] for background
// information. See example implementation in [[InMemoryKeyValueParticipant]].
message DamlLogEntry {
  // The record time at which this entry was committed.
  google.protobuf.Timestamp record_time = 1;

  oneof payload {
    // A committed DAML transaction.
    // Can be converted into `Update.TransactionAccepted`.
    DamlTransactionEntry transaction_entry = 2;

    // A rejected command.
    DamlRejectionEntry rejection_entry = 3;

    // A collection of DAML-LF archives uploaded together by a participant.
    DamlPackageUploadEntry package_upload_entry = 4;

    // A rejection of package upload
    DamlPackageUploadRejectionEntry package_upload_rejection_entry = 5;

    // A DAML configuration change.
    DamlConfigurationEntry configuration_entry = 6;

    // Allocation of a new DAML party and its assignment to a participant
    DamlPartyAllocationEntry party_allocation_entry = 7;

    // A rejection of party allocation request
    DamlPartyAllocationRejectionEntry party_allocation_rejection_entry = 8;
  }
}

message DamlLogEntryId {
  // Entry identifiers are opaque bytestrings chosen by the implementation that provide a unique
  // reference to the entry. They do not need to be comparable, as long as the implementation can
  // provide an ordered sequence of log entries.
  // The entry identifier is used:
  // * to lookup the log entry when producing `Update`.
  // * as the DAML transaction identifier and rendered as hexadecimal.
  // * as part of absolute contract identifiers.
  bytes entry_id = 1;
}

message DamlSubmitterInfo {
  string submitter = 1;
  string command_id = 2;
  string application_id = 3;
  google.protobuf.Timestamp maximum_record_time = 4;
}

// DAML transaction entry, used in both `DamlSubmission` and `DamlLogEntry`.
// Contains the original relative transaction as produced by DAML Engine, along
// with submitter information and metadata (see Ledger API `commands.proto` for
// their source).
message DamlTransactionEntry {
  // The original submitted transaction, with relative identifiers.
  // For now we're deduplicating the data and storing the contract instances
  // both in this transaction, and in "DamlState". Later on the transaction here
  // will only record the node identifiers, and nodes themselves are stored under
  // "DamlState".
  com.digitalasset.daml.lf.transaction.Transaction transaction = 1;

  DamlSubmitterInfo submitter_info = 2;

  // Transaction metadata.
  string workflow_id = 3;
  google.protobuf.Timestamp ledger_effective_time = 4;
}

// DAML command rejection entry. A failed commit of a submission creates a
// rejection log entry.
message DamlRejectionEntry {
  DamlSubmitterInfo submitter_info = 1;

  message Inconsistent {
    string details = 1;
  }

  message Disputed {
    string details = 1;
  }

  message ResourcesExhausted {
    string details = 1;
  }

  message MaximumRecordTimeExceeded {
    string details = 1;
  }

  message DuplicateCommand {
    string details = 1;
  }

  message PartyNotKnownOnLedger {
    string details = 1;
  }

  message SubmitterCannotActViaParticipant {
    string details = 1;
  }

  oneof reason {
    Inconsistent inconsistent = 2;
    Disputed disputed = 3;
    ResourcesExhausted resources_exhausted = 4;
    MaximumRecordTimeExceeded maximum_record_time_exceeded = 5;
    DuplicateCommand duplicate_command = 6;
    PartyNotKnownOnLedger party_not_known_on_ledger = 7;
    SubmitterCannotActViaParticipant submitter_cannot_act_via_participant = 8;
  }
}

// A public package upload.
// DAML-LF packages will be deduplicated based on their hashes. Only unique
// ones will be added to the KV storage. Deduplication has no impact on the
// upload result.
message DamlPackageUploadEntry {
  // A unique string scoped to a particular participant.
  // Implementers are free to select adequate mechanism e.g. UUID or similar.
  string submission_id = 1;

  // List of archives to be uploaded.
  repeated daml_lf.Archive archives = 2;

  // Description provided by the backing participant describing where it got
  // the package from, e.g., when, where, or by whom the packages were
  // uploaded.
  string source_description = 3;

  // Uploading participant's id.
  string participant_id = 4;
}

// A message indicating that package upload was unsuccessful.
// If validation of any of the uploaded packages fails, the whole upload fails
// and a rejection message is produced.
message DamlPackageUploadRejectionEntry {
  // An id selected by the submitter, can be used for matching rejection with
  // the original upload entry.
  string submission_id = 1;

  // Id of the participant that uploaded the package.
  string participant_id = 2;

  // One of the uploaded packages is not valid.
  message InvalidPackage {
    string details = 1;
  }

  // The participant was not authorized to submit the upload request.
  message ParticipantNotAuthorized {
    string details = 1;
  }

  oneof reason {

    InvalidPackage invalid_package = 3;
    ParticipantNotAuthorized participant_not_authorized = 4;
  }
}

message DamlConfigurationEntry {
  DamlTimeModel time_model = 1;
}

message DamlTimeModel {
  // The expected minimum latency of a transaction.
  google.protobuf.Duration minTransactionLatency = 1;

  // The maximum allowed clock skew between the ledger and clients.
  google.protobuf.Duration maxClockSkew = 2;

  // The maximum allowed time to live for a transaction.
  // Must be greater than the derived minimum time to live.
  google.protobuf.Duration maxTtl = 3;
}

// An allocation of party name and assignment of a party to a given
// participant.
// A party can only be hosted once (this may not be true in more
// sophisticated ledgers in the future).
message DamlPartyAllocationEntry {
  // A unique string scoped to a particular participant.
  // Implementers are free to select adequate mechanism e.g. UUID or similar.
  string submission_id = 1;

  // The party name to be allocated.
  string party = 2;

  // Allocating participant's id.
  string participant_id = 3;

  // A display name associated with the given party.
  string display_name = 4;
}

// A message indicating that party allocation was unsuccessful.
message DamlPartyAllocationRejectionEntry {
  // An id selected by the submitter, can be used for matching rejection with
  // the original upload entry.
  string submission_id = 1;

  // Uploading participant's id.
  string participant_id = 2;

  // The requested party name already exists.
  message AlreadyExists {
    string details = 1;
  }

  // The requested party name is not valid.
  message InvalidName {
    string details = 1;
  }

  // The participant was not authorized to submit the allocation request.
  message ParticipantNotAuthorized {
    string details = 1;
  }

  oneof reason {
    AlreadyExists already_exists = 3;
    InvalidName invalid_name = 4;
    ParticipantNotAuthorized participant_not_authorized = 5;
  }
}

// DAML state key. [[KeyValueCommitting]] produces effects that are committed
// to the ledger from the `DamlSubmission`: a log entry to be created, and
// the set of DAML state updates.
message DamlStateKey {
  oneof key {
    // NOTE(JM): Match field numbers with `DamlStateValue`
    string package_id = 1;
    DamlContractId contract_id = 2;
    DamlCommandDedupKey command_dedup = 3;
    string party = 4;
  }
}

// DAML state values pointed to by `DamlStateKey`.
message DamlStateValue {
  oneof value {
    // NOTE(JM): Match field numbers with `DamlStateKey`
    daml_lf.Archive archive = 1;
    DamlContractState contract_state = 2;
    DamlCommandDedupValue command_dedup = 3;
    DamlPartyAllocation party = 4;
  }
}

message DamlContractId {
  DamlLogEntryId entry_id = 1;
  int64 node_id = 2;
}

message DamlCommandDedupKey {
  string submitter = 1;
  string application_id = 2;
  string command_id = 3;
}
message DamlCommandDedupValue {
  // NOTE(JM): Currently no content. Could store pointer to log entry.
}

// DAML contract state, recording the activeness state of a contract.
// The contract instance itself is stored within the transaction in a log entry.
// See https://github.com/digital-asset/daml/issues/734 for future work on contract
// instance storage.
message DamlContractState {
  // The time from which the contract is active.
  google.protobuf.Timestamp active_at = 1;

  // Optional, if set the contract has been archived.
  google.protobuf.Timestamp archived_at = 2;

  // Optional. The log entry that caused the contract to be archived.
  DamlLogEntryId archived_by_entry = 3;

  // The parties to which this contract has been explicitly disclosed, that is,
  // the parties which witnessed the creation of the contract.
  repeated string locally_disclosed_to = 4;

  // The parties to which this contract has been disclosed to after the creation
  // of the contract (i.e. divulged to).
  // https://docs.daml.com/concepts/ledger-model/ledger-privacy.html#divulgence-when-non-stakeholders-see-contracts
  repeated string divulged_to = 5;

}

// Stored information about a given party.
// Party tenancy is immutable and cannot change once recorded.
// TODO: Add concept of party allocation time. It would have to follow similar pattern
// as LET for transactions, so that party allocation submissions remain verifiable by
// the committers/validators.
message DamlPartyAllocation {
  // Id of participant where the party is hosted.
  string participant_id = 1;
  // A display name associated with the given party.
  string display_name = 2;
}