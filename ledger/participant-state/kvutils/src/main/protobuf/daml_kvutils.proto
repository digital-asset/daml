// Copyright (c) 2020 The DAML Authors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

//
// Protocol buffer messages used by the participant state key-value utilities
// for implementing a DAML ledger backed by a key-value store.
//
// These messages should only be produced and consumed by the methods in
// `KeyValueCommitting`, `KeyValueConsumption` and `KeyValueSubmission` objects.
//

syntax = "proto3";
package com.daml.ledger.participant.state.kvutils;
option java_package = "com.daml.ledger.participant.state.kvutils";
option csharp_namespace = "Com.Daml.Ledger.Participant.State.KVUtils";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "com/digitalasset/daml_lf_dev/daml_lf.proto";
import "com/digitalasset/daml/lf/transaction.proto";
import "com/digitalasset/daml/lf/value.proto";
import "com/daml/ledger/participant/state/ledger_configuration.proto";


// Envelope with which we wrap all kvutils messages that are sent over the network
// or persisted on disk. The envelope specifies the kvutils version that defines how
// a message is decoded and processed. Optionally the message payload may be stored
// compressed.
message Envelope {
  enum MessageKind {
    SUBMISSION = 0;
    LOG_ENTRY = 1;
    STATE_VALUE = 2;
  }

  enum CompressionSchema {
    NONE = 0;
    GZIP = 1;
  }

  // Kvutils version number
  int64 version = 1;

  // Kind of message contained within.
  MessageKind kind = 2;

  // Compression schema, if any, used to compress the message.
  CompressionSchema compression = 3;

  // The enclosed, potentially compressed, message
  bytes message = 4;
}

// A submission to the ledger: a payload and its inputs if any.
// Produced by [[KeyValueSubmission]].
// Transformed into `DamlLogEntry` when committed.
message DamlSubmission {
  repeated DamlStateKey input_daml_state = 1;
  oneof payload {
    DamlTransactionEntry transaction_entry = 2;
    DamlPackageUploadEntry package_upload_entry = 3;
    DamlConfigurationSubmission configuration_submission = 4;
    DamlPartyAllocationEntry party_allocation_entry = 5;
  }
}

// A log entry for a committed DAML submission.
// Produced by [[KeyValueCommitting]] from the `DamlSubmission` message.
// Each entry can be converted into a participant state `Update` event
// with [[KeyValueConsumption]].
//
// Please read comments in [[com.daml.ledger.participant.state.v1.package]]
// and  [[com.daml.ledger.participant.state.kvutils.package]] for background
// information. See example implementation in [[InMemoryKVParticipantState]].
message DamlLogEntry {
  // The record time at which this entry was committed.
  google.protobuf.Timestamp record_time = 1;

  oneof payload {
    // A committed DAML transaction.
    // Can be converted into `Update.TransactionAccepted`.
    DamlTransactionEntry transaction_entry = 2;

    // A rejected transaction.
    DamlTransactionRejectionEntry transaction_rejection_entry = 3;

    // A collection of DAML-LF archives uploaded together by a participant.
    DamlPackageUploadEntry package_upload_entry = 4;

    // A rejection of package upload.
    DamlPackageUploadRejectionEntry package_upload_rejection_entry = 5;

    // A DAML ledger configuration change.
    DamlConfigurationEntry configuration_entry = 6;

    // A rejected configuration change.
    DamlConfigurationRejectionEntry configuration_rejection_entry = 7;

    // Allocation of a new DAML party and its assignment to a participant.
    DamlPartyAllocationEntry party_allocation_entry = 8;

    // A rejection of party allocation request.
    DamlPartyAllocationRejectionEntry party_allocation_rejection_entry = 9;
  }
}

message DamlLogEntryId {
  // Entry identifiers are opaque bytestrings chosen by the implementation that provide a unique
  // reference to the entry. They do not need to be comparable, as long as the implementation can
  // provide an ordered sequence of log entries.
  // The entry identifier is used:
  // * to lookup the log entry when producing `Update`.
  // * as the DAML transaction identifier and rendered as hexadecimal.
  // * as part of absolute contract identifiers.
  bytes entry_id = 1;
}

message DamlSubmitterInfo {
  string submitter = 1;
  string command_id = 2;
  string application_id = 3;
  google.protobuf.Timestamp maximum_record_time = 4;
}

// DAML transaction entry, used in both `DamlSubmission` and `DamlLogEntry`.
// Contains the original relative transaction as produced by DAML Engine, along
// with submitter information and metadata (see Ledger API `commands.proto` for
// their source).
message DamlTransactionEntry {
  // The original submitted transaction, with relative identifiers.
  com.digitalasset.daml.lf.transaction.Transaction transaction = 1;

  // The submitting party and metadata about the submitted command.
  // The submitting party is authorized against the submitting participant
  // by looking at the party allocation. The metadata is used to deduplicate
  // command submissions.
  DamlSubmitterInfo submitter_info = 2;

  // Workflow identifier is an opaque string specific to the
  // submitting application that is visible over Ledger API. The workflow
  // identifier has no predefined meaning and applications are free to use
  // it as they see fit.
  string workflow_id = 3;

  // The ledger effective time of the transaction. This timestamp is used
  // during validation/reinterpretation of the transaction as the source of
  // time. This timestamp is checked against the ledger configuration which defines
  // the bounds for valid timestamps in relation to the ledger record time
  // (the time at which the transaction is committed).
  google.protobuf.Timestamp ledger_effective_time = 4;
}

// A transaction rejection entry.
message DamlTransactionRejectionEntry {
  DamlSubmitterInfo submitter_info = 1;

  oneof reason {
    Inconsistent inconsistent = 2;
    Disputed disputed = 3;
    ResourcesExhausted resources_exhausted = 4;
    MaximumRecordTimeExceeded maximum_record_time_exceeded = 5;
    Duplicate duplicate_command = 6;
    PartyNotKnownOnLedger party_not_known_on_ledger = 7;
    SubmitterCannotActViaParticipant submitter_cannot_act_via_participant = 8;
  }
}

// A public package upload.
// DAML-LF packages will be deduplicated based on their hashes. Only unique
// ones will be added to the key-value storage. Deduplication has no impact on the
// upload result.
message DamlPackageUploadEntry {
  // A unique string scoped to a particular participant for matching the
  // request with the result.
  // Implementers are free to select adequate mechanism e.g. UUID or similar.
  string submission_id = 1;

  // List of archives to be uploaded.
  repeated daml_lf_dev.Archive archives = 2;

  // Description provided by the backing participant describing where it got
  // the package from, e.g., when, where, or by whom the packages were
  // uploaded.
  string source_description = 3;

  // Uploading participant's id.
  string participant_id = 4;
}

// A message indicating that package upload was unsuccessful.
// If validation of any of the uploaded packages fails, the whole upload fails
// and a rejection message is produced.
message DamlPackageUploadRejectionEntry {
  // An id selected by the submitter, can be used for matching rejection with
  // the original upload entry.
  string submission_id = 1;

  // Id of the participant that uploaded the package.
  string participant_id = 2;

  oneof reason {
    Invalid invalid_package = 3;
    ParticipantNotAuthorized participant_not_authorized = 4;
    Duplicate duplicate_submission = 5;
  }
}

// Configuration change request to change the ledger configuration.
message DamlConfigurationSubmission {
  // A unique string scoped to a particular participant for matching the
  // request with the result.
  // Implementers are free to select adequate mechanism e.g. UUID or similar.
  string submission_id = 1;

  // Submitting participant's id.
  string participant_id = 2;

  // The maximum record time after which the submission will be rejected.
  // Allows submitter to control when the request times out and to retry.
  google.protobuf.Timestamp maximum_record_time = 3;

  // The new configuration that replaces the current configuration.
  com.daml.ledger.participant.state.LedgerConfiguration configuration = 4;
}

// A log entry describing a rejected configuration change.
message DamlConfigurationRejectionEntry {
  // A unique string scoped to a particular participant for matching the
  // request with the result.
  string submission_id = 1;

  // Submitting participant's id.
  string participant_id = 2;

  // The new proposed configuration that was rejected.
  com.daml.ledger.participant.state.LedgerConfiguration configuration = 3;

  oneof reason {
    ParticipantNotAuthorized participant_not_authorized = 4;
    GenerationMismatch generation_mismatch = 5;
    Invalid invalid_configuration = 6;
    TimedOut timed_out = 7;
    Duplicate duplicate_submission = 8;
  }
}

// Configuration entry that records a configuration change.
// Also used in state to look up latest configuration.
// When a configuration exists, only the participant that
// submitted previously can change it.
message DamlConfigurationEntry {
  // The submission from which this configuration originated.
  string submission_id = 1;

  // Submitting participant's id.
  string participant_id = 2;

  // The ledger configuration.
  com.daml.ledger.participant.state.LedgerConfiguration configuration = 3;
}

// An allocation of party name and assignment of a party to a given
// participant.
// A party can only be hosted once (this may not be true in more
// sophisticated ledgers in the future).
message DamlPartyAllocationEntry {
  // A unique string scoped to a particular participant.
  // Implementers are free to select adequate mechanism e.g. UUID or similar.
  string submission_id = 1;

  // The party name to be allocated.
  string party = 2;

  // Allocating participant's id.
  string participant_id = 3;

  // A display name associated with the given party.
  string display_name = 4;
}

// A message indicating that party allocation was unsuccessful.
message DamlPartyAllocationRejectionEntry {
  // An id selected by the submitter, can be used for matching rejection with
  // the original upload entry.
  string submission_id = 1;

  // Uploading participant's id.
  string participant_id = 2;

  oneof reason {
    AlreadyExists already_exists = 3;
    Invalid invalid_name = 4;
    ParticipantNotAuthorized participant_not_authorized = 5;
    Duplicate duplicate_submission = 6;
  }
}

// DAML state key. [[KeyValueCommitting]] produces effects that are committed
// to the ledger from the `DamlSubmission`: a log entry to be created, and
// the set of DAML state updates.
// The field numbers below must match with the corresponding entries in `DamlStateValue`.
message DamlStateKey {
  oneof key {
    string package_id = 1;
    DamlContractId contract_id = 2;
    DamlCommandDedupKey command_dedup = 3;
    string party = 4;
    DamlContractKey contract_key = 5;
    google.protobuf.Empty configuration = 6;
    DamlSubmissionDedupKey submission_dedup = 7;
  }
}

// DAML state values pointed to by `DamlStateKey`.
// The field numbers below must match with the corresponding entries in `DamlStateKey`.
message DamlStateValue {
  oneof value {
    daml_lf_dev.Archive archive = 1;
    DamlContractState contract_state = 2;
    DamlCommandDedupValue command_dedup = 3;
    DamlPartyAllocation party = 4;
    DamlContractKeyState contract_key_state = 5;
    DamlConfigurationEntry configuration_entry = 6;
    DamlSubmissionDedupValue submission_dedup = 7;
  }
}

message DamlContractId {
  DamlLogEntryId entry_id = 1;
  int64 node_id = 2;
}

message DamlCommandDedupKey {
  string submitter = 1;
  string application_id = 2;
  string command_id = 3;
}

message DamlCommandDedupValue {
  // record time will be used in the future for pruning
  google.protobuf.Timestamp record_time = 1;
}

message DamlSubmissionDedupKey {
  enum SubmissionKind {
    PARTY_ALLOCATION = 0;
    PACKAGE_UPLOAD = 1;
    CONFIGURATION = 2;
  }

  SubmissionKind submission_kind = 1;

  // A unique string scoped to a particular participant.
  string submission_id = 2;

  // Uploading participant's id.
  string participant_id = 3;
}

message DamlSubmissionDedupValue {
  // record time will be used in the future for pruning
  google.protobuf.Timestamp record_time = 1;
}

// DAML contract state, recording the activeness state of a contract.
// The contract instance itself is stored within the transaction in a log entry.
// See https://github.com/digital-asset/daml/issues/734 for future work on contract
// instance storage.
message DamlContractState {
  // The time from which the contract is active.
  google.protobuf.Timestamp active_at = 1;

  // Optional, if set the contract has been archived.
  google.protobuf.Timestamp archived_at = 2;

  // Optional. The log entry that caused the contract to be archived.
  DamlLogEntryId archived_by_entry = 3;

  // The parties to which this contract has been explicitly disclosed, that is,
  // the parties which witnessed the creation of the contract.
  repeated string locally_disclosed_to = 4;

  // The parties to which this contract has been disclosed to after the creation
  // of the contract (i.e. divulged to).
  // https://docs.daml.com/concepts/ledger-model/ledger-privacy.html#divulgence-when-non-stakeholders-see-contracts
  repeated string divulged_to = 5;

  // The contract key set by the contract. Optional.
  DamlContractKey contract_key = 6;

  // The contract instance.
  com.digitalasset.daml.lf.transaction.ContractInstance contract_instance = 7;
}

message DamlContractKey {
  // The DAML template identifier of the contract that created this key.
  com.digitalasset.daml.lf.value.Identifier template_id = 1;

  // The contract key itself.
  com.digitalasset.daml.lf.value.VersionedValue key = 2;
}

// Stored information about a given party.
// Party tenancy is immutable and cannot change once recorded.
// TODO: Add concept of party allocation time. It would have to follow similar pattern
// as LET for transactions, so that party allocation submissions remain verifiable by
// the committers/validators.
message DamlPartyAllocation {
  // Id of participant where the party is hosted.
  string participant_id = 1;
  // A display name associated with the given party.
  string display_name = 2;
}

// The state of a contract key.
message DamlContractKeyState {
  // The contract to which the key points to.
  // If unset the key is inactive.
  DamlContractId contract_id = 1;
}

// A dump of a "kvutils" ledger, including submissions. Used by the integrity checker to test
// that a new version of kvutils can process older submissions and ledgers.
message LedgerDumpEntry {
  message StatePair {
    DamlStateKey state_key = 1;
    bytes state_value = 2; // wrapped in envelope.
  }

  // The submission to the ledger, wrapped in envelope. Optional, if unset the
  // submission is synthesized from the log entry if possible.
  bytes submission = 1;

  // The participant that submitted it.
  string participant_id = 2;

  // The assigned entry id.
  DamlLogEntryId entry_id = 3;

  // The resulting log entry, wrapped in envelope.
  bytes log_entry = 4;

  // The resulting output state.
  repeated StatePair output_state = 5;
}

// Errors

// The transaction relied on contracts or keys being active that were no longer active.
message Inconsistent {
  string details = 1;
}

// The transaction has been disputed.
// Dispute occurs when the DAML model conformance or authorization fails.
message Disputed {
  string details = 1;
}

// Committer did not have sufficient resources to process the transaction.
message ResourcesExhausted {
  string details = 1;
}

// The transaction submission exceeded its maximum record time.
message MaximumRecordTimeExceeded {
  string details = 1;
}

// The committer has already seen a command/submission with the same deduplication
// key during its implementation specific deduplication window.
message Duplicate {
  string details = 1;
}

// A party mentioned as a stakeholder or actor has not been on-boarded on
// the ledger.
message PartyNotKnownOnLedger {
  string details = 1;
}

// The submitting party cannot act via the participant to which the request has been sent.
message SubmitterCannotActViaParticipant {
  string details = 1;
}

// Submitted request content was not valid: a DAML package, a party name
// or a configuration.
message Invalid {
  string details = 1;
}

// Participant not authorized to submit the request.
message ParticipantNotAuthorized {
  string details = 1;
}

// A mismatch in the configuration generation, that is, the
// new configuration did not carry a generation that was one
// larger than previous generation.
message GenerationMismatch {
  int64 expected_generation = 1;
}

// The request timed out, e.g. record time exceeded maximum record time.
message TimedOut {
  google.protobuf.Timestamp record_time = 1;
  google.protobuf.Timestamp maximum_record_time = 2;
}

// The requested entity already exists.
message AlreadyExists {
  string details = 1;
}
