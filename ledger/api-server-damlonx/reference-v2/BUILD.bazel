# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
)
load(
    "//bazel_tools/client_server_test:client_server_test.bzl",
    "client_server_test",
)
load("@os_info//:os_info.bzl", "is_windows")

da_scala_binary(
    name = "reference-v2",
    srcs = glob(["src/main/scala/**/*.scala"]),
    main_class = "com.daml.ledger.api.server.damlonx.reference.v2.ReferenceServer",
    resources = glob(["src/main/resources/**/*"]),
    visibility = ["//visibility:public"],
    runtime_deps = [
        "//3rdparty/jvm/ch/qos/logback:logback_classic",
        "//3rdparty/jvm/ch/qos/logback:logback_core",
    ],
    deps = [
        "//3rdparty/jvm/com/github/scopt",
        "//3rdparty/jvm/com/typesafe/akka:akka_stream",
        "//3rdparty/jvm/io/netty:netty_handler",
        "//3rdparty/jvm/io/netty:netty_tcnative_boringssl_static",
        "//3rdparty/jvm/org/slf4j:slf4j_api",
        "//daml-lf/archive:daml_lf_archive_scala",
        "//daml-lf/archive:daml_lf_java_proto",
        "//daml-lf/data",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//language-support/scala/bindings",
        "//ledger/api-server-damlonx",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//ledger/participant-state",
        "//ledger/participant-state:participant-state-v1",
        "//ledger/participant-state-index",
        "//ledger/participant-state-index/reference",
        "//ledger/participant-state/kvutils",
        "//ledger/sandbox",
    ],
)

########################################
### Testing the index server
########################################

da_scala_binary(
    name = "ephemeral-postgres-reference-server",
    srcs = glob(["src/test/scala/**/*.scala"]),
    main_class = "com.daml.ledger.api.server.damlonx.reference.v2.EphemeralPostgresReferenceServerMain",
    resources = ["src/main/resources/logback.xml"],
    visibility = ["//visibility:public"],
    deps = [
        ":reference-v2",
        "//3rdparty/jvm/org/slf4j:slf4j_api",
        "//ledger/sandbox:sandbox-scala-tests-lib",
    ],
)

conformance_tests_to_run = [
    "TransactionServiceTests",
    "DivulgenceIT",
    "TransactionBackpressureIT",
    "PartyManagementServiceIT",
]

client_server_test(
    name = "conformance-test",
    timeout = "long",
    client = "//ledger/ledger-api-test-tool:ledger-api-test-tool",
    client_args = [
        # disabling all tests for now, so that at least we have the infrastructure
        # to slowly add and fix tests one after the other.
        # "--all-tests",
        "--include {}".format(",".join(conformance_tests_to_run)),
        "--exclude SemanticTests",
    ],
    data = [
        "//ledger/ledger-api-integration-tests:SemanticTests.dar",
        "//ledger/sandbox:Test.dar",
        "@postgresql_dev_env//:all",
        "@postgresql_dev_env//:createdb",
        "@postgresql_dev_env//:initdb",
        "@postgresql_dev_env//:pg_ctl",
    ],
    server = ":ephemeral-postgres-reference-server",
    server_args = [
        "ledger/ledger-api-integration-tests/SemanticTests.dar",
        "ledger/sandbox/Test.dar",
    ],
    tags = [
        "dont-run-on-darwin",
        # NOTE(JM): As this test is somewhat heavy and has timeouts, run it without competition to avoid flakyness.
        "exclusive",
    ],
) if not is_windows else None
