# Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
)
load("//ledger/ledger-api-test-tool:conformance.bzl", "conformance_test")
load("@os_info//:os_info.bzl", "is_windows")

da_scala_library(
    name = "sandbox-on-x",
    srcs = glob(["src/main/scala/**/*.scala"]),
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_typesafe_akka_akka_actor",
        "@maven//:com_typesafe_akka_akka_stream",
    ],
    tags = ["maven_coordinates=com.daml:sandbox-on-x:__VERSION__"],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/transaction",
        "//language-support/scala/bindings",
        "//ledger/caching",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-health",
        "//ledger/ledger-resources",
        "//ledger/metrics",
        "//ledger/participant-integration-api",
        "//ledger/participant-state",
        "//ledger/participant-state/kvutils",
        "//ledger/participant-state/kvutils/app",
        "//libs-scala/contextualized-logging",
        "//libs-scala/resources",
        "//libs-scala/resources-akka",
        "//libs-scala/resources-grpc",
        "@maven//:com_google_guava_guava",
        "@maven//:com_google_protobuf_protobuf_java",
    ],
)

da_scala_test_suite(
    name = "sandbox-on-x-tests",
    size = "small",
    srcs = glob(["src/test/suite/**/*.scala"]),
    data = [
        "//ledger/test-common:model-tests.dar",
    ],
    resources = glob(["src/test/resources/**/*"]),
    scala_deps = [
        "@maven//:com_typesafe_akka_akka_actor",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:org_mockito_mockito_scala",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest",
    ],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
    ],
    deps = [
        ":sandbox-on-x",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//language-support/scala/bindings",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger/caching",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-health",
        "//ledger/ledger-resources",
        "//ledger/ledger-resources:ledger-resources-test-lib",
        "//ledger/metrics",
        "//ledger/participant-state",
        "//ledger/participant-state/kvutils",
        "//ledger/participant-state/kvutils:kvutils-tests-lib",
        "//libs-scala/contextualized-logging",
        "//libs-scala/resources",
        "//libs-scala/resources-akka",
        "//libs-scala/resources-grpc",
        "@maven//:io_dropwizard_metrics_metrics_core",
        "@maven//:org_mockito_mockito_core",
    ],
)

da_scala_library(
    name = "sandbox-on-x-app",
    srcs = glob(["src/app/scala/**/*.scala"]),
    resources = glob(["src/app/resources/**/*"]),
    scala_deps = [
    ],
    tags = ["maven_coordinates=com.daml:sandbox-on-x-app:__VERSION__"],
    visibility = ["//visibility:public"],
    deps = [
        ":sandbox-on-x",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-health",
        "//ledger/ledger-resources",
        "//ledger/participant-state",
        "//ledger/participant-state/kvutils",
        "//ledger/participant-state/kvutils/app",
        "//libs-scala/contextualized-logging",
        "//libs-scala/resources",
    ],
)

da_scala_binary(
    name = "app",
    main_class = "com.daml.ledger.sandbox.Main",
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:com_h2database_h2",
    ],
    deps = [
        ":sandbox-on-x-app",
    ],
)

conformance_test(
    name = "conformance-test",
    ports = [6865],
    server = ":app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant participant-id=example,port=6865",
    ],
    test_tool_args = [
        "--verbose",
        "--exclude=ClosedWorldIT",
        "--exclude=CommandDeduplicationIT",
        "--exclude=ContractKeysIT",
        "--exclude=SemanticTests",
        "--exclude=RaceConditionIT",
    ],
)

conformance_test(
    name = "conformance-test-participant-pruning",
    ports = [6865],
    server = ":app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant=participant-id=example,port=6865",
    ],
    test_tool_args = [
        "--verbose",
        "--include=ParticipantPruningIT",
    ],
)

conformance_test(
    name = "conformance-test-multi-party-submission",
    ports = [6865],
    server = ":app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant=participant-id=example,port=6865",
    ],
    test_tool_args = [
        "--verbose",
        "--include=MultiPartySubmissionIT",
    ],
)

conformance_test(
    name = "benchmark-performance-envelope",
    ports = [6865],
    server = ":app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant=participant-id=example,port=6865",
    ],
    test_tool_args = [
        "--verbose",
        "--perf-tests=PerformanceEnvelope.Throughput.TwentyOPS",
        "--perf-tests=PerformanceEnvelope.Latency.1000ms",
        "--perf-tests=PerformanceEnvelope.TransactionSize.1000KB",
    ],
)
