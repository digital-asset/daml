# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
)
load("//ledger/ledger-api-tests:conformance.bzl", "server_conformance_test")
load("@os_info//:os_info.bzl", "is_windows")
load("@build_environment//:configuration.bzl", "mvn_version")

sandbox_classic_deps = [
    "//daml-lf/data",
    "//language-support/scala/bindings",
    "//ledger/caching",
    "//ledger/ledger-api-auth",
    "//ledger/ledger-api-common",
    "//ledger/ledger-configuration",
    "//ledger/ledger-resources",
    "//ledger/metrics",
    "//ledger/participant-integration-api",
    "//ledger/sandbox-common:sandbox-common-ce",
    "//ledger/sandbox-on-x:sandbox-classic-server",
    "//ledger-service/cli-opts",
    "//libs-scala/contextualized-logging",
    "//libs-scala/ports",
    "//libs-scala/resources",
    "@maven//:ch_qos_logback_logback_classic",
]

# TODO sandbox-classic cleanup: De-alias
alias(
    name = "sandbox-classic-scala-tests-lib",
    actual = "//ledger/sandbox-on-x:sandbox-on-x-test-lib",
    visibility = ["//visibility:public"],
)

da_scala_library(
    name = "sandbox-classic",
    srcs = glob(["src/main/**/*.scala"]),
    # Do not include logback.xml into the library: let the user
    # of the sandbox-as-a-library decide how to log.
    resources = ["//ledger/sandbox-common:src/main/resources/banner.txt"],
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
        "@maven//:org_scalaz_scalaz_core",
    ],
    tags = ["maven_coordinates=com.daml:sandbox-classic:__VERSION__"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:com_h2database_h2",
        "@maven//:org_postgresql_postgresql",
    ],
    deps = sandbox_classic_deps,
)

da_scala_binary(
    name = "sandbox-classic-binary",
    srcs = glob(["src/main/**/*.scala"]),
    main_class = "com.daml.sandbox.SandboxMain",
    resources = ["//ledger/sandbox-common:src/main/resources/logback.xml"],
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
        "@maven//:org_scalaz_scalaz_core",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:com_h2database_h2",
        "@maven//:org_postgresql_postgresql",
    ],
    deps = sandbox_classic_deps,
)

da_scala_binary(
    name = "sandbox-classic-ephemeral-postgresql",
    srcs = glob(["src/test/lib/**/*.scala"]),
    main_class = "com.daml.platform.sandbox.persistence.MainWithEphemeralPostgresql",
    resources = ["//ledger/sandbox-common:src/main/resources/logback.xml"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:org_postgresql_postgresql",
    ],
    deps = [
        ":sandbox-classic",
        "//libs-scala/postgresql-testing",
    ],
)

da_scala_test_suite(
    name = "sandbox-classic-tests",
    size = "small",
    srcs = glob(["src/test/suite/**/*.scala"]),
    data = [
        "//daml-lf/encoder:testing-dars",
        "//ledger/test-common:model-tests-default.dar",
        "//ledger/test-common/test-certificates",
    ],
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    deps = [
        ":sandbox-classic",
        "//daml-lf/data",
        "//ledger/caching",
        "//ledger/cli-opts",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-common:ledger-api-common-scala-tests-lib",
        "//ledger/ledger-api-domain",
        "//ledger/ledger-configuration",
        "//ledger/participant-integration-api",
        "//ledger/sandbox-common",
        "//ledger/sandbox-common:sandbox-common-scala-tests-lib",
        "//libs-scala/ports",
    ],
)

SERVERS = {
    "h2database": {
        "binary": ":sandbox-classic-binary",
        "server_args": [
            "--port=6865",
            # "db_close_delay=-1" is needed so that the in-memory database is not closed
            # (and therefore lost) after the flyway migration
            "--sql-backend-jdbcurl=jdbc:h2:mem:conformance-test;db_close_delay=-1",
        ],
    },
    "postgresql": {
        "binary": ":sandbox-classic-ephemeral-postgresql",
        "server_args": [
            "--port=6865",
        ],
    },
}

# =============================================================================
# Conformance tests: supported ledger backend
# =============================================================================

APPEND_ONLY_SCHEMA_SERVERS = {
    "postgresql": SERVERS["postgresql"],
    "h2database": SERVERS["h2database"],
}

# Full conformance test (Postgres)
server_conformance_test(
    name = "conformance-test",
    lf_versions = [
        "default",
        "preview",
    ],
    server_args = [
        "--contract-id-seeding=testing-weak",
    ],
    servers = {"postgresql": SERVERS["postgresql"]},
    test_tool_args = [
        "--concurrent-test-runs=1",  # sandbox classic doesn't scale well with concurrent tests (almost no effect on overall run time)
        "--timeout-scale-factor=2",  # sandbox classic is slow in general
        "--open-world",
        "--exclude=ClosedWorldIT",
    ],
)

# Full conformance test (H2)
# Only run a minimal set of tests on H2. The full test suite is very slow on H2, and prone to fail due to timeouts.
server_conformance_test(
    name = "conformance-test-h2",
    server_args = [
        "--contract-id-seeding=testing-weak",
    ],
    servers = {"h2database": SERVERS["h2database"]},
    test_tool_args = [
        "--concurrent-test-runs=1",  # sandbox classic doesn't scale well with concurrent tests (almost no effect on overall run time)
        "--timeout-scale-factor=2",  # sandbox classic is slow in general
        "--open-world",
        "--exclude=ClosedWorldIT",
    ],
)

# Feature test: --static-time
server_conformance_test(
    name = "conformance-test-static-time",
    server_args = [
        "--static-time",
        "--contract-id-seeding=testing-weak",
    ],
    servers = APPEND_ONLY_SCHEMA_SERVERS,
    test_tool_args = [
        "--concurrent-test-runs=1",  # sandbox classic doesn't scale well with concurrent tests (almost no effect on overall run time)
        "--timeout-scale-factor=2",  # sandbox classic is slow in general
        "--open-world",
        "--exclude=ClosedWorldIT",
    ],
)
