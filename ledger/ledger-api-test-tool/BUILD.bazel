# Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//rules_daml:daml.bzl",
    "daml_compile",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_preview_version",
    "lf_stable_version",
)
load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "da_scala_library_suite",
)
load(
    "//language-support/scala/codegen:codegen.bzl",
    "dar_to_scala",
)
load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
    "silencer_plugin",
)
load(
    ":conformance.bzl",
    "conformance_test",
)
load("//ledger/test-common:test-common.bzl", "test_common_configurations", "test_common_lf_targets")

# we release ledger-api-test-tool-stable as ledger-api-test-tool
da_scala_binary(
    name = "ledger-api-test-tool",
    srcs = [],
    main_class = "com.daml.ledger.api.testtool.LedgerApiTestTool",
    resources = [
        "src/main/resources/logback.xml",
    ],
    tags = [
        "maven_coordinates=com.daml:ledger-api-test-tool:__VERSION__",
        # We release this as a fat jar so this tag ensures that the dependencies in the generated
        # POM file are set correctly.
        "fat_jar",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [":ledger-api-test-tool-stable"],
)

[
    [
        alias(
            name = "ledger-api-test-tool-%s%s" % (name, target_suffix),
            actual = ":ledger-api-test-tool-%s%s" % (
                test_common_lf_targets.get(lf_target),
                target_suffix,
            ),
            visibility = ["//visibility:public"],
        ),
    ]
    for target_suffix in [
        "",
        "-lib",
        "-tests",
        "-test-suites",
    ]
    for (name, lf_target) in test_common_configurations.items()
]

[
    [
        da_scala_library(
            name = "ledger-api-test-tool-%s-lib" % lf_version_suffix,
            srcs = glob(["src/main/scala/com/daml/ledger/api/testtool/infrastructure/**/*.scala"]),
            scala_deps = [
                "@maven//:com_softwaremill_diffx_diffx_core",
                "@maven//:com_typesafe_akka_akka_actor",
                "@maven//:com_typesafe_akka_akka_stream",
                "@maven//:org_scala_lang_modules_scala_collection_compat",
                "@maven//:org_scala_lang_modules_scala_java8_compat",
            ],
            visibility = ["//:__subpackages__"],
            deps = [
                "//daml-lf/data",
                "//language-support/scala/bindings",
                "//ledger/ledger-api-common",
                "//ledger/test-common",
                "//ledger/test-common:model-tests-%s.scala" % lf_version_suffix,
                "//ledger/test-common:dar-files-%s-lib" % lf_version_suffix,
                "//libs-scala/grpc-utils",
                "//libs-scala/resources",
                "//libs-scala/resources-akka",
                "//libs-scala/resources-grpc",
                "//libs-scala/timer-utils",
                "@maven//:com_typesafe_config",
                "@maven//:io_netty_netty_common",
                "@maven//:io_netty_netty_transport",
                "@maven//:org_slf4j_slf4j_api",
            ],
        ),
        da_scala_library_suite(
            name = "ledger-api-test-tool-%s-test-suites" % lf_version_suffix,
            srcs = glob(["src/main/scala/com/daml/ledger/api/testtool/suites/**/*.scala"]),
            plugins = [silencer_plugin],
            scala_deps = [
                "@maven//:com_chuusai_shapeless",
                "@maven//:com_propensive_magnolia",  # transitive dependency of diffx
                "@maven//:com_propensive_mercator",  # transitive dependency of diffx
                "@maven//:com_softwaremill_diffx_diffx_core",
                "@maven//:org_scala_lang_modules_scala_collection_compat",
            ],
            scalacopts = [
                "-P:silencer:lineContentFilters=import scala.collection.compat._",
            ],
            scaladoc = False,
            visibility = [
                "//:__subpackages__",
            ],
            deps = [
                ":ledger-api-test-tool-%s-lib" % lf_version_suffix,
                "//daml-lf/data",
                "//language-support/scala/bindings",
                "//ledger/ledger-api-common",
                "//ledger/test-common",
                "//ledger/test-common:package_management-tests-%s.scala" % lf_version_suffix,
                "//ledger/test-common:model-tests-%s.scala" % lf_version_suffix,
                "//ledger/test-common:performance-tests-%s.scala" % lf_version_suffix,
                "//ledger/test-common:semantic-tests-%s.scala" % lf_version_suffix,
                "//ledger/test-common:dar-files-%s-lib" % lf_version_suffix,
                "//libs-scala/timer-utils",
                "@maven//:io_grpc_grpc_api",
                "@maven//:io_grpc_grpc_context",
                "@maven//:org_slf4j_slf4j_api",
            ],
        ),
        da_scala_library(
            name = "ledger-api-test-tool-%s-tests" % lf_version_suffix,
            srcs = glob(["src/main/scala/com/daml/ledger/api/testtool/tests/**/*.scala"]),
            visibility = ["//:__subpackages__"],
            deps = [
                ":ledger-api-test-tool-%s-lib" % lf_version_suffix,
                ":ledger-api-test-tool-%s-test-suites" % lf_version_suffix,
                "//ledger/ledger-api-common",
            ],
        ),
        da_scala_binary(
            name = "ledger-api-test-tool-%s" % lf_version_suffix,
            srcs = glob(["src/main/scala/com/daml/ledger/api/testtool/*.scala"]),
            main_class = "com.daml.ledger.api.testtool.LedgerApiTestTool",
            plugins = [silencer_plugin],
            resources = [
                "src/main/resources/logback.xml",
            ],
            scala_deps = [
                "@maven//:org_scala_lang_modules_scala_collection_compat",
                "@maven//:com_github_scopt_scopt",
            ],
            scalacopts = [
                "-P:silencer:lineContentFilters=import scala.collection.compat._",
            ],
            visibility = ["//visibility:public"],
            runtime_deps = [
                "@maven//:ch_qos_logback_logback_classic",
            ],
            deps = [
                ":ledger-api-test-tool-%s-lib" % lf_version_suffix,
                ":ledger-api-test-tool-%s-tests" % lf_version_suffix,
                "//ledger/ledger-api-common",
                "//libs-scala/build-info",
                "//libs-scala/resources",
                "//libs-scala/resources-akka",
                "//libs-scala/resources-grpc",
                "@maven//:io_grpc_grpc_api",
                "@maven//:io_grpc_grpc_core",
                "@maven//:io_grpc_grpc_netty",
                "@maven//:io_netty_netty_handler",
                "@maven//:org_slf4j_slf4j_api",
            ],
        ),
    ]
    for (_, lf_version_suffix) in test_common_lf_targets.items()
]

conformance_test(
    name = "ssl-test",
    extra_data = [
        "//ledger/test-common/test-certificates:client.crt",
        "//ledger/test-common/test-certificates:client.pem",
        "//ledger/test-common/test-certificates:server.crt",
        "//ledger/test-common/test-certificates:server.pem",
        "//ledger/test-common/test-certificates:ca.crt",
    ],
    server = "//ledger/ledger-on-memory:app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant participant-id=ssl-test,port=6865",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:server.pem))",
    ],
    test_tool_args = [
        "--verbose",
        "--include=SemanticTests",
        "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.crt))",
        "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:ca.crt))",
        "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //ledger/test-common/test-certificates:client.pem))",
    ],
)

# Explicitly include retired tests here to make sure existing CI pipelines are not broken
# Retired tests will be eventually removed
conformance_test(
    name = "retired-tests",
    server = "//ledger/ledger-on-memory:app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant participant-id=ssl-test,port=6865",
    ],
    test_tool_args = [
        "--include=LotsOfPartiesIT",
        "--include=TransactionScaleIT",
    ],
)

# Makes sure that deprecated CLI options can still be used to make sure existing CI pipelines are not broken
# This test should fail if any deprecated CLI option has any effect whatsoever -- they are preserved
# exclusively for backwards-compatibility
# Deprecated CLI options will be eventually removed
conformance_test(
    name = "deprecated-cli-options",
    server = "//ledger/ledger-on-memory:app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant participant-id=ssl-test,port=6865",
    ],
    test_tool_args = [
        "--include=IdentityIT",
        "--all-tests",
        "--load-scale-factor=THIS_OPTION_IS_DEPRECATED_AND_HAS_NO_EFFECT",
        "--target-port=THIS_OPTION_IS_DEPRECATED_AND_HAS_NO_EFFECT",
    ],
)

# Test that both --include ContractKeysIT as well as --include ContractKeysIT:CKFetchOrLookup
# are supported.
conformance_test(
    name = "test-name-syntax",
    server = "//ledger/ledger-on-memory:app",
    server_args = [
        "--contract-id-seeding=testing-weak",
        "--participant participant-id=test-name,port=6865",
    ],
    test_tool_args = [
        "--include=IdentityIT",
        "--include=IdentityIT:IdNotEmpty",
    ],
)

# Test that runs the whole ledger API test suite once for each listed compiler version
[
    [
        conformance_test(
            name = "conformance-test-lf-version-%s" % lf_version_suffix,
            client = "//ledger/ledger-api-test-tool:ledger-api-test-tool-%s" % lf_version_suffix,
            server = "//ledger/ledger-on-memory:app",
            server_args = [
                "--daml-lf-dev-mode-unsafe",  # Enables the use of all known compiler versions
                "--contract-id-seeding=testing-weak",
                "--participant participant-id=conformance-test-dev-mode,port=6865",
            ],
            test_tool_args = [
                "--verbose",
            ],
        ),
    ]
    for (_, lf_version_suffix) in test_common_lf_targets.items()
]
