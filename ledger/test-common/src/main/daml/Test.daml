-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- file that contains the declarations used in the sandbox tests

module Test where

import DA.Time

import Iou()
import IouTrade()

template Dummy
  with
    operator : Party
  where
    signatory operator

    agreement (show operator <> " operates a dummy.")

    controller operator can
      DummyChoice1 : ()
        do return ()

    controller operator can
      FailingChoice : ()
        do assert False


    controller operator can
      nonconsuming Clone: ContractId Dummy
        do create Dummy with operator

    controller operator can
      nonconsuming FailingClone : ()
        do
          clone <- exercise self Clone
          exercise self FailingChoice


    controller operator can
      ConsumeIfTimeIsBetween : ()
        with
          begin : Time
          end : Time
        do
          currentTime <- getTime
          assert (begin <= currentTime)
          assert (currentTime <= end)

    controller operator can
      WrapWithAddress : ContractId AddressWrapper
        with address : Address
        do
          create AddressWrapper with operator; address

data Address = Address
  { street: Text
  , city: Text
  , state: Text
  , zip: Text
  } deriving (Eq, Show)

-- DEL-4615
template AddressWrapper
  with
    operator: Party
    address: Address
  where
    signatory operator

template DummyWithParam
  with
    operator : Party
  where
    signatory operator

    controller operator can
      DummyChoice2 : ()
        with paramString: Text
        do return ()

template DummyFactory
  with
    operator: Party
  where
    signatory operator

    controller operator can
      DummyFactoryCall : ()
        do
          split <- create Dummy with operator
          rest <- create DummyWithParam with operator
          return ()


data OptionalInteger = SomeInteger Int | NoInteger
  deriving (Eq, Show)

data NestedOptionalInteger = NestedOptionalInteger {value: OptionalInteger}
  deriving (Eq, Show)

template ParameterShowcase
  with
    operator: Party
    integer: Int
    decimal: Decimal
    text: Text
    bool: Bool
    time: Time
    nestedOptionalInteger: NestedOptionalInteger
    integerList: [Int]
    optionalText: Optional Text
  where
    signatory operator

    -- multiple argument choice
    controller operator can
      Choice1 : ContractId ParameterShowcase
        with
          newInteger: Int
          newDecimal: Decimal
          newText: Text
          newBool: Bool
          newTime: Time
          newNestedOptionalInteger: NestedOptionalInteger
          newIntegerList: [Int]
          newOptionalText: Optional Text
        do
          let new = this with
                { integer = newInteger
                , decimal = newDecimal
                , text = newText
                , bool = newBool
                , time = newTime
                , nestedOptionalInteger = newNestedOptionalInteger
                , integerList = newIntegerList
                , optionalText = newOptionalText
                }
          create new

    -- single argument choice
    controller operator can
      Choice2 : ContractId ParameterShowcase
        with
          newInteger: Int
        do
          let new = this with integer = newInteger
          create new

template Agreement
  with
    receiver: Party
    giver: Party
  where
    signatory receiver, giver

    agreement (
      show giver <> " promise to pay the " <>
      show receiver <> " on demand the sum of five pounds.")

    controller giver can
      AcceptTriProposal : ContractId TriAgreement
        with cid : ContractId TriProposal
        do
          prop <- fetch cid
          assert (prop.receiver == receiver && prop.giver == giver)
          exercise cid TriProposalAccept

      UnrestrictedAcceptTriProposal : ContractId TriAgreement
        with cid: ContractId TriProposal
        do exercise cid TriProposalAccept

template DummyContractFactory
 with
    operator: Party
  where
    signatory operator

    controller operator can
      DummyContractFactoryCall : ContractId Dummy
        do
          split <- create Dummy with operator
          rest <- create DummyWithParam with operator
          pure split

template AgreementFactory
  with
    receiver: Party
    giver: Party
  where
    signatory giver

    controller receiver can
      nonconsuming CreateAgreement : ContractId Agreement
        do create Agreement with receiver, giver

      AgreementFactoryAccept : ContractId Agreement
        do create Agreement with receiver, giver

template TriAgreement
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator, receiver, giver

template TriProposal
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator

    controller [receiver, giver] can
      TriProposalAccept : ContractId TriAgreement
        do create TriAgreement with operator, receiver, giver

template TextContainer
  with
    operator: Party
    text: Text
  where
    signatory operator

    controller operator can
      Consume : ()
        do return ()

template NothingArgument
  with
    operator: Party
    arg1: Optional Text
  where
    signatory operator

    controller operator can
      Choose : ()
        do return ()

template WithObservers
  with
    giver : Party
    observers : [Party]
  where
  signatory giver
  observer observers

  controller giver can
    Ping : ()
      do return ()

template BranchingSignatories
  with
    whichSign : Bool
    signTrue : Party
    signFalse : Party
  where
  signatory (if whichSign then signTrue else signFalse)

template BranchingControllers
  with
    giver : Party
    whichCtrl : Bool
    ctrlTrue : Party
    ctrlFalse : Party
  where
  signatory giver
  controller (if whichCtrl then ctrlTrue else ctrlFalse) can
    Delete : ()
      do return ()


template PayOut
  with
    receiver: Party
    giver: Party
  where
    signatory receiver
    signatory giver
    agreement (
      show giver <> " must pay to " <>
      show receiver <> " the sum of five pounds.")


template CallablePayout
  with
    giver: Party
    receiver: Party
  where
    signatory giver
    controller receiver can
      Call : ContractId PayOut
        do create PayOut with receiver, giver
      Transfer : ContractId CallablePayout
        with newReceiver: Party
          do create this with receiver = newReceiver

template TextKey
  with
    tkParty : Party
    tkKey : Text
    tkDisclosedTo : [Party]
  where
    signatory tkParty
    observer tkDisclosedTo

    key (tkParty, tkKey) : (Party, Text)
    maintainer key._1

    controller tkParty can
      TextKeyChoice : ()
        do
          return ()

template TextKeyOperations
  with
    tkoParty: Party

  where
    signatory tkoParty

    controller tkoParty can
      nonconsuming TKOLookup: ()
        with
          keyToLookup: (Party, Text)
          expected: Optional (ContractId TextKey)
        do
          actual <- lookupByKey @TextKey keyToLookup
          assertMsg ("lookup matches (" <> show expected <> ", " <> show actual <> ")") (expected == actual)

    controller tkoParty can
      nonconsuming TKOFetch: ()
        with
          keyToFetch: (Party, Text)
          expectedCid: ContractId TextKey
        do
          (actualCid, actualContract) <- fetchByKey @TextKey keyToFetch
          assertMsg "fetch contract id matches" (expectedCid == actualCid)
          assertMsg "fetch contract matches" (keyToFetch == key actualContract)

    controller tkoParty can
      nonconsuming TKOConsumeAndLookup: ()
        with
          cidToConsume: ContractId TextKey
          keyToLookup: (Party, Text)
        do
          mbCid1 <- lookupByKey @TextKey keyToLookup
          assertMsg "gets contract the first time" (mbCid1 == Some cidToConsume)
          exercise cidToConsume TextKeyChoice
          mbCid2 <- lookupByKey @TextKey keyToLookup
          assertMsg "does not get contract after exercise" (mbCid2 == None)


-- dummy contract to be divulged out-of-band
template Divulgence1
  with
    div1Party: Party
  where
    signatory div1Party

-- contract to be used to divulge out of band. the owner of the
-- `Divulgence1` contract should be the fetcher, and the party
-- to disclose to the signatory.
template Divulgence2
  with
    div2Signatory: Party
    div2Fetcher: Party
  where
    signatory div2Signatory

    controller div2Fetcher can
      nonconsuming Divulgence2Fetch: ()
        with
          div1ToFetch: ContractId Divulgence1
        do
          _ <- fetch div1ToFetch
          return ()

    controller div2Fetcher can
      nonconsuming Divulgence2Archive: ()
        with
          div1ToArchive: ContractId Divulgence1
        do
          archive div1ToArchive

template DecimalRounding
  with
    party: Party
    number: Decimal
  where
    signatory party

{-
testDivulgence : Scenario ()
testDivulgence = test do
  alice <- getParty "alice"
  bob <- getParty "bob"
  div1Cid <- submit alice (create Divulgence1 with div1Party = alice)
  div2Cid <- submit bob (create Divulgence2 with div2Signatory = bob, div2Fetcher = alice)
  submit alice (exercise div2Cid Divulgence2Fetch with div1ToFetch = div1Cid)
-}

testScenario : Scenario ()
testScenario = do
  pass (days 10)
  party <- getParty "party"
  submit party (create Dummy with operator = party)
  pass (seconds 10)
  submit party (create DummyWithParam with operator = party)
  submit party (create DummyFactory with operator = party)
  pass (seconds 10)
  submit party (create DummyContractFactory with operator = party)
  pass (seconds 10)
  other <- getParty "other"
  submitMustFail party (create Dummy with operator = other)
  return ()

template Delegated
  with
    owner : Party
    k : Text
  where
    signatory owner
    key (owner, k) : (Party, Text)
    maintainer key._1

    controller owner can
      Recreate: () do
        create this
        return ()

      -- Non-consuming choice to test that contract keys created and archived
      -- by transient contracts are properly handled.
    controller owner can
      nonconsuming CreateAnotherAndArchive: ()
        with
          k2: Text
        do
          cid <- create Delegated with owner = owner, k = k2
          exercise cid Archive

template Delegation
  with
    owner : Party
    delegate : Party
  where
    signatory owner
    observer delegate

    controller delegate can
      nonconsuming FetchDelegated: Delegated
        with delegated: ContractId Delegated
        do fetch delegated

    controller delegate can
      nonconsuming FetchByKeyDelegated: ()
        with
          p: Party
          k: Text
          expected: Optional (ContractId Delegated)
        do
          (cid, _) <- fetchByKey @Delegated (p, k)
          assertMsg "fetch matches" (expected == Some cid)

    controller delegate can
      nonconsuming LookupByKeyDelegated: ()
        with
          p: Party
          k: Text
          expected: Optional (ContractId Delegated)
        do
          actual <- lookupByKey @Delegated (p, k)
          assertMsg "lookup matches" (expected == actual)


template ShowDelegated
  with
    owner: Party
    delegate: Party
  where
    signatory owner
    observer delegate
    controller owner can
      ShowIt : ()
        with delegatedId: ContractId Delegated
        do
          fetch delegatedId
          return ()

testDivulgenceVisibility = scenario do
  owner <- getParty "owner"
  delegate <- getParty "delegate"
  delegated <- owner `submit` create Delegated with owner, k = "key"
  delegation <- owner `submit` create Delegation with owner, delegate
  delegate `submit` exercise delegation FetchDelegated with delegated

testDivulgenceSuccess = scenario do
  owner <- getParty "owner"
  delegate <- getParty "delegate"
  delegated <- owner `submit` create Delegated with owner, k = "key"
  delegation <- owner `submit` create Delegation with owner, delegate
  showId <- owner `submit` create ShowDelegated with owner, delegate
  owner `submit` exercise showId ShowIt with delegatedId = delegated
  delegate `submit` exercise delegation  FetchDelegated with delegated

template Witnesses
  with
    p_signatory: Party
    p_observer: Party
    p_actor: Party
  where
    signatory p_signatory
    observer p_observer

    -- need to use new choice syntax for the controller to not
    -- be an observer
    choice WitnessesChoice: ()
     controller p_actor
     do
      return ()

    -- need to use new choice syntax for the controller to not
    -- be an observer
    nonconsuming choice WitnessesNonConsumingChoice: ()
     controller p_actor
     do
      return ()

    nonconsuming choice WitnessesCreateNewWitnesses: ContractId Witnesses
     controller p_actor
     do
      create this with p_signatory = p_actor

-- Contract used to divulge instances of Witnesses to the actor
-- of witnesses. Otherwise we cannot exercise!
template DivulgeWitnesses
  with
    p_signatory: Party
    p_actor: Party
  where
    signatory p_actor

    controller p_signatory can
      Divulge: ()
        with
          toFetch: ContractId Witnesses
        do
          _ <- fetch toFetch
          return ()

template MaintainerNotSignatory
  with
    p: Party
    q: Party
  where
    signatory p

    key q: Party
    maintainer key

template CreateAndFetch
  with
    p: Party
  where
    signatory p

    controller p can
      CreateAndFetch_Run: ()
        do
            cid <- create CreateAndFetch with p
            _ <- fetch cid
            return ()
