-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- file that contains the declarations used in the sandbox tests

module Test where

import DA.Time

import Iou()
import IouTrade()

template Dummy
  with
    operator : Party
  where
    signatory operator

    agreement (show operator <> " operates a dummy.")

    choice DummyChoice1 : ()
      controller operator
      do return ()

    choice FailingChoice : ()
      controller operator
      do assert False


    nonconsuming choice Clone: ContractId Dummy
      controller operator
      do create Dummy with operator

    nonconsuming choice FailingClone : ()
      controller operator
      do clone <- exercise self Clone
         exercise self FailingChoice


    choice ConsumeIfTimeIsBetween : ()
      with
        begin : Time
        end : Time
      controller operator
      do currentTime <- getTime
         assert (begin <= currentTime)
         assert (currentTime <= end)

    choice WrapWithAddress : ContractId AddressWrapper
      with address : Address
      controller operator
      do create AddressWrapper with operator; address

data Address = Address
  { street: Text
  , city: Text
  , state: Text
  , zip: Text
  } deriving (Eq, Show)

-- DEL-4615
template AddressWrapper
  with
    operator: Party
    address: Address
  where
    signatory operator

template DummyWithParam
  with
    operator : Party
  where
    signatory operator

    choice DummyChoice2 : ()
      with paramString: Text
      controller operator
      do return ()

template DummyWithAnnotation
  with
    operator : Party
    annotation : Text
  where
    signatory operator

template DummyFactory
  with
    operator: Party
  where
    signatory operator

    choice DummyFactoryCall : ()
      controller operator
      do split <- create Dummy with operator
         rest <- create DummyWithParam with operator
         return ()


data OptionalInteger = SomeInteger Int | NoInteger
  deriving (Eq, Show)

data NestedOptionalInteger = NestedOptionalInteger {value: OptionalInteger}
  deriving (Eq, Show)

template ParameterShowcase
  with
    operator: Party
    integer: Int
    decimal: Decimal
    text: Text
    bool: Bool
    time: Time
    nestedOptionalInteger: NestedOptionalInteger
    integerList: [Int]
    optionalText: Optional Text
  where
    signatory operator

    key (operator, text) : (Party, Text)
    maintainer key._1

    -- multiple argument choice
    choice Choice1 : ContractId ParameterShowcase
      with
        newInteger: Int
        newDecimal: Decimal
        newText: Text
        newBool: Bool
        newTime: Time
        newNestedOptionalInteger: NestedOptionalInteger
        newIntegerList: [Int]
        newOptionalText: Optional Text
      controller operator
      do let new = this with
               { integer = newInteger
               , decimal = newDecimal
               , text = newText
               , bool = newBool
               , time = newTime
               , nestedOptionalInteger = newNestedOptionalInteger
               , integerList = newIntegerList
               , optionalText = newOptionalText
               }
         create new

    -- single argument choice
    choice Choice2 : ContractId ParameterShowcase
      with newInteger: Int
      controller operator
      do let new = this with integer = newInteger
         create new

template Agreement
  with
    receiver: Party
    giver: Party
  where
    signatory receiver, giver

    agreement (
      show giver <> " promise to pay the " <>
      show receiver <> " on demand the sum of five pounds.")

    choice AcceptTriProposal : ContractId TriAgreement
      with cid : ContractId TriProposal
      controller giver
      do prop <- fetch cid
         assert (prop.receiver == receiver && prop.giver == giver)
         exercise cid TriProposalAccept

    choice UnrestrictedAcceptTriProposal : ContractId TriAgreement
      with cid: ContractId TriProposal
      controller giver
      do exercise cid TriProposalAccept

template DummyContractFactory
 with
    operator: Party
  where
    signatory operator

    choice DummyContractFactoryCall : ContractId Dummy
      controller operator
      do split <- create Dummy with operator
         rest <- create DummyWithParam with operator
         pure split

template AgreementFactory
  with
    receiver: Party
    giver: Party
  where
    signatory giver
    observer receiver

    nonconsuming choice CreateAgreement : ContractId Agreement
      controller receiver
      do create Agreement with receiver, giver

    nonconsuming choice AgreementFactoryAccept : ContractId Agreement
      controller receiver
      do create Agreement with receiver, giver

template TriAgreement
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator, receiver, giver

template TriProposal
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator
    observer receiver, giver

    choice TriProposalAccept : ContractId TriAgreement
      controller [receiver, giver]
      do create TriAgreement with operator, receiver, giver

template TextContainer
  with
    operator: Party
    text: Text
  where
    signatory operator

    choice Consume : ()
      controller operator
      do return ()

template NothingArgument
  with
    operator: Party
    arg1: Optional Text
  where
    signatory operator

    choice Choose : ()
      controller operator
      do return ()

template WithObservers
  with
    giver : Party
    observers : [Party]
  where
  signatory giver
  observer observers

  choice Ping : ()
    controller giver
    do return ()

template BranchingSignatories
  with
    whichSign : Bool
    signTrue : Party
    signFalse : Party
  where
  signatory (if whichSign then signTrue else signFalse)

template BranchingControllers
  with
    giver : Party
    whichCtrl : Bool
    ctrlTrue : Party
    ctrlFalse : Party
  where
  signatory giver
  let ctrl = if whichCtrl then ctrlTrue else ctrlFalse
  observer ctrl

  choice Delete : ()
    controller ctrl
    do return ()


template PayOut
  with
    receiver: Party
    giver: Party
  where
    signatory receiver
    signatory giver
    agreement (
      show giver <> " must pay to " <>
      show receiver <> " the sum of five pounds.")


template CallablePayout
  with
    giver: Party
    receiver: Party
  where
    signatory giver
    observer receiver
    choice Call : ContractId PayOut
      controller receiver
      do create PayOut with receiver, giver
    choice Transfer : ContractId CallablePayout
      with newReceiver: Party
      controller receiver
      do create this with receiver = newReceiver

template TextKey
  with
    tkParty : Party
    tkKey : Text
    tkDisclosedTo : [Party]
  where
    signatory tkParty
    observer tkDisclosedTo

    key (tkParty, tkKey) : (Party, Text)
    maintainer key._1

    choice TextKeyChoice : ()
      controller tkParty
      do return ()

template TextKeyOperations
  with
    tkoParty: Party

  where
    signatory tkoParty

    nonconsuming choice TKOLookup: ()
      with
        keyToLookup: (Party, Text)
        expected: Optional (ContractId TextKey)
      controller tkoParty
      do actual <- lookupByKey @TextKey keyToLookup
         assertMsg ("lookup matches (" <> show expected <> ", " <> show actual <> ")") (expected == actual)

    nonconsuming choice TKOFetch: ()
      with
        keyToFetch: (Party, Text)
        expectedCid: ContractId TextKey
      controller tkoParty
      do (actualCid, actualContract) <- fetchByKey @TextKey keyToFetch
         assertMsg "fetch contract id matches" (expectedCid == actualCid)
         assertMsg "fetch contract matches" (keyToFetch == key actualContract)

    nonconsuming choice TKOConsumeAndLookup: ()
      with
        cidToConsume: ContractId TextKey
        keyToLookup: (Party, Text)
      controller tkoParty
      do mbCid1 <- lookupByKey @TextKey keyToLookup
         assertMsg "gets contract the first time" (mbCid1 == Some cidToConsume)
         exercise cidToConsume TextKeyChoice
         mbCid2 <- lookupByKey @TextKey keyToLookup
         assertMsg "does not get contract after exercise" (mbCid2 == None)

    nonconsuming choice TKOFetchAndRecreate : ()
      with keyToFetch: (Party, Text)
      controller tkoParty
      do (cid, contract) <- fetchByKey @TextKey keyToFetch
         exercise cid TextKeyChoice
         cid2 <- create TextKey with tkParty = contract.tkParty, tkKey = contract.tkKey, tkDisclosedTo = contract.tkDisclosedTo
         return ()

template LocalKeyVisibilityOperations
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs

    nonconsuming choice LocalLookup : ()
      controller obs
      do cid <- create (TextKey sig "" [])
         Some _ <- lookupByKey @TextKey (sig, "")
         archive cid

    nonconsuming choice LocalFetch : ()
      controller obs
      do cid <- create (TextKey sig "" [])
         _ <- fetchByKey @TextKey (sig, "")
         archive cid

-- dummy contract to be divulged out-of-band
template Divulgence1
  with
    div1Party: Party
  where
    signatory div1Party

-- contract to be used to divulge out of band. the owner of the
-- `Divulgence1` contract should be the fetcher, and the party
-- to disclose to the signatory.
template Divulgence2
  with
    div2Signatory: Party
    div2Fetcher: Party
  where
    signatory div2Signatory
    observer div2Fetcher

    nonconsuming choice Divulgence2Fetch: ()
      with
        div1ToFetch: ContractId Divulgence1
      controller div2Fetcher
      do _ <- fetch div1ToFetch
         return ()

    nonconsuming choice Divulgence2Archive: ()
      with
        div1ToArchive: ContractId Divulgence1
      controller div2Fetcher
      do archive div1ToArchive

template DecimalRounding
  with
    party: Party
    number: Decimal
  where
    signatory party

{-
testDivulgence : Scenario ()
testDivulgence = test do
  alice <- getParty "alice"
  bob <- getParty "bob"
  div1Cid <- submit alice (create Divulgence1 with div1Party = alice)
  div2Cid <- submit bob (create Divulgence2 with div2Signatory = bob, div2Fetcher = alice)
  submit alice (exercise div2Cid Divulgence2Fetch with div1ToFetch = div1Cid)
-}

testScenario : Scenario ()
testScenario = do
  pass (days 10)
  party <- getParty "party"
  submit party (create Dummy with operator = party)
  pass (seconds 10)
  submit party (create DummyWithParam with operator = party)
  submit party (create DummyFactory with operator = party)
  pass (seconds 10)
  submit party (create DummyContractFactory with operator = party)
  pass (seconds 10)
  other <- getParty "other"
  submitMustFail party (create Dummy with operator = other)
  return ()

template Delegated
  with
    owner : Party
    k : Text
  where
    signatory owner
    key (owner, k) : (Party, Text)
    maintainer key._1

    choice Recreate: ()
      controller owner
      do create this
         return ()

      -- Non-consuming choice to test that contract keys created and archived
      -- by transient contracts are properly handled.
    nonconsuming choice CreateAnotherAndArchive: ()
      with
        k2: Text
      controller owner
      do cid <- create Delegated with owner = owner, k = k2
         exercise cid Archive

template Delegation
  with
    owner : Party
    delegate : Party
  where
    signatory owner
    observer delegate

    nonconsuming choice FetchDelegated: Delegated
      with delegated: ContractId Delegated
      controller delegate
      do fetch delegated

    nonconsuming choice FetchByKeyDelegated: ()
      with
        p: Party
        k: Text
      controller delegate
      do _ <- fetchByKey @Delegated (p, k)
         pure ()

    nonconsuming choice LookupByKeyDelegated: ()
      with
        p: Party
        k: Text
      controller delegate
      do _ <- lookupByKey @Delegated (p, k)
         pure ()


template ShowDelegated
  with
    owner: Party
    delegate: Party
  where
    signatory owner
    observer delegate
    choice ShowIt : ()
      with delegatedId: ContractId Delegated
      controller owner
      do fetch delegatedId
         return ()

testDivulgenceVisibility = scenario do
  owner <- getParty "owner"
  delegate <- getParty "delegate"
  delegated <- owner `submit` create Delegated with owner, k = "key"
  delegation <- owner `submit` create Delegation with owner, delegate
  delegate `submit` exercise delegation FetchDelegated with delegated

testDivulgenceSuccess = scenario do
  owner <- getParty "owner"
  delegate <- getParty "delegate"
  delegated <- owner `submit` create Delegated with owner, k = "key"
  delegation <- owner `submit` create Delegation with owner, delegate
  showId <- owner `submit` create ShowDelegated with owner, delegate
  owner `submit` exercise showId ShowIt with delegatedId = delegated
  delegate `submit` exercise delegation  FetchDelegated with delegated

template Witnesses
  with
    p_signatory: Party
    p_observer: Party
    p_actor: Party
  where
    signatory p_signatory
    observer p_observer

    -- need to use new choice syntax for the controller to not
    -- be an observer
    choice WitnessesChoice: ()
     controller p_actor
     do
      return ()

    -- need to use new choice syntax for the controller to not
    -- be an observer
    nonconsuming choice WitnessesNonConsumingChoice: ()
     controller p_actor
     do
      return ()

    nonconsuming choice WitnessesCreateNewWitnesses: ContractId Witnesses
     controller p_actor
     do
      create this with p_signatory = p_actor

-- Contract used to divulge instances of Witnesses to the actor
-- of witnesses. Otherwise we cannot exercise!
template DivulgeWitnesses
  with
    p_signatory: Party
    p_actor: Party
  where
    signatory p_actor
    observer p_signatory

    choice Divulge: ()
      with toFetch: ContractId Witnesses
      controller p_signatory
      do _ <- fetch toFetch
         return ()

template MaintainerNotSignatory
  with
    p: Party
    q: Party
  where
    signatory p

    key q: Party
    maintainer key

template CreateAndFetch
  with
    p: Party
  where
    signatory p

    choice CreateAndFetch_Run: ()
      controller p
      do cid <- create CreateAndFetch with p
         _ <- fetch cid
         return ()

template Proposal
  with
    from: Party
    to: Party
  where
    signatory from
    observer to
    choice ProposalAccept: ContractId Asset
      with asset: ContractId Asset
      controller to
      do fetch asset
         exercise asset AssetTransfer with newOwner = from

template Asset
  with
    issuer: Party
    owner: Party
  where
    signatory issuer
    observer owner
    key issuer: Party
    maintainer key
    choice AssetTransfer: ContractId Asset
      with newOwner: Party
      controller owner
      do create this with owner = newOwner

template MultiPartyContract
  with
    parties: [Party]
    value: Text
  where
    signatory parties

    key this: MultiPartyContract
    maintainer key.parties

    choice MPAddSignatories : ContractId MultiPartyContract
      with
        newParties: [Party]
      controller parties ++ newParties
      do
        create this with
          parties = parties ++ newParties

    nonconsuming choice MPFetchOther : ()
      with
        cid: ContractId MultiPartyContract
        actors: [Party]
      controller actors
      do
        actualContract <- fetch cid
        return ()

    nonconsuming choice MPFetchOtherByKey : ()
      with
        keyToFetch: MultiPartyContract
        actors: [Party]
      controller actors
      do
        (actualCid, actualContract) <- fetchByKey @MultiPartyContract keyToFetch
        return ()

    nonconsuming choice MPLookupOtherByKey : ()
      with
        keyToFetch: MultiPartyContract
        actors: [Party]
        expectedCid: Optional (ContractId MultiPartyContract)
      controller actors
      do
        actualCid <- lookupByKey @MultiPartyContract keyToFetch
        assertMsg "LookupOtherByKey value matches" (expectedCid == actualCid)

template WithKey
  with
    p : Party
  where
    signatory p
    key p : Party
    maintainer key

template WithKeyCreator
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice WithKeyCreator_DiscloseCreate : ContractId WithKey
      with
        p : Party
      controller p
      do create (WithKey p1)

template WithKeyCreatorAlternative
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    nonconsuming choice WithKeyCreatorAlternative_DiscloseCreate : ContractId WithKey
      controller p2
      do create (WithKey p1)

template WithKeyFetcher
  with
    p1 : Party
    p2 : Party
  where
    signatory p1
    observer p2
    choice WithKeyFetcher_Fetch : WithKey
      with
        contractId : ContractId WithKey
      controller p2
      do fetch contractId


template WithKeyDivulgenceHelper
  with
    divulgedTo : Party
    withKeyOwner : Party
  where
    signatory divulgedTo
    observer withKeyOwner

    nonconsuming choice WithKeyDivulgenceHelper_Fetch: ()
      with
        withKeyToFetch: ContractId WithKey
      controller withKeyOwner
      do _ <- fetch withKeyToFetch
         return ()
