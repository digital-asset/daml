-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
module ExceptionRaceTests where

#ifdef DAML_EXCEPTIONS
import DA.Exception
import DA.Optional (isSome)

exception E
  where
    message "E"

exception LookupException
  with
    found : Bool
  where
    message "LookupException"

type RaceKey = Text

template DummyContract with
    owner : Party
  where
    signatory owner

template ContractWithKey with
    owner : Party
  where
    signatory owner
    key owner: Party
    maintainer key

    controller owner can
      ContractWithKey_Archive : ()
        do
          return ()

    controller owner can
      nonconsuming ContractWithKey_Exercise : ()
        do
          return ()

template FetchWrapper with
    fetcher : Party
    contractId : ContractId ContractWithKey
  where 
    signatory fetcher
    controller fetcher can
      nonconsuming FetchWrapper_Fetch: ()
        do try do
             _ <- fetch contractId
             throw E
           catch
             E -> pure ()

template LookupResult with
    owner : Party
    found : Bool
  where
    signatory owner

template LookupWrapper with
    owner : Party
  where
    signatory owner

    controller owner can
      nonconsuming LookupWrapper_Lookup : ()
        do try do
             optionalContractId <- lookupByKey @ContractWithKey owner
             throw (LookupException (isSome optionalContractId))
           catch
             (LookupException successful) -> do
               create LookupResult with owner = owner, found = successful
               pure ()

template CreateWrapper with
    owner : Party
  where
    signatory owner
    controller owner can
      nonconsuming CreateWrapper_CreateRollback : ()
        do
          try do
            contract <- create ContractWithKey with owner
            throw E
          catch
            E -> pure ()

template ExerciseWrapper
  with
    owner : Party
  where
    signatory owner
    controller owner can
      nonconsuming ExerciseWrapper_ExerciseConsumingRollback : ()
        with
          cid : ContractId ContractWithKey
        do
          try do
            contract <- exercise cid Archive
            throw E
          catch
            E -> pure ()
      nonconsuming ExerciseWrapper_ExerciseNonConsumingRollback : ()
        with
          cid : ContractId ContractWithKey
        do
          try do
            contract <- exercise cid ContractWithKey_Exercise
            throw E
          catch
            E -> pure ()
#endif
