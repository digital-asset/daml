-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
module ExceptionRaceTests where

#ifdef DAML_EXCEPTIONS
import DA.Exception
import DA.Optional (isSome)

exception E
  where
    message "E"

exception LookupException
  with
    found : Bool
  where
    message "LookupException"

type RaceKey = Text

template DummyContract with
    owner : Party
  where
    signatory owner

template ContractWithKey with
    owner : Party
  where
    signatory owner
    key owner: Party
    maintainer key

    choice ContractWithKey_Archive : ()
      controller owner
      do return ()

    nonconsuming choice ContractWithKey_Exercise : ()
      controller owner
      do return ()

template FetchWrapper with
    fetcher : Party
    contractId : ContractId ContractWithKey
  where 
    signatory fetcher
    nonconsuming choice FetchWrapper_Fetch: ()
      controller fetcher
      do try do
           _ <- fetch contractId
           throw E
         catch
           E -> pure ()

template LookupResult with
    owner : Party
    found : Bool
  where
    signatory owner

template LookupWrapper with
    owner : Party
  where
    signatory owner

    nonconsuming choice LookupWrapper_Lookup : ()
      controller owner
      do try do
           optionalContractId <- lookupByKey @ContractWithKey owner
           throw (LookupException (isSome optionalContractId))
         catch
           (LookupException successful) -> do
             create LookupResult with owner = owner, found = successful
             pure ()

template CreateWrapper with
    owner : Party
  where
    signatory owner
    nonconsuming choice CreateWrapper_CreateRollback : ()
      controller owner
      do try do
           contract <- create ContractWithKey with owner
           throw E
         catch
           E -> pure ()

template ExerciseWrapper
  with
    owner : Party
  where
    signatory owner
    nonconsuming choice ExerciseWrapper_ExerciseConsumingRollback : ()
      with
        cid : ContractId ContractWithKey
      controller owner
      do try do
           contract <- exercise cid Archive
           throw E
         catch
           E -> pure ()
    nonconsuming choice ExerciseWrapper_ExerciseNonConsumingRollback : ()
      with cid : ContractId ContractWithKey
      controller owner
      do try do
           contract <- exercise cid ContractWithKey_Exercise
           throw E
          catch
            E -> pure ()
#endif
