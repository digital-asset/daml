-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module DeeplyNestedValue where

data Nat = Z | S Nat
  deriving (Eq, Show)

construct: Int -> Nat -> Nat
construct x acc | x <= 0 = acc
construct x acc  = construct (x-1) (S acc)

toNat : Int -> Nat
toNat x = construct x Z

destruct: Nat -> Int -> Int
destruct Z acc = acc
destruct (S n) acc = destruct n (acc + 1)

toInt: Nat -> Int
toInt x = destruct x 0

template Contract
  with
    party: Party
    i: Int
    n: Nat
  where
    signatory party

template ContractWithKey
  with
    party: Party
    i: Int
  where
    signatory party
    key (party, toNat i): (Party, Nat)
    maintainer key._1

template Handler
  with
    party : Party
  where
    signatory party
    nonconsuming choice Construct : Nat
      with i : Int
      controller party
      do pure $ toNat i
    nonconsuming choice Destruct : Int
      with n: Nat
      controller party
      do pure $ toInt n
    nonconsuming choice ConstructThenDestruct : Int
      with i: Int
      controller party
      do exercise self Destruct with n = toNat i
    nonconsuming choice Create: ContractId Contract
      with i : Int
      controller party
      do create Contract with
           party = party
           i = i
           n = toNat i
    nonconsuming choice CreateKey: ContractId ContractWithKey
      with i : Int
      controller party
      do create ContractWithKey with
           party = party
           i = i
    nonconsuming choice Fetch: Contract
      with cid: ContractId Contract
      controller party
      do fetch cid
    nonconsuming choice FetchByKey: ContractId ContractWithKey
      with i: Int
      controller party
      do (cid, _) <- fetchByKey @ContractWithKey (party, toNat i)
         pure cid
    nonconsuming choice LookupByKey: Optional (ContractId ContractWithKey)
      with i: Int
      controller party
      do lookupByKey @ContractWithKey (party, toNat i)
