-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
module Exceptions where

#ifdef DAML_EXCEPTIONS

import DA.Assert
import DA.Exception

exception E
  with
    t : Text
  where
    message t

exception E2
  with
    t : Text
  where
    message t

template WithSimpleKey
  with
    p : Party
  where
    signatory p
    key p : Party
    maintainer key
    nonconsuming choice WithKey_Noop : ()
      controller p
      do pure ()

template WithKey
  with
    p : Party
    v : Int
    obs: [Party]
  where
    signatory p
    observer obs
    key (p, v) : (Party, Int)
    maintainer key._1
    choice Consume : ()
      with
        a : Party
      controller a
      do pure ()

template Divulger
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs
    nonconsuming choice Divulge : ()
      with
        cid : ContractId WithSimpleKey
      controller obs
      do try (fetch cid >> throw (E ""))
         catch
           E _ -> pure ()

template Fetcher
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs
    nonconsuming choice Fetch : WithSimpleKey
      with
        cid : ContractId WithSimpleKey
      controller obs
      do fetch cid

    nonconsuming choice Fetch_ : WithKey
      with
        cid : ContractId WithKey
      controller obs
      do fetch cid

template ProjectionDivulgenceHelper
  with
    a : Party
    b : Party
  where
    signatory a
    observer b
    choice DivulgeProjection : ()
      with
        cid : ContractId WithKey
      controller a
      do -- Both the fetch and the fetchByKey
         -- will be divulged to B.
         c <- fetch cid
         c.v === 0
         _ <- fetchByKey @WithKey (a, 1)
         throw (E "")

template RollbackNestingHelper
  with
    a : Party
    b : Party
    c : Party
  where
    signatory c
    observer a
    choice Rollback : ()
      controller a
      do try do
           create (WithSimpleKey a)
           try do
             exerciseByKey @WithKey (b, 1) (Consume a)
             throw (E "")
           catch
             E{} -> pure ()
           exerciseByKey @WithKey (b, 1) (Consume a)
         catch
           E{} -> pure ()

template WithKeyDelegate
  with
    a : Party
    b : Party
  where
    signatory b
    observer a
    nonconsuming choice CreateWithKey : ContractId WithKey
      with
        v : Int
      controller a
      do create (WithKey b v [a])

template Informer
  with
    a : Party
    obs : [Party]
  where
    signatory a
    observer obs
    nonconsuming choice Inform : ()
      observer obs
      controller a
      do pure ()

template ExceptionTester
  with
    p : Party
  where
    signatory p
    nonconsuming choice Noop : ()
      controller p
      do pure ()
    nonconsuming choice ThrowUncaught : ()
      controller p
      do throw (E "exception message")
    nonconsuming choice ThrowCaught : Text
      controller p
      do try (exercise self ThrowUncaught >> pure "uncaught")
         catch
           E msg -> pure msg
    nonconsuming choice RollbackFetch : ()
      with
        cid : ContractId ExceptionTester
      controller p
      do try (fetch cid >> throw (E ""))
         catch
           E _ -> pure ()
    nonconsuming choice RollbackConsuming : ()
      with
        cid : ContractId ExceptionTester
      controller p
      do try (archive cid >> throw (E ""))
         catch
           E _ -> pure ()
    nonconsuming choice RollbackNonConsuming : ()
      with
        cid : ContractId ExceptionTester
      controller p
      do try (exercise cid Noop >> throw (E ""))
         catch
           E _ -> pure ()
    nonconsuming choice RolledBackChoice : ContractId ExceptionTester
      controller p
        do create this
    nonconsuming choice RollbackCreate : ()
      controller p
      do try (exercise self RolledBackChoice >> throw (E ""))
         catch
           E _ -> pure ()
    nonconsuming choice DuplicateKey : ()
      controller p
      do try (create (WithSimpleKey p) >> throw (E ""))
         catch
           E _ -> pure ()

    nonconsuming choice FetchKey : ()
      controller p
      do try (fetchByKey @WithSimpleKey p >> throw (E ""))
         catch
           E _ -> pure ()

    nonconsuming choice NestedCatch : ()
      controller p
      do try (exercise self NestedCatchChild)
         catch
           E2 _ -> pure ()

    nonconsuming choice NestedCatchChild : ()
      controller p
      do try throw (E2 "nested")
         catch
           E _ -> pure ()

    nonconsuming choice RolledbackArchiveConsuming : ()
      with
        cid : ContractId WithSimpleKey
      controller p
      do try (archive cid >> throw (E ""))
         catch
            E _ -> archive cid

    nonconsuming choice RolledbackArchiveNonConsuming : ()
      with
        cid : ContractId WithSimpleKey
      controller p
      do try (archive cid >> throw (E ""))
         catch
            E _ -> exercise cid WithKey_Noop

    nonconsuming choice RolledbackDuplicateKey : ()
      controller p
      do try (create (WithSimpleKey p) >> throw (E ""))
         catch
            E _ -> create (WithSimpleKey p) >> pure ()

    nonconsuming choice ProjectionDivulgence : ()
      with
        b : Party
        keyCid : ContractId WithKey
      controller p
      do -- b sees all 3 childs of this exercise but not the exercise itself.
         cid <- create (ProjectionDivulgenceHelper p b)
         try (exercise cid (DivulgeProjection keyCid))
         catch
           E{} -> pure ()
         archive cid

    nonconsuming choice ProjectionNormalization : ()
      with
        b : Party
        keyDelegate : ContractId WithKeyDelegate
        pbInformer : ContractId Informer
        pcInformer : ContractId Informer
        pbcInformer : ContractId Informer
      controller p
      do -- Projection to B:
         --   Normalization rule #3 folds R3 into R1
         --   R2 and R3 must sit under R1 for key checks to pass
         -- Projection to C:
         --   Normalization rule #2 pulls R2 out of R1.
         --   Normalization rule #1 drops R3.


         try do -- R1
           exercise keyDelegate (CreateWithKey 1) -- informees: p b

           try do -- R2
             exercise pbcInformer Inform -- informees: p b c
             exerciseByKey @WithKey (b, 1) (Consume p) -- informees: p b
             exercise keyDelegate (CreateWithKey 2) -- informees: p b
             throw (E "")
           catch
             E{} -> pure ()

           exercise pbInformer Inform -- informees: p b

           try do -- R3
             exerciseByKey @WithKey (b, 1) (Consume p) -- informees: p b
             exercise keyDelegate (CreateWithKey 2) -- informees: p b
             throw (E "")
           catch
             E{} -> pure()

           exercise pcInformer Inform -- informees: p c
           throw (E "")

         catch
           E{} -> pure ()

         exercise keyDelegate (CreateWithKey 1)
         pure ()

    nonconsuming choice ProjectionNesting : ()
      with
        b : Party
        keyDelegate : ContractId WithKeyDelegate
        cid : ContractId RollbackNestingHelper
      controller p
      do exercise keyDelegate (CreateWithKey 1)

         exercise self (ProjectionNestingInner b cid)

         exerciseByKey @WithKey (b, 1) (Consume p)
         pure ()

    nonconsuming choice ProjectionNestingInner : ()
      with
        b : Party
        cid : ContractId RollbackNestingHelper
      controller p
      do try do
           _ <- create (Informer p [b])

           try do
             exerciseByKey @WithKey (b, 1) (Consume p)
             throw (E "")
           catch
             E{} -> pure ()

           exercise cid Rollback

           throw (E "")

         catch
           E{} -> pure ()
#endif
