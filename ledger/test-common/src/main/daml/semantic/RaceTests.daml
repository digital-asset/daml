module RaceTests where

type RaceKey = Text

-- TODO: try to reduce number of templates
template ContractWithKey with
    owner : Party
  where
    signatory owner
    key owner: Party
    maintainer key

    controller owner can
      ContractWithKey_Archive : ()
        do
          return ()

    controller owner can
      nonconsuming ContractWithKey_Exercise : ()
        do
          return ()

template FetchContractWithKey with
    fetcher : Party
    contractId : ContractId ContractWithKey
  where 
    signatory fetcher
    controller fetcher can
      FetchContractWithKey_Fetch: ContractWithKey
        do fetch contractId

template LookupResult with
    owner : Party
    found : Bool
  where
    signatory owner

foundContract (result : Optional (ContractId ContractWithKey)) : Bool =
  case result of
    Some val -> True
    None -> False

template LookerUpByKey with
    owner : Party
  where
    signatory owner

    controller owner can
      nonconsuming Lookup : ()
        do
          optionalContractId <- lookupByKey @ContractWithKey owner
          create LookupResult with owner = owner, found = foundContract(optionalContractId)
          pure ()

template TransientWrapper with
    owner : Party
  where
    signatory owner
    controller owner can
      nonconsuming CreateTransientContract : ()
        do
          contract <- create ContractWithKey with owner
          _ <- exercise contract ContractWithKey_Archive
          return ()