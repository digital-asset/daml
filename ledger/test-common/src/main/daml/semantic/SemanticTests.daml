-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


-- These Daml scenarios test, where possible, the semantics of the underlying Ledger API implementation
-- with respect to consistency, authorization and privacy (including divulgence).
--
-- Notes: many of the ledger model properties are correct-by-construction
-- in Daml, therefore we do not test model conformance such as the behavior
-- of malformed transactions or transactions with exercise before create
-- inconsistency.
module SemanticTests where

------------------------------------------------------------
-- Consistency testing templates

data Amount = Amount {value: Decimal; currency: Text} deriving (Eq, Show)

amountAsText (amount : Amount) : Text = show amount.value <> amount.currency

template GetCash
 with
   payer: Party
   owner: Party
   amount: Amount
 where
   signatory payer, owner
   agreement
     show payer <> " pays " <> amountAsText amount <>" to " <> show owner

template Iou
 with
   payer: Party
   owner: Party
   amount: Amount
 where
   signatory payer
   observer owner
   choice Call: ContractId GetCash
     controller owner
     do create GetCash with payer; owner; amount
   choice Transfer: ContractId Iou
     with newOwner: Party
     controller owner
     do create Iou with payer; owner = newOwner; amount

-- Needed to test fetch via the Ledger API
template FetchIou
  with
    fetcher : Party
    iouCid : ContractId Iou
  where
    signatory fetcher
    choice FetchIou_Fetch: Iou
      controller fetcher
      do fetch iouCid

template SharedContract
 with
   payer: Party
   owner1: Party
   owner2: Party
 where
   signatory payer
   observer owner1, owner2
   choice SharedContract_Consume1: ()
     controller owner1
     do pure ()
   choice SharedContract_Consume2: ()
     controller owner2
     do pure ()
   choice SharedContract_BothConsume: ()
     controller [owner1, owner2]
     do pure ()

------------------------------------------------------------
-- Authorization testing templates

template PaintOffer
  with
    painter : Party
    houseOwner : Party
    obligor : Party
    amount: Amount
  where
    signatory painter
    observer houseOwner
    choice PaintOffer_Accept: (ContractId Iou, ContractId PaintAgree)
      with iouCid: ContractId Iou
      controller houseOwner
      do (,) <$> exercise iouCid Transfer with newOwner = painter
             <*> create PaintAgree with painter; houseOwner
    choice PaintOffer_Counter: ContractId PaintCounterOffer
      with iouCid: ContractId Iou
      controller houseOwner
      do iou <- fetch iouCid
         assert $ obligor == iou.payer
         assert $ houseOwner == iou.owner
         create PaintCounterOffer with iouCid; painter; houseOwner; obligor; amount = iou.amount

-- Needed to test fetch via the Ledger API
template FetchPaintOffer
  with
    fetcher : Party
    offerCid : ContractId PaintOffer
  where
    signatory fetcher
    choice FetchPaintOffer_Fetch: PaintOffer
      controller fetcher
      do fetch offerCid

template PaintCounterOffer
  with
    iouCid : ContractId Iou
    painter : Party
    houseOwner : Party
    obligor : Party
    amount: Amount
  where
    signatory houseOwner
    observer painter
    choice PaintCounterOffer_Accept: (ContractId Iou, ContractId PaintAgree)
      controller painter
      do offerCid <- create PaintOffer with painter; houseOwner; obligor; amount
         -- This is delegation, the painter exercises the offer on behalf of the houseOwner.
         exercise offerCid PaintOffer_Accept with iouCid

template PaintAgree
  with
    painter : Party
    houseOwner : Party
  where
    signatory painter, houseOwner

-- Needed to test fetch via the Ledger API
template FetchPaintAgree
  with
    fetcher : Party
    agreeCid : ContractId PaintAgree
  where
    signatory fetcher
    choice FetchPaintAgree_Fetch: PaintAgree
      controller fetcher
      do fetch agreeCid

------------------------------------------------------------
-- Divulgence testing templates

template Token
  with
    issuer: Party
    owner: Party
    id: Int
  where
    signatory issuer
    observer owner

    choice Token_Transfer : ContractId Token
      with newOwner : Party
      controller owner
      do create Token with issuer; owner = newOwner; id

    choice Token_Consume: ()
      controller owner
      do pure ()

template Delegation
  with
    owner: Party
    delegate: Party
  where
    signatory owner
    observer delegate

    choice Delegation_Token_Consume: ()
      with tokenId: ContractId Token
      controller delegate
      do exercise tokenId Token_Consume

    -- Divulgance to delegate as a consuming choice is
    -- visible to the observer.
    choice Delegation_Divulge_Token: ()
      with tokenId: ContractId Token
      controller owner
      do fetch tokenId
         pure ()

    nonconsuming choice Delegation_Wrong_Divulge_Token: ()
      with tokenId: ContractId Token
      controller owner
      do fetch tokenId
         pure ()
