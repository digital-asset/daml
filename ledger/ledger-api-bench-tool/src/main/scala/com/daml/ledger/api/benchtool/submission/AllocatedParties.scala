// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

package com.daml.ledger.api.benchtool.submission

import com.daml.ledger.client.binding.Primitive

case class AllocatedParties(
    signatoryO: Option[Primitive.Party],
    observers: List[Primitive.Party],
    divulgees: List[Primitive.Party],
    extraSubmitters: List[Primitive.Party],
    observerPartySets: List[AllocatedPartySet],
) {
  val allAllocatedParties: List[Primitive.Party] =
    signatoryO.toList ++ observers ++ divulgees ++ extraSubmitters ++ observerPartySets.flatMap(
      _.parties
    )

  /** NOTE: This is guaranteed to be safe only for runs with synthetic data generated by Benchtool
    */
  def signatory: Primitive.Party = signatoryO.getOrElse(sys.error("Signatory party not found!"))
}

object AllocatedParties {

  /** @param partyPrefixesForPartySets - get converted to main party prefixes and then used to find party sets
    */
  def forExistingParties(
      parties: List[String],
      partyPrefixesForPartySets: List[String],
  ): AllocatedParties = {
    val partiesByMainPrefixMap: Map[String, List[Primitive.Party]] = parties
      .groupBy(Names.parsePartyNameMainPrefix)
      .view
      .mapValues(_.map(Primitive.Party(_)))
      .toMap
    val observerPartySets = for {
      partySetPrefix <- partyPrefixesForPartySets.map(Names.parsePartyNameMainPrefix)
      parties <- partiesByMainPrefixMap.get(partySetPrefix)
    } yield AllocatedPartySet(
      mainPartyNamePrefix = partySetPrefix,
      parties = parties,
    )
    val signatories = partiesByMainPrefixMap.getOrElse(Names.SignatoryPrefix, List.empty)
    AllocatedParties(
      // NOTE: For synthetic streams signatory is always present
      signatoryO = signatories.headOption,
      observers = partiesByMainPrefixMap.getOrElse(Names.ObserverPrefix, List.empty),
      divulgees = partiesByMainPrefixMap.getOrElse(Names.DivulgeePrefix, List.empty),
      extraSubmitters = partiesByMainPrefixMap.getOrElse(Names.ExtraSubmitterPrefix, List.empty),
      observerPartySets = observerPartySets,
    )
  }
}
