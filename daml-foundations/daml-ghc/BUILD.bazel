# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:haskell.bzl",
    "da_haskell_binary",
    "da_haskell_library",
    "da_haskell_test",
)
load(
    "//daml-foundations/daml-ghc:util.bzl",
    "daml_ghc_compile_test",
    "daml_ghc_integration_test",
)
load("@os_info//:os_info.bzl", "is_windows")

daml_ghc_integration_test("daml-ghc-test-all", "DA.Test.GHC.mainAll")

daml_ghc_integration_test("daml-ghc-test-dev", "DA.Test.GHC.main")

da_haskell_test(
    name = "tasty-test",
    srcs = ["test-src/DA/Test/TastyMain.hs"],
    data = [
        ":tests",
        "//daml-foundations/daml-ghc/package-database:package-db",
    ],
    hazel_deps = [
        "base",
        "tasty-hunit",
        "text",
    ],
    main_function = "DA.Test.TastyMain.main",
    src_strip_prefix = "test-src",
    visibility = ["//visibility:public"],
    deps = [
        "//daml-foundations/daml-ghc/damldoc:damldoc-testing",
        "//daml-foundations/daml-tools/daml-cli",
        "//libs-haskell/da-hs-base",
    ],
)

da_haskell_test(
    name = "daml-ghc-shake-test-ci",
    size = "large",
    # this test takes a while and often time out -- tell that to bazel
    timeout = "long",
    srcs = ["test-src/DA/Test/ShakeIdeClient.hs"],
    data = [
        "//compiler/scenario-service/server:scenario_service_jar",
        "//daml-foundations/daml-ghc/package-database:package-db",
    ],
    hazel_deps = [
        "base",
        "directory",
        "tasty-hunit",
        "text",
    ],
    main_function = "DA.Test.ShakeIdeClient.main",
    src_strip_prefix = "test-src",
    visibility = ["//visibility:public"],
    deps = [
        "//compiler/hie-core",
        "//daml-foundations/daml-ghc/daml-compiler",
        "//daml-foundations/daml-ghc/ide",
        "//daml-foundations/daml-ghc/ide:ide-testing",
        "//libs-haskell/da-hs-base",
    ],
)

da_haskell_binary(
    name = "generate-module-tree",
    srcs = ["test-src/DA/Test/GenerateModuleTree.hs"],
    hazel_deps = [
        "base",
        "filepath",
    ],
    main_function = "DA.Test.GenerateModuleTree.main",
    src_strip_prefix = "test-src",
    deps = ["//libs-haskell/da-hs-base"],
)

genrule(
    name = "module-tree-test",
    outs = ["FatTree{i}.daml".format(i = i) for i in range(1, 19)],
    cmd = "$(location :generate-module-tree) $(@D) 18",
    tools = [":generate-module-tree"],
    visibility = ["//visibility:public"],
)

daml_ghc_compile_test(
    name = "module-tree-memory",
    srcs = [":module-tree-test"],
    main = "FatTree18.daml",
    visibility = ["//visibility:public"],
)

daml_ghc_compile_test(
    name = "compile-subdir",
    srcs = [":tests"],
    main = "tests/Subdir/Examples.daml",
)

daml_ghc_compile_test(
    name = "compile-empty",
    srcs = [":tests"],
    main = "tests/Empty.daml",
)

daml_ghc_compile_test(
    name = "examples-memory",
    srcs = [":tests"],
    heap_limit = "200M",
    main = "tests/Examples.daml",
    stack_limit = "230K",
)

daml_ghc_compile_test(
    name = "bond-trading-memory",
    srcs = [":bond-trading"],
    heap_limit = "120M" if is_windows else "100M",
    main = "bond-trading/Test.daml",
    stack_limit = "35K",
)

filegroup(
    name = "tests",
    srcs = glob(["tests/**"]),
    visibility = [
        "__pkg__",
        "//daml-foundations/integration-tests:__pkg__",
    ],
)

filegroup(
    name = "bond-trading",
    srcs = glob(["bond-trading/**"]),
    visibility = [
        "__pkg__",
        "//daml-foundations/integration-tests:__pkg__",
    ],
)

# Check that DAML compilation is deterministic.
sh_test(
    name = "daml-ghc-deterministic",
    srcs = ["tests/daml-ghc-deterministic.sh"],
    args = [
        "$(location //daml-foundations/daml-tools/damlc-app)",
        "$(location @com_google_protobuf//:protoc)",
    ],
    data = [
        ":tests",
        "//daml-foundations/daml-ghc/package-database:package-db",
        "//daml-foundations/daml-tools/damlc-app",
        "@com_google_protobuf//:protoc",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

# Generating DAML stdlib docs.

filegroup(
    name = "daml-base-files",  # DAML files to be included in DAML base docs.
    srcs = [
        "//daml-foundations/daml-ghc/daml-prim-src",
        "//daml-foundations/daml-ghc/daml-stdlib-src",
    ],
    visibility = ["__pkg__"],
)

filegroup(
    name = "daml-base-hoogle-prefix",
    srcs = ["base-hoogle-prefix.txt"],
    visibility = ["__pkg__"],
)

filegroup(
    name = "daml-base-rst-prefix",
    srcs = ["base-rst-prefix.rst"],
    visibility = ["__pkg__"],
)

genrule(
    name = "daml-base-hoogle-docs",
    srcs = [
        ":daml-base-files",
        ":daml-base-hoogle-prefix",
    ],
    outs = ["daml-base-hoogle.txt"],
    cmd = "$(location //daml-foundations/daml-tools/damlc-app) -- docs --output=$(OUTS) --format=Hoogle $(locations :daml-base-files) --prefix=$(location :daml-base-hoogle-prefix)",
    tools = ["//daml-foundations/daml-tools/damlc-app"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "daml-base-rst-docs",
    srcs = [
        ":daml-base-files",
        ":daml-base-rst-prefix",
    ],
    outs = ["daml-base.rst"],
    cmd = "$(location //daml-foundations/daml-tools/damlc-app) -- docs --output=$(OUTS) --format=Rst $(locations :daml-base-files) --prefix=$(location :daml-base-rst-prefix)",
    tools = ["//daml-foundations/daml-tools/damlc-app"],
    visibility = ["//visibility:public"],
)
