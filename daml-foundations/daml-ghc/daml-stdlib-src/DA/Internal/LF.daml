-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS -Wno-unused-binds #-} -- the opaque constructors are not exported

daml 1.2
-- | MOVE Prelude DAML-LF types and primitives, apart from templates/contracts.
module DA.Internal.LF
  ( Party
  , getParty
  , partyToText
  , partyFromText

  , ContractId

  , Date

  , Time

  , Update

  , Scenario
  , submit
  , submitMustFail
  , scenario

  , HasTime
  , getTime

  , CanAbort
  , abort

  , Pair
  , unpackPair
  ) where

import GHC.Types (Opaque, Symbol, magic)
import DA.Internal.Prelude

-- | The `Party` type represents a party to a contract.
data Party = Party Opaque
-- Note that before DAML-LF 1.2 BEToText added single quotes around the party.
-- now it does not, and the old behavior has been renamed BEPartyToQuotedText.
-- Since we want this to work with both versions, keep the old behavior.
instance Show Party where show = primitive @"BEPartyToQuotedText"
instance Eq Party where (==) = primitive @"BEEqual"
instance Ord Party where
  (<) = primitive @"BELess"
  (<=) = primitive @"BELessEq"
  (>=) = primitive @"BEGreaterEq"
  (>) = primitive @"BEGreater"

-- | Convert the `Party` to `Text`, giving back what you passed to `getParty`.
--   Most users should stick to `show` of the party instead, which also wraps
--   the party in `'ticks'` making it clear it was a `Party` originally.
partyToText : Party -> Text
-- Safe because parties aren't allowed to include ' characters
--
-- Note that in DAML-LF 1.2 we have a primitive that has this behavior out of
-- the box -- BEToText for the type `Party`. However we do not have an easy
-- way to generate different code depending on the DAML-LF target at the moment,
-- and thus we keep using `show` for both versions.
partyToText = implode . filter (/= "\'") . explode . show
    where
        implode : [Text] -> Text = primitive @"BEImplodeText"
        explode : Text -> [Text] = primitive @"BEExplodeText"

-- | Converts a `Text` to `Party`. It returns `None` if the provided text contains
-- any forbidden characters. See DAML-LF spec for a specification on which characters
-- are allowed in parties. Note that this function accepts text _without_
-- single quotes.
--
-- Also note that this function does not perform any check on whether the provided
-- text correspond to a party that "exists" on a given ledger: it merely converts
-- the given `Text` to a `Party`. The only way to guarantee that a given `Party`
-- exists on a given ledger is to involve it in a contract.
--
-- This function, together with `partyToText`, forms an isomorphism between
-- valid party strings and and parties. In other words, the following equations hold:
--
-- ```
-- ∀ p. partyFromText (partyToText p) = Some p
-- ∀ txt p. partyFromText txt = Some p ==> partyToText p = txt
-- ```
--
-- This function will crash at runtime if you compile DAML to DAML-LF < 1.2.
partyFromText : Text -> Optional Party
partyFromText = primitive @"BEPartyFromText"

-- | Get the party with the given name. Party names must be non-empty and only
-- contain alphanumeric charaters, space, `-` (dash) or `_` (underscore).
getParty : Text -> Scenario Party
getParty = primitive @"SGetParty"

-- | The `Date` type represents a date.
data Date = Date Opaque
instance Show Date where show = primitive @"BEToText"
instance Eq Date where (==) = primitive @"BEEqual"
instance Ord Date where (<=) = primitive @"BELessEq"

-- | The `Time` type represents a specific datetime in UTC, i.e. a date and a time in UTC.
data Time = Time Opaque
instance Show Time where show = primitive @"BEToText"
instance Eq Time where (==) = primitive @"BEEqual"
instance Ord Time where (<=) = primitive @"BELessEq"

-- | The `ContractId a` type represents an id for a contract made from template `a`.
--   The id can be used to fetch the contract, among other things.
data ContractId a = ContractId Opaque
instance Eq (ContractId a) where (==) = primitive @"BEEqualContractId"
instance Show (ContractId a) where show _ = "<contract-id>"

-- | The `Update a` type represents an action to update or query the ledger,
--   before returning a value of type `a`.
data Update a = Update Opaque

instance Functor Update where
    fmap f x = x >>= \v -> pure (f v)

instance Applicative Update where
    pure = primitive @"UPure"
    f <*> x = f >>= \f -> x >>= \x -> pure (f x)

instance Action Update where
    (>>=) = primitive @"UBind"

instance ActionFail Update where
    fail = primitive @"UAbort"

-- | Places where the time is available - basically `Scenario` and `Update`.
class HasTime m where
    -- | Obtain the current time.
    getTime : m Time

instance HasTime Update where
    getTime = primitive @"UGetTime"
instance HasTime Scenario where
    getTime = primitive @"SGetTime"

class (Action m) => CanAbort m where
    -- | Abort the current action with a message.
    abort : Text -> m a

instance CanAbort Update where
    abort = fail
instance CanAbort Scenario where
    abort = fail

-- | The `Scenario` type is used to simulate multi-party ledger interactions.
-- The type `Scenario a` describes a set of actions taken by various parties during
-- the simulated scenario, before returning a value of type `a`.
data Scenario a = Scenario Opaque

instance Functor Scenario where
    fmap f x = x >>= \v -> pure (f v)

instance Applicative Scenario where
    pure = primitive @"SPure"
    f <*> x = f >>= \f -> x >>= \x -> pure (f x)

instance Action Scenario where
    (>>=) = primitive @"SBind"

instance ActionFail Scenario where
    fail = primitive @"SAbort"

infixr 0 `submit`
-- | `submit p u` describes the scenario in which party `p` attempts to update the
-- ledger with update action `u`, and returns the value returned by the underlying
-- update action. This scenario is considered a failure if the underlying update
-- action fails.
submit : Party -> Update a -> Scenario a
submit = primitive @"SCommit"

infixr 0 `submitMustFail`
-- | `submitMustFail` describes the scenario in which party `p` attempts to update the
-- ledger with update action `u`, but is expected to fail. This scenario is considered
-- a failure if the underlying update action succeeds.
submitMustFail : Party -> Update a -> Scenario ()
submitMustFail = primitive @"SMustFailAt"

-- | Declare you are building a scenario.
scenario : Scenario a -> Scenario a
scenario = identity

-- | HIDE A dummy type for the DAML-LF structural record type
-- `<f1: a1, f2: a2>`.
data Pair (f1 : Symbol) (f2 : Symbol) a1 a2 = Pair Opaque

-- | HIDE Function to turn a DAML-LF structural record type into a DAML pair.
unpackPair : forall f1 f2 a1 a2. Pair f1 f2 a1 a2 -> (a1, a2)
unpackPair = magic @"unpackPair"
