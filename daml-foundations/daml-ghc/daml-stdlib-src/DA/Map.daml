-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
-- | Map - A map is an associative array data type composed of a
-- collection of key/value pairs such that, each possible key appears
-- at most once in the collection.
module DA.Map
  ( Map
  , empty
  , size
  , toList
  , fromList
  , fromListWith
  , fromListWithKey
  , null
  , lookup
  , member
  , filter
  , filterWithKey
  , delete
  , insert
  , merge
  , union
  ) where

import Prelude hiding (lookup, null, filter, empty)
import DA.List qualified as L
import DA.Optional qualified as M

-- | The type of a `Map` from keys of type `k` to values of type `v`.
data Map k v = Map_internal [(k,v)] deriving (Eq, Ord, Show)

-- | Create a map from a list of key/value pairs.
fromList : Ord k => [(k, a)] -> Map k a
fromList = fromListWith const

-- | Create a map from a list of key/value pairs with a combining
-- function. Examples:
-- ```
--   fromListWith (<>) [(5,"a"), (5,"b"), (3,"b"), (3,"a"), (5,"c")] == fromList [(3, "ab"), (5, "cba")]
--   fromListWith (<>) [] == (empty : Map Int Text)
-- ```
fromListWith : Ord k => (a -> a -> a) -> [(k, a)] -> Map k a
fromListWith f = fromListWithKey (const f)

-- | Build a map from a list of key/value pairs with a combining
-- function. Example:
-- ```
--   let f key new_value old_value = (show key) ++ ":" ++ new_value ++ "|" ++ old_value
--   fromListWithKey f [(5,"a"), (5,"b"), (3,"b"), (3,"a"), (5,"c")] == fromList [(3, "3:a|b"), (5, "5:c|5:b|a")]
--   fromListWithKey f [] == empty
-- ```
fromListWithKey : Ord k => (k -> a -> a -> a) -> [(k, a)] -> Map k a
fromListWithKey f = Map_internal . map combine . L.groupOn fst . L.sortOn fst
  where
    combine ((k, x) :: kys) = (k, foldl (\acc (_, y) -> f k y acc) x kys)
    combine [] = error "unreachable"  -- groupOn produces non-empty lists

-- | Convert the map to a list of key/value pairs where the keys are
-- in ascending order.
toList : Map k v -> [(k, v)]
toList (Map_internal l) = l

-- | The empty map.
empty : Map k v
empty = Map_internal []

-- | Number of elements in the map.
size : Map k v -> Int
size (Map_internal l) = length l

-- | Is the map empty?
null : Map k v -> Bool
null (Map_internal []) = True
null _ = False

-- | Lookup the value at a key in the map.
lookup : (Eq k, Ord k) => k -> Map k v -> Optional v
lookup x m = L.lookup x (toList m)

-- | Is the key a member of the map?
member : (Eq k, Ord k) => k -> Map k v -> Bool
member x m = M.isSome $ lookup x m

{-# DEPRECATED filter "Use 'filterWithKey' instead of 'filter'" #-}
-- | DEPRECATED: Use `filterWithKey` instead.
filter : Eq k => (k -> v -> Bool) -> Map k v -> Map k v
filter = filterWithKey

-- | Filter all values that satisfy some predicate.
filterWithKey : Eq k => (k -> v -> Bool) -> Map k v -> Map k v
filterWithKey p m = Map_internal $ L.filter (uncurry p) (toList m)

-- | Delete a key and its value from the map. When the key is not a
-- member of the map, the original map is returned.
delete : Eq k => k -> Map k v -> Map k v
delete x = filter (const . (x /=))

-- | Insert a new key/value pair in the map. If the key is already
-- present in the map, the associated value is replaced with the
-- supplied value.
insert : Ord k => k -> v -> Map k v -> Map k v
insert x y (Map_internal []) = Map_internal [(x, y)]
insert x y (Map_internal l) = Map_internal $ flip fixedpoint l $ \f -> \case
  [] -> [(x, y)]
  (x1, y1)::xs -> case compare x x1 of
      EQ -> (x, y) :: xs
      LT -> (x, y) :: (x1, y1) :: xs
      GT -> (x1, y1) :: (f xs)

-- | Merge two maps.
merge
  : Ord k
  => (k -> a -> Optional c)
  -> (k -> b -> Optional c)
  -> (k -> a -> b -> Optional c)
  -> Map k a
  -> Map k b
  -> Map k c
merge f1 f2 f3 (Map_internal l1) (Map_internal l2) = Map_internal $ flip fixedpoint (l1, l2) $ \f -> \case
    (l1, []) -> foldr (\(x,y) l -> prepend x (f1 x y) l) [] l1
    ([], l2) -> foldr (\(x,y) l -> prepend x (f2 x y) l) [] l2
    ((x1,y1)::l1, (x2,y2)::l2) -> case compare x1 x2 of
        LT -> prepend x1 (f1 x1 y1) $ f (l1, (x2,y2)::l2)
        GT -> prepend x2 (f2 x2 y2) $ f ((x1,y1)::l1, l2)
        EQ -> prepend x1 (f3 x1 y1 y2) $ f (l1, l2)
  where
    prepend _ None = identity
    prepend x (Some y) = (::) (x, y)

-- | The union of two maps, preferring the first map when equal
-- keys are encountered.
union : Ord k => Map k a -> Map k a -> Map k a
union = merge (const Some) (const Some) (const (\x _ -> Some x))

instance Ord a => Semigroup (Map a b) where
  (<>) = union

instance Ord a => Monoid (Map a b) where
  mempty = empty
