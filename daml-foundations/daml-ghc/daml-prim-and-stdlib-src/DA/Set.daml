-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
-- | Set - The `Set e` type represents a set of elements of type
-- `e`. Most operations require that `e` be an instance of the `Ord`
-- class.
module DA.Set
  ( Set
  , empty
  , size
  , toList
  , fromList
  , member
  , null
  , insert
  , filter
  , delete
  , singleton
  , union
  , intersection
  , difference
  )
where

import Prelude hiding (filter, null, empty)
import DA.Map qualified as M

instance IsParties (Set Party) where
  toParties = toList

-- | The type of a set.
data Set a = Set_internal (M.Map a ()) deriving (Eq, Ord, Show)
-- there are no assumptions of any particular order of the elements in a set
-- an element is assumed to occur no more than once

-- | The empty set.
empty : Set a
empty = Set_internal M.empty

-- | The number of elements in the set.
size : Set a -> Int
size (Set_internal l) = M.size l

-- | Convert the set to a list of elements.
toList : Set a -> [a]
toList (Set_internal l) = fmap fst $ M.toList l

-- | Create a set from a list of elements.
fromList : Ord a => [a] -> Set a
fromList l = Set_internal $ M.fromList $ fmap (\x -> (x, ())) l

-- | Is the element in the set?
member : Ord a => a -> Set a -> Bool
member x (Set_internal l) = M.member x l

-- | Is this the empty set?
null : Set a -> Bool
null (Set_internal l) = M.null l

-- | Insert an element in a set. If the set already contains an
-- element equal to the given value, it is replaced with the new
-- value.
insert : Ord a => a -> Set a -> Set a
insert x (Set_internal l) = Set_internal $ M.insert x () l

-- | Filter all elements that satisfy the predicate.
filter : Eq a => (a -> Bool) -> Set a -> Set a
filter p (Set_internal l) = Set_internal $ M.filter (const . p) l

-- | Delete an element from a set.
delete : Eq a => a -> Set a -> Set a
delete x (Set_internal l) = Set_internal $ M.delete x l

-- | Create a singleton set.
singleton : Ord a => a -> Set a
singleton = flip insert empty

-- | The union of two sets, preferring the first set when equal
-- elements are encountered.
union : Ord a => Set a -> Set a -> Set a
union (Set_internal l1) (Set_internal l2) = Set_internal $
  M.merge go go (const go) l1 l2
  where
    go _ _ = Some ()

-- | The intersection of two sets. Elements of the result come from
-- the first set.
intersection : Ord a => Set a -> Set a -> Set a
intersection (Set_internal l1) (Set_internal l2) = Set_internal $
  M.merge nogo nogo (const go) l1 l2
  where
    go _ _ = Some ()
    nogo _ _ = None

-- | Difference of two sets.
difference : Ord a => Set a -> Set a -> Set a
difference (Set_internal l1) (Set_internal l2) = Set_internal $
  M.merge go nogo (const nogo) l1 l2
  where
    go _ _ = Some ()
    nogo _ _ = None

instance Ord a => Semigroup (Set a) where
  (<>) = union

instance Ord a => Monoid (Set a) where
  mempty = empty
