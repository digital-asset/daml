-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE PatternSynonyms #-}

daml 1.2
-- | Our Prelude, extending WiredIn with things that don't need special treatment.

module DA.Internal.Compatible where

import DA.Internal.Prelude
import DA.Internal.LF

{-# DEPRECATED Datetime "DAML 1.1 compatibility helper, use Time instead of 'Datetime'" #-}
type Datetime = Time

{-# DEPRECATED Tuple "DAML 1.1 compatibility helper, use (a,b) instead of 'Tuple a b'" #-}
type Tuple a b = (a,b)

{-# DEPRECATED tuple "DAML 1.1 compatibility helper, use (,)" #-}
tuple : a -> b -> (a,b)
tuple = (,)

{-# DEPRECATED Tuple3 "DAML 1.1 compatibility helper, use (a,b,c) instead of 'Tuple3 a b c'" #-}
type Tuple3 a b c = (a,b,c)

{-# DEPRECATED tuple3 "DAML 1.1 compatibility helper, use (,,)" #-}
tuple3 : a -> b -> c -> (a,b,c)
tuple3 = (,,)

{-# DEPRECATED List "DAML 1.1 compatibility helper, use [a] instead of 'List a'" #-}
type List a = [a]

{-# DEPRECATED nil "DAML 1.1 compatibility helper, use []" #-}
nil : [a]
nil = []

{-# DEPRECATED cons "DAML 1.1 compatibility helper, use (::), which also works infix as 'x :: xs'" #-}
cons : a -> [a] -> [a]
cons = (::)

{-# DEPRECATED does "DAML 1.1 compatibility helper, does is redundant and the first argument is ignored" #-}
does : Party -> Update a -> Update a
does _ x = x

{-# DEPRECATED toText "DAML 1.1 compatibility helper, use 'show' instead" #-}
toText : Show a => a -> Text
toText = show

{-# DEPRECATED Integer "DAML 1.2 compatibility helper, use 'Int' instead of 'Integer'" #-}
type Integer = Int

{-# DEPRECATED toInteger "DAML 1.2 compatibility helper, use 'truncate' instead" #-}
toInteger : Decimal -> Int
toInteger = truncate

{-# DEPRECATED mapU "DAML 1.2 compatibility helper, use 'mapA' instead of 'mapU'" #-}
mapU : Applicative m => (a -> m b) -> [a] -> m [b]
mapU = mapA

{-# DEPRECATED forU "DAML 1.2 compatibility helper, use 'forA' instead of 'forU'" #-}
forU : Applicative m => [a] -> (a -> m b) -> m [b]
forU = forA

{-# DEPRECATED mapM "DAML 1.2 compatibility helper, use 'mapA' instead of 'mapM'" #-}
mapM : Applicative m => (a -> m b) -> [a] -> m [b]
mapM = mapA

{-# DEPRECATED forM "DAML 1.2 compatibility helper, use 'forA' instead of 'forM'" #-}
forM : Applicative m => [a] -> (a -> m b) -> m [b]
forM = forA

{-# DEPRECATED Monad "DAML 1.2 compatibility helper, use 'Action' instead of 'Monad'" #-}
type Monad = Action

{-# DEPRECATED MonadFail "DAML 1.2 compatibility helper, use 'ActionFail' instead of 'MonadFail'" #-}
type MonadFail = ActionFail

{-# DEPRECATED Num "DAML 1.2 compatibility helper, use 'Number' instead of 'Num'" #-}
type Num = Number

{-# DEPRECATED commits "DAML 1.2 compatibility helper, use 'submit' instead of 'commits'" #-}
infixr 0 `commits`
commits : Party -> Update a -> Scenario a
commits = submit

{-# DEPRECATED fails "DAML 1.2 compatibility helper, use 'submitMustFail' instead of 'fails'" #-}
infixr 0 `fails`
fails : Party -> Update a -> Scenario ()
fails = submitMustFail

{-# DEPRECATED test "DAML 1.2 compatibility helper, use 'scenario' instead" #-}
test : Scenario a -> Scenario a
test = identity

{-# DEPRECATED Maybe "DAML 1.2 compatibility helper, use 'Optional' instead of 'Maybe'" #-}
type Maybe = Optional

{-# DEPRECATED Nothing "DAML 1.2 compatibility helper, use 'None' instead of 'Nothing'" #-}
pattern Nothing : Maybe a
pattern Nothing = None

{-# DEPRECATED Just "DAML 1.2 compatibility helper, use 'Some' instead of 'Just'" #-}
pattern Just : a -> Maybe a
pattern Just x = Some x

{-# DEPRECATED maybe "DAML 1.2 compatibility helper, use 'optional' instead of 'maybe'" #-}
maybe : b -> (a -> b) -> Maybe a -> b
maybe = optional

{-# DEPRECATED id "DAML 1.2 compatibility helper, use 'identity' instead of 'id'" #-}
id : a -> a
id = identity
