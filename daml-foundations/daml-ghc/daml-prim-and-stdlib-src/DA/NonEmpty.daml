-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
-- | HIDE
module DA.NonEmpty where

import Prelude hiding (reverse, foldr, foldl, one, map)
import Prelude qualified as P
import DA.Foldable qualified as F
import DA.Traversable qualified as T
import DA.List qualified as L
import DA.Action qualified as M

data NonEmpty a = NonEmpty
  with
    hd : a
    tl : [a]
  deriving (Show, Eq)

instance Semigroup (NonEmpty a) where
  (<>) = append

instance Functor NonEmpty where
  fmap = map

instance Applicative NonEmpty where
  pure x = NonEmpty x []
  fs <*> xs = do x1 <- fs; x2 <- xs; return (x1 x2)

instance Action NonEmpty where
  NonEmpty x xs >>= f = NonEmpty y (ys ++ ys')
    where
      NonEmpty y ys = f x
      ys' = xs >>= toList . f

instance F.Foldable NonEmpty where
  foldr f z ne = f ne.hd (P.foldr f z ne.tl)

instance T.Traversable NonEmpty where
  mapA f l = liftA2 NonEmpty (f l.hd) (T.mapA f l.tl)

append : NonEmpty a -> NonEmpty a -> NonEmpty a
append l r =  NonEmpty l.hd (l.tl ++ toList r)

map : (a -> b) -> NonEmpty a -> NonEmpty b
map f ne = NonEmpty (f ne.hd) (P.map f ne.tl)

nonEmpty : [a] -> Optional (NonEmpty a)
nonEmpty [] = None
nonEmpty (x::xs) = Some (NonEmpty x xs)

singleton : a -> NonEmpty a
singleton head = NonEmpty head []

toList : NonEmpty a -> [a]
toList (NonEmpty head tail) = head :: tail

reverse : NonEmpty a -> NonEmpty  a
reverse l = let hd::tl = L.reverse $ toList l in NonEmpty with hd; tl

foldl1 : (a -> a -> a) -> NonEmpty a -> a
foldl1 f l = L.foldl f l.hd l.tl

foldr1 : (a -> a -> a) -> NonEmpty a -> a
foldr1 f l = foldl1 (flip f) (reverse l)

foldr : (a -> b -> b) -> b -> NonEmpty a -> b
foldr f i l = L.foldr f i (toList l)

foldrA : Action m => (a -> b -> m b) -> b -> NonEmpty a -> m b
foldrA f x xs = foldr (\ y acc -> do v <- acc; f y v) (pure x) xs

foldr1A : Action m => (a -> a -> m a) -> NonEmpty a -> m a
foldr1A f l = M.foldrA f l.hd l.tl

foldl : (b -> a -> b) -> b -> NonEmpty a -> b
foldl f i l = L.foldl f i (toList l)

foldlA : Action m => (b -> a -> m b) -> b -> NonEmpty a -> m b
foldlA f x xs = foldl (\ acc y -> do v <- acc; f v y) (pure x) xs

foldl1A : Action m => (a -> a -> m a) -> NonEmpty a -> m a
foldl1A f l = M.foldlA f l.hd l.tl

instance IsParties (NonEmpty Party) where
  toParties = toList
