-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -Wno-missing-methods #-}
daml 1.2

-- | MOVE Prelude
-- A weird module - based on base.GHC.Enum, but not realy in the GHC namespace.
-- Has to live here so GHC can find it for deriving instances.
module GHC.Enum
  ( Bounded(..)
  , Enum(..)
  ) where

import GHC.Types
import GHC.Base

-- Following imports must be loaded if someone tries to do deriving Enum
import GHC.Err
import Data.String()
import GHC.Integer.Type
import GHC.Num
import GHC.Show()
import GHC.Classes
import GHC.CString (fromString)

-- | The `Bounded` class is used to name the upper and lower limits of a
-- type.  `Ord` is not a superclass of `Bounded` since types that are not
-- totally ordered may also have upper and lower bounds.
--
-- The `Bounded` class may be derived for any enumeration type;
-- `minBound` is the first constructor listed in the `data` declaration
-- and `maxBound` is the last.
-- `Bounded` may also be derived for single-constructor datatypes whose
-- constituent types are in `Bounded`.
class  Bounded a  where
    minBound, maxBound : a

-- | Class `Enum` defines operations on sequentially ordered types.
--
-- The `enumFrom`... methods are used in Haskell's translation of
-- arithmetic sequences.
--
-- Instances of `Enum` may be derived for any enumeration type (types
-- whose constructors have no fields).  The nullary constructors are
-- assumed to be numbered left-to-right by `fromEnum` from `0` through `n-1`.
-- See Chapter 10 of the /Haskell Report/ for more details.
--
-- For any type that is an instance of class `Bounded` as well as `Enum`,
-- the following should hold:
--
-- * The calls `succ` `maxBound` and `pred` `minBound` should result in
--   a runtime error.
--
-- * `fromEnum` and `toEnum` should give a runtime error if the
--   result value is not representable in the result type.
--   For example, `toEnum` 7 :: `Bool`` is an error.
--
-- * `enumFrom` and `enumFromThen` should be defined with an implicit bound,
--   thus:
--
-- ```
-- enumFrom     x   = enumFromTo     x maxBound
-- enumFromThen x y = enumFromThenTo x y bound
--     where
--         bound | fromEnum y >= fromEnum x = maxBound
--               | otherwise                = minBound
-- ```
--
class  Enum a   where
    -- | the successor of a value.  For numeric types, 'succ' adds 1.
    succ                : a -> a
    -- | the predecessor of a value.  For numeric types, 'pred' subtracts 1.
    pred                : a -> a
    -- | Convert from an 'Int'.
    toEnum              : Int -> a
    -- | Convert to an 'Int'.
    -- It is implementation-dependent what 'fromEnum' returns when
    -- applied to a value that is too large to fit in an 'Int'.
    fromEnum            : a -> Int

    -- | Used in Haskell's translation of `[n..]` with `[n..] = enumFrom n`,
    --   a possible implementation being `enumFrom n = n : enumFrom (succ n)`.
    --   For example:
    --
    --     * `enumFrom 4 :: [Integer] = [4,5,6,7,...]`
    --     * `enumFrom 6 :: [Int] = [6,7,8,9,...,maxBound :: Int]`
    enumFrom            : a -> [a]
    -- | Used in Haskell's translation of `[n,n'..]`
    --   with `[n,n'..] = enumFromThen n n'`, a possible implementation being
    --   `enumFromThen n n' = n : n' : worker (f x) (f x n')`,
    --   `worker s v = v : worker s (s v)`, `x = fromEnum n' - fromEnum n` and
    --   `f n y
    --     | n > 0 = f (n - 1) (succ y)
    --     | n < 0 = f (n + 1) (pred y)
    --     | otherwise = y`
    --   For example:
    --
    --     * `enumFromThen 4 6 :: [Integer] = [4,6,8,10...]`
    --     * `enumFromThen 6 2 :: [Int] = [6,2,-2,-6,...,minBound :: Int]`
    enumFromThen        : a -> a -> [a]
    -- | Used in Haskell's translation of `[n..m]` with
    --   `[n..m] = enumFromTo n m`, a possible implementation being
    --   `enumFromTo n m
    --      | n <= m = n : enumFromTo (succ n) m
    --      | otherwise = []`.
    --   For example:
    --
    --     * `enumFromTo 6 10 :: [Int] = [6,7,8,9,10]`
    --     * `enumFromTo 42 1 :: [Integer] = []`
    enumFromTo          : a -> a -> [a]
    -- | Used in Haskell's translation of `[n,n'..m]` with
    --   `[n,n'..m] = enumFromThenTo n n' m`, a possible implementation
    --   being `enumFromThenTo n n' m = worker (f x) (c x) n m`,
    --   `x = fromEnum n' - fromEnum n`, `c x = bool (>=) (<=) (x > 0)`
    --   `f n y
    --      | n > 0 = f (n - 1) (succ y)
    --      | n < 0 = f (n + 1) (pred y)
    --      | otherwise = y` and
    --   `worker s c v m
    --      | c v m = v : worker s c (s v) m
    --      | otherwise = []`
    --   For example:
    --
    --     * `enumFromThenTo 4 2 -6 :: [Integer] = [4,2,0,-2,-4,-6]`
    --     * `enumFromThenTo 6 8 2 :: [Int] = []`
    enumFromThenTo      : a -> a -> a -> [a]

    succ x                 = toEnum (succ (fromEnum x))
    pred x                 = toEnum (pred (fromEnum x))
    enumFrom x             = map toEnum (enumFrom (fromEnum x))
    enumFromThen x y       = map toEnum (enumFromThen (fromEnum x) (fromEnum y))
    enumFromTo x y         = map toEnum (enumFromTo (fromEnum x) (fromEnum y))
    enumFromThenTo x1 x2 y = map toEnum (enumFromThenTo (fromEnum x1) (fromEnum x2) (fromEnum y))


instance Bounded Bool where
    minBound = False
    maxBound = True

instance Enum Bool where
    toEnum n | n == 0    = False
             | n == 1    = True
             | otherwise = error "Bool.toEnum: bad argument"
    fromEnum False = 0
    fromEnum True  = 1


instance Bounded Int where
    minBound =  (0 - 0x7FFFFFFFFFFFFFFF) - 1
    maxBound =  0x7FFFFFFFFFFFFFFF

instance  Enum Int  where
    succ x
       | x == maxBound  = error "Prelude.Enum.succ{Int}: tried to take `succ' of maxBound"
       | otherwise      = x + 1
    pred x
       | x == minBound  = error "Prelude.Enum.pred{Int}: tried to take `pred' of minBound"
       | otherwise      = x - 1

    toEnum   x = x
    fromEnum x = x

    enumFrom x = eftInt x maxBound
    enumFromTo x y = eftInt x y
    enumFromThen x1 x2 = efdInt x1 x2
    enumFromThenTo x1 x2 y = efdtInt x1 x2 y

-- NOTE(MH): The functions below have been copied from ghc's base library.
-- If we change them, we need to be super careful regarding overflows.
eftInt : Int -> Int -> [Int]
-- [x1..x2]
eftInt x y | x > y = []
           | x == y = [x]
           | otherwise = x :: eftInt (x + 1) y

efdInt : Int -> Int -> [Int]
-- [x1,x2..maxInt]
efdInt x1 x2
 | x1 == x2 = error "enumFromThen: from == then"
 | x2 >  x1 = efdtIntUp x1 x2 maxBound
 | otherwise    = efdtIntDn x1 x2 minBound

efdtInt : Int -> Int -> Int -> [Int]
-- [x1,x2..y]
efdtInt x1 x2 y
 | x1 == x2 = error "enumFromThenTo: from == then"
 | x2 >  x1 = efdtIntUp x1 x2 y
 | otherwise    = efdtIntDn x1 x2 y

-- Requires x2 > x1
efdtIntUp : Int -> Int -> Int -> [Int]
efdtIntUp x1 x2 y    -- Be careful about overflow!
 | y < x2 = if y < x1 then [] else [x1]
 | otherwise = x1 :: go_up delta y' x2
    where delta = x2 - x1
          y' = y - delta

go_up : Int -> Int -> Int -> [Int]
go_up delta y' x | x > y' = [x]
                 | otherwise = x :: go_up delta y' (x + delta)

-- Requires x2 < x1
efdtIntDn : Int -> Int -> Int -> [Int]
efdtIntDn x1 x2 y    -- Be careful about underflow!
 | y > x2 = if y > x1 then [] else [x1]
 | otherwise = go_dn delta y' x2
    where delta = x2 - x1
          y' = y - delta

go_dn : Int -> Int -> Int -> [Int]
go_dn delta y' x | x < y' = [x]
                 | otherwise = x :: go_up delta y' (x + delta)
