-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

daml 1.2
module IouOldDSL where

data Iou = Iou with
    issuer   : Party
    owner    : Party
    currency : Text
    amount   : Decimal
  deriving Eq

instance Template Iou where
  ensure this@Iou{..} = amount > 0.0

  signatory this@Iou{..} = [issuer]
  observer this@Iou{..} = [owner]

  agreement this@Iou{..} =
    show issuer <> " promises to pay " <>
    show amount <> " " <> currency <>
    " on demand to " <> show owner

data Transfer = Transfer with newOwner : Party
instance Choice Iou Transfer (ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Transfer{..} =
    -- Transfer the IOU to a new owner.
    create this with owner = newOwner

data Split = Split with splitAmount : Decimal
instance Choice Iou Split (ContractId Iou, ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Split{..} = do
    -- Split the IOU by dividing the amount.
      let restAmount = amount - splitAmount
      splitCid <- create this with amount = splitAmount
      restCid <- create this with amount = restAmount
      return (splitCid, restCid)

data Merge = Merge with otherCid : ContractId Iou
instance Choice Iou Merge (ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Merge{..} = do
    -- Merge two IOUs by aggregating their amounts.
      otherIou <- fetch otherCid
      -- Check the two IOU's are compatible
      assert (
        currency == otherIou.currency &&
        owner == otherIou.owner &&
        issuer == otherIou.issuer
        )
      -- Retire the old Iou by transferring to the
      -- issuer and archiving
      transferCid <-
        exercise otherCid Transfer with newOwner = issuer
      exercise transferCid Archive
      -- Return the merged Iou
      create this with amount = amount + otherIou.amount


main = scenario do
  bank <- getParty "Acme Bank"
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  charlie <- getParty "Charlie"

  -- Bank creates Iou's for Alice and Bob

  iouAliceCid <- submit bank do
    create Iou with
      issuer   = bank
      owner    = alice
      currency = "USD"
      amount   = 100.0

  iouBobCid <- submit bank do
    create Iou with
      issuer   = bank
      owner    = bob
      currency = "USD"
      amount   = 30.0

  -- Alice transfers some Iou's to Bob
  (split, rest) <- submit alice do
    exercise iouAliceCid Split with splitAmount = 40.0
  iouOtherCid <- submit alice do
    exercise split Transfer with newOwner = bob

  -- Bob merges them with the ones he had already.
  iouTotalCid <- submit bob do
    exercise iouBobCid Merge with otherCid = iouOtherCid

  -- Assert things are as they should be
  submit alice do
    aliceIou <- fetch rest
    assert $ aliceIou == Iou with
      issuer   = bank
      owner    = alice
      currency = "USD"
      amount   = 60.0


  submit bob do
    bobIou <- fetch iouTotalCid
    assert $ bobIou == Iou with
      issuer   = bank
      owner    = bob
      currency = "USD"
      amount   = 70.0

  -- Issuer can archive Iou's they own
  iouBankCid <- submit bank do
    create Iou with
      issuer   = bank
      owner    = bank
      currency = "USD"
      amount   = 100.0

  submit bank do exercise iouBankCid Archive
  submitMustFail bank do fetch iouBankCid

  -- some things are broken because we have had to hack signatories
  -- scheduled fix in DAML-LF for next week
  let broken x = return ()

  -- Alice can't create IOUs that are backed by Acme Bank.
  broken $ submitMustFail alice do
    create Iou with
      issuer   = bank
      owner    = alice
      currency = "USD"
      amount   = 50.0

  -- Acme Bank can't create IOUs with a negative amount.
  submitMustFail bank do
    create Iou with
      issuer   = bank
      owner    = alice
      currency = "USD"
      amount   = -20.0

  -- SplitAmount needs to be between 0 and amount.
  submitMustFail alice do exercise rest Split with splitAmount = 80.0

  -- Double spend gets prevented by archiving the contract.
  submitMustFail alice do exercise split Transfer with newOwner = charlie

  -- Similarly a merged contract gets archived as well.
  submitMustFail bob do exercise iouOtherCid Transfer with newOwner = charlie

  -- Only the owner can exercise the transfer choice.
  submitMustFail bank do exercise rest Transfer with newOwner = charlie

  -- Alice can't archive something where issuer is a signatory
  submitMustFail alice do exercise rest Archive

  -- Alice didn't disclose her remaining IOUs to Bob.
  submitMustFail bob do fetch rest

  -- Issuer can archive
  submit bank do archive rest

  -- Only matching IOUs can be merged.
  iouEURCid <- submit bank do
    create Iou with
      issuer   = bank
      owner    = alice
      currency = "EUR"
      amount   = 60.0

  submitMustFail alice do
    exercise rest Merge with otherCid = iouEURCid
