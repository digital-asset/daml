-- @IGNORE-LF 1.2
daml 1.2
module ContractKeyTests where

-- (1)  If `key` mentions `this.x` then `maintainer` can mention
-- `this.x.y`.

data Course =
  Course with
      institution : Party
      title : Text
  deriving (Show, Eq)

data Registration =
  Registration with
      student : Party
      course : Course
      year : Int
  deriving (Show, Eq)

template Enrollment
  with
      reg : Registration
  where
      signatory reg.student, reg.course.institution
      key reg : Registration -- this.x
      maintainer reg.course.institution -- this.x.y.z

-- (2)

data M = M { m : Party } deriving (Show, Eq)
data K = K { s : M } deriving (Show, Eq)

template T
  with
    i : Party
    k : K
  where
    signatory i
    key k.s : M
    maintainer this.k.s.m -- This doesn't work without qualifying with
                          -- `this`. Is that expected?

-- (3)

template AccountInvitation with
    account : Account
  where
    signatory account.bank

    controller account.accountHolder can
      Accept : ContractId Account
        do create account

template Account with
    bank : Party
    accountHolder : Party
    accountNumber : (Text, Int)
  where
    signatory [bank, accountHolder]
    key (bank, accountNumber._1, this.accountNumber._2) : (Party, Text, Int)
    maintainer this.bank, bank

test = scenario do
    bank <- getParty "Bank"
    alice <- getParty "Alice"
    let account = Account with
            bank
            accountHolder = alice
            accountNumber = ("CH", 123)
    let accountKey = (bank, "CH", 123)
    invitationCid <- submit bank do
        create AccountInvitation with account
    accountCid <- submit alice do
        exercise invitationCid Accept

    accountCid' <- submit bank do
        lookupByKey accountKey
    assert $ accountCid' == Some accountCid

    (accountCid', account') <- submit bank do
        fetchByKey accountKey
    assert $ accountCid' == accountCid
    assert $ account' == account
