-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

daml 1.2
module Optional where

import DA.Optional
import DA.Assert

template Foo
  with
    p : Party
  where
    signatory p

    controller p can
      nonconsuming ConsumeIfPositive : ()
        with x : Int
             cid : ContractId Foo
        do
          if x > 0
            then archive cid
            else pure ()

testFromSome = scenario do
  "abc" === fromSome (Some "abc")
  p <- getParty "p"
  submitMustFail p (pure $ fromSome None)

testFromSomeNote = scenario do
  "abc" === fromSomeNote "error" (Some "abc")
  p <- getParty "p"
  submitMustFail p (pure $ fromSomeNote "error" None)

testCatOptionals = scenario do
  [1, 2, 3] === catOptionals [None, Some 1, None, Some 2, None, None, Some 3, None]
  [] === catOptionals ([] : [Optional Int])
  [] === catOptionals ([None, None] : [Optional Int])

testListToOptional = scenario do
  Some 1 === listToOptional [1]
  Some "ab" === listToOptional ["ab", "cd"]
  None === listToOptional ([] : [Decimal])

testOptionalToList = scenario do
  [1] === optionalToList (Some 1)
  [] === optionalToList (None : Optional Decimal)

testFromOptional = scenario do
  1 === fromOptional 0 (Some 1)
  2.3 === fromOptional 2.3 None

testIsSome = scenario do
  True === isSome (Some "a")
  True === isSome (Some True)
  True === isSome (Some identity)
  False === isSome (None : Optional Int)

testIsNone = scenario do
  False === isNone (Some "a")
  False === isNone (Some False)
  False === isNone (Some None)
  True === isNone None

testMapOptional = scenario do
  [1, 4, 5] === mapOptional (\x -> if x > 0 then Some x else None) [1, -3, 4, 5, 0]
  [] === mapOptional Some ([] : [Int])
  [] === mapOptional (const (None : Optional Text)) [1, 2, 3, 4]

testWhenSome = scenario do
  p <- getParty "p"
  cid <- submit p (create Foo with p)
  whenSome None (\x -> submit p $ exercise cid $ ConsumeIfPositive x cid)
  submit p (fetch cid)
  whenSome (Some (-5)) (\x -> submit p $ exercise cid $ ConsumeIfPositive x cid)
  submit p (fetch cid)
  whenSome (Some 5) (\x -> submit p $ exercise cid $ ConsumeIfPositive x cid)
  submitMustFail p (fetch cid)
