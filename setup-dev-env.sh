#!/usr/bin/env bash
# Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# Enhanced development environment setup script
# This script provides an improved setup experience for DAML development

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    print_status $BLUE "Checking prerequisites..."
    
    # Check for required tools
    local missing_tools=()
    
    if ! command -v git >/dev/null 2>&1; then
        missing_tools+=("git")
    fi
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_tools+=("curl")
    fi
    
    if ! command -v bash >/dev/null 2>&1; then
        missing_tools+=("bash")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        print_status $RED "Missing required tools: ${missing_tools[*]}"
        print_status $YELLOW "Please install the missing tools and run this script again."
        exit 1
    fi
    
    print_status $GREEN "All prerequisites satisfied!"
}

# Function to setup development environment
setup_dev_env() {
    print_status $BLUE "Setting up development environment..."
    
    # Navigate to SDK directory
    cd sdk
    
    # Check if dev-env already exists
    if [ -d "dev-env" ]; then
        print_status $YELLOW "Development environment already exists. Updating..."
        # Update existing dev-env
        eval "$(dev-env/bin/dade assist)" || true
    else
        print_status $BLUE "Installing development environment..."
        # Install dev-env
        eval "$(dev-env/bin/dade assist)" || true
    fi
    
    print_status $GREEN "Development environment setup complete!"
}

# Function to optimize build configuration
optimize_build_config() {
    print_status $BLUE "Optimizing build configuration..."
    
    # Create optimized .bazelrc.local if it doesn't exist
    if [ ! -f ".bazelrc.local" ]; then
        cat > .bazelrc.local << EOF
# Local build optimizations
# Generated by setup-dev-env.sh

# Performance optimizations
build --jobs=auto
build --local_cpu_resources=HOST_CPUS-1
build --local_ram_resources=HOST_RAM*0.8

# Cache optimizations
build --disk_cache=.bazel-cache/disk
build --repository_cache=.bazel-cache/repo

# Development optimizations
build --compilation_mode=fastbuild
test --test_output=errors
EOF
        print_status $GREEN "Created optimized .bazelrc.local"
    else
        print_status $YELLOW ".bazelrc.local already exists, skipping optimization"
    fi
}

# Function to run performance check
run_performance_check() {
    print_status $BLUE "Running performance check..."
    
    if [ -f "sdk/scripts/performance-monitor.sh" ]; then
        bash sdk/scripts/performance-monitor.sh
    else
        print_status $YELLOW "Performance monitor script not found, skipping check"
    fi
}

# Function to provide next steps
show_next_steps() {
    print_status $GREEN "Setup complete! Next steps:"
    echo ""
    print_status $BLUE "1. Build the project:"
    echo "   cd sdk && ./build.sh"
    echo ""
    print_status $BLUE "2. Run tests:"
    echo "   bazel test //..."
    echo ""
    print_status $BLUE "3. Install local SDK:"
    echo "   daml-sdk-head"
    echo ""
    print_status $BLUE "4. Monitor performance:"
    echo "   bash sdk/scripts/performance-monitor.sh"
    echo ""
    print_status $GREEN "Happy coding with DAML! ðŸš€"
}

# Main execution
main() {
    print_status $GREEN "DAML Development Environment Setup"
    print_status $GREEN "==================================="
    
    check_prerequisites
    echo ""
    setup_dev_env
    echo ""
    optimize_build_config
    echo ""
    run_performance_check
    echo ""
    show_next_steps
}

# Run main function
main "$@"
