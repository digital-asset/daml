// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.admin.api.v1;

option java_outer_classname = "PartyManagementServiceOuterClass";
option java_package = "com.digitalasset.admin.api.v1";

// Allows clients to manage the parties that are hosted by the particiapant.
service PartyManagementService {

  // Returns the identifiers of all parties hosted by the participant.
  rpc ListParties (ListPartiesRequest) returns (ListPartiesResponse);

  // Adds a party to the set hosted by the participant. The validations performed
  // are implementation specific. For instance, party names might be checked
  // if they follow a certain pattern or the operation may be vetted by the 
  // consensus of the collaborating nodes, etc.
  rpc AddParty (AddPartyRequest) returns (AddPartyResponse);
}

message ListPartiesRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Required
  string ledger_id = 1;

  // TODO: Discuss teh necessity to include below fields, they are
  // present in the canton version of this service.
  
  // Timestamp seems irrelevant. Offset would be more interesting, but
  // it could incentivise concurrent use of this api and ledger api,
  // which should be rather discouraged.
  //google.protobuf.Timestamp asOf = 1;

  // Domain is implicit in most implementations, ledger_id comes
  // close to this field semantically
  //string filterDomain = 2;

  // Party filter could actually be interesting one to include.
  // I'd prefer to skip it for KISS principle's sake
  //string filterParty = 3;
}

message ListPartiesResponse {

  // The details of all DAML parties hosted by the participant.
  // Required
  repeated PartyDetails party_details = 1;
}

message PartyDetails {

  // The IDs of a DAML party hosted by the participant.
  // Required
  string party_ids = 1;

  // TODO: Discuss the necessity to include below fields, they are
  // present in the canton version of this service.
  // All those fields could be added later if need be.
  
  // Domain is implicit in most of other implementations. There is
  // only one. 
  //string domain = 2;

  // Participant is implicit in most of other implementations. It is the
  // one you are communicating with.
  //string participant = 3;

  // Privilege is implicit in most of other implementations. It is a
  // submitting participant.
  //com.digitalasset.canton.identity.v0.ParticipantPrivilege privilege = 4;

  // TrustLevel is implicit in most of other implementations. It is a 
  // regular participant.
  //com.digitalasset.canton.identity.v0.TrustLevel trustLevel = 5;
}

message AddPartyRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Required
  string ledger_id = 1;

  // Party to be added to the participant.
  // Required
  string party_id = 2;

  // The id of the agent making the change. Interpretation is implementation specific.
  // Optional
  string added_by = 3;
}

// An empty message that is received when the add operation succeeded.
message AddPartyResponse {

}