// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1.admin;

option java_outer_classname = "ConfigManagementServiceOuterClass";
option java_package = "com.digitalasset.ledger.api.v1.admin";
option csharp_namespace = "Com.DigitalAsset.Ledger.Api.V1.Admin";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Status: experimental interface, will change before it is deemed production
// ready

// Ledger configuration management service provides methods for the ledger administrator
// to change the current ledger configuration. The services provides methods to modify
// different aspects of the configuration.
service ConfigManagementService {
  // Return the currently active time model and the current configuration generation.
  rpc GetTimeModel (GetTimeModelRequest) returns (GetTimeModelResponse);

  // Set the ledger time model.
  // In case of failure this method responds with:
  // - INVALID_ARGUMENT if arguments are invalid, or the provided configuration generation
  //   does not match the current active configuration generation. The caller is expected
  //   to retry by again fetching current time model using 'GetTimeModel', applying changes
  //   and resubmitting.
  // - ABORTED if the request is rejected or times out. Note that a timed out request may
  //   have still been committed to the ledger. Application should re-query the current
  //   time model before retrying.
  // - UNIMPLEMENTED if this method is not supported by the backing ledger.
  rpc SetTimeModel (SetTimeModelRequest) returns (SetTimeModelResponse);
}

message GetTimeModelRequest {
}

message GetTimeModelResponse {
  // The current configuration generation. The generation is a monotonically increasing
  // integer that is incremented on each change. Used when setting the time model.
  int64 configuration_generation = 1;

  // The current ledger time model.
  TimeModel time_model = 2;
}

message SetTimeModelRequest {
  // Submission identifier used for tracking the request and to reject
  // duplicate submissions.
  // Required.
  string submission_id = 1;

  // Deadline for the configuration change after which the change is rejected.
  google.protobuf.Timestamp maximum_record_time = 2;

  // The current configuration generation which we're submitting the change against.
  // This is used to perform a compare-and-swap of the configuration to
  // safeguard against concurrent modifications.
  // Required.
  int64 configuration_generation = 3;

  // The new time model that replaces the current one.
  // Required.
  TimeModel new_time_model = 4;
}

message SetTimeModelResponse {
  // The configuration generation of the committed time model.
  int64 configuration_generation = 1;
}

message TimeModel {
  // The expected minimum latency of a transaction.
  // Required.
  google.protobuf.Duration min_transaction_latency = 1;

  // The maximum allowed clock skew between the ledger and clients.
  // Required.
  google.protobuf.Duration max_clock_skew = 2;

  // The maximum allowed time to live for a transaction.
  // Must be greater than the derived minimum time to live.
  // Required.
  google.protobuf.Duration max_ttl = 3;
}

