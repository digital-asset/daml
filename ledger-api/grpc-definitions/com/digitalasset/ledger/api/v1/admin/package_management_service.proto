// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1.admin;

import "google/protobuf/timestamp.proto";

option java_outer_classname = "PackageManagementServiceOuterClass";
option java_package = "com.digitalasset.ledger.api.v1.admin";

// Status: experimental interface, will change before it is deemed production
// ready

// Query the DAML-LF packages supported by the ledger participant and upload
// DAR files. We use 'backing participant' to refer to this specific participant
// in the methods of this API.
// When the participant is run in mode requiring authentication, all the calls 
// in this interface will respond with UNAUTHENTICATED, if the caller fails
// to provide a valid access token, and will respond with PERMISSION_DENIED, if
// the claims in the token are insufficient to perform a given operation.
// Subsequently, only specific errors of individual calls not related to 
// authorization will be described.
service PackageManagementService {

  // Returns the details of all DAML-LF packages known to the backing
  // participant.
  // This request will always succeed.
  rpc ListKnownPackages (ListKnownPackagesRequest) returns
    (ListKnownPackagesResponse);

  // Upload a DAR file to the backing participant.
  // Depending on the ledger implementation this might also make the package 
  // available on the whole ledger. This call might not be supported by some 
  // ledger implementations. Canton could be an example, where uploading a DAR
  // is not sufficient to
  // render it usable, it must be activated first.
  rpc UploadDarFile (UploadDarFileRequest) returns (UploadDarFileResponse);

  // TODO: Discuss introduction of two step DAR upload interface. First step
  // would be performed by a user with basic credentials, it would be the
  // UploadDarFile from above. It would place DAR into a staging area after
  // performing some validity checks. ApproveDarFile would be invoked by an
  // administrator:
  // ``rpc ApproveDarFile (ApproveDarFileRequest) returns`
  //   ``(ApproveDarFileResponse);``
  // Such split would remain scriptable while provimding the necessary semantics
  // for implementation compatible with canton.
}

message ListKnownPackagesRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification 
  // Service.
  // Required
  string ledger_id = 1;
}

message ListKnownPackagesResponse {

  // The IDs of all DAML-LF packages supported by the ledger.
  // Required
  repeated PackageDetails package_details= 1;
}

message PackageDetails {
 
  // The IDs of all DAML-LF packages supported by the ledger.
  // Required
  string package_id = 1;

  // Human readable name of a DAML-LF package.
  // Future extension: We need this field in order to facilitate user interfaces
  // that list packages in a user understandable manner. Hashes are useless for
  // that. Commenting out until corresponding changes are introduced in daml-lf
  // archive format and this functionality becomes supportable by the
  // implementations.
  // Required
  // string package_name = 2;

  // Indicates when the package has been uploaded to the ledger.
  // Required
  google.protobuf.Timestamp known_since = 2;

  // Size of the package in bytes.
  // Required
  uint64 package_size = 3;

  // Descrioption provided by the original uploader
  string source_description = 4;

  // Identifier of the participant that uploaded the package.
  // Required
  string source_participant = 5;

}

message UploadDarFileRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification
  // Service.
  // Required
  string ledger_id = 1;

  // Contains a DAML archive DAR file, which in turn is a jar like zipped
  // container for ``daml_lf`` archives. See further details in
  // ``daml_lf.proto``.
  // Required
  bytes dar_file = 2;

  // Descrioption provided by the uploader, it helps the users of the
  // ListKnownPackages interface call to make sense of the returned results.
  // Optional
  string description = 3;
}

// An empty message that is received when the upload operation succeeded.
message UploadDarFileResponse {
}