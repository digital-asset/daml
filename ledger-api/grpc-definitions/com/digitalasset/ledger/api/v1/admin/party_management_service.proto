
// Copyright (c) 2020 The DAML Authors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1.admin;

option java_outer_classname = "PartyManagementServiceOuterClass";
option java_package = "com.digitalasset.ledger.api.v1.admin";
option csharp_namespace = "Com.DigitalAsset.Ledger.Api.V1.Admin";

// Status: experimental interface, will change before it is deemed production
// ready

// Inspect the party management state of a ledger participant and modify the
// parts that are modifiable. We use 'backing participant' to refer to this
// specific participant in the methods of this API.
// When the participant is run in mode requiring authentication, all the calls 
// in this interface will respond with UNAUTHENTICATED, if the caller fails
// to provide a valid access token, and will respond with PERMISSION_DENIED, if
// the claims in the token are insufficient to perform a given operation.
// Subsequently, only specific errors of individual calls not related to 
// authorization will be described.
service PartyManagementService {

  // Return the identifier of the backing participant.
  // All horizontally scaled replicas should return the same id.
  // This method is expected to succeed provided the backing participant is 
  // healthy, otherwise it responds with INTERNAL grpc error.
  // daml-on-sql: returns an identifier supplied on command line at launch time
  // daml-on-kv-ledger: as above
  // canton: returns globally unique identifier of the backing participant
  rpc GetParticipantId (GetParticipantIdRequest) returns (GetParticipantIdResponse);

  // Get the party details of the given parties. Only known parties will be
  // returned in the list.
  // This request will always succeed.
  rpc GetParties (GetPartiesRequest) returns (GetPartiesResponse);

  // List the parties known by the backing participant.
  // The list returned contains parties whose ledger access is facilitated by
  // backing participant and the ones maintained elsewhere.
  // This request will always succeed.
  rpc ListKnownParties (ListKnownPartiesRequest) returns (ListKnownPartiesResponse);

  // Adds a new party to the set managed by the backing participant.
  // Caller specifies a party identifier suggestion, the actual identifier
  // allocated might be different and is implementation specific.
  // This call may:
  // - Succeed, in which case the actual allocated identifier is visible in
  //   the response.
  // - Respond with UNIMPLEMENTED if synchronous party allocation is not
  //   supported by the backing participant.
  // - Respond with INVALID_ARGUMENT if the provided hint and/or display name
  //   is invalid on the given ledger (see below).
  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the
  // identifier is already present
  // daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
  // the consensus layer and call rejected if the identifier is already present.
  // canton: completely different globally unique identifier is allocated.
  // Behind the scenes calls to an internal protocol are made. As that protocol
  // is richer than the the surface protocol, the arguments take implicit values
  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);
}

message GetParticipantIdRequest {
}

message GetParticipantIdResponse {

  // Identifier of the participant, which SHOULD be globally unique.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  string participant_id = 1;
}

message GetPartiesRequest {

  // The stable, unique identifier of the DAML parties.
  // Must be valid PartyIdStrings (as described in ``value.proto``).
  // Required
  repeated string parties = 1;
}

message GetPartiesResponse {

  // The details of the requested DAML parties by the participant, if known.
  // The party details may not be in the same order as requested.
  // Required
  repeated PartyDetails party_details = 1;
}

message ListKnownPartiesRequest {
}

message ListKnownPartiesResponse {

  // The details of all DAML parties hosted by the participant.
  // Required
  repeated PartyDetails party_details = 1;
}

message AllocatePartyRequest {

  // A hint to the backing participant which party ID to allocate. It can be
  // ignored.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Optional
  string party_id_hint = 1;

  // Human-readable name of the party to be added to the participant. It doesn't
  // have to be unique.
  // Optional
  string display_name = 2;
}

message AllocatePartyResponse {

  PartyDetails party_details = 1;
}

message PartyDetails {

  // The stable unique identifier of a DAML party.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  string party = 1;

  // Human readable name associated with the party. Caution, it might not be
  // unique.
  // Optional
  string display_name = 2;

  // true if party is hosted by the backing participant.
  // Required
  bool is_local = 3;
}
