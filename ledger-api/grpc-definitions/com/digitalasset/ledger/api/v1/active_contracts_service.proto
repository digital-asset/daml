// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1;

import "com/digitalasset/ledger/api/v1/event.proto";
import "com/digitalasset/ledger/api/v1/transaction_filter.proto";
import "com/digitalasset/ledger/api/v1/trace_context.proto";


option java_outer_classname = "ActiveContractsServiceOuterClass";
option java_package = "com.digitalasset.ledger.api.v1";

// Allows clients to initialize themselves according to a fairly recent state of the ledger without reading through all transactions that were committed since the ledger's creation.
service ActiveContractsService {

  // Returns a stream of the latest snapshot of active contracts. Getting an empty stream means that the active contracts set is empty and the client should listen to transactions using `LEDGER_BEGIN`.
  //
  // Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
  rpc GetActiveContracts (GetActiveContractsRequest) returns (stream GetActiveContractsResponse);

}

message GetActiveContractsRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Required
  string ledger_id = 1;

  // Templates to include in the served snapshot, per party.
  // Required
  TransactionFilter filter = 2;

  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
  // Optional
  bool verbose = 3;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;

}

message GetActiveContractsResponse {

  // Included in the last message.
  // The client should start consuming the transactions endpoint with this offset.
  // The format of this field is described in `ledger_offset.proto`.
  // Required
  string offset = 1;

  // The workflow that created the contracts.
  // Optional
  string workflow_id = 2;

  // The list of contracts that were introduced by the workflow with `workflow_id` at the offset.
  // Optional
  repeated CreatedEvent active_contracts = 3;

  // Zipkin trace context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;

}
