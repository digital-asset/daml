// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1;

import "com/digitalasset/ledger/api/v1/value.proto";


option java_outer_classname = "EventOuterClass";
option java_package = "com.digitalasset.ledger.api.v1";

// An event on the ledger can either be the creation or the archiving of
// a contract, or the exercise of a choice on a contract.
//
// The ``GetTransactionTrees`` response will only contain create and
// exercise events. Archive events correspond to consuming exercise
// events.
//
// In the transaction service the events are restricted to the events
// visible for the parties specified in the transaction filter. Each
// event message type below contains a ``witness_parties`` field which
// indicates the subset of the requested parties that can see the event
// in question.
//
// However, note that transaction _trees_ might contain events with
// _no_ witness parties, which were included simply because they were
// children of events which have witnesses. On the other hand, on
// the flat transaction stream you'll only receive events that have
// witnesses.
message Event {
  oneof event {
    CreatedEvent created = 1;
    ExercisedEvent exercised = 2;
    ArchivedEvent archived = 3;
 }
}

// Records that a contract has been created, and choices may now be exercised on it.
message CreatedEvent {

  // The ID of this particular event.
  // Required
  string event_id = 1;

  // The ID of the created contract.
  // Required
  string contract_id = 2;

  // The template of the created contract.
  // Required
  Identifier template_id = 3;

  // The arguments that have been used to create the contract.
  // Required
  Record create_arguments = 4;

  // The parties that are notified of this event. For `CreatedEvent`s,
  // these are the intersection of the stakeholders of the contract in
  // question and the parties specified in the `TransactionFilter`. The
  // stakeholders are the union of the signatories and the observers of
  // the contract.
  // Required
  repeated string witness_parties = 5;
}

// Records that a contract has been archived, and choices may no longer be exercised on it.
message ArchivedEvent {

  // The ID of this particular event.
  // Required
  string event_id = 1;

  // The ID of the archived contract.
  // Required
  string contract_id = 2;

  // The template of the archived contract.
  // Required
  Identifier template_id = 3;

  // The parties that are notified of this event. For `ArchivedEvent`s,
  // these are the intersection of the stakeholders of the contract in
  // question and the parties specified in the `TransactionFilter`. The
  // stakeholders are the union of the signatories and the observers of
  // the contract.
  // Required
  repeated string witness_parties = 4;
}

// Records that a choice has been exercised on a target contract.
message ExercisedEvent {

  // The ID of this particular event.
  // Required
  string event_id = 1;

  // The ID of the target contract.
  // Required
  string contract_id = 2;

  // The template of the target contract.
  // Required
  Identifier template_id = 3;

  // The ID of the event in which the target contract has been created.
  // Required
  string contract_creating_event_id = 4;

  // The choice that's been exercised on the target contract.
  // Required
  string choice = 5;

  // The argument the choice was made with.
  // Required
  Value choice_argument = 6;

  // The parties that made the choice.
  // Required
  repeated string acting_parties = 7;

  // If true, the target contract may no longer be exercised.
  // Required
  bool consuming = 8;

  reserved 9; // removed field

  // The parties that are notified of this event. The witnesses of an exercise
  // node will depend on whether the exercise was consuming or not.
  //
  // If consuming, the witnesses are the union of the stakeholders and
  // the actors.
  //
  // If not consuming, the witnesses are the union of the signatories and
  // the actors. Note that the actors might not necessarily be observers
  // and thus signatories. This is the case when the controllers of a
  // choice are specified using "flexible controllers", using the
  // `choice ... controller` syntax, and said controllers are not
  // explicitly marked as observers.
  //
  // Required
  repeated string witness_parties = 10;

  // References to further events in the same transaction that appeared as a result of this ``ExercisedEvent``.
  // It contains only the immediate children of this event, not all members of the subtree rooted at this node.
  // Optional
  repeated string child_event_ids = 11;

  // The result of exercising the choice
  // Required
  Value exercise_result = 12;

}
