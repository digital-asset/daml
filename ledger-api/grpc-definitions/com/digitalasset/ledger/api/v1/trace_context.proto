// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1;

import "google/protobuf/wrappers.proto";


option java_outer_classname = "TraceContextOuterClass";
option java_package = "com.digitalasset.ledger.api.v1";

// Data structure to propagate Zipkin trace information.
// See https://github.com/openzipkin/b3-propagation
// Trace identifiers are 64 or 128-bit, but all span identifiers within a trace are 64-bit. All identifiers are opaque.
message TraceContext {

  // If present, this is the high 64 bits of the 128-bit identifier. Otherwise the trace ID is 64 bits long.
  uint64 trace_id_high = 1 [jstype = JS_STRING];

  // The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID.
  uint64 trace_id = 2 [jstype = JS_STRING];

  // The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree.
  // The value should not be interpreted: it may or may not be derived from the value of the TraceId.
  uint64 span_id = 3 [jstype = JS_STRING];

  // The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree.
  // When the span is the root of the trace tree, the ParentSpanId is absent.
  google.protobuf.UInt64Value parent_span_id = 4;

  // When the sampled decision is accept, report this span to the tracing system. When it is reject, do not.
  // When B3 attributes are sent without a sampled decision, the receiver should make one.
  // Once the sampling decision is made, the same value should be consistently sent downstream.
  bool sampled = 5;
}
