// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.ledger.api.v1;

import "com/digitalasset/ledger/api/v1/completion.proto";
import "com/digitalasset/ledger/api/v1/ledger_offset.proto";
import "com/digitalasset/ledger/api/v1/trace_context.proto";

import "google/protobuf/timestamp.proto";


option java_outer_classname = "CommandCompletionServiceOuterClass";
option java_package = "com.digitalasset.ledger.api.v1";

// Allows clients to observe the status of their submissions.
// Commands may be submitted via the Command Submission Service.
// The on-ledger effects of their submissions are disclosed by the Transaction Service.
// Commands may fail in 4 distinct manners:
//
// 1. INVALID_PARAMETER gRPC error on malformed payloads and missing required fields.
// 2. Failure communicated in the gRPC error.
// 3. Failure communicated in a Completion.
// 4. A Checkpoint with record_time > command mrt arrives through the Completion Stream, and the command's Completion was not visible before. In this case the command is lost.
//
// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
//
// Interprocess tracing of command submissions may be achieved via Zipkin by filling out the trace_context field.
// The server will return a child context of the submitted one, (or a new one if the context was missing) on both the Completion and Transaction streams.
service CommandCompletionService {

  // Subscribe to command completion events.
  rpc CompletionStream (CompletionStreamRequest) returns (stream CompletionStreamResponse);

  // Returns the offset after the latest completion.
  rpc CompletionEnd (CompletionEndRequest) returns (CompletionEndResponse);

}

message CompletionStreamRequest {
  // Must correspond to the ledger id reported by the Ledger Identification Service.
  // Required
  string ledger_id = 1;

  // Only completions of commands submitted with the same application_id will be visible in the stream.
  // Required
  string application_id = 2;

  // Non-empty list of parties whose data should be included.
  // Required
  repeated string parties = 3;

  // This field indicates the minimum offset for completions. This can be used to resume an earlier completion stream.
  // Optional, if not set the ledger uses the current ledger end offset instead.
  LedgerOffset offset = 4;
}

message CompletionStreamResponse {

  // This checkpoint may be used to restart consumption.  The
  // checkpoint is after any completions in this response.
  // Optional
  Checkpoint checkpoint = 1;

  // If set, one or more completions.
  repeated Completion completions = 2;

}

// Checkpoints may be used to:
//
// * detect time out of commands.
// * provide an offset which can be used to restart consumption.
message Checkpoint {

  // All commands with a maximum record time below this value MUST be considered lost if their completion has not arrived before this checkpoint.
  // Required
  google.protobuf.Timestamp record_time = 1;

  // May be used in a subsequent CompletionStreamRequest to resume the consumption of this stream at a later time.
  // Required
  LedgerOffset offset = 2;
}


message CompletionEndRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Required
  string ledger_id = 1;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}

message CompletionEndResponse {
  // This offset can be used in a CompletionStreamRequest message.
  // Required
  LedgerOffset offset = 1;
}
