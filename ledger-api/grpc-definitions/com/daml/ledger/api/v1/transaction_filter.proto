// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/value.proto";


option java_outer_classname = "TransactionFilterOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// A filter both for filtering create and archive events as well as for
// filtering transaction trees.
message TransactionFilter {

  // Each key must be a valid PartyIdString (as described in ``value.proto``).
  // The interpretation of the filter depends on the stream being filtered:
  // (1) For **transaction tree streams** only party filters with wildcards are allowed, and all subtrees
  //     whose root has one of the listed parties as an informee are returned.
  // (2) For **transaction and active-contract-set streams** create and archive events are returned for all contracts whose
  //    stakeholders include at least one of the listed parties and match the
  //    per-party filter.
  // Required
  map<string, Filters> filters_by_party = 1;
}

// The union of a set of contract filters, or a wildcard.
message Filters {

  // If set, then contracts matching any of the ``InclusiveFilters`` match
  // this filter.
  // If not set, or if ``InclusiveFilters`` has empty ``template_ids`` and empty ``interface_filters``:
  // any contract matches this filter.
  // Optional
  InclusiveFilters inclusive = 1;
}

// A filter that matches all contracts that are either an instance of one of
// the ``template_ids`` or that match one of the ``interface_filters``.
message InclusiveFilters {

  // A collection of templates for which the payload will be included in the
  // ``create_arguments`` of a matching ``CreatedEvent``.
  // SHOULD NOT contain duplicates.
  // All ``template_ids`` needs to be valid: corresponding template should be defined in one of
  // the available packages at the time of the query.
  // Optional
  repeated Identifier template_ids = 1;

  // Include an ``InterfaceView`` for every ``InterfaceFilter`` matching a contract.
  // The ``InterfaceFilter``s MUST use unique ``interface_id``s.
  // All ``interface_id`` needs to be valid: corresponding interface should be defined in one of
  // the available packages at the time of the query.
  // Optional
  repeated InterfaceFilter interface_filters = 2;
}

// This filter matches contracts that implement a specific interface.
message InterfaceFilter {

  // The interface that a matching contract must implement.
  // Required
  Identifier interface_id = 1;

  // Whether to include the interface view on the contract in the returned ``CreateEvent``.
  // Use this to access contract data in a uniform manner in your API client.
  // Optional
  bool include_interface_view = 2;

  // Whether to include a ``create_arguments_blob`` in the returned
  // ``CreateEvent``.
  // Use this to access the complete contract data in your API client
  // for submitting it as a disclosed contract with future commands.
  // Optional
  bool include_create_arguments_blob = 3;
}
