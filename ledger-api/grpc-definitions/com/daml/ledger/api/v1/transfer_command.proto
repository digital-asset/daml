// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

option java_outer_classname = "TransferCommandOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

message TransferCommand {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // For 3.0 API this field will be removed.
  // Optional
  string ledger_id = 1;

  // Identifier of the on-ledger workflow that this command is a part of.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 2;

  // Uniquely identifies the application or participant user that issued the command.
  // Must be a valid ApplicationIdString (as described in ``value.proto``).
  // Required unless authentication is used with a user token or a custom token specifying an application-id.
  // In that case, the token's user-id, respectively application-id, will be used for the request's application_id.
  string application_id = 3;

  // Uniquely identifies the command.
  // The triple (application_id, submitter, command_id) constitutes the change ID for the intended ledger change.
  // The change ID can be used for matching the intended ledger changes with all their completions.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 4;

  // Party on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of the given party.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  string submitter = 5;

  oneof command {
    TransferOutCommand transfer_out_command = 6;
    TransferInCommand transfer_in_command = 7;
  }

  // If omitted, the participant or the committer may set a value of their choice.
  // Optional
  string submission_id = 8;
}

// Transfer-out a contract
message TransferOutCommand {
  // The ID of the contract the client wants to transfer-out.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 1;

  // The ID of the source domain
  // Must be a valid domain ID
  // Optional
  string source = 2;

  // The ID of the target domain
  // Must be a valid domain ID
  // Required
  string target = 3;
}

// Transfer-in a contract
message TransferInCommand {
  // The ID of the transfer-out event to be completed by this transfer-in.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transfer_out_id = 1;

  // The ID of the source domain
  // Must be a valid domain ID
  // Required
  string source = 2;

  // The ID of the target domain
  // Must be a valid domain ID
  // Optional
  string target = 3;
}
