// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/event.proto";
import "com/daml/ledger/api/v1/transaction_filter.proto";
import "com/daml/ledger/api/v1/transfer.proto";

option java_outer_classname = "ActiveContractsServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to initialize themselves according to a fairly recent state of the ledger without reading through all transactions that were committed since the ledger's creation.
service ActiveContractsService {

  // Returns a stream of the snapshot of the active contracts at a ledger offset.
  // If there are no active contracts, the stream returns a single response message with the offset at which the snapshot has been taken.
  // Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
  // Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
  rpc GetActiveContracts (GetActiveContractsRequest) returns (stream GetActiveContractsResponse);

}

message GetActiveContractsRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // In the Ledger API 3.0 this field will be removed.
  // Optional
  string ledger_id = 1;

  // Templates to include in the served snapshot, per party.
  // Required
  TransactionFilter filter = 2;

  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
  // Optional
  bool verbose = 3;

  // The offset at which the snapshot of the active contracts will be computed.
  // Must be no greater than the current ledger end offset.
  // Must be greater than or equal to the last pruning offset.
  // If not set the current ledger end offset will be used.
  // Optional
  string active_at_offset = 4;
}

message GetActiveContractsResponse {

  // Included only in the last message.
  // The client should start consuming the transactions endpoint with this offset.
  // The format of this field is described in ``ledger_offset.proto``.
  string offset = 1;

  // The workflow that created the contracts.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional, In the Ledger API 3.0 this field will be removed.
  string workflow_id = 2;

  // The list of contracts that were introduced by the workflow with ``workflow_id`` at the offset.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // In the Ledger API 3.0 this field will be removed.
  // This is empty for multi-domain API.
  repeated CreatedEvent active_contracts = 3;

  // Non-empty for multi-domain API.
  repeated ContractState contract_states = 4;
}

// In the entire stream of ContractState-s there can be multiple ContractState messages belong to the same contract.
message ContractState {
  oneof contract_state {
    // The contract is active in the given domain. Only one such message is expected per domain.
    ActiveContract active_contract = 1;

    // This message is only available, if the corresponding transfer-in event cannot be found before or at the
    // active_at_offset, and for the querying parties it is possible to observe this event after the active_at_offset,
    // and also to submit the corresponding transfer-in command.
    // This event typically means, that the transfer is in-flight.
    IncompleteTransferredOut incomplete_transferred_out = 2;

    // Important: this message is not indicating that the contract is active for the target domain!
    // This message is only available, if the corresponding transfer-out event cannot be found before or at the
    // active_at_offset, and for the querying parties it is possible to observe this event after the active_at_offset.
    // This event typically means, that the the source domain is lagging behind (and the corresponding transfer-out
    // already happened).
    TransferredInEvent incomplete_transferred_in = 3;
  }
}

message ActiveContract {
  // Required
  CreatedEvent created_event = 1;

  // A valid domain ID
  // Required
  string domain_id = 2;

  // Each corresponding transfer-in and transfer-out event has the same transfer_counter. This monotonically increases
  // with each transfer-out command for the same contract. Creation of the contract corresponds to transfer_counter
  // equals zero.
  // Required
  uint64 transfer_counter = 3;
}

message IncompleteTransferredOut {
  // Required
  CreatedEvent created_event = 1;

  // Required
  TransferredOutEvent transferred_out_event = 2;
}
