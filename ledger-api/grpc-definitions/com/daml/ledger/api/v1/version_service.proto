// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/experimental_features.proto";

option java_outer_classname = "VersionServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to retrieve information about the ledger API version
service VersionService {

  // Read the Ledger API version
  rpc GetLedgerApiVersion (GetLedgerApiVersionRequest) returns (GetLedgerApiVersionResponse);
}

message GetLedgerApiVersionRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string ledger_id = 1;
}

message GetLedgerApiVersionResponse {

  // The version of the ledger API.
  string version = 1;

  // The features supported by this Ledger API endpoint.
  //
  // Daml applications CAN use the feature descriptor on top of
  // version constraints on the Ledger API version to determine
  // whether a given Ledger API endpoint supports the features
  // required to run the application.
  //
  // See the feature descriptions themselves for the relation between
  // Ledger API versions and feature presence.
  FeaturesDescriptor features = 2;
}

message FeaturesDescriptor {
  // If set, then the Ledger API server supports user management.
  // It is recommended that clients query this field to gracefully adjust their behavior for
  // ledgers that do not support user management.
  UserManagementFeature user_management = 2;

  // Features under development or features that are used
  // for ledger implementation testing purposes only.
  //
  // Daml applications SHOULD not depend on these in production.
  ExperimentalFeatures experimental = 1;

  // Features related to command deduplication
  CommandDeduplicationFeatures command_deduplication = 3;
}

// Used to signal the presence of the user management service.
// Defined as a message to enable future addition of individual per-service features.
message UserManagementFeature {}

message CommandDeduplicationFeatures {
  DeduplicationPeriodSupport deduplication_period_support = 1;
  ParticipantDeduplicationSupport participant_deduplication_support = 2;
}

message DeduplicationPeriodSupport {
  enum OffsetSupport {
    OFFSET_NATIVE_SUPPORT = 0;
    OFFSET_CONVERT_TO_DURATION = 1;
    OFFSET_NOT_SUPPORTED = 2;
  }
  enum DurationSupport {
    DURATION_NATIVE_SUPPORT = 0;
    DURATION_CONVERT_TO_OFFSET = 1;
  }
  OffsetSupport offset_support = 1;
  DurationSupport duration_support = 2;
}
enum ParticipantDeduplicationSupport {
  PARTICIPANT_DEDUPLICATION_NOT_SUPPORTED = 0;
  PARTICIPANT_DEDUPLICATION_PARALLEL_ONLY = 1;
  PARTICIPANT_DEDUPLICATION_SUPPORTED = 2;
}
