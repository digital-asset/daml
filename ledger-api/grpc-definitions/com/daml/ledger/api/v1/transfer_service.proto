// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "google/protobuf/empty.proto";

option java_outer_classname = "TransferServiceServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

service TransferService {

  rpc Transfer (TransferCommand) returns (google.protobuf.Empty);

}

// Transfer-out a contract
message TransferCommand {

  // Identifier of the on-ledger workflow that this command is a part of.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 1;

  // Uniquely identifies the application or participant user that issued the command.
  // Must be a valid ApplicationIdString (as described in ``value.proto``).
  // Required unless authentication is used with a user token or a custom token specifying an application-id.
  // In that case, the token's user-id, respectively application-id, will be used for the request's application_id.
  string application_id = 2;

  // Uniquely identifies the command.
  // The triple (application_id, party + act_as, command_id) constitutes the change ID for the intended ledger change,
  // where party + act_as is interpreted as a set of party names.
  // The change ID can be used for matching the intended ledger changes with all their completions.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 3;

  // Set of parties on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of each of the given parties.
  // This field supersedes the ``party`` field. The effective set of parties on whose behalf the command
  // should be executed is the union of all parties listed in ``party`` and ``act_as``, which must be non-empty.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Optional
  repeated string act_as = 4;

  oneof transfer_command {
    TransferInCommand transfer_in = 5;
    TransferOutCommand transfer_out = 6;
  }

  // A unique identifier to distinguish completions for different submissions with the same change ID.
  // Typically a random UUID. Applications are expected to use a different UUID for each retry of a submission
  // with the same change ID.
  // Must be a valid LedgerString (as described in ``value.proto``).
  //
  // If omitted, the participant or the committer may set a value of their choice.
  // Optional
  string submission_id = 7;
}

// Transfer-out a contract
message TransferOutCommand {
  // The ID of the contract the client wants to transfer-out.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 1;

  // The ID of the source domain
  // Must be a valid domain ID
  // Optional
  string source = 2;

  // The ID of the target domain
  // Must be a valid domain ID
  // Required
  string target = 3;
}

// Transfer-in a contract
message TransferInCommand {
  // The ID of the transfer out event. This needs to be used as an input for a transfer in TransferCommand.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transfer_out_id = 1;

  // The ID of the source domain
  // Must be a valid domain ID
  // Required
  string source = 2;

  // The ID of the target domain
  // Must be a valid domain ID
  // Optional
  string target = 3;
}
