// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

import "google/protobuf/field_mask.proto";

option java_outer_classname = "IdentityProviderServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";

// The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
// (1) ``Optional`` denoting the client may leave the field unset when sending a request.
// (2) ``Required`` denoting the client must set the field to a non-default value when sending a request.
//
// An identity provider resource, once it has been created, can be modified.
// In order to update the properties represented by the ``IdentityProvider`` message use the ``UpdateIdentityProvider`` RPC.
// The only fields that can be modified are those marked as ``Modifiable``.
service IdentityProviderService {
  rpc CreateIdentityProvider (CreateIdentityProviderRequest) returns (CreateIdentityProviderResponse);

  rpc GetIdentityProvider (GetIdentityProviderRequest) returns (GetIdentityProviderResponse);

  rpc ListIdentityProviders (ListIdentityProvidersRequest) returns (ListIdentityProvidersResponse);

  rpc UpdateIdentityProvider (UpdateIdentityProviderRequest) returns (UpdateIdentityProviderResponse);

  rpc DeleteIdentityProvider (DeleteIdentityProviderRequest) returns (DeleteIdentityProviderResponse);
}

message IdentityProvider {
  // The identity provider identifier, which must be a non-empty string of at most 128
  // characters that are either lowercase alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
  // Required
  string id = 1;

  // When set, then the user identified by the identity provider is denied all access to the Ledger API.
  // Otherwise, the user identified by the identity provider has access to the Ledger API as per the user's rights.
  // Optional,
  // Modifiable
  bool is_deactivated = 2;

  // Specifies the issuer of the JWT token that should be used in the "iss" claim of a JWT token to instruct the
  // participant node to use this authentication domain to authenticate the token.
  // The issuer value is a case sensitive URL using the https scheme that contains scheme, host,
  // and optionally, port number and path components and no query or fragment components.
  // Required
  // Modifiable
  string issuer = 3;

  // The JWKS (JSON Web Key Set) URL.
  // The Ledger API will expect all tokens to be signed with RS256 (RSA Signature with SHA-256) with the public
  // key loaded from the given URL.
  // Required
  // Modifiable
  string jwks_uri = 4;
}


message CreateIdentityProviderRequest {
  IdentityProvider identity_provider = 1;
}

message CreateIdentityProviderResponse {
  IdentityProvider identity_provider = 1;
}

message GetIdentityProviderRequest {
  string identity_provider_id = 1;
}

message GetIdentityProviderResponse {
  IdentityProvider identity_provider = 1;
}

message ListIdentityProvidersRequest {
  // Pagination token to determine the specific page to fetch.
  // Leave empty to fetch the first page.
  // Optional
  string page_token = 1;

  // Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
  // If 0, the server will decide the number of results to be returned.
  // Optional
  int32 page_size = 2;
}

message ListIdentityProvidersResponse {
  repeated IdentityProvider identity_providers = 1;

  // Pagination token to retrieve the next page.
  // Empty, if there are no further results.
  string next_page_token = 2;
}

message UpdateIdentityProviderRequest {
  // The identity provider to update.
  // Required,
  // Modifiable
  IdentityProvider identity_provider = 1;

  // An update mask specifies how and which properties of the ``IdentityProvider`` message are to be updated.
  // An update mask consists of a set of update paths.
  // A valid update path points to a field or a subfield relative to the ``IdentityProvider`` message.
  // A valid update mask must:
  // (1) contain at least one update path,
  // (2) contain only valid update paths.
  // Fields that can be updated are marked as ``Modifiable``.
  // An update path can also point to a non-``Modifiable`` fields such as 'id' and 'metadata.resource_version'
  // because they are used:
  // (1) to identify the user resource subject to the update,
  // (2) for concurrent change control.
  // For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
  // Required
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateIdentityProviderResponse {
  // Updated identity provider
  IdentityProvider user = 1;
}

message DeleteIdentityProviderRequest {
  // The identity provider to delete.
  // Required
  string identity_provider_id = 1;
}

// Does not (yet) contain any data.
message DeleteIdentityProviderResponse {

}
