// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

option java_outer_classname = "ParticipantPruningServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";

// Status: experimental interface, will change before it is deemed production
// ready

// Prunes/truncates the "oldest" transactions from the participant (the participant Ledger Api Server plus any other
// participant-local state) by removing a portion of the ledger in such a way that the set of future, allowed
// commands are not affected.
//
// This enables:
// 1. keeping the "inactive" portion of the ledger to a manageable size and
// 2. removing inactive state to honor the right to be forgotten.
service ParticipantPruningService {

  // Prune the ledger specifying the offset before and at which ledger transactions should be removed. Only returns when
  // the potentially long-running prune request ends successfully or with one of the following errors:
  // - ``INVALID_ARGUMENT``: if the payload, particularly the offset is malformed or missing
  // - ``UNIMPLEMENTED``: if the participant is based on a ledger that has not implemented pruning
  // - ``INTERNAL``: if the participant has encountered a failure and has potentially applied pruning partially. Such cases
  //   warrant verifying the participant health before retrying the prune with the same (or a larger, valid) offset.
  //   Successful retries after such errors ensure that different components reach a consistent pruning state.
  //
  // Other GRPC errors can be returned depending on the type of condition preventing a prune:
  // - ``OUT_OF_RANGE``: if the participant is not yet able to prune at the specified offset, but without user intervention
  //   the offset will eventually be usable for pruning.
  // - ``FAILED_PRECONDITION`` if some sort of user intervention is required before pruning can proceed at the specified
  //   offset.
  rpc Prune (PruneRequest) returns (PruneResponse);

}

message PruneRequest {
  // Inclusive offset up to and at which the ledger is to be pruned.
  string prune_up_to = 1;

  // Unique submission identifier.
  // Optional, defaults to a random identifier, used for logging.
  string submission_id = 2;
}

message PruneResponse {
  // Empty for now, but may contain fields in the future
}
