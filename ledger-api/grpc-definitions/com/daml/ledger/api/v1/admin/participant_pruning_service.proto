// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

option java_outer_classname = "ParticipantPruningServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";

// Prunes/truncates the "oldest" transactions from the participant (the participant Ledger Api Server plus any other
// participant-local state) by removing a portion of the ledger in such a way that the set of future, allowed
// commands are not affected.
//
// This enables:
// 1. keeping the "inactive" portion of the ledger to a manageable size and
// 2. removing inactive state to honor the right to be forgotten.
service ParticipantPruningService {

  // Prune the ledger specifying the offset before and at which ledger transactions should be removed. Only returns when
  // the potentially long-running prune request ends successfully or with one of the following errors:
  // - ``INVALID_ARGUMENT``: if the payload, particularly the offset is malformed or missing
  // - ``UNIMPLEMENTED``: if the participant is based on a ledger that has not implemented pruning
  // - ``INTERNAL``: if the participant has encountered a failure and has potentially applied pruning partially. Such cases
  //   warrant verifying the participant health before retrying the prune with the same (or a larger, valid) offset.
  //   Successful retries after such errors ensure that different components reach a consistent pruning state.
  // - ``FAILED_PRECONDITION``: if the participant is not yet able to prune at the specified offset.
  //
  rpc Prune (PruneRequest) returns (PruneResponse);
}

message PruneRequest {
  // Inclusive offset up to which the ledger is to be pruned.
  // By default the following data is pruned:
  //   1. All normal and divulged contracts that have been archived before
  //   `prune_up_to`.
  //   2. All transaction events and completions before `prune_up_to`
  string prune_up_to = 1;

  // Unique submission identifier.
  // Optional, defaults to a random identifier, used for logging.
  string submission_id = 2;

  // Prune all immediately and retroactively divulged contracts created before `prune_up_to`
  // independent of whether they were archived before `prune_up_to`. Useful to avoid leaking
  // storage on participant nodes that can see a divulged contract but not its archival.
  //
  // Application developers SHOULD write their Daml applications
  // such that they do not rely on divulged contracts; i.e., no warnings from
  // using divulged contracts as inputs to transactions are emitted.
  //
  // Participant node operators SHOULD set the `prune_all_divulged_contracts` flag to avoid leaking
  // storage due to accumulating unarchived divulged contracts PROVIDED that:
  //   1. no application using this participant node relies on divulgence OR
  //   2. divulged contracts on which applications rely have been re-divulged after the `prune_up_to` offset.
  bool prune_all_divulged_contracts = 3;
}

message PruneResponse {
  // Empty for now, but may contain fields in the future
}
