// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

option java_outer_classname = "UserManagementServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";


// Service to manage users and their rights for interacting with the Ledger API
// served by a participant node.
//
// The authorization rules for its RPCs are specified on the ``<RpcName>Request``
// messages as boolean expressions over these two facts:
// (1) ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
// (2) ``IsAuthenticatedUser(uid)`` denoting whether ``uid`` is the empty string or equal to the id of the authenticated user.
//
service UserManagementService {

    // Create a new user, failing if it already exists.
    rpc CreateUser (CreateUserRequest) returns (User);

    // Get the user data of a specific user or the authenticated user.
    rpc GetUser (GetUserRequest) returns (User);

    // Delete an existing user and all its rights.
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // List all existing users.
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse);

    // Grant rights to a user.
    rpc GrantUserRights (GrantUserRightsRequest) returns (GrantUserRightsResponse);

    // Revoke rights from a user.
    rpc RevokeUserRights (RevokeUserRightsRequest) returns (RevokeUserRightsResponse);

    // List the set of all rights granted to a user.
    rpc ListUserRights (ListUserRightsRequest) returns (ListUserRightsResponse);
}


// Users and rights
///////////////////

// Users are used to dynamically manage the rights given to Daml applications.
// They are stored and managed per participant node.
//
// Read the :doc:`Authorization documentation </app-dev/authorization>` to learn more.
message User {
    // The user identifier, which must be a non-empty string of at most 128
    // characters that are either lowercase alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
    string id = 1;

    // The primary party as which this user reads and acts by default on the ledger
    // *provided* it has the corresponding ``CanReadAs(primary_party)`` or
    // ``CanActAs(primary_party)`` rights.
    // Ledger API clients SHOULD set this field to a non-empty value for all users to
    // enable the users to act on the ledger using their own Daml party.
    // Users for participant administrators MAY have an associated primary party.
    string primary_party = 2;
}


// A right granted to a user.
message Right {
    // The right to administrate the participant node.
    message ParticipantAdmin {}

    message CanActAs {
        // The right to authorize commands for this party.
        string party = 1;
    }

    message CanReadAs {
        // The right to read ledger data visible to this party.
        string party = 1;
    }

    oneof kind {
        // The user can administrate the participant node.
        ParticipantAdmin participant_admin = 1;
        // The user can act as a specific party.
        CanActAs can_act_as = 2;
        // The user can read ledger data visible to a specific party.
        CanReadAs can_read_as = 3;
    }
}


// RPC requests and responses
/////////////////////////////

// Required authorization: ``HasRight(ParticipantAdmin)``
message CreateUserRequest {
    // The user to create.
    User user = 1;

    // The rights to be assigned to the user upon creation,
    // which SHOULD include appropriate rights for the ``user.primary_party``.
    repeated Right rights = 2;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message GetUserRequest {
    // The user whose data to retrieve.
    // If set to empty string (the default), then the data for the authenticated user will be retrieved.
    string user_id = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message DeleteUserRequest {
    // The user to delete.
    string user_id = 1;
}

// Does not (yet) contain any data.
message DeleteUserResponse {
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message ListUsersRequest {
}

message ListUsersResponse {
    // All users of the participant node.
    repeated User users = 1;
}

// Add the rights to the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message GrantUserRightsRequest {
    // The user to whom to grant rights.
    string user_id = 1;

    // The rights to grant.
    repeated Right rights = 2;
}

message GrantUserRightsResponse {
    // The rights that were newly granted by the request.
    repeated Right newly_granted_rights = 1;
}

// Remove the rights from the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message RevokeUserRightsRequest {
    // The user from whom to revoke rights.
    string user_id = 1;

    // The rights to revoke.
    repeated Right rights = 2;
}

message RevokeUserRightsResponse {
    // The rights that were actually revoked by the request.
    repeated Right newly_revoked_rights = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message ListUserRightsRequest {
    // The user for which to list the rights.
    // If set to empty string (the default), then the rights for the authenticated user will be listed.
    string user_id = 1;

    // TODO (i12052): add pagination following https://cloud.google.com/apis/design/design_patterns#list_pagination
}

message ListUserRightsResponse {
    // All rights of the user.
    repeated Right rights = 1;
}
