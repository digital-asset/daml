// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

import "com/daml/ledger/api/v1/admin/object_meta.proto";
import "google/protobuf/field_mask.proto";

option java_outer_classname = "UserManagementServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";


// Service to manage users and their rights for interacting with the Ledger API
// served by a participant node.
//
// The authorization rules for its RPCs are specified on the ``<RpcName>Request``
// messages as boolean expressions over these two facts:
// (1) ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
// (2) ``IsAuthenticatedUser(uid)`` denoting whether ``uid`` is the empty string or equal to the id of the authenticated user.
//
// For request messages (and their sub-messages) their fields are marked with either of these two annotations:
// (1) 'Optional' denoting the client may leave the field unset (or equivalently set to the default value) when sending a request.
// (2) 'Required' denoting the client must set the field to a non-default value when sending a request.
//
// A user resource consists of:
// (1) its set of fundamental properties represented by the 'User' message,
// (2) a set of user rights, where each right is represented by the 'Right' message.
// Once the user has been created, you can modify it as follows:
// (1) In order to update the user's fundamental properties use UpdateUser RPC. The fields you can update this way are marked with 'Modifiable' annotation, i.e. you can use 'Modifiable' field's name in an update masks' path.
// (2) In order to grant or revoke user rights use 'GrantRights' and 'RevokeRights' RPC.
//
// TODO pbatko: Document the same for PartyM
// TODO pbatko: Add conformance tests verifying participant rejects invalid update masks: 1) paths that contain read-only items, 2) paths that contain non-existent items, 3) empty paths

// TODO pbatko: Document in proto that no-up updates are invalid
service UserManagementService {

    // Create a new user.
    // Errors:
    // - ``ALREADY_EXISTS``: if the user already exists
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);

    // Get the user data of a specific user or the authenticated user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GetUser (GetUserRequest) returns (GetUserResponse);

    // Updates fundamental properties of a user resource.
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);

    // Delete an existing user and all its rights.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // List all existing users.
    // Errors:
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse);

    // Grant rights to a user.
    // TODO pbatko: Document whether the updates to user rights (grant/revoke) changes the corresponding user resource internal version
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GrantUserRights (GrantUserRightsRequest) returns (GrantUserRightsResponse);

    // Revoke rights from a user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc RevokeUserRights (RevokeUserRightsRequest) returns (RevokeUserRightsResponse);

    // List the set of all rights granted to a user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUserRights (ListUserRightsRequest) returns (ListUserRightsResponse);
}


// Users and rights
///////////////////

// Users are used to dynamically manage the rights given to Daml applications.
// They are stored and managed per participant node.
//
// Read the :doc:`Authorization documentation </app-dev/authorization>` to learn more.
message User {
    // The user identifier, which must be a non-empty string of at most 128
    // characters that are either lowercase alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
    //
    // Required
    string id = 1;

    // The primary party as which this user reads and acts by default on the ledger
    // *provided* it has the corresponding ``CanReadAs(primary_party)`` or
    // ``CanActAs(primary_party)`` rights.
    // Ledger API clients SHOULD set this field to a non-empty value for all users to
    // enable the users to act on the ledger using their own Daml party.
    // Users for participant administrators MAY have an associated primary party.
    //
    // Optional
    // Modifiable
    string primary_party = 2;

    // When set, then the user is denied all access to the Ledger API.
    // Otherwise, the user has access to the Ledger API as per the user's rights.
    //
    // Optional
    // Modifiable
    bool is_deactivated = 3;

    // The metadata of this user.
    // Note that its ``metadata.resource_version`` tracks both changes to this user and changes to this user's rights.
    // TODO pbatko: Add a conformance test that verifies participant rejects requests where this field is
    // TODO         listed explicitly in the update mask and its value is set to None (i.e. client is attempting to delete it)
    // Optional
    // Modifiable
    ObjectMeta metadata = 4;
}


// A right granted to a user.
message Right {
    // The right to administrate the participant node.
    message ParticipantAdmin {}

    message CanActAs {
        // The right to authorize commands for this party.
        string party = 1;
    }

    message CanReadAs {
        // The right to read ledger data visible to this party.
        string party = 1;
    }

    // TODO pbatko: Make sure, in conformance tests, that the default value (empty) is rejected
    // Required
    oneof kind {
        // The user can administrate the participant node.
        ParticipantAdmin participant_admin = 1;
        // The user can act as a specific party.
        CanActAs can_act_as = 2;
        // The user can read ledger data visible to a specific party.
        CanReadAs can_read_as = 3;
    }
}


// RPC requests and responses
/////////////////////////////

// Required authorization: ``HasRight(ParticipantAdmin)``
message CreateUserRequest {
    // The user to create.
    // Required
    User user = 1;

    // The rights to be assigned to the user upon creation,
    // which SHOULD include appropriate rights for the ``user.primary_party``.
    //
    // TODO pbatko: Make sure, in conformance tests, that empty rights are that the default value (empty) is accepted. Because we allow deleting all rights from a user so it makes little sense to disallow at creation time
    // Optional
    repeated Right rights = 2;
}

message CreateUserResponse {
    // Created user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message GetUserRequest {
    // The user whose data to retrieve.
    // If set to empty string (the default), then the data for the authenticated user will be retrieved.
    // Required
    string user_id = 1;
}

message GetUserResponse {
    // Retrieved user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message UpdateUserRequest {
    // The user to update.
    //
    // TODO pbatko: Make sure, in conformance tests, that the default value (none) is rejected
    // Required
    // Modifiable
    User user = 1;

    // The update mask which specifies a subset of the fields of the User message to be updated.
    // At least one field must be specified in the update mask.
    // Only fields marked with 'Modifiable' annotation can be used the update mask.
    // Example update mask's paths: 'user.metadata.annotations', 'user.primary_party'.
    //
    // In order to update a field to a non-default value you can:
    // (1) either specify its full path, e.g. 'user.is_deactivated' or
    // (2) use a shortcut notation, e.g. 'user', to recursively merge the values of the specified nested message.
    // In order to update a field to its default value you must specify its full path, e.g. 'user.is_deactivated'.
    //
    // Required
    google.protobuf.FieldMask update_mask = 2;
}

message UpdateUserResponse {
    // Updated user
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message DeleteUserRequest {
    // The user to delete.
    // Required
    string user_id = 1;
}

// Does not (yet) contain any data.
message DeleteUserResponse {
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message ListUsersRequest {

    // Pagination token to determine the specific page to fetch.
    // Leave empty to fetch the first page.
    // Optional
    string page_token = 2;

    // Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
    // If 0, the server will decide the number of results to be returned.
    // Optional
    int32 page_size = 3;

}

message ListUsersResponse {
    // A subset of users of the participant node that fit into this page.
    repeated User users = 1;

    // Pagination token to retrieve the next page.
    // Empty, if there are no further results.
    string next_page_token = 2;
}

// Add the rights to the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message GrantUserRightsRequest {
    // The user to whom to grant rights.
    // Required
    string user_id = 1;

    // The rights to grant.
    //
    // TODO pbatko: If this field is required, than we should reject attempting to grant 0 rights. Ensure in conformance tests
    // Required
    repeated Right rights = 2;
}

message GrantUserRightsResponse {
    // The rights that were newly granted by the request.
    repeated Right newly_granted_rights = 1;
}

// Remove the rights from the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message RevokeUserRightsRequest {
    // The user from whom to revoke rights.
    // Required
    string user_id = 1;

    // The rights to revoke.
    //
    // TODO pbatko: If this field is required, than we must reject attempting to revoke 0 rights. Ensure in conformance tests
    // Required
    repeated Right rights = 2;
}

message RevokeUserRightsResponse {
    // The rights that were actually revoked by the request.
    repeated Right newly_revoked_rights = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message ListUserRightsRequest {
    // The user for which to list the rights.
    // If set to empty string (the default), then the rights for the authenticated user will be listed.
    // Required
    string user_id = 1;

    // TODO (i12052): add pagination following https://cloud.google.com/apis/design/design_patterns#list_pagination
}

message ListUserRightsResponse {
    // All rights of the user.
    repeated Right rights = 1;
}
