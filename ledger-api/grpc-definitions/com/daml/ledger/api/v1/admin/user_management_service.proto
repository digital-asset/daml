// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

import "com/daml/ledger/api/v1/admin/object_meta.proto";
import "google/protobuf/field_mask.proto";

option java_outer_classname = "UserManagementServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";


// Service to manage users and their rights for interacting with the Ledger API
// served by a participant node.
//
// The authorization rules for its RPCs are specified on the ``<RpcName>Request``
// messages as boolean expressions over these two facts:
// (1) ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
// (2) ``IsAuthenticatedUser(uid)`` denoting whether ``uid`` is the empty string or equal to the id of the authenticated user.
//
// The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
// (1) ``Optional`` denoting the client may leave the field unset when sending a request.
// (2) ``Required`` denoting the client must set the field to a non-default value when sending a request.
//
// A user resource consists of:
// (1) a set of properties represented by the ``User`` message,
// (2) a set of user rights, where each right is represented by the ``Right`` message.
//
// A user resource, once it has been created, can be modified.
// In order to update the properties represented by the ``User`` message use the ``UpdateUser`` RPC. The only fields that can be modified are those marked as ``Modifiable``.
// In order to grant or revoke user rights use ``GrantRights' and ``RevokeRights`` RPCs.
service UserManagementService {

    // Create a new user.
    // Errors:
    // - ``ALREADY_EXISTS``: if the user already exists
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);

    // Get the user data of a specific user or the authenticated user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GetUser (GetUserRequest) returns (GetUserResponse);

    // Update selected modifiable attribute of a user resource described by the ``User`` message.
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);

    // Delete an existing user and all its rights.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // List all existing users.
    // Errors:
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse);

    // Grant rights to a user.
    // NOTE: Granting rights does not affect the resource version of the corresponding user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GrantUserRights (GrantUserRightsRequest) returns (GrantUserRightsResponse);

    // Revoke rights from a user.
    // NOTE: Revoking rights does not affect the resource version of the corresponding user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc RevokeUserRights (RevokeUserRightsRequest) returns (RevokeUserRightsResponse);

    // List the set of all rights granted to a user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUserRights (ListUserRightsRequest) returns (ListUserRightsResponse);
}


// Users and rights
///////////////////

// Users are used to dynamically manage the rights given to Daml applications.
// They are stored and managed per participant node.
//
// Read the :doc:`Authorization documentation </app-dev/authorization>` to learn more.
message User {
    // The user identifier, which must be a non-empty string of at most 128
    // characters that are either lowercase alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
    //
    // Required
    string id = 1;

    // The primary party as which this user reads and acts by default on the ledger
    // *provided* it has the corresponding ``CanReadAs(primary_party)`` or
    // ``CanActAs(primary_party)`` rights.
    // Ledger API clients SHOULD set this field to a non-empty value for all users to
    // enable the users to act on the ledger using their own Daml party.
    // Users for participant administrators MAY have an associated primary party.
    //
    // Optional
    // Modifiable
    string primary_party = 2;

    // When set, then the user is denied all access to the Ledger API.
    // Otherwise, the user has access to the Ledger API as per the user's rights.
    //
    // Optional
    // Modifiable
    bool is_deactivated = 3;

    // The metadata of this user.
    // Note that its ``metadata.resource_version`` tracks changes to the properties described by the ``User`` message and not this user's rights.
    //
    // Optional
    // Modifiable
    ObjectMeta metadata = 4;
}


// A right granted to a user.
message Right {
    // The right to administrate the participant node.
    message ParticipantAdmin {}

    message CanActAs {
        // The right to authorize commands for this party.
        string party = 1;
    }

    message CanReadAs {
        // The right to read ledger data visible to this party.
        string party = 1;
    }

    // TODO um-for-hub: Test the API behavior when user right is of kind empty.
    // Required
    oneof kind {
        // The user can administrate the participant node.
        ParticipantAdmin participant_admin = 1;
        // The user can act as a specific party.
        CanActAs can_act_as = 2;
        // The user can read ledger data visible to a specific party.
        CanReadAs can_read_as = 3;
    }
}


// RPC requests and responses
/////////////////////////////

// Required authorization: ``HasRight(ParticipantAdmin)``
message CreateUserRequest {
    // The user to create.
    // Required
    User user = 1;

    // The rights to be assigned to the user upon creation,
    // which SHOULD include appropriate rights for the ``user.primary_party``.
    //
    // TODO um-for-hub: Make sure empty rights are a valid value
    // Optional
    repeated Right rights = 2;
}

message CreateUserResponse {
    // Created user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message GetUserRequest {
    // The user whose data to retrieve.
    // If set to empty string (the default), then the data for the authenticated user will be retrieved.
    // Required
    string user_id = 1;
}

message GetUserResponse {
    // Retrieved user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message UpdateUserRequest {
    // The user to update.
    //
    // Required
    // Modifiable
    User user = 1;

    // An update mask specifies haw and which properties of the ``User`` message are to be updated.
    //
    // An update mask consists of a set of update paths.
    // An update path consists of a field path and an optional update modifier delimited by the '!' character.
    //
    // There are two valid update modifiers:
    // (1) ``replace`` - replaces the current value with the new value specified in the request,
    // (2) ``merge`` - merges the current value with the new non-default value specified in the request.
    // The update modifier can be omitted and the default behavior is:
    // - equivalent to the ``merge`` modifier when the update path points to a sub-message field,
    // - equivalent to the ``merge`` modifier when the update path points to a non sub-message field, except
    //   when the new value is the default value and then it is equivalent to the ``replace`` modifier.
    //
    // A valid update mask must:
    // - contain at least one update path,
    // - contain only valid update paths.
    // A valid update path must:
    // - must point to a modifiable field,
    // - use a valid update modifier or omit it altogether,
    // - together with the new value provided in the request, must resolve in a non-empty update specification.
    // An example of an empty update specification is an update path with the explicit ``merge`` modifier
    // if the new value is the default value for the specified field.
    //
    // Examples of update paths: 'user.primary_party', 'user.metadata.annotations!replace', 'user!merge'.
    //
    // For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
    // For similar Ledger API see ``com.daml.ledger.api.v1.admin.UpdatePartyDetailsRequest``.
    //
    // Required
    google.protobuf.FieldMask update_mask = 2;
}

message UpdateUserResponse {
    // Updated user
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message DeleteUserRequest {
    // The user to delete.
    // Required
    string user_id = 1;
}

// Does not (yet) contain any data.
message DeleteUserResponse {
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message ListUsersRequest {

    // Pagination token to determine the specific page to fetch.
    // Leave empty to fetch the first page.
    // Optional
    string page_token = 2;

    // Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
    // If 0, the server will decide the number of results to be returned.
    // Optional
    int32 page_size = 3;

}

message ListUsersResponse {
    // A subset of users of the participant node that fit into this page.
    repeated User users = 1;

    // Pagination token to retrieve the next page.
    // Empty, if there are no further results.
    string next_page_token = 2;
}

// Add the rights to the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message GrantUserRightsRequest {
    // The user to whom to grant rights.
    // Required
    string user_id = 1;

    // The rights to grant.
    //
    // TODO um-for-hub: If this field is required, than we should reject attempting to grant 0 rights. Ensure in conformance tests. Alternatively change to 'Optional'
    // Required
    repeated Right rights = 2;
}

message GrantUserRightsResponse {
    // The rights that were newly granted by the request.
    repeated Right newly_granted_rights = 1;
}

// Remove the rights from the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message RevokeUserRightsRequest {
    // The user from whom to revoke rights.
    // Required
    string user_id = 1;

    // The rights to revoke.
    //
    // TODO um-for-hub: If this field is required, than we must reject attempting to revoke 0 rights. Ensure in conformance tests. Alternatively change to 'Optional'
    // Required
    repeated Right rights = 2;
}

message RevokeUserRightsResponse {
    // The rights that were actually revoked by the request.
    repeated Right newly_revoked_rights = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message ListUserRightsRequest {
    // The user for which to list the rights.
    // If set to empty string (the default), then the rights for the authenticated user will be listed.
    // Required
    string user_id = 1;

    // TODO (i12052): add pagination following https://cloud.google.com/apis/design/design_patterns#list_pagination
}

message ListUserRightsResponse {
    // All rights of the user.
    repeated Right rights = 1;
}
