
// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

import "com/daml/ledger/api/v1/admin/object_meta.proto";
import "google/protobuf/field_mask.proto";

option java_outer_classname = "PartyManagementServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";

// We use 'backing participant' to refer to this specific participant in the methods of this API.
//
// Allows inspecting the party management state of the ledger known to the backing participant
// and managing participant-local party metadata.
//
// The authorization rules for its RPCs are specified on the ``<RpcName>Request``
// messages as boolean expressions over the fact ``HasRight(r)`` denoting whether the authenticated user has right ``r``.
//
// TODO pbatko: Explain 'Optional', 'Required', 'Modifiable'
// TODO pbatko: Document in proto that no-up updates are invalid
// TODO um-for-hub major: Document that "!" is a special character in update paths
service PartyManagementService {

  // Return the identifier of the backing participant.
  // All horizontally scaled replicas should return the same id.
  // daml-on-kv-ledger: returns an identifier supplied on command line at launch time
  // canton: returns globally unique identifier of the backing participant
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  rpc GetParticipantId (GetParticipantIdRequest) returns (GetParticipantIdResponse);

  // Get the party details of the given parties. Only known parties will be
  // returned in the list.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  rpc GetParties (GetPartiesRequest) returns (GetPartiesResponse);

  // List the parties known by the backing participant.
  // The list returned contains parties whose ledger access is facilitated by
  // backing participant and the ones maintained elsewhere.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  rpc ListKnownParties (ListKnownPartiesRequest) returns (ListKnownPartiesResponse);

  // Allocates a new party on a ledger and adds it to the set managed by the backing participant.
  // Caller specifies a party identifier suggestion, the actual identifier
  // allocated might be different and is implementation specific.
  // Caller can specify party metadata that is stored locally on the backing participant.
  // This call may:
  // - Succeed, in which case the actual allocated identifier is visible in
  //   the response.
  // - Respond with a gRPC error
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``UNIMPLEMENTED``: if synchronous party allocation is not supported by the backing participant
  // - ``DEADLINE_EXCEEDED``: if the request times out
  // - ``INVALID_ARGUMENT``: if the provided hint and/or display name is invalid on the given ledger (see below).
  // daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
  // the consensus layer and call rejected if the identifier is already present.
  // canton: completely different globally unique identifier is allocated.
  // Behind the scenes calls to an internal protocol are made. As that protocol
  // is richer than the surface protocol, the arguments take implicit values
  // The party identifier suggestion must be a valid party name. Party names are required to be non-empty US-ASCII strings built from letters, digits, space,
  // colon, minus and underscore limited to 255 chars
  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);

  // Updates participant-local information about a party.
  rpc UpdatePartyDetails (UpdatePartyDetailsRequest) returns (UpdatePartyDetailsResponse);
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message GetParticipantIdRequest {
}

message GetParticipantIdResponse {

  // Identifier of the participant, which SHOULD be globally unique.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  string participant_id = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message GetPartiesRequest {

  // The stable, unique identifier of the Daml parties.
  // Must be valid PartyIdStrings (as described in ``value.proto``).
  // Required
  repeated string parties = 1;
}

message GetPartiesResponse {

  // The details of the requested Daml parties by the participant, if known.
  // The party details may not be in the same order as requested.
  // Required
  repeated PartyDetails party_details = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message ListKnownPartiesRequest {
}

message ListKnownPartiesResponse {

  // The details of all Daml parties known by the participant.
  // Required
  repeated PartyDetails party_details = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message AllocatePartyRequest {

  // A hint to the backing participant which party ID to allocate. It can be
  // ignored.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Optional
  string party_id_hint = 1;

  // Human-readable name of the party to be added to the participant. It doesn't
  // have to be unique.
  // Use of this field is discouraged. Use ``local_metadata`` instead.
  // Optional
  string display_name = 2;

  // Participant-local metadata to be stored in the ``PartyDetails`` of this newly allocated party.
  // Optional
  ObjectMeta local_metadata = 3;
}

message AllocatePartyResponse {

  PartyDetails party_details = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message UpdatePartyDetailsRequest {
  // Party to be updated
  //
  // Required
  // Modifiable
  PartyDetails party_details = 1;

  // Specifies the fields of the party details to be updated.
  // At least one field must be specified, e.g. 'party_details.local_metadata'.
  //
  // Required
  google.protobuf.FieldMask update_mask = 2;
}

message UpdatePartyDetailsResponse {
  // Updated party details
  PartyDetails party_details = 1;
}

message PartyDetails {

  // The stable unique identifier of a Daml party.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  //
  // Required
  string party = 1;

  // Human readable name associated with the party at allocation time.
  // Caution, it might not be unique.
  // Use of this field is discouraged. Use the `local_metadata` field instead.
  //
  // Optional
  string display_name = 2;

  // true if party is hosted by the backing participant.
  //
  // Optional
  bool is_local = 3;

  // Participant-local metadata of this party.
  //
  // Optional
  // Modifiable
  ObjectMeta local_metadata = 4;
}
