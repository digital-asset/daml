// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/event.proto";
import "com/daml/ledger/api/v1/trace_context.proto";

import "google/protobuf/timestamp.proto";


option java_outer_classname = "TransactionOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Complete view of an on-ledger transaction.
message TransactionTree {

  // Assigned by the server. Useful for correlating logs.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transaction_id = 1;

  // The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string command_id = 2;

  // The workflow ID used in command submission. Only set if the ``workflow_id`` for the command was set.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 3;

  // Ledger effective time.
  // Required
  google.protobuf.Timestamp effective_at = 4;

  // field ID 5 deprecated

  // The absolute offset. The format of this field is described in ``ledger_offset.proto``.
  // Required
  string offset = 6;

  // Changes to the ledger that were caused by this transaction. Nodes of the transaction tree.
  // Each key be a valid LedgerString (as describe in ``value.proto``).
  // Required
  map<string, TreeEvent> events_by_id = 7;

  // Roots of the transaction tree.
  // Each element must be a valid LedgerString (as describe in ``value.proto``).
  // The elements are in the same order as the commands in the
  // corresponding Commands object that triggerd this transaction.
  // Required
  repeated string root_event_ids = 8;

  // Zipkin trace context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;

}

// Each tree event message type below contains a ``witness_parties`` field which
// indicates the subset of the requested parties that can see the event
// in question.
//
// Note that transaction trees might contain events with
// _no_ witness parties, which were included simply because they were
// children of events which have witnesses.
message TreeEvent {
    oneof kind {
        CreatedEvent created = 1;
        ExercisedEvent exercised = 2;
    }
}

// Filtered view of an on-ledger transaction.
message Transaction {

  // Assigned by the server. Useful for correlating logs.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transaction_id = 1;

  // The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string command_id = 2;

  // The workflow ID used in command submission.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 3;

  // Ledger effective time.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  google.protobuf.Timestamp effective_at = 4;

  // The collection of events.
  // Only contains ``CreatedEvent`` or ``ArchivedEvent``.
  // Required
  repeated Event events = 5;

  // The absolute offset. The format of this field is described in ``ledger_offset.proto``.
  // Required
  string offset = 6;

  // Zipkin trace context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;

}
