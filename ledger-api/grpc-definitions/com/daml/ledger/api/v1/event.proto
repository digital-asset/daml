// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/contract_metadata.proto";
import "com/daml/ledger/api/v1/value.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";


option java_outer_classname = "EventOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Records that a contract has been created, and choices may now be exercised on it.
message CreatedEvent {

  // The ID of this particular event.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string event_id = 1;

  // The ID of the created contract.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  // The template of the created contract.
  // Required
  Identifier template_id = 3;

  // The key of the created contract.
  // This will be set if and only if ``create_arguments`` is set and ``template_id`` defines a contract key.
  // Optional
  Value contract_key = 7;

  // The arguments that have been used to create the contract.
  // Set either:
  //   - if there was a party, which is in the ``witness_parties`` of this event,
  //     and for which an ``InclusiveFilters`` exists with the ``template_id`` of this event
  //     among the ``template_ids``,
  //   - or if there was a party, which is in the ``witness_parties`` of this event,
  //     and for which a wildcard filter exists (``Filters`` without ``InclusiveFilters``,
  //     or with an ``InclusiveFilters`` with empty ``template_ids`` and empty ``interface_filters``).
  // Optional
  Record create_arguments = 4;

  // The parties that are notified of this event. When a ``CreatedEvent``
  // is returned as part of a transaction tree, this will include all
  // the parties specified in the ``TransactionFilter`` that are informees
  // of the event. If served as part of a flat transaction those will
  // be limited to all parties specified in the ``TransactionFilter`` that
  // are stakeholders of the contract (i.e. either signatories or observers).
  // Required
  repeated string witness_parties = 5;

  // The signatories for this contract as specified by the template.
  // Required
  repeated string signatories = 8;

  // The observers for this contract as specified explicitly by the template or implicitly as choice controllers.
  // This field never contains parties that are signatories.
  // Required
  repeated string observers = 9;

  // The agreement text of the contract.
  // We use StringValue to properly reflect optionality on the wire for backwards compatibility.
  // This is necessary since the empty string is an acceptable (and in fact the default) agreement
  // text, but also the default string in protobuf.
  // This means a newer client works with an older sandbox seamlessly.
  // Optional
  google.protobuf.StringValue agreement_text = 6;

  // Metadata of the contract. Required for contracts created
  // after the introduction of explicit disclosure.
  ContractMetadata metadata = 10;
}

// Records that a contract has been transferred, and it becomes unusable on the source domain
message TransferredOutEvent {

  // The ID of the transfer out event. This needs to be used as an input for a transfer in TransferCommand.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transfer_out_id = 1;

  // The ID of the created contract.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  // The ID of the source domain
  // Must be a valid domain ID
  // Required
  string source = 3;

  // The ID of the target domain
  // Must be a valid domain ID
  // Required
  string target = 4;

  // Transfer in exclusivity
  // Before this time, only the initiator of the transfer-out can initiate the transfer-in
  // Required
  google.protobuf.Timestamp transfer_in_exclusivity = 5;
}

// Records that a contract has been transferred, and it becomes unusable on the source domain
message TransferredInEvent {

  // The ID of the created contract.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 1;

  // The ID of the source domain
  // Must be a valid domain ID
  // Required
  string source = 2;

  // The ID of the target domain
  // Must be a valid domain ID
  // Required
  string target = 3;

  // The ID of the transfer-out event
  // For correlation capabilities
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string transfer_out_id = 4;
}

// Records that a choice has been exercised on a target contract.
message ExercisedEvent {

  // The ID of this particular event.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string event_id = 1;

  // The ID of the target contract.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  // The template of the target contract.
  // Required
  Identifier template_id = 3;

  // The interface where the choice is defined, if inherited.
  // Optional
  Identifier interface_id = 13;

  reserved 4; // removed field

  // The choice that was exercised on the target contract.
  // Must be a valid NameString (as described in ``value.proto``).
  // Required
  string choice = 5;

  // The argument of the exercised choice.
  // Required
  Value choice_argument = 6;

  // The parties that exercised the choice.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  repeated string acting_parties = 7;

  // If true, the target contract may no longer be exercised.
  // Required
  bool consuming = 8;

  reserved 9; // removed field

  // The parties that are notified of this event. The witnesses of an exercise
  // node will depend on whether the exercise was consuming or not.
  // If consuming, the witnesses are the union of the stakeholders and
  // the actors.
  // If not consuming, the witnesses are the union of the signatories and
  // the actors. Note that the actors might not necessarily be observers
  // and thus signatories. This is the case when the controllers of a
  // choice are specified using "flexible controllers", using the
  // ``choice ... controller`` syntax, and said controllers are not
  // explicitly marked as observers.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  repeated string witness_parties = 10;

  // References to further events in the same transaction that appeared as a result of this ``ExercisedEvent``.
  // It contains only the immediate children of this event, not all members of the subtree rooted at this node.
  // The order of the children is the same as the event order in the transaction.
  // Each element must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  repeated string child_event_ids = 11;

  // The result of exercising the choice.
  // Required
  Value exercise_result = 12;
}

