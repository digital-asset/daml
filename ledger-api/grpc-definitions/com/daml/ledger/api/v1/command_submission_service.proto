// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/trace_context.proto";
import "com/daml/ledger/api/v1/commands.proto";

import "google/protobuf/empty.proto";


option java_outer_classname = "CommandSubmissionServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to attempt advancing the ledger's state by submitting commands.
// The final states of their submissions are disclosed by the Command Completion Service.
// The on-ledger effects of their submissions are disclosed by the Transaction Service.
//
// Commands may fail in 2 distinct manners:
//
// 1. Failure communicated in the gRPC error of the submission.
// 2. Failure communicated in a Completion.
//
// Only successfully submitted commands may produce a completion event.
//
// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
//
// Interprocess tracing of command submissions may be achieved via Zipkin by filling out the ``trace_context`` field.
// The server will return a child context of the submitted one, (or a new one if the context was missing) on both the Completion and Transaction streams.
service CommandSubmissionService {

  // Submit a single composite command.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
  // - ``UNAVAILABLE``: if the participant is not yet ready to submit commands or if the service has been shut down.
  // - ``RESOURCE_EXHAUSTED``: if the participant or the ledger is overloaded. Clients should back off exponentially and retry.
  rpc Submit (SubmitRequest) returns (google.protobuf.Empty);

}

// The submitted commands will be processed atomically in a single transaction. Moreover, each ``Command`` in ``commands`` will be executed in the order specified by the request.
message SubmitRequest {

  // The commands to be submitted in a single transaction.
  // Required
  Commands commands = 1;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}
