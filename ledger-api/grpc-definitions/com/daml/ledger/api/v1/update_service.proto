// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/ledger_offset.proto";
import "com/daml/ledger/api/v1/transaction.proto";
import "com/daml/ledger/api/v1/transaction_filter.proto";
import "com/daml/ledger/api/v1/transfer.proto";

option java_outer_classname = "UpdateServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to read updates (transactions and transfers) from the ledger.
service UpdateService {

  // Read the ledger's filtered transaction stream and related transfers for a set of parties.
  // For transactions it lists only creates and archives, but not other events.
  // Omits all events on transient contracts, i.e., contracts that were both created and archived in the same transaction.
  rpc GetUpdates (GetUpdatesRequest) returns (stream GetUpdatesResponse);
}

message GetUpdatesRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // Beginning of the requested ledger section.
  // This offset is exclusive: the response will only contain transactions whose offset is strictly greater than this.
  // Required
  LedgerOffset begin = 2;

  // End of the requested ledger section.
  // This offset is inclusive: the response will only contain transactions whose offset is less than or equal to this.
  // Optional, if not set, the stream will not terminate.
  LedgerOffset end = 3;

  // Requesting parties with template filters.
  // Template filters must be empty for GetTransactionTrees requests.
  // Required
  TransactionFilter filter = 4;

  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
  // Optional
  bool verbose = 5;

  // Must be a valid domain ID
  // Required
  string domain_id = 6;
}

message GetUpdatesResponse {
  // The list of updates that matches the filter in the request.
  repeated Update updates = 1;
}

message Update {
  oneof update {
    Transaction transaction = 1;
    Transfer transfer = 2;
  }
}