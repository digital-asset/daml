// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/ledger_offset.proto";
import "com/daml/ledger/api/v1/transaction_filter.proto";
import "com/daml/ledger/api/v1/transaction.proto";

option java_outer_classname = "UpdateServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to read updates (transactions and transfers) from the ledger.
service UpdateService {

  // Read the ledger's filtered update stream for a set of parties.
  // Lists only creates and archives, and transfer events.
  // Omits all events on transient contracts, i.e., contracts that were both created and archived in the same transaction.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if ``before`` is not before ``end``)
  // - ``FAILED_PRECONDITION``: if the ledger has been pruned after the subscription start offset
  // - ``OUT_OF_RANGE``: if the ``begin`` parameter value is not before the end of the ledger
  rpc GetFlatUpdates (GetUpdatesRequest) returns (stream GetFlatUpdatesResponse);

  // Read the ledger's complete transaction tree stream and related transfers for a set of parties.
  // The stream can be filtered only by parties, but not templates (template filter must be empty).
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if ``before`` is not before ``end``)
  // - ``FAILED_PRECONDITION``: if the ledger has been pruned after the subscription start offset
  // - ``OUT_OF_RANGE``: if the ``begin`` parameter value is not before the end of the ledger
  rpc GetTreeUpdates (GetUpdatesRequest) returns (stream GetTreeUpdatesResponse);

  // TODO deprecated?
  // Lookup a transaction tree by the ID of an event that appears within it.
  // For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id or no such transaction exists
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if requesting parties are invalid or empty)
  rpc GetTransactionByEventId (GetTransactionByEventIdRequest) returns (GetTransactionResponse);

  // Lookup a transaction tree or a transfer by its ID.
  // For looking up a transaction instead of a transaction tree, please see GetFlatUpdateById
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id or no such transaction exists
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if requesting parties are invalid or empty)
  rpc GetTreeUpdateById (GetUpdateByIdRequest) returns (GetTreeUpdateResponse);

  // TODO deprecated?
  // Lookup a transaction by the ID of an event that appears within it.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id or no such transaction exists
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if requesting parties are invalid or empty)
  rpc GetFlatTransactionByEventId (GetTransactionByEventIdRequest) returns (GetFlatTransactionResponse);

  // Lookup a transaction or a transfer by its ID.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id or no such transaction exists
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if requesting parties are invalid or empty)
  rpc GetFlatUpdateById (GetUpdateByIdRequest) returns (GetFlatUpdateResponse);

  // Get the current ledger end.
  // Subscriptions started with the returned offset will serve updates created after this RPC was called.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  rpc GetLedgerEnd (GetLedgerEndRequest) returns (GetLedgerEndResponse);

}

message GetUpdatesRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // Beginning of the requested ledger section.
  // This offset is exclusive: the response will only contain transactions whose offset is strictly greater than this.
  // Required
  LedgerOffset begin = 2;

  // End of the requested ledger section.
  // This offset is inclusive: the response will only contain transactions whose offset is less than or equal to this.
  // Optional, if not set, the stream will not terminate.
  LedgerOffset end = 3;

  // Requesting parties with template filters.
  // Template filters must be empty for GetTreeUpdates requests.
  // Required
  TransactionFilter filter = 4;

  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
  // Optional
  bool verbose = 5;

  // Must be a valid domain ID
  // Required
  string domain_id = 6;
}

message GetFlatUpdatesResponse {
  // The list of updates that matches the filter in the request.
  repeated FlatUpdate updates = 1;
}

message GetTreeUpdatesResponse {
  // The list of updates trees that matches the filter in the request.
  repeated TreeUpdate updates = 1;
}

message GetTransactionByEventIdRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // The ID of a particular event.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string event_id = 2;

  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  repeated string requesting_parties = 3;

  // Must be a valid domain ID
  // Required
  string domain_id = 4;
}

message GetUpdateByIdRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // The ID of a particular transaction or transfer.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Required
  string update_id = 2;

  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element be a valid PartyIdString (as describe in ``value.proto``).
  // Required
  repeated string requesting_parties = 3;

  // Must be a valid domain ID
  // Required
  string domain_id = 4;
}

message GetTransactionResponse {
  TransactionTree transaction = 1;
}

message GetTreeUpdateResponse {
  TreeUpdate update = 1;
}

message GetFlatTransactionResponse {
  Transaction transaction = 1;
}

message GetFlatUpdateResponse {
  FlatUpdate update = 1;
}

message GetLedgerEndRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // Must be a valid domain ID
  // Required
  string domain_id = 2;
}

message GetLedgerEndResponse {
  // The absolute offset of the current ledger end.
  LedgerOffset offset = 1;
}

message TreeUpdate {
  oneof tree_update {
    TransactionTree transaction_tree = 1;
    Transfer transfer = 2;
  }
}

message FlatUpdate {
  oneof flat_update {
    Transaction flat_transaction = 1;
    Transfer transfer = 2;
  }
}