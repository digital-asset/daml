// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/value.proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


option java_outer_classname = "CommandsOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// A composite command that groups multiple commands together.
message Commands {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string ledger_id = 1;

  // Identifier of the on-ledger workflow that this command is a part of.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 2;

  // Uniquely identifies the application (or its part) that issued the command. This is used in tracing
  // across different components and to let applications subscribe to their own submissions only.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string application_id = 3;

  // Uniquely identified the command. This identifier should be unique for each new command within an
  // application domain, i.e., the triple (application_id, party, command_id) must be unique.
  // It can be used for matching the requests with their respective completions.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 4;

  // Party on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of the given party.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Deprecated in favor of the ``act_as`` field. If both are set, then the effective list of parties on whose
  // behalf the command should be executed is the union of all parties listed in ``party`` and ``act_as``.
  // Optional
  string party = 5;

  reserved 6; // was ledger_effective_time
  reserved 7; // was maximum_record_time

  // Individual elements of this atomic command. Must be non-empty.
  // Required
  repeated Command commands = 8;

  // The length of the time window during which all commands with the same ``act_as`` parties and
  // the same command ID will be deduplicated.
  // Duplicate commands submitted before the end of this window return an ALREADY_EXISTS error.
  // Optional
  google.protobuf.Duration deduplication_time = 9;

  // Lower bound for the ledger time assigned to the resulting transaction.
  // Note: The ledger time of a transaction is assigned as part of command interpretation.
  // Use this property if you expect that command interpretation will take a considerate amount of time, such that by
  // the time the resulting transaction is sequenced, its assigned ledger time is not valid anymore.
  // Must not be set at the same time as min_ledger_time_rel.
  // Optional
  google.protobuf.Timestamp min_ledger_time_abs = 10;

  // Same as min_ledger_time_abs, but specified as a duration, starting from the time the command is received by the server.
  // Must not be set at the same time as min_ledger_time_abs.
  // Optional
  google.protobuf.Duration min_ledger_time_rel = 11;

  // Set of parties on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of each of the given parties.
  // This field supersedes the ``party`` field. The effective set of parties on whose behalf the command
  // should be executed is the union of all parties listed in ``party`` and ``act_as``, which must be non-empty.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Optional
  repeated string act_as = 12;

  // Set of parties on whose behalf (in addition to all parties listed in ``act_as``) contracts can be retrieved.
  // This affects DAML operations such as ``fetch``, ``fetchByKey``, ``lookupByKey``, ``exercise``, and ``exerciseByKey``.
  // Note: A participant node of a DAML network can host multiple parties. Each contract present on the participant
  // node is only visible to a subset of these parties. A command can only use contracts that are visible to at least
  // one of the parties in ``act_as`` or ``read_as``. This visibility check is independent from the DAML authorization
  // rules for fetch operations.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to read contract data on behalf of each of the given parties.
  // Optional
  repeated string read_as = 13;
}

// A command can either create a new contract or exercise a choice on an existing contract.
message Command {
  oneof command {
    CreateCommand create = 1;
    ExerciseCommand exercise = 2;
    ExerciseByKeyCommand exerciseByKey = 4;
    CreateAndExerciseCommand createAndExercise = 3;
  }
}

// Create a new contract instance based on a template.
message CreateCommand {

  // The template of contract the client wants to create.
  // Required
  Identifier template_id = 1;

  // The arguments required for creating a contract from this template.
  // Required
  Record create_arguments = 2;
}

// Exercise a choice on an existing contract.
message ExerciseCommand {

  // The template of contract the client wants to exercise.
  // Required
  Identifier template_id = 1;

  // The ID of the contract the client wants to exercise upon.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``)
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}

// Exercise a choice on an existing contract specified by its key.
message ExerciseByKeyCommand {

  // The template of contract the client wants to exercise.
  // Required
  Identifier template_id = 1;

  // The key of the contract the client wants to exercise upon.
  // Required
  Value contract_key = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``)
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}

// Create a contract and exercise a choice on it in the same transaction.
message CreateAndExerciseCommand {
  // The template of the contract the client wants to create.
  // Required
  Identifier template_id = 1;

  // The arguments required for creating a contract from this template.
  // Required
  Record create_arguments = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``).
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}
