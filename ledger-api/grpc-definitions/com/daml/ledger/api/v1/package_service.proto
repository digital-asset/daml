// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/trace_context.proto";


option java_outer_classname = "PackageServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to query the DAML-LF packages that are supported by the server.
service PackageService {

  // Returns the identifiers of all supported packages.
  rpc ListPackages (ListPackagesRequest) returns (ListPackagesResponse);

  // Returns the contents of a single package, or a ``NOT_FOUND`` error if the requested package is unknown.
  rpc GetPackage (GetPackageRequest) returns (GetPackageResponse);

  // Returns the status of a single package.
  rpc GetPackageStatus (GetPackageStatusRequest) returns (GetPackageStatusResponse);

}

message ListPackagesRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string ledger_id = 1;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}

message ListPackagesResponse {

  // The IDs of all DAML-LF packages supported by the server.
  // Each element must be a valid PackageIdString (as described in ``value.proto``).
  // Required
  repeated string package_ids = 1;
}

message GetPackageRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string ledger_id = 1;

  // The ID of the requested package.
  // Must be a valid PackageIdString (as described in ``value.proto``).
  // Required
  string package_id = 2;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}

message GetPackageResponse {

  // The hash function we use to calculate the hash.
  // Required
  HashFunction hash_function = 1;

  // Contains a ``daml_lf`` ArchivePayload. See further details in ``daml_lf.proto``.
  // Required
  bytes archive_payload = 2;

  // The hash of the archive payload, can also used as a ``package_id``.
  // Must be a valid PackageIdString (as described in ``value.proto``).
  // Required
  string hash = 3;
}

message GetPackageStatusRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string ledger_id = 1;

  // The ID of the requested package.
  // Must be a valid PackageIdString (as described in ``value.proto``).
  // Required
  string package_id = 2;

  // Server side tracing will be registered as a child of the submitted context.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}

message GetPackageStatusResponse {
  // The status of the package.
  PackageStatus package_status = 1;
}

enum PackageStatus {

  // The server is not aware of such a package.
  UNKNOWN = 0;

  // The server is able to execute DAML commands operating on this package.
  REGISTERED = 1;
}

enum HashFunction {
  SHA256 = 0;
}
