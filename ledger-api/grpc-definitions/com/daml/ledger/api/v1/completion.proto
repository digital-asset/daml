// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

option java_outer_classname = "CompletionOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// A completion represents the status of a submitted command on the ledger: it can be successful or failed.
message Completion {
  // The ID of the succeeded or failed command.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 1;

  // Identifies the exact type of the error.
  // For example, malformed or double spend transactions will result in a ``INVALID_ARGUMENT`` status.
  // Transactions with invalid time time windows (which may be valid at a later date) will result in an ``ABORTED`` error.
  // Optional
  google.rpc.Status status = 2;

  // The transaction_id of the transaction that resulted from the command with command_id.
  // Only set for successfully executed commands.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string transaction_id = 3;

  // The application ID that was used for the submission, as described in ``commands.proto``.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  string application_id = 4;

  // The set of parties on whose behalf the commands were executed.
  // Contains the union of ``party`` and ``act_as`` from ``commands.proto``.
  // The order of the parties need not be the same as in the submission.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  repeated string act_as = 5;

  // The submission ID this completion refers to, as described in ``commands.proto``.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string submission_id = 6;

  reserved "submission_rank"; // For future use.
  reserved 7;                 // For future use.

  // The actual deduplication window used for the submission, which is derived from
  // ``Commands.deduplication_period``. The ledger may convert the deduplication period into other
  // descriptions and extend the period in implementation-specified ways.
  //
  // Used to audit the deduplication guarantee described in ``commands.proto``.
  //
  // Optional; the deduplication guarantee applies even if the completion omits this field.
  oneof deduplication_period {
    // Specifies the start of the deduplication period by a completion stream offset.
    //
    // Must be a valid LedgerString (as described in ``value.proto``).
    string deduplication_offset = 8;

    // Specifies the length of the deduplication period.
    // It is measured in record time of completions.
    //
    // Must be non-negative.
    google.protobuf.Duration deduplication_duration = 9;
  }
}
