// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/ledger_offset.proto";
import "com/daml/ledger/api/v1/transaction_filter.proto";
import "com/daml/ledger/api/v1/transaction.proto";

option java_outer_classname = "TransactionServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to read transactions from the ledger.
service TransactionService {

  // Read the ledger's complete transaction tree stream for a set of parties.
  // The stream can be filtered only by parties, but not templates (template filter must be empty).
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields (e.g. if ``before`` is not before ``end``)
  // - ``FAILED_PRECONDITION``: if the ledger has been pruned after the subscription start offset
  // - ``OUT_OF_RANGE``: if the ``begin`` parameter value is not before the end of the ledger
  rpc GetTransactionTrees (GetTransactionsRequest) returns (stream GetTransactionTreesResponse);

  // Get the current ledger end.
  // Subscriptions started with the returned offset will serve transactions created after this RPC was called.
  // Errors:
  // - ``UNAUTHENTICATED``: if the request does not include a valid access token
  // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
  // - ``NOT_FOUND``: if the request does not include a valid ledger id
  rpc GetLedgerEnd (GetLedgerEndRequest) returns (GetLedgerEndResponse);

}

message GetTransactionsRequest {

  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // Beginning of the requested ledger section.
  // This offset is exclusive: the response will only contain transactions whose offset is strictly greater than this.
  // Required
  LedgerOffset begin = 2;

  // End of the requested ledger section.
  // This offset is inclusive: the response will only contain transactions whose offset is less than or equal to this.
  // Optional, if not set, the stream will not terminate.
  LedgerOffset end = 3;

  // Required
  // For the multi-domain, this currently replace the usual TransactionFilter
  string party = 4;

  // Must be a valid domain ID
  // Required
  string domain_id = 5;
}

message GetTransactionTreesResponse {
  // The list of transaction trees that matches the filter in ``GetTransactionsRequest`` for the ``GetTransactionTrees`` method.
  repeated TransactionTree transactions = 1;
}

message GetLedgerEndRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Optional
  string ledger_id = 1;
}

message GetLedgerEndResponse {
  // The absolute offset of the current ledger end.
  LedgerOffset offset = 1;
}

