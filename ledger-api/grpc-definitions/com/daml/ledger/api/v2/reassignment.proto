// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v1/event.proto";
import "com/daml/ledger/api/v1/value.proto";
import "google/protobuf/timestamp.proto";

option java_outer_classname = "ReassignmentOuterClass";
option java_package = "com.daml.ledger.api.v2";
option csharp_namespace = "Com.Daml.Ledger.Api.V2";

// Complete view of an on-ledger reassignment.
message Reassignment {

  // Assigned by the server. Useful for correlating logs.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // The ID of the command which resulted in this reassignment. Missing for everyone except the submitting party on the submitting participant.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string command_id = 2;

  // The workflow ID used in reassignment command submission. Only set if the ``workflow_id`` for the command was set.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 3;

  // The absolute offset. The format of this field is described in ``participant_offset.proto``.
  // Required
  string offset = 4;

  oneof event {
    UnassignedEvent unassigned_event = 5;
    AssignedEvent assigned_event = 6;
  }
}

// Records that a contract has been unassigned, and it becomes unusable on the source domain
message UnassignedEvent {

  // The ID of the unassignment. This needs to be used as an input for a assign ReassignmentCommand.
  // For one contract the (unassign_id, source domain) pair is unique.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string unassign_id = 1;

  // The ID of the reassigned contract.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  //  The template of the reassigned contract.
  //  Required
  com.daml.ledger.api.v1.Identifier template_id = 3;

  // The ID of the source domain
  // Must be a valid domain ID
  // Required
  string source = 4;

  // The ID of the target domain
  // Must be a valid domain ID
  // Required
  string target = 5;

  // Party on whose behalf the unassign command was executed.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  string submitter = 6;

  // Each corresponding assigned and unassigned event has the same reassignment_counter. This strictly increases
  // with each unassign command for the same contract. Creation of the contract corresponds to reassignment_counter
  // equals zero.
  // Required
  uint64 reassignment_counter = 7;

  // Assignment exclusivity
  // Before this time (measured on the target domain), only the submitter of the unassignment can initiate the assignment
  // Defined for reassigning participants.
  // Optional
  google.protobuf.Timestamp assignment_exclusivity = 8;

  // The parties that are notified of this event.
  // Required
  repeated string witness_parties = 9;
}

// Records that a contract has been assigned, and it can be used on the target domain.
message AssignedEvent {

  // The ID of the source domain.
  // Must be a valid domain ID.
  // Required
  string source = 1;

  // The ID of the target domain.
  // Must be a valid domain ID.
  // Required
  string target = 2;

  // The ID from the unassigned event.
  // For correlation capabilities.
  // For one contract the (unassign_id, source domain) pair is unique.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string unassign_id = 3;

  // Party on whose behalf the assign command was executed.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  string submitter = 4;

  // Each corresponding assigned and unassigned event has the same reassignment_counter. This strictly increases
  // with each unassign command for the same contract. Creation of the contract corresponds to reassignment_counter
  // equals zero.
  // Required
  uint64 reassignment_counter = 5;

  // Required
  com.daml.ledger.api.v1.CreatedEvent created_event = 6;
}
