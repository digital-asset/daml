// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/ledger_offset.proto";
import "com/daml/ledger/api/v2/transaction.proto";
import "com/daml/ledger/api/v2/transaction_filter.proto";
import "com/daml/ledger/api/v2/transfer.proto";

option java_outer_classname = "UpdateServiceOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Allows clients to read updates (transactions and transfers) from the ledger.
service UpdateService {

  // Read the ledger's filtered transaction stream and related transfers for a set of parties.
  // For transactions it lists only creates and archives, but not other events.
  // Omits all events on transient contracts, i.e., contracts that were both created and archived in the same transaction.
  rpc GetUpdates (GetUpdatesRequest) returns (stream GetUpdatesResponse);

  // Read the ledger's complete transaction tree stream and related transfers for a set of parties.
  // The stream will be filtered only by the parties as wildcard parties.
  // The template/interface filters describe the respective fields in the `CreateEvent`` results.
  rpc GetUpdateTrees (GetUpdatesRequest) returns (stream GetUpdateTreesResponse);

  // Lookup a transaction tree by the ID of an event that appears within it.
  // For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
  rpc GetTransactionByEventId (GetTransactionByEventIdRequest) returns (GetTransactionResponse);

  // Lookup a transaction tree by its ID.
  // For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
  rpc GetTransactionById (GetTransactionByIdRequest) returns (GetTransactionResponse);

  // Lookup a transaction by the ID of an event that appears within it.
  rpc GetFlatTransactionByEventId (GetTransactionByEventIdRequest) returns (GetFlatTransactionResponse);

  // Lookup a transaction by its ID.
  rpc GetFlatTransactionById (GetTransactionByIdRequest) returns (GetFlatTransactionResponse);

  // Get the current ledger end.
  // Subscriptions started with the returned offset will serve transactions created after this RPC was called.
  rpc GetLedgerEnd (GetLedgerEndRequest) returns (GetLedgerEndResponse);
}

message GetUpdatesRequest {
  // Beginning of the requested ledger section.
  // This offset is exclusive: the response will only contain transactions whose offset is strictly greater than this.
  // Required
  LedgerOffset begin = 1;

  // End of the requested ledger section.
  // This offset is inclusive: the response will only contain transactions whose offset is less than or equal to this.
  // Optional, if not set, the stream will not terminate.
  LedgerOffset end = 2;

  // Requesting parties with template filters.
  // Template filters must be empty for GetUpdateTrees requests.
  // Required
  TransactionFilter filter = 3;

  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
  // Optional
  bool verbose = 4;
}

message GetUpdatesResponse {
  // The list of updates that matches the filter in the request.
  repeated Update updates = 1;
}

message Update {
  oneof update {
    Transaction transaction = 1;
    Transfer transfer = 2;
  }
}

message GetUpdateTreesResponse {
  // The list of updates that matches the filter in the request.
  repeated UpdateTree updates = 1;
}

message UpdateTree {
  oneof update {
    TransactionTree transaction_tree = 1;
    Transfer transfer = 2;
  }
}

message GetTransactionByEventIdRequest {
  // The ID of a particular event.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string event_id = 1;

  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  repeated string requesting_parties = 2;
}

message GetTransactionByIdRequest {

  // The ID of a particular transaction.
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Required
  string update_id = 1;

  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element be a valid PartyIdString (as describe in ``value.proto``).
  // Required
  repeated string requesting_parties = 2;
}

message GetTransactionResponse {
  TransactionTree transaction = 1;
}

message GetFlatTransactionResponse {
  Transaction transaction = 1;
}

message GetLedgerEndRequest {

}

message GetLedgerEndResponse {
  // The absolute offset of the current ledger end.
  LedgerOffset offset = 1;
}
