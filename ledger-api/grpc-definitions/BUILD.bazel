# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:pkg.bzl", "pkg_tar")
load("//bazel_tools:proto.bzl", "proto_gen")
load("//bazel_tools:pom_file.bzl", "pom_file")
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library")

proto_library(
    name = "protos",
    srcs = glob(["**/*.proto"]),
    proto_source_root = "ledger-api/grpc-definitions",
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "@com_github_googleapis_googleapis//google/rpc:status_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:descriptor_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

pkg_tar(
    name = "ledger-api-protos",
    srcs = glob(["**/*.proto"]),
    extension = "tar.gz",
    strip_prefix = "./",
    visibility = [
        "//visibility:public",
    ],
)

# FIXME(#448): This has the same contents as `:ledger-api-protos` but a
# directory structure which is suitable for the SDK.
pkg_tar(
    name = "ledger-api-protos-tarball",
    srcs = glob(["**/*.proto"]),
    extension = "tar.gz",
    package_dir = "grpc-definitions",
    strip_prefix = "./",
    visibility = [
        "//visibility:public",
    ],
)

proto_gen(
    name = "ledger-api-scalapb-sources",
    srcs = [
        ":protos",
        "@com_github_googleapis_googleapis//google/rpc:code_proto",
        "@com_github_googleapis_googleapis//google/rpc:status_proto",
    ],
    plugin_exec = "//scala-protoc-plugins/scalapb:protoc-gen-scalapb",
    plugin_name = "scalapb",
    plugin_options = ["grpc"],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:descriptor_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

genrule(
    name = "ledger-api-haskell-sources",
    srcs = [
        "BUILD.bazel",
        "@com_google_protobuf//:well_known_protos",
        "@com_github_googleapis_googleapis//google/rpc:status.proto",
    ] +
    # TODO(nic): When compile-proto-file handles map<key,value>, we will can run on:  **/*.proto
    # + glob(["**/*.proto",])
    [
        #"com/digitalasset/ledger/api/v1/active_contracts_service.proto",
        "com/digitalasset/ledger/api/v1/command_completion_service.proto",
        "com/digitalasset/ledger/api/v1/command_service.proto",
        "com/digitalasset/ledger/api/v1/command_submission_service.proto",
        "com/digitalasset/ledger/api/v1/commands.proto",
        "com/digitalasset/ledger/api/v1/completion.proto",
        "com/digitalasset/ledger/api/v1/event.proto",
        "com/digitalasset/ledger/api/v1/ledger_configuration_service.proto",
        "com/digitalasset/ledger/api/v1/ledger_identity_service.proto",
        "com/digitalasset/ledger/api/v1/ledger_offset.proto",
        "com/digitalasset/ledger/api/v1/package_service.proto",
        "com/digitalasset/ledger/api/v1/trace_context.proto",
        #"com/digitalasset/ledger/api/v1/transaction.proto",
        #"com/digitalasset/ledger/api/v1/transaction_filter.proto",
        #"com/digitalasset/ledger/api/v1/transaction_service.proto",
        "com/digitalasset/ledger/api/v1/value.proto",
    ],
    # TODO(nic): Construct expected output list from the inputs. See example in: daml-lf/archive/BUILD.bazel
    outs = [
        #"ActiveContractsService.hs",
        "CommandCompletionService.hs",
        "CommandService.hs",
        "CommandSubmissionService.hs",
        "Commands.hs",
        "Completion.hs",
        "Event.hs",
        "LedgerConfigurationService.hs",
        "LedgerIdentityService.hs",
        "LedgerOffset.hs",
        "PackageService.hs",
        "TraceContext.hs",
        #"Transaction.hs",
        #"TransactionFilter.hs",
        #"TransactionService.hs",
        "Value.hs",
    ],
    # TODO(nic): Can we improve the logic to set the includeDir(s)? Triple $$dirname is a bit pants.
    cmd = """
        here=$$(dirname $(locations BUILD.bazel))
        well_known=$$(dirname $$(dirname $$(dirname $$(echo $(locations @com_google_protobuf//:well_known_protos) | cut -d ' ' -f1))))
        rpc_status=$$(dirname $$(dirname $$(dirname $$(echo $(location @com_github_googleapis_googleapis//google/rpc:status.proto)))))
        for src in $$here/com/digitalasset/ledger/api/v1/*.proto; do 
            $(location //nix/third-party/proto3-suite:compile-proto-file) \
                --includeDir $$here \
                --includeDir $$well_known \
                --includeDir $$rpc_status \
                --includeDir $$(dirname $$src) --proto $$(basename $$src) \
				--out $(@D)
		done
	""",
    tools = [
        "//nix/third-party/proto3-suite:compile-proto-file",
    ],
)

scalapb_deps = [
    "//3rdparty/jvm/com/thesamet/scalapb:scalapb_runtime",
    "//3rdparty/jvm/com/thesamet/scalapb:scalapb_runtime_grpc",
    "//3rdparty/jvm/com/thesamet/scalapb:lenses",
    "//3rdparty/jvm/com/google/protobuf:protobuf_java",
    "//3rdparty/jvm/io/grpc:grpc_stub",
    "//3rdparty/jvm/io/grpc:grpc_protobuf",
]

scala_library(
    name = "ledger-api-scalapb",
    srcs = [":ledger-api-scalapb-sources"],
    tags = [
        "maven_coordinates=com.digitalasset.ledger-api.grpc-definitions:ledger-api-scalapb:__VERSION__",
    ],
    visibility = ["//visibility:public"],
    exports = scalapb_deps,
    deps = scalapb_deps,
)

pom_file(
    name = "ledger-api-scalapb_pom",
    target = ":ledger-api-scalapb",
)

proto_gen(
    name = "ledger-api-docs",
    srcs = [":protos"],
    plugin_exec = "@com_github_pseudomuto_protoc_gen_doc//cmd/protoc-gen-doc:protoc-gen-doc",
    plugin_name = "doc",
    plugin_options = [
        "ledger-api/grpc-definitions/rst_mmd.tmpl",
        "docs.rst",
    ],
    # this is _slightly_ hacky. we need to include the markdown template in the plugin_runfiles
    # and refer to the file with a workspace relative path in plugin_options
    plugin_runfiles = ["rst_mmd.tmpl"],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "@com_github_googleapis_googleapis//google/rpc:code_proto",
        "@com_github_googleapis_googleapis//google/rpc:status_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:descriptor_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

genrule(
    name = "docs",
    srcs = [":ledger-api-docs"],
    outs = ["proto-docs.rst"],
    cmd = """
        unzip -q $(location :ledger-api-docs)
        $(location post-process.sh)
        mv docs.rst '$@'
    """,
    tools = ["post-process.sh"],
    visibility = ["//visibility:public"],
)
