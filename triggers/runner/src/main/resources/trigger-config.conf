# Use Case 1:
# - java -Dtrigger.paralellism=2 ...

# Use Case 2:
# - TRIGGER_MAX_INFLIGHT_COMMANDS=100; java ...

trigger {
  # The number of submitSingleCommand invocations each trigger will
  # attempt to execute in parallel.  Note that this does not in any
  # way bound the number of already-submitted, but not completed,
  # commands that may be pending.
  parallelism = 8
  max-retries = 6

  # Maximum number of in-flight commands that we shall allow *before* the ledger
  # client automatically fails submit requests
  max-inflight-commands = 50
  max-inflight-commands = ${?TRIGGER_MAX_INFLIGHT_COMMANDS}

  # Used to control rate at which we throttle ledger client submission requests
  submission {
    max-requests = 100
    max-requests = ${?TRIGGER_MAX_SUBMISSION_REQUESTS}

    max-duration = "5 seconds"
    max-duration = ${?TRIGGER_MAX_SUBMISSION_DURATION}
  }
}
