-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Retry where

import DA.Action
import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
import DA.Optional

import Daml.Trigger

retryTrigger : Trigger Int
retryTrigger = Trigger
  { initialize = \_acs -> 3
  , updateState = \_acs msg allowedFail -> case msg of
      MCompletion c
        | Failed {} <- c.status -> allowedFail - 1
      _ -> allowedFail
  , rule = retryRule
  }

-- We first create a T template, then we try to exercise C 3 times until allowedRetries is 0
-- finally we create Done
retryRule : Party -> ACS -> Map CommandId [Command] -> Int -> TriggerA ()
retryRule party acs commandsInFlight allowedRetries
  | [] <- getTemplates @T acs = do
    let create = T { p = party }
    let pending = concatMap (mapOptional toCreate . snd) $ Map.toList commandsInFlight
    when (create `notElem` pending) $ void $ emitCommands [createCmd create]
  | ((cid, _) :: _) <- getTemplates @T acs
  , allowedRetries > 0 = do
    let exercise = (cid, C)
    let pending = concatMap (mapOptional toExercise . snd) $ Map.toList commandsInFlight
    when (exercise `notElem` pending) $ void $ emitCommands [exerciseCmd @T cid C]
  | allowedRetries == 0
  , [] <- getTemplates @Done acs = do
    let create = Done { p = party }
    let pending = concatMap (mapOptional toCreate . snd) $ Map.toList commandsInFlight
    when (create `notElem` pending) $ void $ emitCommands [createCmd create]
  | otherwise = pure ()

toCreate : Template t => Command -> Optional t
toCreate (CreateCommand t) = fromAnyTemplate t
toCreate ExerciseCommand {} = None

toExercise : Command -> Optional (ContractId T, C)
toExercise CreateCommand {} = None
toExercise (ExerciseCommand cid choice) =
  liftA2 (,) (fromAnyContractId cid) (fromAnyChoice @T choice)

template T
  with
    p : Party
  where
    signatory p
    choice C : ()
      controller p
      do assert False
         pure ()

template Done
  with
    p : Party
  where
   signatory p
