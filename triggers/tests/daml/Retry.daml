-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Retry where

import Daml.Trigger

retryTrigger : Trigger Int
retryTrigger = Trigger
  { initialize = \_acs -> 3
  , updateState = \msg -> case msg of
      MCompletion c
        | Failed {} <- c.status -> modify (subtract 1)
      _ -> pure ()
  , rule = retryRule
  , registeredTemplates = AllInDar
  , heartbeat = None
  }

-- We first create a T template, then we try to exercise C 3 times until allowedRetries is 0
-- finally we create Done
retryRule : Party -> Int -> TriggerA ()
retryRule party allowedRetries = query @T >>= \case
  [] -> do
    dedupCreate T { p = party }
  ((cid, _) :: _) | allowedRetries > 0 -> do
    dedupExercise cid C
  otherwise -> query @Done >>= \case
    [] | allowedRetries == 0 -> do
      dedupCreate Done { p = party }
    otherwise -> pure ()

template T
  with
    p : Party
  where
    signatory p
    choice C : ()
      controller p
      do assert False
         pure ()

template Done
  with
    p : Party
  where
   signatory p
