-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Copy where

import DA.List
import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
import DA.Optional

import Daml.Trigger

-- The goal of this trigger is to ensure that for every pair of Master/Subscriber there exists exactly one copy.

copyTrigger = runTrigger $ Trigger
  { initialize = const ()
  , updateState = \_ _ s -> s
  , rule = copyRule
  }

copyRule : Party -> ACS -> Map CommandId [Command] -> () -> TriggerA ()
copyRule party acs commandsInFlight () = do
  let subscribers : [(AnyContractId, Subscriber)] = getTemplates acs
      masters : [(AnyContractId, Master)] = getTemplates acs
      copies : [(AnyContractId, Copy)] = getTemplates acs

      ownedSubscribers = filter (\(_, s) -> s.owner == party) subscribers
      ownedMasters = filter (\(_, m) -> m.owner == party) masters
      ownedCopies = filter (\(_, c) -> c.master.owner == party) copies

      groupedCopies : [[(AnyContractId, Copy)]]
      groupedCopies = groupOn snd $ sortOn snd $ ownedCopies
      uniqueCopies = map head groupedCopies

      subscribingParties = map (\(_, s) -> s.obs) ownedSubscribers
      archiveDuplicateCopies = concatMap tail groupedCopies
      archiveMissingMaster = filter (\(_, c) -> c.master `notElem` map snd ownedMasters) uniqueCopies
      archiveMissingSubscriber = filter (\(_, c) -> c.obs `notElem` subscribingParties) uniqueCopies
      archiveCopies = dedup $ map fst $ archiveDuplicateCopies <> archiveMissingMaster <> archiveMissingSubscriber

      pendingCopies = concatMap (mapOptional toCreateCopy . snd) $ Map.toList commandsInFlight
      eventualCopies = pendingCopies <> map snd uniqueCopies
      neededCopies = [Copy m o | (_, m) <- ownedMasters, o <- subscribingParties]
      createCopies = filter (\c -> c `notElem` eventualCopies) neededCopies
  _ <- forA archiveCopies $ \cid -> emitCommands [exerciseCmd @Copy cid Archive]
  _ <- forA createCopies $ \copy -> emitCommands [createCmd copy]
  pure ()

toCreateCopy : Command -> Optional Copy
toCreateCopy (CreateCommand tpl) = fromAnyTemplate tpl
toCreateCopy _ = None

template Master
  with
    owner : Party
    name : Text
    info : Text
  where
    signatory owner

    key (owner, name) : (Party, Text)
    maintainer key._1

deriving instance Ord Master

template Copy
  with
    master : Master
    obs : Party
  where
    signatory (signatory master)
    observer obs

deriving instance Ord Copy

template Subscriber
  with
    owner : Party
    obs : Party
  where
    signatory obs
    observer owner

