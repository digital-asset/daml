-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This Daml code is based on the sample code supplied in issue https://github.com/digital-asset/daml/issues/15756
module Cats where

import Daml.Trigger
import DA.Foldable (forA_)
import DA.Time (seconds)
import DA.Functor (void)


template Cat
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Cat
    maintainer key.owner

    choice Feed : ()
      with
       foodCid : ContractId Food
      controller owner
      do
        exercise foodCid Food_FeedCat

template Food
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Food
    maintainer key.owner

    choice Food_FeedCat : ()
      controller owner
      do
        pure ()

template TestComplete
  with
    owner : Party
  where
    signatory owner

contractPairings : Int
-- The following value should be kept in sync with the value of contractPairings in LoadTesting.scala
contractPairings = 400

feedingTrigger : Trigger Int
feedingTrigger = Trigger
  { initialize = pure contractPairings
  , updateState = \msg -> case msg of
      MTransaction (Transaction _ _ [ArchivedEvent (fromArchived @Cat -> Some (_, catId)), ArchivedEvent (fromArchived @Food -> Some (_, foodId))]) -> do
        modify (subtract 1)
      _ -> pure ()
  , rule = feedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat, registeredTemplate @Food ]
  , heartbeat = Some (seconds 1)
  }

feedTheCats: Party -> TriggerA Int ()
feedTheCats party = do
  cats <- query @Cat
  pendingCount <- get
  if pendingCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else do
    forA_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) -> do
          void $ emitCommands [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()

breedingRate : Int
-- The following value should be kept in sync with the value of breedingRate in LoadTesting.scala
breedingRate = 100

inefficientFibonacci: Int -> Int
inefficientFibonacci n =
  case n of
    0 -> 0
    1 -> 1
    m -> inefficientFibonacci(m - 2) + inefficientFibonacci(m - 1)

simulateWorkload: () -> ()
simulateWorkload _ =
  case (inefficientFibonacci 10) of
    _ -> ()

earlyBreedingTrigger : Trigger (Int, Int, Bool)
earlyBreedingTrigger = Trigger
  { initialize = pure (breedingRate, 0, False)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

lateBreedingTrigger : Trigger (Int, Int, Bool)
lateBreedingTrigger = Trigger
  { initialize = pure (breedingRate, 1, False)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

earlyBreedingTriggerWithDelay : Trigger (Int, Int, Bool)
earlyBreedingTriggerWithDelay = Trigger
  { initialize = pure (breedingRate, 0, True)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

lateBreedingTriggerWithDelay : Trigger (Int, Int, Bool)
lateBreedingTriggerWithDelay = Trigger
  { initialize = pure (breedingRate, 1, True)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

breedingUpdate: Message -> TriggerUpdateA (Int, Int, Bool) ()
breedingUpdate msg = do
  (breedCount, breedDelay, busyLoop) <- get
  if breedDelay > 0 then
    put (breedCount, breedDelay - 1, busyLoop)
  else do
    case msg of
      MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some catId)]) -> do
        if breedDelay == 0 then
          put (breedCount - 1, breedDelay - 1, busyLoop)
        else
          put (breedCount - 1, breedDelay, busyLoop)
      _ -> do
        if breedDelay == 0 then
          put (breedCount, breedDelay - 1, busyLoop)
        else
          pure ()

breedingAction: Party -> TriggerA (Int, Int, Bool) ()
breedingAction party = do
  (breedCount, breedDelay, busyLoop) <- get
  if and [breedDelay <= 0, breedCount == 0] then
    void $ emitCommands [createCmd (TestComplete party)] []
  else if breedDelay == 0 then do
    forA_ [1..breedingRate] \id -> do
      void $ emitCommands [createCmd (Cat party id)] []
  else do
    let _ = if busyLoop then simulateWorkload() else ()
    pure ()

breedingTrigger : Trigger Int
breedingTrigger = Trigger
  { initialize = pure breedingRate
  , updateState = \msg -> case msg of
       MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some catId)]) -> do
         modify (subtract 1)
       _ -> pure ()
  , rule = breedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = None
  }

breedTheCats: Party -> TriggerA Int ()
breedTheCats party = do
  breedCount <- get
  if breedCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else
    void $ emitCommands [createCmd (Cat party breedCount)] []

breedAndFeedTrigger: Trigger (Int, Int)
breedAndFeedTrigger = Trigger
  { initialize = pure (contractPairings, 0)
  , updateState = \msg -> case msg of
      MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some (_, catId, _)), CreatedEvent (fromCreated @Food -> Some (_, foodId, _))]) -> do
        (pendingCount, breedCount) <- get
        put (pendingCount, breedCount + 1)
      MTransaction (Transaction _ _ [ArchivedEvent (fromArchived @Cat -> Some (_, catId)), ArchivedEvent (fromArchived @Food -> Some (_, foodId))]) -> do
        (pendingCount, breedCount) <- get
        put (pendingCount - 1, breedCount)
      _ -> pure ()
  , rule = breedAndFeedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat, registeredTemplate @Food ]
  , heartbeat = Some (seconds 1)
  }

breedAndFeedTheCats: Party -> TriggerA (Int, Int) ()
breedAndFeedTheCats party = do
  (pendingCount, breedCount) <- get
  if breedCount == 0 then
    forA_ [1..contractPairings] \n -> do
      void $ emitCommands [createCmd (Cat party n), createCmd (Food party n)] []
  else if breedCount < contractPairings then
    pure ()
  else if pendingCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else do
    cats <- query @Cat
    forA_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) -> do
          void $ emitCommands [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()

overflowTrigger: Trigger Int
overflowTrigger = Trigger
  { initialize = pure 0
  , updateState = \_ -> do
      breedCount <- get
      put(breedCount + breedingRate)
  , rule = breedingOverflow
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Cat ]
  , heartbeat = Some (seconds 1)
  }

breedingOverflow: Party -> TriggerA Int ()
breedingOverflow party = do
  breedCount <- get
  forA_ [1..breedingRate] \offset -> do
    void $ emitCommands [createCmd (Cat party (breedCount + offset))] []
