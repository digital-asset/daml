-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This Daml code is based on the sample code supplied in issue https://github.com/digital-asset/daml/issues/15756
module Cats where

import Daml.Trigger
import DA.Foldable (forA_)
import DA.Time (seconds)
import DA.Functor (void)


template Cat
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Cat
    maintainer key.owner

    choice Feed : ()
      with
       foodCid : ContractId Food
      controller owner
      do
        exercise foodCid Food_FeedCat

template Food
  with
    owner : Party
    isin : Int
  where
    signatory owner
    key this : Food
    maintainer key.owner

    choice Food_FeedCat : ()
      controller owner
      do
        pure ()

template TestComplete
  with
    owner : Party
  where
    signatory owner

contractPairings : Int
-- The following value should be kept in sync with the value of contractPairings in FailureTesting.scala
contractPairings = 400

feedingTrigger : Trigger Int
feedingTrigger = Trigger
  { initialize = pure contractPairings
  , updateState = \msg -> case msg of
      MTransaction (Transaction _ _ [ArchivedEvent (fromArchived @Cat -> Some (_, catId)), ArchivedEvent (fromArchived @Food -> Some (_, foodId))]) -> do
        modify (subtract 1)
      _ -> pure ()
  , rule = feedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat, registeredTemplate @Food ]
  , heartbeat = Some (seconds 1)
  }

feedTheCats: Party -> TriggerA Int ()
feedTheCats party = do
  cats <- query @Cat
  pendingCount <- get
  if pendingCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else do
    forA_ cats \(catCid, Cat{..}) -> do
      queryContractKey @Food (Food owner isin) >>= \case
        Some (foodCid, _) -> do
          void $ emitCommands [exerciseCmd catCid (Feed foodCid)] [toAnyContractId catCid, toAnyContractId foodCid]
        None ->
          pure ()

breedingRate : Int
breedingRate = 100

overflowTrigger: Trigger (Int, Int)
overflowTrigger = Trigger
  { initialize = pure (breedingRate, -breedingRate)
  , updateState = \_ -> do
      (breedCount, baseIndex) <- get
      put (breedCount, baseIndex + breedCount)
  , rule = breedingOverflow
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Cat ]
  , heartbeat = Some (seconds 1)
  }

breedingOverflow: Party -> TriggerA (Int, Int) ()
breedingOverflow party = do
  (breedCount, baseIndex) <- get
  forA_ [1..breedCount] \offset -> do
    void $ emitCommands [createCmd (Cat party (baseIndex + offset))] []
