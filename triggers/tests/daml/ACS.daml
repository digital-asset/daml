-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module ACS where

import DA.TextMap (TextMap)
import qualified DA.TextMap as TM

import Daml.Trigger.LowLevel

data TriggerState = TriggerState
  { activeAssets : TextMap TemplateTypeRep
  , successfulCompletions : Int
  , failedCompletions : Int
  , nextCommandId : Int
  , party : Party
  }

initState : Party -> ActiveContracts -> TriggerState
initState party (ActiveContracts events) = TriggerState
  { activeAssets = (foldl updateAcs TM.empty events)
  , nextCommandId = 0
  , party = party
  , successfulCompletions = 0
  , failedCompletions = 0
  }
  where
    updateAcs : TextMap TemplateTypeRep -> Created -> TextMap TemplateTypeRep
    updateAcs acs (Created _ cId argument)
      | Some Asset{} <- fromAnyTemplate @(Asset ()) argument = TM.insert cId.contractId cId.templateId acs
      | otherwise = acs

-- | This is a very silly trigger for testing purposes:
-- We track the active Asset contracts (we make no attempts to distinguish different things called Asset)
-- and we create a new AssetMirror contract whenever an Asset contract is created (but we do not archive them).
test : Trigger TriggerState
test = Trigger
  { initialState = \party acs -> (initState party acs, [])
  , update = update
  }
  where
    update : Message -> TriggerState -> (TriggerState, [Commands])
    update (MCompletion c) state =
      let state' = case c.status of
            Failed {} -> state { failedCompletions = state.failedCompletions + 1 }
            Succeeded {} -> state { successfulCompletions = state.successfulCompletions + 1 }
      in (state', [])
    update (MTransaction t) state = case foldl updateEvent ([], state.activeAssets) (events t) of
      ([], acs) -> (state { activeAssets = acs }, [])
      (cmds, acs) ->
        ( state { activeAssets = acs, nextCommandId = state.nextCommandId + 1 }
        , [Commands (CommandId $ "command_" <> show state.nextCommandId) cmds]
        )
      where
        updateEvent : ([Command], TextMap TemplateTypeRep) -> Event -> ([Command], TextMap TemplateTypeRep)
        updateEvent (cmds, acs) ev = case ev of
          CreatedEvent (fromCreated -> Some (_, assetId, Asset {issuer} : Asset ())) ->
            let proposeMirror : Command = createCmd (AssetMirrorProposal { issuer })
            in (proposeMirror :: cmds, TM.insert assetId.contractId (templateTypeRep @(Asset ())) acs)
          CreatedEvent (fromCreated -> Some (_, proposalId, AssetMirrorProposal {})) ->
            let accept : Command = exerciseCmd proposalId Accept
            in (accept :: cmds, acs)
          ArchivedEvent (fromArchived @(Asset ()) -> Some (_, assetId)) ->
            (cmds, TM.delete assetId.contractId acs)
          _ -> (cmds, acs)

-- This is only a generic template to test that we do the conversion properly.
template Asset t
  with
    issuer : Party
  where
    signatory issuer

template instance AssetUnit = Asset ()

template AssetMirror
  with
    issuer : Party
  where
    signatory issuer

template AssetMirrorProposal
  with
    issuer : Party
  where
    signatory issuer

    controller issuer can
      Accept : ContractId AssetMirror
        do create AssetMirror { issuer = issuer }
