-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module ACS where

import DA.TextMap (TextMap)
import qualified DA.TextMap as TM

import Daml.Trigger

data TriggerState = TriggerState
  { activeAssets : TextMap Identifier
  , nextCommandId : Int
  , party : Party
  }

initState : Party -> ActiveContracts -> TriggerState
initState party (ActiveContracts events) = TriggerState (foldl updateAcs TM.empty events) 0 party
  where
    updateAcs : TextMap Identifier -> Created -> TextMap Identifier
    updateAcs acs (Created _ cId argument)
      | Some Asset{} <- fromAnyTemplate @(Asset ()) argument = TM.insert cId.contractId cId.templateId acs
      | otherwise = acs

-- | This is a very silly trigger for testing purposes:
-- We track the active Asset contracts (we make no attempts to distinguish different things called Asset)
-- and we create a new AssetMirror contract whenever an Asset contract is created (but we do not archive them).
test : Trigger TriggerState
test = Trigger
  { initialState = initState
  , update = update
  }
  where
    update : Message -> TriggerState -> (TriggerState, Optional Commands,  Text)
    update (MTransaction t) (TriggerState acs nextId party) = case foldl updateEvent ([], acs) (events t) of
      ([], acs) -> (TriggerState acs nextId  party, None, "No command")
      (cmds, acs) ->
        ( TriggerState acs (nextId + 1) party
        , Some $ Commands ("command_" <> show nextId) cmds
        , "Submitted " <> show (length cmds) <> " commands"
        )
      where
        updateEvent : ([Command], TextMap Identifier) -> Event -> ([Command], TextMap Identifier)
        updateEvent (cmds, acs) ev = case ev of
          CreatedEvent (Created _ cId argument)
            | Some (Asset {issuer}) <- fromAnyTemplate @(Asset ()) argument ->
            let proposeMirror : Command = createCmd (AssetMirrorProposal { issuer })
            in (proposeMirror :: cmds, TM.insert cId.contractId cId.templateId acs)
            | Some (AssetMirrorProposal {}) <- fromAnyTemplate argument ->
            let accept : Command = exerciseCmd @AssetMirrorProposal cId Accept
            in (accept :: cmds, acs)
          ArchivedEvent (Archived _ cId)
            | cId.templateId.entityName == "AssetUnit" -> (cmds, TM.delete cId.contractId acs)
          _ -> (cmds, acs)

-- This is only a generic template to test that we do the conversion properly.
template Asset t
  with
    issuer : Party
  where
    signatory issuer

template instance AssetUnit = Asset ()

template AssetMirror
  with
    issuer : Party
  where
    signatory issuer

template AssetMirrorProposal
  with
    issuer : Party
  where
    signatory issuer

    controller issuer can
      Accept : ContractId AssetMirror
        do create AssetMirror { issuer = issuer }
