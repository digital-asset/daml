# Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# TODO Once daml_compile uses build instead of package we should use
# daml_compile instead of a genrule.

load("@build_environment//:configuration.bzl", "ghc_version", "sdk_version")

DAML_LF_VERSIONS = [
    "1.7",
    "1.8",
    "1.dev",
]

# Build one DAR per LF version to bundle with the SDK.
# Also build one DAR with the default LF version for test-cases.
[
    genrule(
        name = "daml-trigger{}".format(suffix),
        srcs = glob(["**/*.daml"]) + ["//daml-script/daml:daml-script{}".format(suffix)],
        outs = ["daml-trigger{}.dar".format(suffix)],
        cmd = """
          set -eou pipefail
          TMP_DIR=$$(mktemp -d)
          mkdir -p $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger.daml) $$TMP_DIR/daml/Daml
          cp -L $(location Daml/Trigger/Assert.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger/Internal.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger/LowLevel.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location {daml_script}) $$TMP_DIR/daml-script.dar
          cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: daml-trigger
source: daml
version: {ghc}
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
build-options: {build_options}
EOF
          $(location //compiler/damlc) build --project-root $$TMP_DIR \
              --cpp $$PWD/$(location @stackage-exe//hpp) \
              -o $$PWD/$@
          rm -rf $$TMP_DIR
        """.format(
            build_options = str([
                "--target",
                lf_version,
            ] if lf_version else []),
            daml_script = "//daml-script/daml:daml-script{}".format(suffix),
            sdk = sdk_version,
            ghc = ghc_version,
        ),
        tools = [
            "//compiler/damlc",
            "@stackage-exe//hpp",
        ],
        visibility = ["//visibility:public"],
    )
    for lf_version in DAML_LF_VERSIONS + [""]
    for suffix in [("-" + lf_version) if lf_version else ""]
]

filegroup(
    name = "daml-trigger-dars",
    srcs = [
        "daml-trigger-{}.dar".format(lf_version)
        for lf_version in DAML_LF_VERSIONS
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "daml-trigger-json-docs",
    srcs = glob(["**/*.daml"]) + [
        "//daml-script/daml:daml-script",
    ],
    outs = ["daml-trigger.json"],
    cmd = """
          TMP_DIR=$$(mktemp -d)
          mkdir -p $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger.daml) $$TMP_DIR/daml/Daml
          cp -L $(location Daml/Trigger/Assert.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger/Internal.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $(location Daml/Trigger/LowLevel.daml) $$TMP_DIR/daml/Daml/Trigger
          cp -L $$PWD/$(location {daml_script}) $$TMP_DIR/daml-script.dar
          cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: daml-trigger
source: daml
version: {ghc}
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
EOF
        DAMLC=$$PWD/$(location //compiler/damlc)
        TOOLCPP=$$PWD/$(location @stackage-exe//hpp)
        JSON=$$PWD/$(location :daml-trigger.json)
        cd $$TMP_DIR
        $$DAMLC init
        $$DAMLC -- docs \
            --combine \
            --output=$$JSON \
            --format=Json \
            --cpp $$TOOLCPP \
            --package-name=daml-trigger \
            $$TMP_DIR/daml/Daml/Trigger.daml \
            $$TMP_DIR/daml/Daml/Trigger/Assert.daml \
            $$TMP_DIR/daml/Daml/Trigger/LowLevel.daml
    """.format(
        daml_script = "//daml-script/daml:daml-script",
        sdk = sdk_version,
        ghc = ghc_version,
    ),
    tools = [
        "//compiler/damlc",
        "@stackage-exe//hpp",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "daml-trigger-docs",
    srcs = [
        ":daml-trigger.json",
        ":daml-trigger-rst-template.rst",
        ":daml-trigger-index-template.rst",
        ":daml-trigger-hoogle-template.txt",
    ],
    outs = [
        "daml-trigger-rst.tar.gz",
        "daml-trigger-hoogle.txt",
        "daml-trigger-anchors.json",
    ],
    cmd = """
        $(location //compiler/damlc) -- docs \
            --output=daml-trigger-rst \
            --input-format=json \\
            --format=Rst \
            --template=$(location :daml-trigger-rst-template.rst) \
            --index-template=$(location :daml-trigger-index-template.rst) \\
            --hoogle-template=$(location :daml-trigger-hoogle-template.txt) \\
            --base-url=https://docs.daml.com/triggers/api/ \\
            --output-hoogle=$(location :daml-trigger-hoogle.txt) \\
            --output-anchor=$(location :daml-trigger-anchors.json) \\
            $(location :daml-trigger.json)
        $(execpath //bazel_tools/sh:mktgz) $(location :daml-trigger-rst.tar.gz) daml-trigger-rst
    """,
    tools = [
        "//bazel_tools/sh:mktgz",
        "//compiler/damlc",
    ],
    visibility = ["//visibility:public"],
)
