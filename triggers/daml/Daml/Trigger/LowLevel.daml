-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}
daml 1.2
module Daml.Trigger.LowLevel
  ( Message(..)
  , Completion(..)
  , CompletionStatus(..)
  , Transaction(..)
  , AnyContractId(..)
  , AbsoluteContractId(..)
  , toAnyContractId
  , fromAnyContractId
  , TransactionId(..)
  , EventId(..)
  , CommandId(..)
  , Event(..)
  , Created(..)
  , fromCreated
  , Archived(..)
  , fromArchived
  , Trigger(..)
  , ActiveContracts(..)
  , Commands(..)
  , TemplateId(..)
  , Command(..)
  , exerciseCmd
  , createCmd
  ) where

import DA.Next.Map (MapKey(..))

-- | This type represents the contract id of an unknown template.
-- You can use `fromAnyContractId` to check which template it corresponds to.
data AnyContractId = AnyContractId
  { templateId : TemplateTypeRep
  , contractId : Text
  } deriving (Show, Eq, Ord)

-- | An absolute contract id on the ledger.
-- Contrary to the `ContractId` type which is used
-- while building up a transaction in DAML, `AbsoluteContractId`
-- represents the id of a contract that has been committed to the ledger.
-- This allows us to get more instances, in particular `MapKey`.
newtype AbsoluteContractId t = AbsoluteContractId { contractId : Text }
  deriving (Show, Eq, Ord)

-- | Wrap an `AbsoluteContractId t` in `AnyContractId`.
toAnyContractId : forall t. Template t => AbsoluteContractId t -> AnyContractId
toAnyContractId (AbsoluteContractId contractId) = AnyContractId
  { templateId = templateTypeRep @t
  , contractId = contractId
  }

-- | Check if a `AnyContractId` corresponds to the given template or return
-- `None` otherwise.
fromAnyContractId : forall t. Template t => AnyContractId -> Optional (AbsoluteContractId t)
fromAnyContractId cid
  | cid.templateId == templateTypeRep @t = Some (AbsoluteContractId cid.contractId)
  | otherwise = None

newtype TransactionId = TransactionId Text
  deriving (Show, Eq)

newtype EventId = EventId Text
  deriving (Show, Eq)

newtype CommandId = CommandId Text
  deriving (Show, Eq, MapKey)

data Transaction = Transaction
 { transactionId : TransactionId
 , commandId : Optional CommandId
 , events : [Event]
 }

-- | An event in a transaction.
data Event
  = CreatedEvent Created
  | ArchivedEvent Archived

-- | The data in a `Created` event.
data Created = Created
  { eventId : EventId
  , contractId : AnyContractId
  , argument : AnyTemplate
  }

-- | Check if a `Created` event corresponds to the given template.
fromCreated : Template t => Created -> Optional (EventId, AbsoluteContractId t, t)
fromCreated Created {eventId, contractId, argument}
  | Some contractId' <- fromAnyContractId contractId
  , Some argument' <- fromAnyTemplate argument
  = Some (eventId, contractId', argument')
  | otherwise
  = None

-- | The data in an `Archived` event.
data Archived = Archived
  { eventId : EventId
  , contractId : AnyContractId
  } deriving (Show, Eq)

-- | Check if an `Archived` event corresponds to the given template.
fromArchived : Template t => Archived -> Optional (EventId, AbsoluteContractId t)
fromArchived Archived {eventId, contractId}
  | Some contractId' <- fromAnyContractId contractId
  = Some (eventId, contractId')
  | otherwise
  = None

-- | Either a transaction or a completion.
data Message
  = MTransaction Transaction
  | MCompletion Completion

-- | A completion message.
-- Note that you will only get completions for commands emitted from the trigger.
-- Contrary to the ledger API completion stream, this also includes
-- synchronous failures.
data Completion = Completion
  { commandId : CommandId
  , status : CompletionStatus
  } deriving Show

data CompletionStatus
  = Failed { status : Int, message : Text }
  | Succeeded { transactionId : TransactionId }
  deriving Show

data ActiveContracts = ActiveContracts { activeContracts : [Created] }

-- | Trigger is (approximately) a left-fold over `Message` with
-- an accumulator of type `s`.
data Trigger s = Trigger
  { initialState : Party -> ActiveContracts -> (s, [Commands])
  , update : Message -> s -> (s, [Commands])
  }

-- | We implicitly assume that the package id corresponds to the package the trigger is part of.
-- This type is temporary until we have a builtin in LF for identifiers.
data TemplateId = TemplateId
  { moduleName : Text
  , entityName : Text
  }

-- | A ledger API command. To construct a command use `createCmd` and `exerciseCmd`.
data Command
  = CreateCommand
      { templateArg : AnyTemplate
      }
  | ExerciseCommand
      { contractId : AnyContractId
      , choiceArg : AnyChoice
      }

-- | Create a contract of the given template.
createCmd : Template t => t -> Command
createCmd templateArg =
  CreateCommand (toAnyTemplate templateArg)

-- | Exercise the given choice.
exerciseCmd : forall t c r. Choice t c r => AbsoluteContractId t -> c -> Command
exerciseCmd contractId choiceArg =
  ExerciseCommand (toAnyContractId contractId) (toAnyChoice @t choiceArg)

-- | A set of commands that are submitted as a single transaction.
data Commands = Commands
  { commandId : CommandId
  , commands : [Command]
  }
