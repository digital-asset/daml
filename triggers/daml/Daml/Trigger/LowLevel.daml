-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}
daml 1.2
module Daml.Trigger.LowLevel
  ( Message(..)
  , Completion(..)
  , CompletionStatus(..)
  , Transaction(..)
  , Identifier(..)
  , AnyContractId(..)
  , TheContractId(..)
  , toAnyContractId
  , fromAnyContractId
  , TransactionId(..)
  , EventId(..)
  , CommandId(..)
  , Event(..)
  , Created(..)
  , Archived(..)
  , Trigger(..)
  , ActiveContracts(..)
  , Commands(..)
  , TemplateId(..)
  , Command(..)
  , exerciseCmd
  , createCmd
  ) where

import DA.Next.Map (MapKey(..))

data Identifier = Identifier
  { packageId : Text
  , moduleName : Text
  , entityName : Text
  } deriving (Show, Eq, Ord)

data AnyContractId = AnyContractId
  { typeRep : TemplateTypeRep
    -- XXX: Currently we need the Identifier for exercise and create commands.
    --   This information is redundant with TemplateTypeRep, but, currently
    --   there is no way to convert from TemplateTypeRep back to Identifier.
  , templateId : Identifier
  , contractId : Text
  } deriving (Show, Eq, Ord)

-- XXX: The name ContractId clashes with Prelude.ContractId.
--   Find a better name than TheContractId.
data TheContractId t = TheContractId
  { -- XXX: Currently we need the Identifier for exercise and create commands.
    --   This information is redundant with TemplateTypeRep, but, currently
    --   there is no way to convert from TemplateTypeRep back to Identifier.
    templateId : Identifier
  , contractId : Text
  } deriving (Show, Eq, Ord)

toAnyContractId : forall t. Template t => TheContractId t -> AnyContractId
toAnyContractId cid = AnyContractId
  { typeRep = templateTypeRep @t
  , templateId = cid.templateId
  , contractId = cid.contractId
  }

fromAnyContractId : forall t. Template t => AnyContractId -> Optional (TheContractId t)
fromAnyContractId cid
  | cid.typeRep == templateTypeRep @t = Some TheContractId
      { templateId = cid.templateId
      , contractId = cid.contractId
      }
  | otherwise = None

newtype TransactionId = TransactionId Text
  deriving (Show, Eq)

newtype EventId = EventId Text
  deriving (Show, Eq)

newtype CommandId = CommandId Text
  deriving (Show, Eq, MapKey)

data Transaction = Transaction
 { transactionId : TransactionId
 , commandId : Optional CommandId
 , events : [Event]
 }

data Event
  = CreatedEvent Created
  | ArchivedEvent Archived

data Created = Created
  { eventId : EventId
  , contractId : AnyContractId
  , argument : AnyTemplate
  }

data Archived = Archived
  { eventId : EventId
  , contractId : AnyContractId
  } deriving (Show, Eq)

data Message
  = MTransaction Transaction
  | MCompletion Completion

-- | Note that you will only get completions for commands emitted from the trigger.
data Completion = Completion
  { commandId : CommandId
  , status : CompletionStatus
  } deriving Show

data CompletionStatus
  = Failed { status : Int, message : Text }
  | Succeeded { transactionId : TransactionId }
  deriving Show

data ActiveContracts = ActiveContracts { activeContracts : [Created] }

-- | Trigger is (approximately) a left-fold over `Message` with
-- an accumulator of type `s`.
data Trigger s = Trigger
  { initialState : Party -> ActiveContracts -> (s, [Commands])
  , update : Message -> s -> (s, [Commands])
  }

-- | We implicitly assume that the package id corresponds to the package the trigger is part of.
-- This type is temporary until we have a builtin in LF for identifiers.
data TemplateId = TemplateId
  { moduleName : Text
  , entityName : Text
  }

data Command
  = CreateCommand
      { templateArg : AnyTemplate
      }
  | ExerciseCommand
      { contractId : AnyContractId
      , choiceArg : AnyChoice
      }

createCmd : Template t => t -> Command
createCmd templateArg =
  CreateCommand (toAnyTemplate templateArg)

exerciseCmd : forall t c r. Choice t c r => TheContractId t -> c -> Command
exerciseCmd contractId choiceArg =
  ExerciseCommand (toAnyContractId contractId) (toAnyChoice @t choiceArg)

data Commands = Commands
  { commandId : CommandId
  , commands : [Command]
  }
