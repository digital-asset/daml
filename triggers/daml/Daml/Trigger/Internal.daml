-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE CPP #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Trigger.Internal
  ( ACS (..)
  , TriggerA (..)
  , TriggerUpdateA (..)
  , TriggerInitializeA (..)
  , ActionTriggerAny (..)
  , addCommands
  , insertTpl
  , groupActiveContracts
  , deleteTpl
  , lookupTpl
  , applyEvent
  , applyTransaction
  , runRule
  , liftTriggerRule
  , TriggerAState (..)
  , TriggerState (..)
  ) where

import DA.Action.State
import DA.Functor ((<&>))
import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
import qualified DA.Map as GMap
import DA.Optional (fromOptional)
#endif

import Daml.Trigger.LowLevel hiding (Trigger)

-- public API

-- | Active contract set, you can use `getContracts` to access the templates of
-- a given type.

-- This will change to a Map once we have proper maps in DAML-LF
data ACS = ACS
  { activeContracts :
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
      GMap.Map TemplateTypeRep
        (GMap.Map AnyContractId AnyTemplate)
#else
      [(AnyContractId, AnyTemplate)]
#endif
  , pendingContracts : Map CommandId [AnyContractId]
  }

-- | TriggerA is the type used in the `rule` of a DAML trigger.
-- Its main feature is that you can call `emitCommands` to
-- send commands to the ledger.
newtype TriggerA s a = TriggerA { runTriggerA : ACS -> TriggerRule (TriggerAState s) a }

instance Functor (TriggerA s) where
  fmap f (TriggerA r) = TriggerA $ rliftFmap fmap f r

instance Applicative (TriggerA s) where
  pure = TriggerA . rliftPure pure
  TriggerA ff <*> TriggerA fa = TriggerA $ rliftAp (<*>) ff fa

instance Action (TriggerA s) where
  TriggerA fa >>= f = TriggerA $ rliftBind (>>=) fa (runTriggerA . f)

instance ActionState s (TriggerA s) where
  get = TriggerA $ const (get <&> \tas -> tas.userState)
  modify f = TriggerA . const . modify $ \tas -> tas { userState = f tas.userState }

instance HasTime (TriggerA s) where
  getTime = TriggerA $ const getTime

-- | TriggerUpdateA is the type used in the `updateState` of a DAML
-- trigger.  It has similar actions in common with `TriggerA`, but
-- cannot use `emitCommands` or `getTime`.
newtype TriggerUpdateA s a = TriggerUpdateA { runTriggerUpdateA : ACS -> State s a }

instance Functor (TriggerUpdateA s) where
  fmap f (TriggerUpdateA r) = TriggerUpdateA $ rliftFmap fmap f r

instance Applicative (TriggerUpdateA s) where
  pure = TriggerUpdateA . rliftPure pure
  TriggerUpdateA ff <*> TriggerUpdateA fa = TriggerUpdateA $ rliftAp (<*>) ff fa

instance Action (TriggerUpdateA s) where
  TriggerUpdateA fa >>= f = TriggerUpdateA $ rliftBind (>>=) fa (runTriggerUpdateA . f)

instance ActionState s (TriggerUpdateA s) where
  get = TriggerUpdateA $ const get
  put = TriggerUpdateA . const . put
  modify = TriggerUpdateA . const . modify

-- | TriggerInitializeA is the type used in the `initialize` of a DAML
-- trigger.  It can query, but not emit commands or update the state.
newtype TriggerInitializeA a = TriggerInitializeA { runTriggerInitializeA : ACS -> a }
  deriving (Functor, Applicative, Action)

-- | Features possible in `initialize`, `updateState`, and `rule`.
class ActionTriggerAny m where
  -- | Extract the contracts of a given template from the ACS.  (However, the
  -- type parameters are in the 'm a' order, so it is not exported.)
  implQuery : forall a. Template a => m [(ContractId a, a)]

-- Internal API

addCommands : Map CommandId [Command] -> Commands -> Map CommandId [Command]
addCommands m (Commands cid cmds) = Map.insert cid cmds m

insertTpl : AnyContractId -> AnyTemplate -> ACS -> ACS
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
insertTpl cid tpl acs = acs { activeContracts = GMap.alter addct cid.templateId acs.activeContracts }
  where addct = Some . GMap.insert cid tpl . fromOptional mempty
#else
insertTpl cid tpl acs = acs { activeContracts = (cid, tpl) :: acs.activeContracts }
#endif

#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
groupActiveContracts :
  [(AnyContractId, AnyTemplate)] -> GMap.Map TemplateTypeRep (GMap.Map AnyContractId AnyTemplate)
groupActiveContracts = foldr (\v@(cid, _) -> GMap.alter (addct v) cid.templateId) GMap.empty
  where addct (cid, tpl) = Some . GMap.insert cid tpl . fromOptional mempty
#else
groupActiveContracts : forall a. a -> a
groupActiveContracts a = a
#endif

deleteTpl : AnyContractId -> ACS -> ACS
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
deleteTpl cid acs = acs { activeContracts = GMap.alter rmct cid.templateId acs.activeContracts }
  where rmct om = do
          m <- om
          let m' = GMap.delete cid m
          if GMap.null m' then None else Some m'
#else
deleteTpl cid acs = acs { activeContracts = filter (\(cid', _) -> cid /= cid') acs.activeContracts }
#endif

lookupTpl : Template a => AnyContractId -> ACS -> Optional a
lookupTpl cid acs = do
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
  tpl <- GMap.lookup cid =<< GMap.lookup cid.templateId acs.activeContracts
#else
  (_, tpl) <- find ((cid ==) . fst) acs.activeContracts
#endif
  fromAnyTemplate tpl

applyEvent : Event -> ACS -> ACS
applyEvent ev acs = case ev of
  CreatedEvent (Created _ cid tpl) -> insertTpl cid tpl acs
  ArchivedEvent (Archived _ cid) -> deleteTpl cid acs

applyTransaction : Transaction -> ACS -> ACS
applyTransaction (Transaction _ _ evs) acs = foldl (flip applyEvent) acs evs

runRule
  : (Party -> TriggerA s a)
  -> TriggerRule (TriggerState s) a
runRule rule = do
  state <- get
  TriggerRule . zoom zoomIn zoomOut . runTriggerRule . flip runTriggerA state.acs
      $ rule state.party
  where zoomIn state = TriggerAState state.commandsInFlight state.acs.pendingContracts state.userState
        zoomOut state aState =
          let commandsInFlight = aState.commandsInFlight
              acs = state.acs { pendingContracts = aState.pendingContracts }
              userState = aState.userState
          in state { commandsInFlight, acs, userState }

liftTriggerRule : TriggerRule (TriggerAState s) a -> TriggerA s a
liftTriggerRule = TriggerA . const

data TriggerAState s = TriggerAState
  { commandsInFlight : Map CommandId [Command]
  -- ^ Zoomed from TriggerState; used for dedupCreateCmd/dedupExerciseCmd
  -- helpers and extended by emitCommands.
  , pendingContracts : Map CommandId [AnyContractId]
  -- ^ Map from command ids to the contract ids marked pending by that command;
  -- zoomed from TriggerState's acs.
  , userState : s
  -- ^ zoomed from TriggerState
  }

data TriggerState s = TriggerState
  { acs : ACS
  , party : Party
  , userState : s
  , commandsInFlight : Map CommandId [Command]
  }

-- unboxed newtype for common Trigger*A additions
type TriggerAT f a = ACS -> f a

rliftFmap : ((a -> b) -> f a -> f b) -> (a -> b) -> TriggerAT f a -> TriggerAT f b
rliftFmap ub f r = ub f . r

rliftPure : (a -> f a) -> a -> TriggerAT f a
rliftPure ub = const . ub

rliftAp : (f (a -> b) -> f a -> f b) -> TriggerAT f (a -> b) -> TriggerAT f a -> TriggerAT f b
rliftAp ub ff fa r = ff r `ub` fa r

rliftBind : (f a -> (a -> f b) -> f b) -> TriggerAT f a -> (a -> TriggerAT f b) -> TriggerAT f b
rliftBind ub fa f r = fa r `ub` \a -> f a r
