-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE CPP #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Trigger.Internal
  ( ACS (..)
  , TriggerA (..)
  , addCommands
  , insertTpl
  , groupActiveContracts
  , deleteTpl
  , lookupTpl
  , applyEvent
  , applyTransaction
  , runRule
  , TriggerAState (..)
  , TriggerState (..)
  ) where

import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
import qualified DA.Map as GMap
import DA.Optional (fromOptional)
#endif

import Daml.Trigger.LowLevel hiding (Trigger)

-- public API

-- | Active contract set, you can use `getContracts` to access the templates of
-- a given type.

-- This will change to a Map once we have proper maps in DAML-LF
data ACS = ACS
  { activeContracts :
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
      GMap.Map TemplateTypeRep
        (GMap.Map AnyContractId AnyTemplate)
#else
      [(AnyContractId, AnyTemplate)]
#endif
  , pendingContracts : Map CommandId [AnyContractId]
  }

-- | TriggerA is the type used in the `rule` of a DAML trigger.
-- Its main feature is that you can call `emitCommands` to
-- send commands to the ledger.
newtype TriggerA a = TriggerA (TriggerRule TriggerAState a)
  deriving (Functor, Applicative, Action, HasTime, ActionTrigger)

-- Internal API

addCommands : Map CommandId [Command] -> Commands -> Map CommandId [Command]
addCommands m (Commands cid cmds) = Map.insert cid cmds m

insertTpl : AnyContractId -> AnyTemplate -> ACS -> ACS
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
insertTpl cid tpl acs = acs { activeContracts = GMap.alter addct cid.templateId acs.activeContracts }
  where addct = Some . GMap.insert cid tpl . fromOptional mempty
#else
insertTpl cid tpl acs = acs { activeContracts = (cid, tpl) :: acs.activeContracts }
#endif

#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
groupActiveContracts :
  [(AnyContractId, AnyTemplate)] -> GMap.Map TemplateTypeRep (GMap.Map AnyContractId AnyTemplate)
groupActiveContracts = foldr (\v@(cid, _) -> GMap.alter (addct v) cid.templateId) GMap.empty
  where addct (cid, tpl) = Some . GMap.insert cid tpl . fromOptional mempty
#else
groupActiveContracts : forall a. a -> a
groupActiveContracts a = a
#endif

deleteTpl : AnyContractId -> ACS -> ACS
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
deleteTpl cid acs = acs { activeContracts = GMap.alter rmct cid.templateId acs.activeContracts }
  where rmct om = do
          m <- om
          let m' = GMap.delete cid m
          if GMap.null m' then None else Some m'
#else
deleteTpl cid acs = acs { activeContracts = filter (\(cid', _) -> cid /= cid') acs.activeContracts }
#endif

lookupTpl : Template a => AnyContractId -> ACS -> Optional a
lookupTpl cid acs = do
#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON
  tpl <- GMap.lookup cid =<< GMap.lookup cid.templateId acs.activeContracts
#else
  (_, tpl) <- find ((cid ==) . fst) acs.activeContracts
#endif
  fromAnyTemplate tpl

applyEvent : Event -> ACS -> ACS
applyEvent ev acs = case ev of
  CreatedEvent (Created _ cid tpl) -> insertTpl cid tpl acs
  ArchivedEvent (Archived _ cid) -> deleteTpl cid acs

applyTransaction : Transaction -> ACS -> ACS
applyTransaction (Transaction _ _ evs) acs = foldl (flip applyEvent) acs evs

runRule
  : (Party -> ACS -> Map CommandId [Command] -> s -> TriggerA ())
  -> TriggerRule (TriggerState s) ()
runRule rule = do
  state <- get
  TriggerRule . zoom zoomIn zoomOut . runTriggerRule . runTriggerA
      $ rule state.party state.acs state.commandsInFlight state.userState
  where zoomIn state = TriggerAState state.commandsInFlight [] state.acs.pendingContracts
        zoomOut state aState =
          let commandsInFlight = foldl addCommands state.commandsInFlight aState.emittedCommands
              acs = state.acs { pendingContracts = aState.pendingContracts }
          in state { commandsInFlight, acs }

runTriggerA : TriggerA a -> TriggerRule TriggerAState a
runTriggerA (TriggerA f) = do
  a <- f
  s' <- get
  put s' { emittedCommands = reverse s'.emittedCommands }
  pure a

data TriggerAState = TriggerAState
  { commandsInFlight : Map CommandId [Command]
  -- This is not modified during a run (new commands end up in emittedCommands)
  -- but for simplicity we keep it in TriggerAState instead of layering a
  -- Reader on top of it.
  -- This will be used for dedupCreateCmd/dedupExerciseCmd helpers.
  , emittedCommands : [Commands]
  -- ^ Emitted commands in reverse because I canâ€™t be bothered to implement a dlist.
  , pendingContracts : Map CommandId [AnyContractId]
  -- ^ Map from command ids to the contract ids marked pending by that command.
  }

data TriggerState s = TriggerState
  { acs : ACS
  , party : Party
  , userState : s
  , commandsInFlight : Map CommandId [Command]
  }
