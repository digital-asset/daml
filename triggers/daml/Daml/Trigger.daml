-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Trigger
 ( ACS
 , getContracts
 , getTemplates
 , Trigger(..)
 , TriggerA
 , emitCommands
 , runTrigger
 , CommandId
 , Command(..)
 , AnyContractId
 , toAnyContractId
 , fromAnyContractId
 , exerciseCmd
 , createCmd
 , exerciseByKeyCmd
 , dedupExercise
 , dedupCreate
 , dedupExerciseByKey
 , Message(..)
 , Completion(..)
 , Transaction(..)
 , CompletionStatus(..)
 , RegisteredTemplates(..)
 , registeredTemplate
 , RelTime(..)
 ) where

import DA.Action
import DA.Action.State
import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
import DA.Optional

import Daml.Trigger.Internal
import Daml.Trigger.LowLevel hiding (Trigger)
import qualified Daml.Trigger.LowLevel as LowLevel

-- public API

{-# DEPRECATED getTemplates "getTemplates is deprecated in favor of getContracts" #-}
getTemplates : forall a. Template a => ACS -> [(ContractId a, a)]
getTemplates = getContracts

-- | Extract the contracts of a given template from the ACS.
getContracts : forall a. Template a => ACS -> [(ContractId a, a)]
getContracts (ACS tpls pending) = mapOptional fromAny $ filter (\(cid, _) -> not $ cid `elem` allPending) tpls
  where
    fromAny (cid, tpl) = (,) <$> fromAnyContractId cid <*> fromAnyTemplate tpl
    allPending = concatMap snd $ Map.toList pending

-- | This is the type of your trigger. `s` is the user-defined state type which
-- you can often leave at `()`.
data Trigger s = Trigger
  { initialize : ACS -> s
  -- ^ Initialize the user-defined state based on the ACS.
  , updateState : ACS -> Message -> s -> s
  -- ^ Update the user-defined state based on the ACS and a transaction or
  -- completion message.
  , rule : Party -> ACS -> Time -> Map CommandId [Command] -> s -> TriggerA ()
  -- ^ The rule defines the main logic of your trigger. It can send commands
  -- to the ledger using `emitCommands` to change the ACS.
  -- The rule depends on the following arguments:
  --
  --   * The party your trigger is running as.
  --   * The current state of the ACS.
  --   * The current time (UTC in wallclock mode, Unix epoch in static mode)
  --   * The commands in flight.
  --   * The user-defined state.
  , registeredTemplates : RegisteredTemplates
  -- ^ The templates the trigger will receive events for.
  , heartbeat : Optional RelTime
  -- ^ Send a heartbeat message at the given interval.
  }

-- | Send a transaction consisting of the given commands to the ledger.
-- The second argument can be used to mark a list of contract ids as pending.
-- These contracts will automatically be filtered from getContracts until we
-- either get the corresponding transaction event for this command or
-- a failing completion.
emitCommands : [Command] -> [AnyContractId] -> TriggerA CommandId
emitCommands cmds pending = do
  state <- TriggerA get
  let id = CommandId $ show $ state.nextCommandId
  let commands = Commands id cmds
  TriggerA $ modify $ \s -> s
    { emittedCommands = commands :: s.emittedCommands
    , pendingContracts = Map.insert id pending s.pendingContracts
    , nextCommandId = s.nextCommandId + 1
    }
  pure id

-- | Create the template if itâ€™s not already in the list of commands
-- in flight (it will still be created if it is in the ACS).
--
-- Note that this will send the create as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `createCmd` and handle filtering yourself.
dedupCreate : (Eq t, Template t) => t -> TriggerA ()
dedupCreate t = do
  aState <- TriggerA get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight) <> map commands aState.emittedCommands
  unless (any ((Some t ==) . fromCreate) cmds) $
    void $ emitCommands [createCmd t] []

-- | Exercise the choice on the given contract if it is not already
-- in flight.
--
-- Note that this will send the exercise as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `exerciseCmd` and handle filtering yourself.
--
-- If you are calling a consuming choice, you might be better off by using
-- `emitCommands` and adding the contract id to the pending set.
dedupExercise : (Eq c, Choice t c r) => ContractId t -> c -> TriggerA ()
dedupExercise cid c = do
  aState <- TriggerA get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight) <> map commands aState.emittedCommands
  unless (any ((Some (cid, c) ==) . fromExercise) cmds) $
    void $ emitCommands [exerciseCmd cid c] []

-- | Exercise the choice on the given contract if it is not already
-- in flight.
--
-- Note that this will send the exercise as a single-command transaction.
-- If you need to send multiple commands in one transaction, use
-- `emitCommands` with `exerciseCmd` and handle filtering yourself.
dedupExerciseByKey : forall t c r k. (Eq c, Eq k, Choice t c r, TemplateKey t k) => k -> c -> TriggerA ()
dedupExerciseByKey k c = do
  aState <- TriggerA get
  -- This is a very naive approach that is linear in the number of commands in flight.
  -- We probably want to change this to express the commands in flight as some kind of
  -- map to make these lookups cheaper.
  let cmds = concat $ map snd (Map.toList aState.commandsInFlight) <> map commands aState.emittedCommands
  unless (any ((Some (k, c) ==) . fromExerciseByKey @t) cmds) $
    void $ emitCommands [exerciseByKeyCmd @t k c] []

-- | Transform the high-level trigger type into the one from `Daml.Trigger.LowLevel`.
runTrigger : Trigger s -> LowLevel.Trigger (TriggerState s)
runTrigger userTrigger = LowLevel.Trigger
  { initialState = initialState
  , update = update
  , registeredTemplates = userTrigger.registeredTemplates
  , heartbeat = userTrigger.heartbeat
  }
  where
    initialState party time (ActiveContracts createdEvents) =
      let acs = foldl (\acs created -> applyEvent (CreatedEvent created) acs) (ACS [] Map.empty) createdEvents
          userState = userTrigger.initialize acs
          state = TriggerState acs party userState Map.empty 0
      in runRule userTrigger.rule time state
    update time msg state =
      case msg of
        MCompletion completion ->
          let userState = userTrigger.updateState state.acs (MCompletion completion) state.userState
          in case completion.status of
            Succeeded {} ->
              -- We delete successful completions when we receive the corresponding transaction
              -- to avoid removing a command from commandsInFlight before we have modified the ACS.
              (state { userState }, [] )
            Failed {} ->
                let commandsInFlight = Map.delete completion.commandId state.commandsInFlight
                    acs = state.acs { pendingContracts = Map.delete completion.commandId state.acs.pendingContracts }
                    state' = state { commandsInFlight, userState, acs }
                in runRule userTrigger.rule time state'
        MTransaction transaction ->
          let acs = applyTransaction transaction state.acs
              userState = userTrigger.updateState acs (MTransaction transaction) state.userState
              -- See the comment above for why we delete this here instead of when we receive the completion.
              (acs', commandsInFlight) = case transaction.commandId of
                None -> (acs, state.commandsInFlight)
                Some commandId -> (acs { pendingContracts = Map.delete commandId acs.pendingContracts }, Map.delete commandId state.commandsInFlight)
              state' = state { acs = acs', userState, commandsInFlight }
          in runRule userTrigger.rule time state'
        MHeartbeat ->
          let userState = userTrigger.updateState state.acs MHeartbeat state.userState
              state' = state { userState }
          in runRule userTrigger.rule time state'
