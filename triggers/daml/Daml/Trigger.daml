-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Daml.Trigger
 ( ACS
 , getTemplates
 , Trigger(..)
 , TriggerA
 , emitCommands
 , runTrigger
 , CommandId
 , Command(..)
 , AnyContractId(..)
 , AbsoluteContractId(..)
 , toAnyContractId
 , fromAnyContractId
 , exerciseCmd
 , createCmd
 , Message(..)
 , Completion(..)
 , Transaction(..)
 , CompletionStatus(..)
 ) where

import DA.Action.State
import DA.Next.Map (Map)
import qualified DA.Next.Map as Map
import DA.Optional

import Daml.Trigger.LowLevel hiding (Trigger)
import qualified Daml.Trigger.LowLevel as LowLevel

-- public API

-- | Active contract set, you can use `getTemplates` to access the templates of
-- a given type.
newtype ACS = ACS (Map TemplateTypeRep [(AnyContractId, AnyTemplate)])

-- | Extract the templates of a given type from the ACS.
getTemplates : forall a. Template a => ACS -> [(AbsoluteContractId a, a)]
getTemplates (ACS tpls) = map fromAny $ fromOptional [] $ Map.lookup (templateTypeRep @a) tpls
  where
    fromAny (cid, tpl) = (fromSome (fromAnyContractId cid), fromSome (fromAnyTemplate tpl))

-- | This is the type of your trigger. `s` is the user-defined state type which
-- you can often leave at `()`.
data Trigger s = Trigger
  { initialize : ACS -> s
  -- ^ Initialize the user-defined state based on the ACS.
  , updateState : ACS -> Message -> s -> s
  -- ^ Update the user-defined state based on the ACS and a transaction or
  -- completion message.
  , rule : Party -> ACS -> Map CommandId [Command] -> s -> TriggerA ()
  -- ^ The rule defines the main logic of your trigger.
  -- Given the party your trigger is running as, the ACS, the commands in flight
  -- and the user-defined state, you can send commands to the ledger using
  -- `emitCommands` to change the ACS.
  }

-- | TriggerA is the type used in the `rule` of a DAML trigger.
-- Its main feature is that you can call `emitCommands` to
-- send commands to the ledger.
newtype TriggerA a = TriggerA (State TriggerAState a)
  deriving (Functor, Applicative, Action)

-- | Send a transaction consisting of the given commands to the ledger.
emitCommands : [Command] -> TriggerA CommandId
emitCommands cmds = do
  state <- TriggerA get
  let id = CommandId $ show $ state.nextCommandId
  let commands = Commands id cmds
  TriggerA $ modify $ \s -> s { emittedCommands = commands :: s.emittedCommands, nextCommandId = s.nextCommandId + 1 }
  pure id

-- | Transform the high-level trigger type into the one from `Daml.Trigger.LowLevel`.
runTrigger : Trigger s -> LowLevel.Trigger (TriggerState s)
runTrigger userTrigger = LowLevel.Trigger
  { initialState = initialState
  , update = update
  }
  where
    initialState party (ActiveContracts createdEvents) =
      let acs = foldl (\acs created -> applyEvent (CreatedEvent created) acs) (ACS Map.empty) createdEvents
          userState = userTrigger.initialize acs
          (_, TriggerAState commands nextCommandId) = runTriggerA (userTrigger.rule party acs Map.empty userState) (TriggerAState [] 0)
          commandsInFlight = foldl addCommands Map.empty commands
          state = TriggerState {acs, party, userState, commandsInFlight, nextCommandId}
      in (state, commands)
    update msg state =
      case msg of
        MCompletion completion ->
          let userState = userTrigger.updateState state.acs (MCompletion completion) state.userState
          in case completion.status of
            Succeeded {} ->
              -- We delete successful completions when we receive the corresponding transaction
              -- to avoid removing a command from commandsInFlight before we have modified the ACS.
              (state { userState }, [] )
            Failed {} ->
                let commandsInFlight = Map.delete completion.commandId state.commandsInFlight
                    (_, TriggerAState commands nextCommandId) = runTriggerA (userTrigger.rule state.party state.acs commandsInFlight userState) (TriggerAState [] state.nextCommandId)
                in (state { userState, nextCommandId, commandsInFlight }, commands)
        MTransaction transaction ->
          let acs = applyTransaction transaction state.acs
              userState = userTrigger.updateState acs (MTransaction transaction) state.userState
              -- See the comment above for why we delete this here instead of when we receive the completion.
              inFlight = case transaction.commandId of
                None -> state.commandsInFlight
                Some commandId -> Map.delete commandId state.commandsInFlight
              (_, TriggerAState commands nextCommandId) = runTriggerA (userTrigger.rule state.party acs inFlight userState) (TriggerAState [] state.nextCommandId)
              commandsInFlight = foldl addCommands state.commandsInFlight commands
          in (state { acs, userState, nextCommandId, commandsInFlight}, commands)

numCreates : Commands -> Int
numCreates (Commands _ cmds) = length $ filter (\x -> case x of CreateCommand {} -> True; _ -> False) cmds

numExercises : Commands -> Int
numExercises (Commands _ cmds) = length $ filter (\x -> case x of ExerciseCommand {} -> True; _ -> False) cmds

-- Internal API

addCommands : Map CommandId [Command] -> Commands -> Map CommandId [Command]
addCommands m (Commands cid cmds) = Map.insert cid cmds m

insertTpl : AnyContractId -> AnyTemplate -> ACS -> ACS
insertTpl cid tpl (ACS acs) =
  case Map.lookup cid.templateId acs of
    None -> ACS (Map.insert cid.templateId [(cid, tpl)] acs)
    Some items -> ACS (Map.insert cid.templateId ((cid, tpl) :: items) acs)

deleteTpl : AnyContractId -> ACS -> ACS
deleteTpl cid (ACS acs) =
  case Map.lookup cid.templateId acs of
    None -> ACS acs
    Some items -> ACS (Map.insert cid.templateId (filter (\(cid', _) -> cid /= cid') items) acs)

lookupTpl : Template a => AnyContractId -> ACS -> Optional a
lookupTpl cid (ACS acs) = do
  items <- Map.lookup cid.templateId acs
  (_, tpl) <- find ((cid ==) . fst) items
  fromAnyTemplate tpl

applyEvent : Event -> ACS -> ACS
applyEvent ev acs = case ev of
  CreatedEvent (Created _ cid tpl) -> insertTpl cid tpl acs
  ArchivedEvent (Archived _ cid) -> deleteTpl cid acs

applyTransaction : Transaction -> ACS -> ACS
applyTransaction (Transaction _ _ evs) acs = foldl (flip applyEvent) acs evs

runTriggerA : TriggerA a -> TriggerAState -> (a, TriggerAState)
runTriggerA (TriggerA f) s = runState f s

data TriggerAState = TriggerAState
  { emittedCommands : [Commands]
  -- ^ commands in reverse because I canâ€™t be bothered to implement a dlist
  , nextCommandId : Int
  }

data TriggerState s = TriggerState
  { acs : ACS
  , party : Party
  , userState : s
  , commandsInFlight : Map CommandId [Command]
  , nextCommandId : Int
  }
