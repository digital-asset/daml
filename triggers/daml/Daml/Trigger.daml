-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}
daml 1.2
module Daml.Trigger
  ( Message(..)
  , Transaction(..)
  , Identifier(..)
  , AnyContractId(..)
  , Event(..)
  , Created(..)
  , Archived(..)
  , Trigger(..)
  , ActiveContracts(..)
  , Commands(..)
  , TemplateId(..)
  , Command
  , exerciseCmd
  , createCmd
  ) where

data Identifier = Identifier
  { packageId : Text
  , moduleName : Text
  , entityName : Text
  } deriving (Show, Eq)

data AnyContractId = AnyContractId
  { templateId : Identifier
  , contractId : Text
  } deriving (Show, Eq)

data Transaction = Transaction
 { transactionId : Text
 , events : [Event]
 }

data Event
  = CreatedEvent Created
  | ArchivedEvent Archived

data Created = Created
  { eventId : Text
  , contractId : AnyContractId
  , argument : AnyTemplate
  }

data Archived = Archived
  { eventId : Text
  , contractId : AnyContractId
  } deriving (Show, Eq)

data Message
  = MTransaction Transaction

data ActiveContracts = ActiveContracts { activeContracts : [Created] }

-- | Trigger is (approximately) a left-fold over `Message` with
-- an accumulator of type `s`.
data Trigger s = Trigger
  { initialState : Party -> ActiveContracts -> s
  , update : Message -> s -> (s, Optional Commands, Text)
  }

-- | We implicitly assume that the package id corresponds to the package the trigger is part of.
-- This type is temporary until we have a builtin in LF for identifiers.
data TemplateId = TemplateId
  { moduleName : Text
  , entityName : Text
  }

-- | This is an internal hack until we have this as a builtin in DAML-LF.

-- You can think of this as an existential `data Dynamic = forall a. Dynamic a`
-- that you canâ€™t convert back from.
data LedgerValue = LedgerValue {}

-- | At runtime we turn this into the identity function
-- and convert the result to ledger values.
toLedgerValue : a -> LedgerValue
toLedgerValue = error "toLedgerValue should be removed."

data Command
  = CreateCommand
      { templateArg : AnyTemplate
      -- This needs to be AnyTemplate instead of LedgerValue
      -- to handle generic templates.
      }
  | ExerciseCommand
      { contractId : AnyContractId
      , choiceArg : LedgerValue
      }

createCmd : Template t => t -> Command
createCmd templateArg =
  CreateCommand (toAnyTemplate templateArg)

exerciseCmd : Choice t c r => AnyContractId -> c -> Command
exerciseCmd contractId choiceArg =
  ExerciseCommand contractId (toLedgerValue choiceArg)

data Commands = Commands
  { commandId : Text
  , commands : [Command]
  }
