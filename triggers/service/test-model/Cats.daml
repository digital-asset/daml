-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Cats where

import Daml.Trigger
import DA.Foldable (forA_)
import DA.Time (seconds)
import DA.Functor (void)


template Cat
  with
    owner : Party
    id : Int
  where
    signatory owner

template TestComplete
  with
    owner : Party
  where
    signatory owner

populationSize : Int
populationSize = 100

breedingTrigger : Trigger Int
breedingTrigger = Trigger
  { initialize = pure populationSize
  , updateState = \msg -> case msg of
       MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some catId)]) -> do
         modify (subtract 1)
       _ -> pure ()
  , rule = breedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

breedTheCats: Party -> TriggerA Int ()
breedTheCats party = do
  breedCount <- get
  if breedCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else
    forA_ [1..breedCount] \id -> do
      void $ emitCommands [createCmd (Cat party id)] []
