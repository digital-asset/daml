# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@oracle//:index.bzl", "oracle_tags")
load("@build_environment//:configuration.bzl", "sdk_version")
load("//daml-lf/language:daml-lf.bzl", "lf_versions_aggregate")
load("//daml-lf/language:daml-lf.bzl", "lf_version_configuration")
load("@os_info//:os_info.bzl", "is_windows")
load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "lf_scalacopts_stricter",
)

triggerMain = "src/main/scala/com/digitalasset/daml/lf/engine/trigger/ServiceMain.scala"

target_lf_versions = lf_versions_aggregate([
    "default",
    "dev",
])

da_scala_library(
    name = "trigger-service",
    srcs = glob(
        ["src/main/scala/**/*.scala"],
        exclude = [triggerMain],
    ),
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_chuusai_shapeless",
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_typesafe_akka_akka_actor",
        "@maven//:com_typesafe_akka_akka_actor_typed",
        "@maven//:com_typesafe_akka_akka_http",
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:com_typesafe_akka_akka_http_spray_json",
        "@maven//:com_typesafe_akka_akka_parsing",
        "@maven//:com_typesafe_akka_akka_stream",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_tpolecat_doobie_core",
        "@maven//:org_tpolecat_doobie_free",
        "@maven//:org_tpolecat_doobie_postgres",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_effect",
        "@maven//:org_typelevel_cats_free",
        "@maven//:org_typelevel_cats_kernel",
        "@maven//:com_github_pureconfig_pureconfig_core",
        "@maven//:com_github_pureconfig_pureconfig_generic",
    ],
    scala_runtime_deps = [
        "@maven//:com_typesafe_akka_akka_slf4j",
        "@maven//:org_tpolecat_doobie_postgres",
    ],
    scalacopts = lf_scalacopts_stricter,
    # Uncomment this if/when the target is published to maven.
    # tags = ["maven_coordinates=com.daml:trigger-service:__VERSION__"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:org_postgresql_postgresql",
    ],
    deps = [
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//language-support/scala/bindings",
        "//ledger-api/rs-grpc-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-service/cli-opts",
        "//ledger-service/metrics",
        "//ledger-service/pureconfig-utils",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/contextualized-logging",
        "//libs-scala/db-utils",
        "//libs-scala/doobie-slf4j",
        "//libs-scala/ledger-resources",
        "//libs-scala/resources",
        "//libs-scala/scala-utils",
        "//observability/akka-http-metrics",
        "//observability/metrics",
        "//triggers/metrics",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:com_typesafe_config",
        "@maven//:io_dropwizard_metrics_metrics_core",
        "@maven//:io_opentelemetry_opentelemetry_api",
        "@maven//:org_flywaydb_flyway_core",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

scala_binary_deps = [
    "@maven//:com_typesafe_akka_akka_actor",
    "@maven//:com_typesafe_akka_akka_actor_typed",
    "@maven//:com_typesafe_akka_akka_http_core",
    "@maven//:com_typesafe_scala_logging_scala_logging",
    "@maven//:org_scalaz_scalaz_core",
]

common_binary_deps = [
    ":trigger-service",
    "//daml-lf/archive:daml_lf_archive_reader",
    "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
    "//daml-lf/data",
    "//daml-lf/interpreter",
    "//language-support/scala/bindings",
    "//ledger/ledger-api-common",
    "//libs-scala/contextualized-logging",
    "//libs-scala/db-utils",
    "//libs-scala/ports",
    "//libs-scala/scala-utils",
    "//triggers/runner:trigger-runner-lib",
    "//triggers/service/auth:middleware-api",
    "@maven//:org_slf4j_slf4j_api",
    "@maven//:ch_qos_logback_logback_classic",
]

binary_deps = {
    "ce": common_binary_deps,
    "ee": common_binary_deps + ["//release:ee-license"],
}

trigger_service_runtime_deps = {
    "ce": [],
    "ee": ["@maven//:com_oracle_database_jdbc_ojdbc8"],
}

[
    da_scala_binary(
        name = "trigger-service-binary-{}".format(edition),
        srcs = [triggerMain],
        main_class = "com.daml.lf.engine.trigger.ServiceMain",
        resource_strip_prefix = "triggers/service/release/trigger-service-",
        resources = ["release/trigger-service-logback.xml"],
        scala_deps = scala_binary_deps,
        scalacopts = lf_scalacopts_stricter,
        visibility = ["//visibility:public"],
        runtime_deps = trigger_service_runtime_deps.get(edition),
        deps = binary_deps.get(edition) + [
            "//observability/metrics",
            "//runtime-components/jdbc-drivers:jdbc-drivers-{}".format(edition),
        ],
    )
    for edition in [
        "ce",
        "ee",
    ]
]

da_scala_library(
    name = "trigger-service-tests",
    srcs = glob(["src/test/scala/com/digitalasset/daml/lf/engine/trigger/*.scala"]),
    data = [
        ":test-model-{}.dar".format(lf_version)
        for lf_version in target_lf_versions
    ] + [":test-model.dar"] + (
        [
            "@toxiproxy_dev_env//:bin/toxiproxy-server",
        ] if not is_windows else [
            "@toxiproxy_dev_env//:toxiproxy-server-windows-amd64.exe",
        ]
    ),
    resources = glob(["src/test/resources/**/*"]),
    scala_deps = [
        "@maven//:com_lihaoyi_sourcecode",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_flatspec",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:com_typesafe_akka_akka_actor_typed",
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:com_typesafe_akka_akka_parsing",
    ],
    visibility = ["//test-evidence:__pkg__"],
    deps = [
        ":trigger-service",
        ":trigger-service-binary-ce",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/integration-test-lib",
        "//daml-lf/interpreter",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//ledger/ledger-runner-common",
        "//ledger/participant-integration-api",
        "//ledger/participant-integration-api:participant-integration-api-tests-lib",
        "//ledger/sandbox-on-x",
        "//ledger/sandbox-on-x:sandbox-on-x-test-lib",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/oracle-testing",
        "//libs-scala/ports",
        "//libs-scala/ports:ports-testing",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/scala-utils",
        "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//libs-scala/timer-utils",
        "//observability/metrics",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "//triggers/service/auth:oauth2-middleware",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:com_auth0_java_jwt",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_test_suite(
    name = "test",
    srcs = glob(
        ["src/test-suite/scala/**/*.scala"],
        exclude = ["**/*Oracle*"],
    ),
    data = [
        ":src/test-suite/resources/trigger-service.conf",
        ":src/test-suite/resources/trigger-service-minimal.conf",
    ],
    scala_deps = [
        "@maven//:io_spray_spray_json",
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:com_typesafe_akka_akka_parsing",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalatest_scalatest_wordspec",
        "@maven//:org_scalatest_scalatest_flatspec",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_scalactic_scalactic",
        "@maven//:com_github_scopt_scopt",
    ],
    visibility = ["//test-evidence:__pkg__"],
    deps = [
        ":trigger-service",
        ":trigger-service-tests",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/integration-test-lib",
        "//daml-lf/interpreter",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger-service/cli-opts",
        "//ledger-service/pureconfig-utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/flyway-testing",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_flywaydb_flyway_core",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_test_suite(
    name = "test-oracle",
    srcs = glob(["src/test-suite/scala/**/*Oracle*.scala"]),
    scala_deps = [
        "@maven//:io_spray_spray_json",
        "@maven//:com_typesafe_akka_akka_http_core",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalatest_scalatest_wordspec",
        "@maven//:org_scalaz_scalaz_core",
    ],
    tags = oracle_tags,
    runtime_deps = [
        "@maven//:com_oracle_database_jdbc_ojdbc8",
    ],
    deps = [
        ":trigger-service",
        ":trigger-service-tests",
        "//daml-lf/archive:daml_lf_1.dev_archive_proto_java",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//language-support/scala/bindings-akka",
        "//ledger-api/rs-grpc-bridge",
        "//ledger-api/testing-utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-common",
        "//ledger/sandbox-on-x",
        "//ledger/sandbox-on-x:sandbox-on-x-test-lib",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/oracle-testing",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

# Build one DAR per LF version to bundle with the SDK.
[
    genrule(
        name = "test-model-{}".format(lf_version),
        srcs =
            glob(["test-model/*.daml"]) + [
                "//triggers/daml:daml-trigger-{}".format(lf_version),
                "//daml-script/daml:daml-script-{}".format(lf_version),
            ],
        outs = ["test-model-{}.dar".format(lf_version)],
        cmd = """
          set -eou pipefail
          TMP_DIR=$$(mktemp -d)
          mkdir -p $$TMP_DIR/daml
          cp -L $(location :test-model/TestTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/ErrorTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/LowLevelErrorTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/ReadAs.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/Cats.daml) $$TMP_DIR/daml
          cp -L $(location {daml_trigger}) $$TMP_DIR/daml-trigger.dar
          cp -L $(location {daml_script}) $$TMP_DIR/daml-script.dar
          cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: test-model
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-trigger.dar
  - daml-script.dar
build-options: {build_options}
EOF
          $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$@
          rm -rf $$TMP_DIR
        """.format(
            build_options = str([
                "--target",
                lf_version,
            ]),
            sdk = sdk_version,
            daml_script = "//daml-script/daml:daml-script-{}".format(lf_version),
            daml_trigger = "//triggers/daml:daml-trigger-{}".format(lf_version),
        ),
        tools = ["//compiler/damlc"],
        visibility = ["//visibility:public"],
    )
    for lf_version in target_lf_versions
]

genrule(
    name = "test-model",
    srcs = [":test-model-{}".format(lf_version_configuration.get("default"))],
    outs = ["test-model.dar"],
    cmd = "cp -L $(location :test-model-{}) $$PWD/$@".format(lf_version_configuration.get("default")),
    visibility = ["//visibility:public"],
)

exports_files(["release/trigger-service-logback.xml"])
