// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Please refer to the transaction spec (in daml-foundations/daml-lf/spec/transaction.rst)
// which describes the semantics of Daml-LF transactions in more detail.
//
// [one-line] version summary
// * 14 -- initial version
// * 15 -- add interfaceId in exercise node to exercise via interface
// * dev -- special staging area for the next version to be released
syntax = "proto3";

package com.digitalasset.daml.lf.transaction;

option java_package = "com.digitalasset.daml.lf.transaction";

import "com/digitalasset/daml/lf/value.proto";

// data structure represent an update to the ledger. executing a Daml-LF action of type
// Update A produces produces one of these.
// architecture-handbook-entry-begin: Transaction
message Transaction {
    string version = 1;
    repeated string roots = 2;
    repeated Node nodes = 3;
}
// architecture-handbook-entry-end: Transaction

// architecture-handbook-entry-begin: Contract
message ThinContractInstance {
    string package_name = 4;
    reserved 5; // was  package_version
    com.digitalasset.daml.lf.value.Identifier template_id = 1;
    com.digitalasset.daml.lf.value.VersionedValue arg_versioned = 2;
    // TODO: https://github.com/digital-asset/daml/issues/18240
    //  remove agreement text for the proto
    string agreement = 3;
}
// architecture-handbook-entry-end: Contract

// architecture-handbook-entry-begin: Nodes

message Node {
  string version = 1;
  string node_id = 2;
  oneof node_type {
    FatContractInstance create = 3;
    Fetch fetch = 4;
    Exercise exercise = 5;
    Rollback rollback = 6;
    LookupByKey lookup_by_key = 1001; // *since dev*
  }

  message Fetch {
    bytes contract_id = 1;
    string package_name = 2;
    com.digitalasset.daml.lf.value.Identifier template_id = 3; // required
    com.digitalasset.daml.lf.value.Identifier interface_id = 7; // optional
    repeated string non_maintainer_signatories = 4;
    repeated string non_signatory_stakeholders = 5;
    repeated string actors = 6;
    KeyWithMaintainers key_with_maintainers = 1001; // optional *since dev*
    bool by_key = 1002;  //  *since dev*
  }

  message Exercise {
    Fetch fetch = 1; // required
    com.digitalasset.daml.lf.value.Identifier interface_id = 2; // optional
    string choice = 3;
    bytes arg = 4;
    bool consuming = 5;
    repeated string children = 6; // node ids
    bytes result = 7;
    repeated string observers = 8;
    // No listed authorizers indicates default authorizers (signatories + actors)
    repeated string authorizers = 1001;  // *since version dev*
  }

  message Rollback {
    repeated string children = 1; // node ids
  }

  // *since dev*
  message LookupByKey {
    string package_name = 1;
    com.digitalasset.daml.lf.value.Identifier template_id = 2;
    KeyWithMaintainers key_with_maintainers = 3;
    bytes contract_id = 4;
  }
}

// architecture-handbook-entry-end: Nodes

message Versioned {
  string version = 1;
  bytes payload = 2;
}

// A self contained representation of a committed contract.
message FatContractInstance {
  bytes contract_id = 1;
  string package_name = 2;
  repeated int32 package_version = 9; // required *since dev*
  com.digitalasset.daml.lf.value.Identifier template_id = 3;
  bytes create_arg = 4;
  repeated string non_maintainer_signatories = 5;
  repeated string non_signatory_stakeholders = 6;
  // Long.MinValue denotes that the creation time is unknown and should be derived from the context
  // For Create nodes, this must be set to 0.
  sfixed64 created_at = 7;
  bytes authentication_data = 8;
  KeyWithMaintainers contract_key_with_maintainers = 1001; // optional *since dev*
}


message KeyWithMaintainers {
  bytes key = 1;
  repeated string maintainers = 2; // the maintainers induced by the key
}
