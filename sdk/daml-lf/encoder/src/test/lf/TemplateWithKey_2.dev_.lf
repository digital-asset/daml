// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0


module TemplateWithKeyMod {

  record @serializable Person = { person: Party, name: Text } ;

  template (this : Person) =  {
    precondition True;
    signatories Cons @Party [TemplateWithKeyMod:Person {person} this] (Nil @Party);
    observers (Nil @Party);
    choice Sleep (self) (u: Unit) : ContractId TemplateWithKeyMod:Person
      , controllers Cons @Party [TemplateWithKeyMod:Person {person} this] (Nil @Party)
      , observers Cons @Party [TemplateWithKeyMod:Person {person} this] (Nil @Party)
      to upure @(ContractId TemplateWithKeyMod:Person) self;
    choice @nonConsuming Nap (self) (i : Int64) : Int64
      , controllers Cons @Party [TemplateWithKeyMod:Person {person} this] (Nil @Party)
      , observers Cons @Party [TemplateWithKeyMod:Person {person} this] (Nil @Party)
      to upure @Int64 i;
    key @Party (TemplateWithKeyMod:Person {person} this) (\ (p: Party) -> Cons @Party [p] (Nil @Party));
  } ;

  val exerciseByKey : Party -> Update (ContractId TemplateWithKeyMod:Person) =
    \(p: Party) -> exercise_by_key @TemplateWithKeyMod:Person Sleep p ();

  val fetchByKey: Party -> Update ('5aee9b21b8e9a4c4975b5f4c4198e6e6e8469df49e2010820e792f393db870f4':DA.Types:Tuple2 (ContractId TemplateWithKeyMod:Person) TemplateWithKeyMod:Person) =
    \(p: Party) -> fetch_by_key @TemplateWithKeyMod:Person p;

  val lookupByKey: Party -> Update (Option (ContractId TemplateWithKeyMod:Person)) =
    \(p: Party) -> lookup_by_key @TemplateWithKeyMod:Person p;

}
