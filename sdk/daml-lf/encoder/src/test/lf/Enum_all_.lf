// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

module EnumMod {

  enum @serializable Color = Red | Green | Blue;

  record @serializable Box = { x: EnumMod:Color, party: Party } ;

  template (this : Box) =  {
    precondition True;
    signatories (PartyMod:one (EnumMod:Box {party} this));
    observers (Nil @Party);
  };

  val createColoredContract:
    Party -> EnumMod:Color -> Update (ContractId EnumMod:Box) =
      \ (p: Party) (color: EnumMod:Color) ->
        create @EnumMod:Box (EnumMod:Box { x = color, party = p });

  enum Nothing = ;

  variant @serializable OptionalColor = NoColor: Unit | SomeColor: EnumMod:Color;

  variant @serializable ColoredTree = Leaf: Unit | Node : EnumMod:ColoredTree.Node;

  record @serializable ColoredTree.Node = {
    color: EnumMod:Color,
    left: EnumMod:ColoredTree,
    right: EnumMod:ColoredTree
  };

  record @serializable NestedEnumTemplate = {
    optionalColor: EnumMod:OptionalColor,
    coloredTree: EnumMod:ColoredTree,
    party: Party
  };

  template (this : NestedEnumTemplate) =  {
    precondition True;
    signatories (PartyMod:one (EnumMod:NestedEnumTemplate {party} this));
    observers (Nil @Party);
  };

  val createContracts: Party -> Update Unit = \(p: Party) ->
    ubind
      c1 : ContractId EnumMod:Box <- EnumMod:createColoredContract p EnumMod:Color:Red ;
      c2 : ContractId EnumMod:Box <- EnumMod:createColoredContract p EnumMod:Color:Green ;
      c3 : ContractId EnumMod:Box <- EnumMod:createColoredContract p EnumMod:Color:Blue
    in
      upure @Unit () ;

}
