# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//rules_daml:daml.bzl",
    "daml_build_test",
    "daml_compile",
    "default_damlc_opts",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "COMPILER_LF_MAJOR_VERSIONS",
    "ENGINE_LF_DEV_VERSIONS",
    "ENGINE_LF_VERSIONS",
    "lf_version_default_or_latest",
    "mangle_for_damlc",
)
load("@os_info//:os_info.bzl", "is_intel")

# TODO(https://github.com/digital-asset/daml/issues/18457): split
#  Exceptions.daml into templates that use keys and those that don't. Split the
# corresponding test, and re-enable this target.
# [
#     daml_compile(
#         name = "Exceptions-v{}".format(major),
#         srcs = ["Exceptions.daml"],
#         target = lf_version_default_or_latest(major),
#         visibility = ["//daml-lf:__subpackages__"],
#     )
#     for major in LF_MAJOR_VERSIONS
# ]

[
    daml_compile(
        name = "Exceptions-{}".format(mangle_for_damlc(version)),
        srcs = ["Exceptions.daml"],
        target = version,
        visibility = ["//daml-lf:__subpackages__"],
    )
    for version in ENGINE_LF_DEV_VERSIONS
]

[
    daml_compile(
        name = "Upgrades-pkgv{pkg_version}-{lf_version}".format(
            lf_version = mangle_for_damlc(lf_version),
            pkg_version = pkg_version,
        ),
        srcs = ["Upgrades.daml"],
        ghc_options = default_damlc_opts + [
            "--ghc-option=-DPACKAGE_VERSION={}".format(pkg_version),
        ],
        project_name = "upgrades",
        target = lf_version,
        typecheck_upgrades = True,
        upgrades = "//daml-lf/tests:Upgrades-pkgv{pkg_version}-{lf_version}.dar".format(
            lf_version = mangle_for_damlc(lf_version),
            pkg_version = upgraded,
        ) if upgraded != None else None,
        version = "{}.0.0".format(pkg_version),
        visibility = ["//daml-lf:__subpackages__"],
    )
    for lf_version in ENGINE_LF_VERSIONS
    for (pkg_version, upgraded) in [
        (1, None),
        (2, 1),
    ]
]

[
    daml_compile(
        name = "Interfaces-v{}".format(major),
        srcs = ["Interfaces.daml"],
        enable_interfaces = True,
        target = lf_version_default_or_latest(major),
        visibility = ["//daml-lf:__subpackages__"],
    )
    for major in COMPILER_LF_MAJOR_VERSIONS
]

[
    daml_compile(
        name = "InterfaceViews-v{}".format(major),
        srcs = ["InterfaceViews.daml"],
        enable_interfaces = True,
        target = lf_version_default_or_latest(major),
        visibility = ["//daml-lf:__subpackages__"],
    )
    for major in COMPILER_LF_MAJOR_VERSIONS
]

daml_build_test(
    name = "ReinterpretTests-v2",
    project_dir = "reinterpret",
    visibility = ["//daml-lf:__subpackages__"],
)

[
    daml_compile(
        name = "MultiKeys-{}".format(mangle_for_damlc(version)),
        srcs = ["MultiKeys.daml"],
        target = version,
        visibility = ["//daml-lf:__subpackages__"],
    )
    for version in ENGINE_LF_DEV_VERSIONS
]
