// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.8.0

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Value } from "../../Value";

export class Entry {
  static encode(message: Entry, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.key);

    const value = message.value;
    if (value !== null) {
      writer.uint32(18);
      writer.fork();
      Value.encode(value, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Entry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Entry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;

        case 2:
          message.value = Value.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: string;
  value: Value | null;

  constructor(key: string = "", value: Value | null = null) {
    this.key = key;
    this.value = value;
  }
}

export function encodeEntry(message: Entry): Uint8Array {
  return Protobuf.encode(message, Entry.encode);
}

export function decodeEntry(buffer: Uint8Array): Entry {
  return Protobuf.decode<Entry>(buffer, Entry.decode);
}
