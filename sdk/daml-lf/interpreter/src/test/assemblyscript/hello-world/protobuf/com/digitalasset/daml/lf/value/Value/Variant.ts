// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.8.0

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Value } from "../Value";

    export class Variant {
      
    static encode(message: Variant, writer: Writer): void {
      
        writer.uint32(10);
        writer.string(message.constructor);
      

        const value = message.value;
        if (value !== null) {
          writer.uint32(18);
          writer.fork();
Value.encode(value, writer);
writer.ldelim();
        }
      
    }
  
      
    static decode(reader: Reader, length: i32): Variant {
      const end: usize = length < 0 ? reader.end : reader.ptr + length;
      const message = new Variant();

      while (reader.ptr < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          
        case 1:
          message.constructor = reader.string();
          break;
      

        case 2:
          message.value = Value.decode(reader, reader.uint32());
          break;
      

          default:
            reader.skipType(tag & 7);
            break;
        }
      }

      return message;
    }
  

      constructor: string;
value: Value | null

      
    constructor(
      constructor: string = "",
value: Value | null = null
    ) {
     this.constructor = constructor;
this.value = value
    }
  
    }
  

    export function encodeVariant(message: Variant): Uint8Array {
      return Protobuf.encode(message, Variant.encode);
    }

    export function decodeVariant(buffer: Uint8Array): Variant {
      return Protobuf.decode<Variant>(buffer, Variant.decode);
    }
  