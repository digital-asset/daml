// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.8.0

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Entry } from "./TextMap/Entry";

export class TextMap {
  static encode(message: TextMap, writer: Writer): void {
    const entries = message.entries;
    for (let i: i32 = 0; i < entries.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Entry.encode(entries[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TextMap {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TextMap();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.entries.push(Entry.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  entries: Array<Entry>;

  constructor(entries: Array<Entry> = []) {
    this.entries = entries;
  }
}

export function encodeTextMap(message: TextMap): Uint8Array {
  return Protobuf.encode(message, TextMap.encode);
}

export function decodeTextMap(buffer: Uint8Array): TextMap {
  return Protobuf.decode<TextMap>(buffer, TextMap.decode);
}
