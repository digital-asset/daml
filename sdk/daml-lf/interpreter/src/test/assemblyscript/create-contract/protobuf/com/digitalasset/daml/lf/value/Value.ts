// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.8.0

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Empty } from "../../../../../google/protobuf/Empty";
import { Optional } from "./Value/Optional";
import { List } from "./Value/List";
import { Map } from "./Value/Map";
import { TextMap } from "./Value/TextMap";
import { Record } from "./Value/Record";
import { Variant } from "./Value/Variant";
import { Enum } from "./Value/Enum";

export class Value {
  static encode(message: Value, writer: Writer): void {
    const unit = message.unit;
    if (unit !== null) {
      writer.uint32(10);
      writer.fork();
      Empty.encode(unit, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.bool(message.bool);

    writer.uint32(24);
    writer.sint64(message.int64);

    writer.uint32(32);
    writer.int32(message.date);

    writer.uint32(41);
    writer.sfixed64(message.timestamp);

    writer.uint32(50);
    writer.string(message.numeric);

    writer.uint32(58);
    writer.string(message.party);

    writer.uint32(66);
    writer.string(message.text);

    writer.uint32(74);
    writer.bytes(message.contractId);

    const optional = message.optional;
    if (optional !== null) {
      writer.uint32(82);
      writer.fork();
      Optional.encode(optional, writer);
      writer.ldelim();
    }

    const list = message.list;
    if (list !== null) {
      writer.uint32(90);
      writer.fork();
      List.encode(list, writer);
      writer.ldelim();
    }

    const map = message.map;
    if (map !== null) {
      writer.uint32(98);
      writer.fork();
      Map.encode(map, writer);
      writer.ldelim();
    }

    const textMap = message.textMap;
    if (textMap !== null) {
      writer.uint32(8010);
      writer.fork();
      TextMap.encode(textMap, writer);
      writer.ldelim();
    }

    const record = message.record;
    if (record !== null) {
      writer.uint32(106);
      writer.fork();
      Record.encode(record, writer);
      writer.ldelim();
    }

    const variant = message.variant;
    if (variant !== null) {
      writer.uint32(114);
      writer.fork();
      Variant.encode(variant, writer);
      writer.ldelim();
    }

    const enum_ = message.enum;
    if (enum_ !== null) {
      writer.uint32(122);
      writer.fork();
      Enum.encode(enum_, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Value {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Value();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.unit = Empty.decode(reader, reader.uint32());
          break;

        case 2:
          message.bool = reader.bool();
          break;

        case 3:
          message.int64 = reader.sint64();
          break;

        case 4:
          message.date = reader.int32();
          break;

        case 5:
          message.timestamp = reader.sfixed64();
          break;

        case 6:
          message.numeric = reader.string();
          break;

        case 7:
          message.party = reader.string();
          break;

        case 8:
          message.text = reader.string();
          break;

        case 9:
          message.contractId = reader.bytes();
          break;

        case 10:
          message.optional = Optional.decode(reader, reader.uint32());
          break;

        case 11:
          message.list = List.decode(reader, reader.uint32());
          break;

        case 12:
          message.map = Map.decode(reader, reader.uint32());
          break;

        case 1001:
          message.textMap = TextMap.decode(reader, reader.uint32());
          break;

        case 13:
          message.record = Record.decode(reader, reader.uint32());
          break;

        case 14:
          message.variant = Variant.decode(reader, reader.uint32());
          break;

        case 15:
          message.enum = Enum.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  unit: Empty | null;
  bool: bool;
  int64: i64;
  date: i32;
  timestamp: i64;
  numeric: string;
  party: string;
  text: string;
  contractId: Uint8Array;
  optional: Optional | null;
  list: List | null;
  map: Map | null;
  textMap: TextMap | null;
  record: Record | null;
  variant: Variant | null;
  enum: Enum | null;

  constructor(
    unit: Empty | null = null,
    bool: bool = false,
    int64: i64 = 0,
    date: i32 = 0,
    timestamp: i64 = 0,
    numeric: string = "",
    party: string = "",
    text: string = "",
    contractId: Uint8Array = new Uint8Array(0),
    optional: Optional | null = null,
    list: List | null = null,
    map: Map | null = null,
    textMap: TextMap | null = null,
    record: Record | null = null,
    variant: Variant | null = null,
    enum_: Enum | null = null,
  ) {
    this.unit = unit;
    this.bool = bool;
    this.int64 = int64;
    this.date = date;
    this.timestamp = timestamp;
    this.numeric = numeric;
    this.party = party;
    this.text = text;
    this.contractId = contractId;
    this.optional = optional;
    this.list = list;
    this.map = map;
    this.textMap = textMap;
    this.record = record;
    this.variant = variant;
    this.enum = enum_;
  }
}

export function encodeValue(message: Value): Uint8Array {
  return Protobuf.encode(message, Value.encode);
}

export function decodeValue(buffer: Uint8Array): Value {
  return Protobuf.decode<Value>(buffer, Value.decode);
}
