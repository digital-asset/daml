// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `value.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.VersionedValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VersionedValue {
    // message fields
    // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.VersionedValue.version)
    pub version: ::std::string::String,
    // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.VersionedValue.value)
    pub value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.VersionedValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersionedValue {
    fn default() -> &'a VersionedValue {
        <VersionedValue as ::protobuf::Message>::default_instance()
    }
}

impl VersionedValue {
    pub fn new() -> VersionedValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &VersionedValue| { &m.version },
            |m: &mut VersionedValue| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &VersionedValue| { &m.value },
            |m: &mut VersionedValue| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersionedValue>(
            "VersionedValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersionedValue {
    const NAME: &'static str = "VersionedValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersionedValue {
        VersionedValue::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersionedValue {
        static instance: VersionedValue = VersionedValue {
            version: ::std::string::String::new(),
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersionedValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersionedValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersionedValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionedValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Each component of the module name and the name have additional
///  lexical restrictions besides non-emptiness -- see the value.rst
///  spec for more info.
// @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Identifier)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Identifier {
    // message fields
    // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Identifier.package_id)
    pub package_id: ::std::string::String,
    // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Identifier.module_name)
    pub module_name: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Identifier.name)
    pub name: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Identifier.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Identifier {
    fn default() -> &'a Identifier {
        <Identifier as ::protobuf::Message>::default_instance()
    }
}

impl Identifier {
    pub fn new() -> Identifier {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "package_id",
            |m: &Identifier| { &m.package_id },
            |m: &mut Identifier| { &mut m.package_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "module_name",
            |m: &Identifier| { &m.module_name },
            |m: &mut Identifier| { &mut m.module_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "name",
            |m: &Identifier| { &m.name },
            |m: &mut Identifier| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Identifier>(
            "Identifier",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Identifier {
    const NAME: &'static str = "Identifier";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.package_id = is.read_string()?;
                },
                18 => {
                    self.module_name.push(is.read_string()?);
                },
                26 => {
                    self.name.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.package_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.package_id);
        }
        for value in &self.module_name {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.name {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.package_id.is_empty() {
            os.write_string(1, &self.package_id)?;
        }
        for v in &self.module_name {
            os.write_string(2, &v)?;
        };
        for v in &self.name {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Identifier {
        Identifier::new()
    }

    fn clear(&mut self) {
        self.package_id.clear();
        self.module_name.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Identifier {
        static instance: Identifier = Identifier {
            package_id: ::std::string::String::new(),
            module_name: ::std::vec::Vec::new(),
            name: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Identifier {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Identifier").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Identifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Identifier {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The universe of serializable Daml-LF values.
///  architecture-handbook-entry-begin: Value
// @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Value {
    // message oneof groups
    pub sum: ::std::option::Option<value::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Value {
    fn default() -> &'a Value {
        <Value as ::protobuf::Message>::default_instance()
    }
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    // .google.protobuf.Empty unit = 1;

    pub fn unit(&self) -> &::protobuf::well_known_types::empty::Empty {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Unit(ref v)) => v,
            _ => <::protobuf::well_known_types::empty::Empty as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unit(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_unit(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Unit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::protobuf::well_known_types::empty::Empty) {
        self.sum = ::std::option::Option::Some(value::Sum::Unit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unit(&mut self) -> &mut ::protobuf::well_known_types::empty::Empty {
        if let ::std::option::Option::Some(value::Sum::Unit(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Unit(::protobuf::well_known_types::empty::Empty::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Unit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unit(&mut self) -> ::protobuf::well_known_types::empty::Empty {
        if self.has_unit() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Unit(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::empty::Empty::new()
        }
    }

    // bool bool = 2;

    pub fn bool(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Bool(v)) => v,
            _ => false,
        }
    }

    pub fn clear_bool(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_bool(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Bool(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool(&mut self, v: bool) {
        self.sum = ::std::option::Option::Some(value::Sum::Bool(v))
    }

    // sint64 int64 = 3;

    pub fn int64(&self) -> i64 {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Int64(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int64(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_int64(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Int64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64(&mut self, v: i64) {
        self.sum = ::std::option::Option::Some(value::Sum::Int64(v))
    }

    // int32 date = 4;

    pub fn date(&self) -> i32 {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Date(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_date(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Date(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i32) {
        self.sum = ::std::option::Option::Some(value::Sum::Date(v))
    }

    // sfixed64 timestamp = 5;

    pub fn timestamp(&self) -> i64 {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Timestamp(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_timestamp(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Timestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.sum = ::std::option::Option::Some(value::Sum::Timestamp(v))
    }

    // string numeric = 6;

    pub fn numeric(&self) -> &str {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Numeric(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_numeric(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_numeric(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Numeric(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_numeric(&mut self, v: ::std::string::String) {
        self.sum = ::std::option::Option::Some(value::Sum::Numeric(v))
    }

    // Mutable pointer to the field.
    pub fn mut_numeric(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(value::Sum::Numeric(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Numeric(::std::string::String::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Numeric(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_numeric(&mut self) -> ::std::string::String {
        if self.has_numeric() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Numeric(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string party = 7;

    pub fn party(&self) -> &str {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Party(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_party(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_party(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Party(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_party(&mut self, v: ::std::string::String) {
        self.sum = ::std::option::Option::Some(value::Sum::Party(v))
    }

    // Mutable pointer to the field.
    pub fn mut_party(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(value::Sum::Party(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Party(::std::string::String::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Party(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_party(&mut self) -> ::std::string::String {
        if self.has_party() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Party(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string text = 8;

    pub fn text(&self) -> &str {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Text(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.sum = ::std::option::Option::Some(value::Sum::Text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(value::Sum::Text(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Text(::std::string::String::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        if self.has_text() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes contract_id = 9;

    pub fn contract_id(&self) -> &[u8] {
        match self.sum {
            ::std::option::Option::Some(value::Sum::ContractId(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_contract_id(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_contract_id(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::ContractId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.sum = ::std::option::Option::Some(value::Sum::ContractId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contract_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(value::Sum::ContractId(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::ContractId(::std::vec::Vec::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::ContractId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_contract_id() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::ContractId(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.Optional optional = 10;

    pub fn optional(&self) -> &value::Optional {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Optional(ref v)) => v,
            _ => <value::Optional as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_optional(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_optional(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Optional(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_optional(&mut self, v: value::Optional) {
        self.sum = ::std::option::Option::Some(value::Sum::Optional(v))
    }

    // Mutable pointer to the field.
    pub fn mut_optional(&mut self) -> &mut value::Optional {
        if let ::std::option::Option::Some(value::Sum::Optional(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Optional(value::Optional::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Optional(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_optional(&mut self) -> value::Optional {
        if self.has_optional() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Optional(v)) => v,
                _ => panic!(),
            }
        } else {
            value::Optional::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.List list = 11;

    pub fn list(&self) -> &value::List {
        match self.sum {
            ::std::option::Option::Some(value::Sum::List(ref v)) => v,
            _ => <value::List as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_list(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::List(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: value::List) {
        self.sum = ::std::option::Option::Some(value::Sum::List(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut value::List {
        if let ::std::option::Option::Some(value::Sum::List(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::List(value::List::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::List(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list(&mut self) -> value::List {
        if self.has_list() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::List(v)) => v,
                _ => panic!(),
            }
        } else {
            value::List::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.Map map = 12;

    pub fn map(&self) -> &value::Map {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Map(ref v)) => v,
            _ => <value::Map as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_map(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_map(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Map(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: value::Map) {
        self.sum = ::std::option::Option::Some(value::Sum::Map(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut value::Map {
        if let ::std::option::Option::Some(value::Sum::Map(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Map(value::Map::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Map(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map(&mut self) -> value::Map {
        if self.has_map() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Map(v)) => v,
                _ => panic!(),
            }
        } else {
            value::Map::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.TextMap text_map = 1001;

    pub fn text_map(&self) -> &value::TextMap {
        match self.sum {
            ::std::option::Option::Some(value::Sum::TextMap(ref v)) => v,
            _ => <value::TextMap as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_text_map(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_text_map(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::TextMap(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_map(&mut self, v: value::TextMap) {
        self.sum = ::std::option::Option::Some(value::Sum::TextMap(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_map(&mut self) -> &mut value::TextMap {
        if let ::std::option::Option::Some(value::Sum::TextMap(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::TextMap(value::TextMap::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::TextMap(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_map(&mut self) -> value::TextMap {
        if self.has_text_map() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::TextMap(v)) => v,
                _ => panic!(),
            }
        } else {
            value::TextMap::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.Record record = 13;

    pub fn record(&self) -> &value::Record {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Record(ref v)) => v,
            _ => <value::Record as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_record(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_record(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Record(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_record(&mut self, v: value::Record) {
        self.sum = ::std::option::Option::Some(value::Sum::Record(v))
    }

    // Mutable pointer to the field.
    pub fn mut_record(&mut self) -> &mut value::Record {
        if let ::std::option::Option::Some(value::Sum::Record(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Record(value::Record::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Record(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_record(&mut self) -> value::Record {
        if self.has_record() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Record(v)) => v,
                _ => panic!(),
            }
        } else {
            value::Record::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.Variant variant = 14;

    pub fn variant(&self) -> &value::Variant {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Variant(ref v)) => v,
            _ => <value::Variant as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_variant(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_variant(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Variant(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_variant(&mut self, v: value::Variant) {
        self.sum = ::std::option::Option::Some(value::Sum::Variant(v))
    }

    // Mutable pointer to the field.
    pub fn mut_variant(&mut self) -> &mut value::Variant {
        if let ::std::option::Option::Some(value::Sum::Variant(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Variant(value::Variant::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Variant(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_variant(&mut self) -> value::Variant {
        if self.has_variant() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Variant(v)) => v,
                _ => panic!(),
            }
        } else {
            value::Variant::new()
        }
    }

    // .com.digitalasset.daml.lf.value.Value.Enum enum = 15;

    pub fn enum_(&self) -> &value::Enum {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Enum(ref v)) => v,
            _ => <value::Enum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enum_(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_enum(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(value::Sum::Enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enum(&mut self, v: value::Enum) {
        self.sum = ::std::option::Option::Some(value::Sum::Enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enum(&mut self) -> &mut value::Enum {
        if let ::std::option::Option::Some(value::Sum::Enum(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(value::Sum::Enum(value::Enum::new()));
        }
        match self.sum {
            ::std::option::Option::Some(value::Sum::Enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enum_(&mut self) -> value::Enum {
        if self.has_enum() {
            match self.sum.take() {
                ::std::option::Option::Some(value::Sum::Enum(v)) => v,
                _ => panic!(),
            }
        } else {
            value::Enum::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::empty::Empty>(
            "unit",
            Value::has_unit,
            Value::unit,
            Value::mut_unit,
            Value::set_unit,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "bool",
            Value::has_bool,
            Value::bool,
            Value::set_bool,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int64",
            Value::has_int64,
            Value::int64,
            Value::set_int64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "date",
            Value::has_date,
            Value::date,
            Value::set_date,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "timestamp",
            Value::has_timestamp,
            Value::timestamp,
            Value::set_timestamp,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "numeric",
            Value::has_numeric,
            Value::numeric,
            Value::set_numeric,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "party",
            Value::has_party,
            Value::party,
            Value::set_party,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "text",
            Value::has_text,
            Value::text,
            Value::set_text,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "contract_id",
            Value::has_contract_id,
            Value::contract_id,
            Value::set_contract_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::Optional>(
            "optional",
            Value::has_optional,
            Value::optional,
            Value::mut_optional,
            Value::set_optional,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::List>(
            "list",
            Value::has_list,
            Value::list,
            Value::mut_list,
            Value::set_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::Map>(
            "map",
            Value::has_map,
            Value::map,
            Value::mut_map,
            Value::set_map,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::TextMap>(
            "text_map",
            Value::has_text_map,
            Value::text_map,
            Value::mut_text_map,
            Value::set_text_map,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::Record>(
            "record",
            Value::has_record,
            Value::record,
            Value::mut_record,
            Value::set_record,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::Variant>(
            "variant",
            Value::has_variant,
            Value::variant,
            Value::mut_variant,
            Value::set_variant,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, value::Enum>(
            "enum",
            Value::has_enum,
            Value::enum_,
            Value::mut_enum,
            Value::set_enum,
        ));
        oneofs.push(value::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Value>(
            "Value",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Value {
    const NAME: &'static str = "Value";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Unit(is.read_message()?));
                },
                16 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Bool(is.read_bool()?));
                },
                24 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Int64(is.read_sint64()?));
                },
                32 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Date(is.read_int32()?));
                },
                41 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Timestamp(is.read_sfixed64()?));
                },
                50 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Numeric(is.read_string()?));
                },
                58 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Party(is.read_string()?));
                },
                66 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Text(is.read_string()?));
                },
                74 => {
                    self.sum = ::std::option::Option::Some(value::Sum::ContractId(is.read_bytes()?));
                },
                82 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Optional(is.read_message()?));
                },
                90 => {
                    self.sum = ::std::option::Option::Some(value::Sum::List(is.read_message()?));
                },
                98 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Map(is.read_message()?));
                },
                8010 => {
                    self.sum = ::std::option::Option::Some(value::Sum::TextMap(is.read_message()?));
                },
                106 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Record(is.read_message()?));
                },
                114 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Variant(is.read_message()?));
                },
                122 => {
                    self.sum = ::std::option::Option::Some(value::Sum::Enum(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &value::Sum::Unit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::Bool(v) => {
                    my_size += 1 + 1;
                },
                &value::Sum::Int64(v) => {
                    my_size += ::protobuf::rt::sint64_size(3, v);
                },
                &value::Sum::Date(v) => {
                    my_size += ::protobuf::rt::int32_size(4, v);
                },
                &value::Sum::Timestamp(v) => {
                    my_size += 1 + 8;
                },
                &value::Sum::Numeric(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &value::Sum::Party(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
                &value::Sum::Text(ref v) => {
                    my_size += ::protobuf::rt::string_size(8, &v);
                },
                &value::Sum::ContractId(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(9, &v);
                },
                &value::Sum::Optional(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::Map(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::TextMap(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::Record(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::Variant(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &value::Sum::Enum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &value::Sum::Unit(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &value::Sum::Bool(v) => {
                    os.write_bool(2, v)?;
                },
                &value::Sum::Int64(v) => {
                    os.write_sint64(3, v)?;
                },
                &value::Sum::Date(v) => {
                    os.write_int32(4, v)?;
                },
                &value::Sum::Timestamp(v) => {
                    os.write_sfixed64(5, v)?;
                },
                &value::Sum::Numeric(ref v) => {
                    os.write_string(6, v)?;
                },
                &value::Sum::Party(ref v) => {
                    os.write_string(7, v)?;
                },
                &value::Sum::Text(ref v) => {
                    os.write_string(8, v)?;
                },
                &value::Sum::ContractId(ref v) => {
                    os.write_bytes(9, v)?;
                },
                &value::Sum::Optional(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &value::Sum::List(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &value::Sum::Map(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &value::Sum::TextMap(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
                },
                &value::Sum::Record(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &value::Sum::Variant(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &value::Sum::Enum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Value {
        Value::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Value {
        static instance: Value = Value {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Value {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Value").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Value`
pub mod value {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:com.digitalasset.daml.lf.value.Value.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.unit)
        Unit(::protobuf::well_known_types::empty::Empty),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.bool)
        Bool(bool),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.int64)
        Int64(i64),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.date)
        Date(i32),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.timestamp)
        Timestamp(i64),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.numeric)
        Numeric(::std::string::String),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.party)
        Party(::std::string::String),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.text)
        Text(::std::string::String),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.contract_id)
        ContractId(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.optional)
        Optional(Optional),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.list)
        List(List),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.map)
        Map(Map),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.text_map)
        TextMap(TextMap),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.record)
        Record(Record),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.variant)
        Variant(Variant),
        // @@protoc_insertion_point(oneof_field:com.digitalasset.daml.lf.value.Value.enum)
        Enum(Enum),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Value as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Record)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Record {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Record.fields)
        pub fields: ::std::vec::Vec<record::Field>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Record.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Record {
        fn default() -> &'a Record {
            <Record as ::protobuf::Message>::default_instance()
        }
    }

    impl Record {
        pub fn new() -> Record {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "fields",
                |m: &Record| { &m.fields },
                |m: &mut Record| { &mut m.fields },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Record>(
                "Value.Record",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Record {
        const NAME: &'static str = "Record";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.fields.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.fields {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.fields {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Record {
            Record::new()
        }

        fn clear(&mut self) {
            self.fields.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Record {
            static instance: Record = Record {
                fields: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Record {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.Record").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Record {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Record {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Record`
    pub mod record {
        // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Record.Field)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Field {
            // message fields
            // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Record.Field.value)
            pub value: ::protobuf::MessageField<super::super::Value>,
            // special fields
            // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Record.Field.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Field {
            fn default() -> &'a Field {
                <Field as ::protobuf::Message>::default_instance()
            }
        }

        impl Field {
            pub fn new() -> Field {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Value>(
                    "value",
                    |m: &Field| { &m.value },
                    |m: &mut Field| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
                    "Value.Record.Field",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Field {
            const NAME: &'static str = "Field";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.value.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.value.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Field {
                Field::new()
            }

            fn clear(&mut self) {
                self.value.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Field {
                static instance: Field = Field {
                    value: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Field {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Value.Record.Field").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Field {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Field {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Variant)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Variant {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Variant.constructor)
        pub constructor: ::std::string::String,
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Variant.value)
        pub value: ::protobuf::MessageField<super::Value>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Variant.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Variant {
        fn default() -> &'a Variant {
            <Variant as ::protobuf::Message>::default_instance()
        }
    }

    impl Variant {
        pub fn new() -> Variant {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "constructor",
                |m: &Variant| { &m.constructor },
                |m: &mut Variant| { &mut m.constructor },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Value>(
                "value",
                |m: &Variant| { &m.value },
                |m: &mut Variant| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Variant>(
                "Value.Variant",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Variant {
        const NAME: &'static str = "Variant";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.constructor = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.constructor.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.constructor);
            }
            if let Some(v) = self.value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.constructor.is_empty() {
                os.write_string(1, &self.constructor)?;
            }
            if let Some(v) = self.value.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Variant {
            Variant::new()
        }

        fn clear(&mut self) {
            self.constructor.clear();
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Variant {
            static instance: Variant = Variant {
                constructor: ::std::string::String::new(),
                value: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Variant {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.Variant").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Variant {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Variant {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Enum)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Enum {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Enum.value)
        pub value: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Enum.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Enum {
        fn default() -> &'a Enum {
            <Enum as ::protobuf::Message>::default_instance()
        }
    }

    impl Enum {
        pub fn new() -> Enum {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &Enum| { &m.value },
                |m: &mut Enum| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Enum>(
                "Value.Enum",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Enum {
        const NAME: &'static str = "Enum";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.value = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.value);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.value.is_empty() {
                os.write_string(1, &self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Enum {
            Enum::new()
        }

        fn clear(&mut self) {
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Enum {
            static instance: Enum = Enum {
                value: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Enum {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.Enum").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Enum {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Enum {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.List)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct List {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.List.elements)
        pub elements: ::std::vec::Vec<super::Value>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.List.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a List {
        fn default() -> &'a List {
            <List as ::protobuf::Message>::default_instance()
        }
    }

    impl List {
        pub fn new() -> List {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "elements",
                |m: &List| { &m.elements },
                |m: &mut List| { &mut m.elements },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<List>(
                "Value.List",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for List {
        const NAME: &'static str = "List";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.elements.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.elements {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.elements {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> List {
            List::new()
        }

        fn clear(&mut self) {
            self.elements.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static List {
            static instance: List = List {
                elements: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for List {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.List").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for List {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for List {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Optional)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Optional {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Optional.value)
        pub value: ::protobuf::MessageField<super::Value>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Optional.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Optional {
        fn default() -> &'a Optional {
            <Optional as ::protobuf::Message>::default_instance()
        }
    }

    impl Optional {
        pub fn new() -> Optional {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Value>(
                "value",
                |m: &Optional| { &m.value },
                |m: &mut Optional| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Optional>(
                "Value.Optional",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Optional {
        const NAME: &'static str = "Optional";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.value.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Optional {
            Optional::new()
        }

        fn clear(&mut self) {
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Optional {
            static instance: Optional = Optional {
                value: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Optional {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.Optional").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Optional {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Optional {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.TextMap)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TextMap {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.TextMap.entries)
        pub entries: ::std::vec::Vec<text_map::Entry>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.TextMap.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TextMap {
        fn default() -> &'a TextMap {
            <TextMap as ::protobuf::Message>::default_instance()
        }
    }

    impl TextMap {
        pub fn new() -> TextMap {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "entries",
                |m: &TextMap| { &m.entries },
                |m: &mut TextMap| { &mut m.entries },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextMap>(
                "Value.TextMap",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TextMap {
        const NAME: &'static str = "TextMap";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.entries.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.entries {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.entries {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TextMap {
            TextMap::new()
        }

        fn clear(&mut self) {
            self.entries.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TextMap {
            static instance: TextMap = TextMap {
                entries: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TextMap {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.TextMap").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TextMap {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TextMap {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `TextMap`
    pub mod text_map {
        // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.TextMap.Entry)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Entry {
            // message fields
            // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.TextMap.Entry.key)
            pub key: ::std::string::String,
            // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.TextMap.Entry.value)
            pub value: ::protobuf::MessageField<super::super::Value>,
            // special fields
            // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.TextMap.Entry.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Entry {
            fn default() -> &'a Entry {
                <Entry as ::protobuf::Message>::default_instance()
            }
        }

        impl Entry {
            pub fn new() -> Entry {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "key",
                    |m: &Entry| { &m.key },
                    |m: &mut Entry| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Value>(
                    "value",
                    |m: &Entry| { &m.value },
                    |m: &mut Entry| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                    "Value.TextMap.Entry",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Entry {
            const NAME: &'static str = "Entry";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.key = is.read_string()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.key.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.key);
                }
                if let Some(v) = self.value.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.key.is_empty() {
                    os.write_string(1, &self.key)?;
                }
                if let Some(v) = self.value.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Entry {
                Entry::new()
            }

            fn clear(&mut self) {
                self.key.clear();
                self.value.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Entry {
                static instance: Entry = Entry {
                    key: ::std::string::String::new(),
                    value: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Entry {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Value.TextMap.Entry").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Entry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Entry {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Map)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Map {
        // message fields
        // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Map.entries)
        pub entries: ::std::vec::Vec<map::Entry>,
        // special fields
        // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Map.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Map {
        fn default() -> &'a Map {
            <Map as ::protobuf::Message>::default_instance()
        }
    }

    impl Map {
        pub fn new() -> Map {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "entries",
                |m: &Map| { &m.entries },
                |m: &mut Map| { &mut m.entries },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Map>(
                "Value.Map",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Map {
        const NAME: &'static str = "Map";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.entries.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.entries {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.entries {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Map {
            Map::new()
        }

        fn clear(&mut self) {
            self.entries.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Map {
            static instance: Map = Map {
                entries: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Map {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Value.Map").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Map {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Map {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Map`
    pub mod map {
        // @@protoc_insertion_point(message:com.digitalasset.daml.lf.value.Value.Map.Entry)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Entry {
            // message fields
            // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Map.Entry.key)
            pub key: ::protobuf::MessageField<super::super::Value>,
            // @@protoc_insertion_point(field:com.digitalasset.daml.lf.value.Value.Map.Entry.value)
            pub value: ::protobuf::MessageField<super::super::Value>,
            // special fields
            // @@protoc_insertion_point(special_field:com.digitalasset.daml.lf.value.Value.Map.Entry.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Entry {
            fn default() -> &'a Entry {
                <Entry as ::protobuf::Message>::default_instance()
            }
        }

        impl Entry {
            pub fn new() -> Entry {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Value>(
                    "key",
                    |m: &Entry| { &m.key },
                    |m: &mut Entry| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Value>(
                    "value",
                    |m: &Entry| { &m.value },
                    |m: &mut Entry| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                    "Value.Map.Entry",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Entry {
            const NAME: &'static str = "Entry";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.key.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let Some(v) = self.value.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.key.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                if let Some(v) = self.value.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Entry {
                Entry::new()
            }

            fn clear(&mut self) {
                self.key.clear();
                self.value.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Entry {
                static instance: Entry = Entry {
                    key: ::protobuf::MessageField::none(),
                    value: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Entry {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Value.Map.Entry").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Entry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Entry {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bvalue.proto\x12\x1ecom.digitalasset.daml.lf.value\x1a\x1bgoogle/pr\
    otobuf/empty.proto\"@\n\x0eVersionedValue\x12\x18\n\x07version\x18\x01\
    \x20\x01(\tR\x07version\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05valu\
    e\"`\n\nIdentifier\x12\x1d\n\npackage_id\x18\x01\x20\x01(\tR\tpackageId\
    \x12\x1f\n\x0bmodule_name\x18\x02\x20\x03(\tR\nmoduleName\x12\x12\n\x04n\
    ame\x18\x03\x20\x03(\tR\x04name\"\xbc\x0c\n\x05Value\x12,\n\x04unit\x18\
    \x01\x20\x01(\x0b2\x16.google.protobuf.EmptyH\0R\x04unit\x12\x14\n\x04bo\
    ol\x18\x02\x20\x01(\x08H\0R\x04bool\x12\x16\n\x05int64\x18\x03\x20\x01(\
    \x12H\0R\x05int64\x12\x14\n\x04date\x18\x04\x20\x01(\x05H\0R\x04date\x12\
    \x1e\n\ttimestamp\x18\x05\x20\x01(\x10H\0R\ttimestamp\x12\x1a\n\x07numer\
    ic\x18\x06\x20\x01(\tH\0R\x07numeric\x12\x16\n\x05party\x18\x07\x20\x01(\
    \tH\0R\x05party\x12\x14\n\x04text\x18\x08\x20\x01(\tH\0R\x04text\x12!\n\
    \x0bcontract_id\x18\t\x20\x01(\x0cH\0R\ncontractId\x12L\n\x08optional\
    \x18\n\x20\x01(\x0b2..com.digitalasset.daml.lf.value.Value.OptionalH\0R\
    \x08optional\x12@\n\x04list\x18\x0b\x20\x01(\x0b2*.com.digitalasset.daml\
    .lf.value.Value.ListH\0R\x04list\x12=\n\x03map\x18\x0c\x20\x01(\x0b2).co\
    m.digitalasset.daml.lf.value.Value.MapH\0R\x03map\x12K\n\x08text_map\x18\
    \xe9\x07\x20\x01(\x0b2-.com.digitalasset.daml.lf.value.Value.TextMapH\0R\
    \x07textMap\x12F\n\x06record\x18\r\x20\x01(\x0b2,.com.digitalasset.daml.\
    lf.value.Value.RecordH\0R\x06record\x12I\n\x07variant\x18\x0e\x20\x01(\
    \x0b2-.com.digitalasset.daml.lf.value.Value.VariantH\0R\x07variant\x12@\
    \n\x04enum\x18\x0f\x20\x01(\x0b2*.com.digitalasset.daml.lf.value.Value.E\
    numH\0R\x04enum\x1a\x9a\x01\n\x06Record\x12J\n\x06fields\x18\x01\x20\x03\
    (\x0b22.com.digitalasset.daml.lf.value.Value.Record.FieldR\x06fields\x1a\
    D\n\x05Field\x12;\n\x05value\x18\x01\x20\x01(\x0b2%.com.digitalasset.dam\
    l.lf.value.ValueR\x05value\x1ah\n\x07Variant\x12\x20\n\x0bconstructor\
    \x18\x01\x20\x01(\tR\x0bconstructor\x12;\n\x05value\x18\x02\x20\x01(\x0b\
    2%.com.digitalasset.daml.lf.value.ValueR\x05value\x1a\x1c\n\x04Enum\x12\
    \x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x1aI\n\x04List\x12A\n\x08el\
    ements\x18\x01\x20\x03(\x0b2%.com.digitalasset.daml.lf.value.ValueR\x08e\
    lements\x1aG\n\x08Optional\x12;\n\x05value\x18\x01\x20\x01(\x0b2%.com.di\
    gitalasset.daml.lf.value.ValueR\x05value\x1a\xb0\x01\n\x07TextMap\x12M\n\
    \x07entries\x18\x01\x20\x03(\x0b23.com.digitalasset.daml.lf.value.Value.\
    TextMap.EntryR\x07entries\x1aV\n\x05Entry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12;\n\x05value\x18\x02\x20\x01(\x0b2%.com.digitalasset.\
    daml.lf.value.ValueR\x05value\x1a\xcf\x01\n\x03Map\x12I\n\x07entries\x18\
    \x01\x20\x03(\x0b2/.com.digitalasset.daml.lf.value.Value.Map.EntryR\x07e\
    ntries\x1a}\n\x05Entry\x127\n\x03key\x18\x01\x20\x01(\x0b2%.com.digitala\
    sset.daml.lf.value.ValueR\x03key\x12;\n\x05value\x18\x02\x20\x01(\x0b2%.\
    com.digitalasset.daml.lf.value.ValueR\x05valueB\x05\n\x03sumB\x20\n\x1ec\
    om.digitalasset.daml.lf.valueJ\x88\"\n\x07\x12\x05\n\0\x84\x01\x01\n\xb8\
    \x03\n\x01\x0c\x12\x03\n\0\x12\x1a\xa4\x02\x20Please\x20refer\x20to\x20t\
    he\x20value\x20spec\x20(in\x20daml-foundations/daml-lf/spec/value.rst)\n\
    \x20which\x20describes\x20the\x20semantics\x20of\x20Daml-LF\x20values\
    \x20in\x20more\x20detail.\n\n\x20[one-line]\x20version\x20summary\n\x20*\
    \x2014\x20--\x20initial\x20version\n\x20*\x2015\x20--\x20no\x20change\
    \x20w.r.t.\x2014\n\x20*\x20dev\x20--\x20special\x20staging\x20area\x20fo\
    r\x20the\x20next\x20version\x20to\x20be\x20released\n2\x86\x01\x20Copyri\
    ght\x20(c)\x202024\x20Digital\x20Asset\x20(Switzerland)\x20GmbH\x20and/o\
    r\x20its\x20affiliates.\x20All\x20rights\x20reserved.\n\x20SPDX-License-\
    Identifier:\x20Apache-2.0\n\n\x08\n\x01\x02\x12\x03\x0c\0'\n\x08\n\x01\
    \x08\x12\x03\x0e\07\n\t\n\x02\x08\x01\x12\x03\x0e\07\n\t\n\x02\x03\0\x12\
    \x03\x10\0%\n\n\n\x02\x04\0\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x12\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x13\x04\x17\n\r\n\
    \x05\x04\0\x02\0\x04\x12\x04\x13\x04\x12\x18\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x13\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x13\x0b\x12\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x13\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x14\x04\x14\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x14\x04\x13\x17\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x14\x04\t\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x14\n\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x12\x13\
    \n\xa3\x01\n\x02\x04\x01\x12\x04\x1a\0\x1e\x01\x1a\x96\x01\x20Each\x20co\
    mponent\x20of\x20the\x20module\x20name\x20and\x20the\x20name\x20have\x20\
    additional\n\x20lexical\x20restrictions\x20besides\x20non-emptiness\x20-\
    -\x20see\x20the\x20value.rst\n\x20spec\x20for\x20more\x20info.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x1a\x08\x12\n\x18\n\x04\x04\x01\x02\0\x12\x03\
    \x1b\x02\x18\"\x0b\x20non-empty\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x1b\x02\x1a\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x1b\t\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1b\x16\x17\n\x20\n\x04\x04\x01\x02\x01\x12\x03\x1c\x02\"\"\x13\
    \x20at\x20least\x20length\x201\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\
    \x1c\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1c\x0b\x11\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x1c\x12\x1d\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x1c\x20!\n\x20\n\x04\x04\x01\x02\x02\x12\x03\x1d\x02\x1b\"\
    \x13\x20at\x20least\x20length\x201\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03\x1d\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1d\x0b\x11\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x1d\x12\x16\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x1d\x19\x1a\ne\n\x02\x04\x02\x12\x05\"\0\x84\x01\x01\
    \x1aX\x20The\x20universe\x20of\x20serializable\x20Daml-LF\x20values.\n\
    \x20architecture-handbook-entry-begin:\x20Value\n\n\n\n\x03\x04\x02\x01\
    \x12\x03\"\x08\r\n\x0c\n\x04\x04\x02\x08\0\x12\x04#\x02X\x03\n\x0c\n\x05\
    \x04\x02\x08\0\x01\x12\x03#\x08\x0b\n\x17\n\x04\x04\x02\x02\0\x12\x03'\
    \x04#2\n\x20literals\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03'\x04\x19\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03'\x1a\x1e\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03'!\"\n\x0b\n\x04\x04\x02\x02\x01\x12\x03)\x04\x12\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03)\x04\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03)\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03)\x10\x11\n\x0b\
    \n\x04\x04\x02\x02\x02\x12\x03+\x04\x15\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03+\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03+\x0b\x10\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03+\x13\x14\n\xa5\x01\n\x04\x04\x02\x02\
    \x03\x12\x030\x04\x13\x1a\x97\x01\x20days\x20since\x20the\x20unix\x20epo\
    ch.\x20can\x20go\x20backwards.\x20limited\x20from\n\x200001-01-01\x20to\
    \x209999-12-31,\x20also\x20to\x20be\x20compatible\x20with\n\x20https://w\
    ww.ietf.org/rfc/rfc3339.txt\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x030\
    \x04\t\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x030\n\x0e\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x030\x11\x12\n\xdd\x02\n\x04\x04\x02\x02\x04\x12\
    \x038\x04\x1b\x1a\xcf\x02\x20microseconds\x20since\x20the\x20UNIX\x20epo\
    ch.\x20can\x20go\x20backwards.\x20fixed\n\x20since\x20the\x20vast\x20maj\
    ority\x20of\x20values\x20will\x20be\x20greater\x20than\n\x202^28,\x20sin\
    ce\x20currently\x20the\x20number\x20of\x20microseconds\x20since\x20the\n\
    \x20epoch\x20is\x20greater\x20than\x20that.\x20Range:\x200001-01-01T00:0\
    0:00Z\x20to\n\x209999-12-31T23:59:59.999999Z,\x20so\x20that\x20we\x20can\
    \x20convert\x20to/from\n\x20https://www.ietf.org/rfc/rfc3339.txt\n\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x038\x04\x0c\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x038\r\x16\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x038\x19\x1a\n\
    \x81\x02\n\x04\x04\x02\x02\x05\x12\x03?\x04\x17\x1a\xba\x01\x20This\x20f\
    ield\x20expressed\x20a\x20number\x20in\x20base-10\x20with\x20at\x20most\
    \n\x2038\x20digits\x20from\x20which\x20at\x20most\x2037\x20can\x20be\x20\
    used\x20in\x20the\x20right\x20hand\x20side\n\x20of\x20the\x20decimal\x20\
    point.\n\n\x20See\x20value.rst\x20for\x20the\x20exact\x20syntaxes.\n\"7\
    \x20the\x20field\x20was\x20named\x20decimal\x20in\x20SDK\x200.13.26\x20o\
    r\x20earlier\n\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03?\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x05\x01\x12\x03?\x0b\x12\n\x0c\n\x05\x04\x02\x02\x05\
    \x03\x12\x03?\x15\x16\n\x0b\n\x04\x04\x02\x02\x06\x12\x03A\x04\x15\n\x0c\
    \n\x05\x04\x02\x02\x06\x05\x12\x03A\x04\n\n\x0c\n\x05\x04\x02\x02\x06\
    \x01\x12\x03A\x0b\x10\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03A\x13\x14\n\
    \x0b\n\x04\x04\x02\x02\x07\x12\x03C\x04\x14\n\x0c\n\x05\x04\x02\x02\x07\
    \x05\x12\x03C\x04\n\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03C\x0b\x0f\n\
    \x0c\n\x05\x04\x02\x02\x07\x03\x12\x03C\x12\x13\n\x0b\n\x04\x04\x02\x02\
    \x08\x12\x03E\x04\x1a\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03E\x04\t\n\
    \x0c\n\x05\x04\x02\x02\x08\x01\x12\x03E\n\x15\n\x0c\n\x05\x04\x02\x02\
    \x08\x03\x12\x03E\x18\x19\n%\n\x04\x04\x02\x02\t\x12\x03I\x04\x1b2\x18\
    \x20native\x20data\x20structures\n\n\x0c\n\x05\x04\x02\x02\t\x06\x12\x03\
    I\x04\x0c\n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03I\r\x15\n\x0c\n\x05\x04\
    \x02\x02\t\x03\x12\x03I\x18\x1a\n\x0b\n\x04\x04\x02\x02\n\x12\x03K\x04\
    \x13\n\x0c\n\x05\x04\x02\x02\n\x06\x12\x03K\x04\x08\n\x0c\n\x05\x04\x02\
    \x02\n\x01\x12\x03K\t\r\n\x0c\n\x05\x04\x02\x02\n\x03\x12\x03K\x10\x12\n\
    \x0b\n\x04\x04\x02\x02\x0b\x12\x03M\x04\x11\n\x0c\n\x05\x04\x02\x02\x0b\
    \x06\x12\x03M\x04\x07\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\x03M\x08\x0b\n\
    \x0c\n\x05\x04\x02\x02\x0b\x03\x12\x03M\x0e\x10\n.\n\x04\x04\x02\x02\x0c\
    \x12\x03O\x04\x1c\"!\x20*Available\x20in\x20versions\x20>=\x202.dev\n\n\
    \x0c\n\x05\x04\x02\x02\x0c\x06\x12\x03O\x04\x0b\n\x0c\n\x05\x04\x02\x02\
    \x0c\x01\x12\x03O\x0c\x14\n\x0c\n\x05\x04\x02\x02\x0c\x03\x12\x03O\x17\
    \x1b\n!\n\x04\x04\x02\x02\r\x12\x03S\x04\x172\x14\x20user-defined\x20dat\
    as\n\n\x0c\n\x05\x04\x02\x02\r\x06\x12\x03S\x04\n\n\x0c\n\x05\x04\x02\
    \x02\r\x01\x12\x03S\x0b\x11\n\x0c\n\x05\x04\x02\x02\r\x03\x12\x03S\x14\
    \x16\n\x0b\n\x04\x04\x02\x02\x0e\x12\x03U\x04\x19\n\x0c\n\x05\x04\x02\
    \x02\x0e\x06\x12\x03U\x04\x0b\n\x0c\n\x05\x04\x02\x02\x0e\x01\x12\x03U\
    \x0c\x13\n\x0c\n\x05\x04\x02\x02\x0e\x03\x12\x03U\x16\x18\n\x0b\n\x04\
    \x04\x02\x02\x0f\x12\x03W\x04\x13\n\x0c\n\x05\x04\x02\x02\x0f\x06\x12\
    \x03W\x04\x08\n\x0c\n\x05\x04\x02\x02\x0f\x01\x12\x03W\t\r\n\x0c\n\x05\
    \x04\x02\x02\x0f\x03\x12\x03W\x10\x12\n\x0c\n\x04\x04\x02\x03\0\x12\x04Z\
    \x02`\x03\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x03Z\n\x10\n\r\n\x06\x04\x02\
    \x03\0\x02\0\x12\x03[\x04\x1e\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\
    \x03[\x04\x0c\n\x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03[\r\x12\n\x0e\n\
    \x07\x04\x02\x03\0\x02\0\x01\x12\x03[\x13\x19\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x03\x12\x03[\x1c\x1d\n\x0e\n\x06\x04\x02\x03\0\x03\0\x12\x04]\x04\
    _\x05\n\x0e\n\x07\x04\x02\x03\0\x03\0\x01\x12\x03]\x0c\x11\n\x0f\n\x08\
    \x04\x02\x03\0\x03\0\x02\0\x12\x03^\x08\x18\n\x11\n\t\x04\x02\x03\0\x03\
    \0\x02\0\x04\x12\x04^\x08]\x13\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x06\
    \x12\x03^\x08\r\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x01\x12\x03^\x0e\x13\
    \n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x03\x12\x03^\x16\x17\n\x0c\n\x04\
    \x04\x02\x03\x01\x12\x04c\x02f\x03\n\x0c\n\x05\x04\x02\x03\x01\x01\x12\
    \x03c\n\x11\n\r\n\x06\x04\x02\x03\x01\x02\0\x12\x03d\x04\x1b\n\x0f\n\x07\
    \x04\x02\x03\x01\x02\0\x04\x12\x04d\x04c\x13\n\x0e\n\x07\x04\x02\x03\x01\
    \x02\0\x05\x12\x03d\x04\n\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x03d\
    \x0b\x16\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x03\x12\x03d\x19\x1a\n\r\n\
    \x06\x04\x02\x03\x01\x02\x01\x12\x03e\x04\x14\n\x0f\n\x07\x04\x02\x03\
    \x01\x02\x01\x04\x12\x04e\x04d\x1b\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\
    \x06\x12\x03e\x04\t\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x01\x12\x03e\n\
    \x0f\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x03\x12\x03e\x12\x13\n\x0c\n\
    \x04\x04\x02\x03\x02\x12\x04h\x02j\x03\n\x0c\n\x05\x04\x02\x03\x02\x01\
    \x12\x03h\n\x0e\n\r\n\x06\x04\x02\x03\x02\x02\0\x12\x03i\x04\x15\n\x0f\n\
    \x07\x04\x02\x03\x02\x02\0\x04\x12\x04i\x04h\x10\n\x0e\n\x07\x04\x02\x03\
    \x02\x02\0\x05\x12\x03i\x04\n\n\x0e\n\x07\x04\x02\x03\x02\x02\0\x01\x12\
    \x03i\x0b\x10\n\x0e\n\x07\x04\x02\x03\x02\x02\0\x03\x12\x03i\x13\x14\n\
    \x0c\n\x04\x04\x02\x03\x03\x12\x04l\x02n\x03\n\x0c\n\x05\x04\x02\x03\x03\
    \x01\x12\x03l\n\x0e\n\r\n\x06\x04\x02\x03\x03\x02\0\x12\x03m\x04\x20\n\
    \x0e\n\x07\x04\x02\x03\x03\x02\0\x04\x12\x03m\x04\x0c\n\x0e\n\x07\x04\
    \x02\x03\x03\x02\0\x06\x12\x03m\r\x12\n\x0e\n\x07\x04\x02\x03\x03\x02\0\
    \x01\x12\x03m\x13\x1b\n\x0e\n\x07\x04\x02\x03\x03\x02\0\x03\x12\x03m\x1e\
    \x1f\n\x0c\n\x04\x04\x02\x03\x04\x12\x04p\x02r\x03\n\x0c\n\x05\x04\x02\
    \x03\x04\x01\x12\x03p\n\x12\n\x19\n\x06\x04\x02\x03\x04\x02\0\x12\x03q\
    \x04\x14\"\n\x20optional\n\n\x0f\n\x07\x04\x02\x03\x04\x02\0\x04\x12\x04\
    q\x04p\x14\n\x0e\n\x07\x04\x02\x03\x04\x02\0\x06\x12\x03q\x04\t\n\x0e\n\
    \x07\x04\x02\x03\x04\x02\0\x01\x12\x03q\n\x0f\n\x0e\n\x07\x04\x02\x03\
    \x04\x02\0\x03\x12\x03q\x12\x13\n\x0c\n\x04\x04\x02\x03\x05\x12\x04t\x02\
    {\x03\n\x0c\n\x05\x04\x02\x03\x05\x01\x12\x03t\n\x11\n\x0e\n\x06\x04\x02\
    \x03\x05\x03\0\x12\x04u\x04x\x05\n\x0e\n\x07\x04\x02\x03\x05\x03\0\x01\
    \x12\x03u\x0c\x11\n\x0f\n\x08\x04\x02\x03\x05\x03\0\x02\0\x12\x03v\x06\
    \x15\n\x11\n\t\x04\x02\x03\x05\x03\0\x02\0\x04\x12\x04v\x06u\x13\n\x10\n\
    \t\x04\x02\x03\x05\x03\0\x02\0\x05\x12\x03v\x06\x0c\n\x10\n\t\x04\x02\
    \x03\x05\x03\0\x02\0\x01\x12\x03v\r\x10\n\x10\n\t\x04\x02\x03\x05\x03\0\
    \x02\0\x03\x12\x03v\x13\x14\n\x0f\n\x08\x04\x02\x03\x05\x03\0\x02\x01\
    \x12\x03w\x06\x16\n\x11\n\t\x04\x02\x03\x05\x03\0\x02\x01\x04\x12\x04w\
    \x06v\x15\n\x10\n\t\x04\x02\x03\x05\x03\0\x02\x01\x06\x12\x03w\x06\x0b\n\
    \x10\n\t\x04\x02\x03\x05\x03\0\x02\x01\x01\x12\x03w\x0c\x11\n\x10\n\t\
    \x04\x02\x03\x05\x03\0\x02\x01\x03\x12\x03w\x14\x15\n\r\n\x06\x04\x02\
    \x03\x05\x02\0\x12\x03z\x04\x1f\n\x0e\n\x07\x04\x02\x03\x05\x02\0\x04\
    \x12\x03z\x04\x0c\n\x0e\n\x07\x04\x02\x03\x05\x02\0\x06\x12\x03z\r\x12\n\
    \x0e\n\x07\x04\x02\x03\x05\x02\0\x01\x12\x03z\x13\x1a\n\x0e\n\x07\x04\
    \x02\x03\x05\x02\0\x03\x12\x03z\x1d\x1e\n\r\n\x04\x04\x02\x03\x06\x12\
    \x05}\x02\x83\x01\x03\n\x0c\n\x05\x04\x02\x03\x06\x01\x12\x03}\n\r\n\x0f\
    \n\x06\x04\x02\x03\x06\x03\0\x12\x05~\x04\x81\x01\x05\n\x0e\n\x07\x04\
    \x02\x03\x06\x03\0\x01\x12\x03~\x0c\x11\n\x0f\n\x08\x04\x02\x03\x06\x03\
    \0\x02\0\x12\x03\x7f\x06\x14\n\x11\n\t\x04\x02\x03\x06\x03\0\x02\0\x04\
    \x12\x04\x7f\x06~\x13\n\x10\n\t\x04\x02\x03\x06\x03\0\x02\0\x06\x12\x03\
    \x7f\x06\x0b\n\x10\n\t\x04\x02\x03\x06\x03\0\x02\0\x01\x12\x03\x7f\x0c\
    \x0f\n\x10\n\t\x04\x02\x03\x06\x03\0\x02\0\x03\x12\x03\x7f\x12\x13\n\x10\
    \n\x08\x04\x02\x03\x06\x03\0\x02\x01\x12\x04\x80\x01\x06\x16\n\x12\n\t\
    \x04\x02\x03\x06\x03\0\x02\x01\x04\x12\x05\x80\x01\x06\x7f\x14\n\x11\n\t\
    \x04\x02\x03\x06\x03\0\x02\x01\x06\x12\x04\x80\x01\x06\x0b\n\x11\n\t\x04\
    \x02\x03\x06\x03\0\x02\x01\x01\x12\x04\x80\x01\x0c\x11\n\x11\n\t\x04\x02\
    \x03\x06\x03\0\x02\x01\x03\x12\x04\x80\x01\x14\x15\n\x0e\n\x06\x04\x02\
    \x03\x06\x02\0\x12\x04\x82\x01\x04\x1f\n\x0f\n\x07\x04\x02\x03\x06\x02\0\
    \x04\x12\x04\x82\x01\x04\x0c\n\x0f\n\x07\x04\x02\x03\x06\x02\0\x06\x12\
    \x04\x82\x01\r\x12\n\x0f\n\x07\x04\x02\x03\x06\x02\0\x01\x12\x04\x82\x01\
    \x13\x1a\n\x0f\n\x07\x04\x02\x03\x06\x02\0\x03\x12\x04\x82\x01\x1d\x1eb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(VersionedValue::generated_message_descriptor_data());
            messages.push(Identifier::generated_message_descriptor_data());
            messages.push(Value::generated_message_descriptor_data());
            messages.push(value::Record::generated_message_descriptor_data());
            messages.push(value::Variant::generated_message_descriptor_data());
            messages.push(value::Enum::generated_message_descriptor_data());
            messages.push(value::List::generated_message_descriptor_data());
            messages.push(value::Optional::generated_message_descriptor_data());
            messages.push(value::TextMap::generated_message_descriptor_data());
            messages.push(value::Map::generated_message_descriptor_data());
            messages.push(value::record::Field::generated_message_descriptor_data());
            messages.push(value::text_map::Entry::generated_message_descriptor_data());
            messages.push(value::map::Entry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
