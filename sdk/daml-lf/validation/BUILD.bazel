# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@os_info//:os_info.bzl", "is_windows")
load(
    "//bazel_tools:scala.bzl",
    "da_scala_benchmark_jmh",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "default_scalacopts",
    "lf_scalacopts",
    "lf_scalacopts_stricter",
)

da_scala_library(
    name = "validation",
    srcs = glob(["src/main/**/*.scala"]),
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["maven_coordinates=com.daml:daml-lf-validation:__VERSION__"],
    visibility = [
        "//canton:__subpackages__",
        "//canton-3x:__subpackages__",
        "//compiler/scenario-service:__subpackages__",
        "//daml-lf:__subpackages__",
        # TODO https://github.com/digital-asset/daml/issues/15453
        #      Extract the error types into a separate package
        #      in order to decouple the error definitions
        #      from unnecessary daml-lf/validation dependencies
        "//ledger/ledger-api-errors:__subpackages__",
    ],
    deps = [
        "//daml-lf/data",
        "//daml-lf/language",
        "//libs-scala/scala-utils",
    ],
)

da_scala_library(
    name = "validation-test-lib",
    srcs = glob(["src/test/**/SpecUtil.scala"]),
    scala_deps = [
        "@maven//:org_scalactic_scalactic",
    ],
    scalacopts = lf_scalacopts_stricter,
    deps = [
        ":validation",
        "//daml-lf/language",
        "//daml-lf/parser",
    ],
)

da_scala_library(
    name = "upgrade-test-lib",
    srcs =
        glob(
            [
                "src/test/scala/**/upgrade/UpgradesSpecBase.scala",
                "src/test/scala/**/upgrade/UpgradesSpecUtil.scala",
            ],
        ) +
        #  we depend on sources to avoid pushing a canton artifact to maven
        [
            "//canton:community_participant_admin_proto_scala",
            #"//canton:community_admin-api_proto_scala",
        ],
    scala_deps = [
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalatest_scalatest_wordspec",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_stream",
    ],
    scaladoc = False,
    visibility = ["//visibility:public"],
    deps = [
        "//:sdk-version-scala-lib",
        "//bazel_tools/runfiles:scala_runfiles",
        "//canton:community_participant",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/archive/encoder",
        "//daml-lf/data",
        "//daml-lf/encoder",
        "//daml-lf/language",
        "//daml-lf/parser",
        "//language-support/scala/bindings",
        "//ledger/ledger-api-auth-client",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/crypto",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/testing-utils",
        "//test-common/canton/it-lib",
        "@maven//:io_grpc_grpc_api",
        "@maven//:io_grpc_grpc_netty",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_test_suite(
    name = "tests",
    size = "small",
    srcs = glob(
        ["src/test/**/*.scala"],
        exclude = [
            "src/test/**/*SpecUtil.scala",
            "src/test/**/upgrade/*",
        ],
    ),
    data = [],
    scala_deps = [],
    scalacopts = lf_scalacopts,
    deps = [
        ":validation",
        ":validation-test-lib",
        "//daml-lf/data",
        "//daml-lf/language",
        "//daml-lf/parser",
    ],
)

# TODO https://github.com/digital-asset/daml/issues/17254
#  this test should not use canton and be part of the suite above
[
    da_scala_test_suite(
        name = "upgrade-tests",
        size = "large",
        srcs = glob(
            ["src/test/**/upgrade/*.scala"],
            exclude = [
                "src/test/scala/**/upgrade/UpgradesSpecBase.scala",
                "src/test/scala/**/upgrade/UpgradesSpecUtil.scala",
            ],
        ),
        data = [
            "//test-common:dar-files-default",
            "//test-common:upgrades-CommonVersionFailure-v1a.dar",
            "//test-common:upgrades-CommonVersionFailure-v1b.dar",
            "//test-common:upgrades-MissingChoice-v1.dar",
            "//test-common:upgrades-MissingChoice-v2.dar",
            "//test-common:upgrades-MissingDataCon-v1.dar",
            "//test-common:upgrades-MissingDataCon-v2.dar",
            "//test-common:upgrades-MissingModule-v1.dar",
            "//test-common:upgrades-MissingModule-v2.dar",
            "//test-common:upgrades-MissingTemplate-v1.dar",
            "//test-common:upgrades-MissingTemplate-v2.dar",
            "//test-common:upgrades-RecordFieldsNewNonOptional-v1.dar",
            "//test-common:upgrades-RecordFieldsNewNonOptional-v2.dar",
            "//test-common:upgrades-TemplateChangedKeyType-v1.dar",
            "//test-common:upgrades-TemplateChangedKeyType-v2.dar",
            "//test-common:upgrades-ValidUpgrade-v1.dar",
            "//test-common:upgrades-ValidUpgrade-v2.dar",
            "//test-common:upgrades-ValidParameterizedTypesUpgrade-v1.dar",
            "//test-common:upgrades-ValidParameterizedTypesUpgrade-v2.dar",
            "//test-common:upgrades-ValidKeyTypeEquality-v1.dar",
            "//test-common:upgrades-ValidKeyTypeEquality-v2.dar",
            "//test-common:upgrades-UploadSucceedsWhenDepsAreValidUpgrades-v1.dar",
            "//test-common:upgrades-UploadSucceedsWhenDepsAreValidUpgrades-v2.dar",
            "//test-common:upgrades-UploadFailsWhenDepsAreInvalidUpgrades-v1.dar",
            "//test-common:upgrades-UploadFailsWhenDepsAreInvalidUpgrades-v2.dar",
            "//test-common:upgrades-SucceedsWhenNonSerializableTypesAreIncompatible-v1.dar",
            "//test-common:upgrades-SucceedsWhenNonSerializableTypesAreIncompatible-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradedFieldFromDifferentPackageName-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradedFieldFromDifferentPackageName-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradedFieldPackagesAreNotUpgradable-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradedFieldPackagesAreNotUpgradable-v2.dar",
            "//test-common:upgrades-EmptyProject-v116.dar",
            "//test-common:upgrades-EmptyProject-v1dev.dar",
            "//test-common:upgrades-FailsWhenDepIsInvalidPreviousVersionOfSelf-v2.dar",
            "//test-common:upgrades-SucceedsWhenDepIsValidPreviousVersionOfSelf-v2.dar",

            # Ported from DamlcUpgrades.hs
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateChoiceIsChanged-v1.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateChoiceIsChanged-v2.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v1.dar",
            "//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v2.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType-v1.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType-v2.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType-v1.dar",
            "//test-common:upgrades-FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType-v2.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplate-v1.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplate-v2.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplateChoice-v1.dar",
            "//test-common:upgrades-FailsWhenOldFieldIsDeletedFromTemplateChoice-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateAddsKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateAddsKeyType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateChangesKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateChangesKeyType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateChoiceChangesItsReturnType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateChoiceChangesItsReturnType-v2.dar",
            "//test-common:upgrades-FailsWhenTemplateRemovesKeyType-v1.dar",
            "//test-common:upgrades-FailsWhenTemplateRemovesKeyType-v2.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate-v1.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate-v2.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice-v1.dar",
            "//test-common:upgrades-SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice-v2.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceInputArgumentHasChanged-v1.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceInputArgumentHasChanged-v2.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged-v1.dar",
            "//test-common:upgrades-SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v1.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV2ThenV3-v3.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v1.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v2.dar",
            "//test-common:upgrades-SuccessUpgradingV3ThenV2-v3.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradingV2ThenV3-v3.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v1.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v2.dar",
            "//test-common:upgrades-FailsWhenUpgradingV3ThenV2-v3.dar",

            # More tests ported from DamlcUpgrades.hs
            "//test-common:upgrades-SucceedsWhenATopLevelEnumChanges-v1.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelEnumChanges-v2.dar",
            "//test-common:upgrades-FailsWhenATopLevelRecordAddsANonOptionalField-v1.dar",
            "//test-common:upgrades-FailsWhenATopLevelRecordAddsANonOptionalField-v2.dar",
            "//test-common:upgrades-FailsWhenATopLevelRecordAddsAnOptionalFieldBeforeTheEnd-v1.dar",
            "//test-common:upgrades-FailsWhenATopLevelRecordAddsAnOptionalFieldBeforeTheEnd-v2.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantAddsAFieldToAVariantsType-v1.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantAddsAFieldToAVariantsType-v2.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelVariantAddsAnOptionalFieldToAVariantsType-v1.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelVariantAddsAnOptionalFieldToAVariantsType-v2.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantAddsAVariant-v1.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantAddsAVariant-v2.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantRemovesAVariant-v1.dar",
            "//test-common:upgrades-FailsWhenATopLevelVariantRemovesAVariant-v2.dar",
            "//test-common:upgrades-FailsWhenTwoDeeplyNestedTypeSynonymsResolveToDifferentDatatypes-v1.dar",
            "//test-common:upgrades-FailsWhenTwoDeeplyNestedTypeSynonymsResolveToDifferentDatatypes-v2.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd-v1.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd-v2.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelTypeSynonymChanges-v1.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelTypeSynonymChanges-v2.dar",
            "//test-common:upgrades-SucceedsWhenTwoDeeplyNestedTypeSynonymsResolveToTheSameDatatypes-v1.dar",
            "//test-common:upgrades-SucceedsWhenTwoDeeplyNestedTypeSynonymsResolveToTheSameDatatypes-v2.dar",

            # More more tests ported from DamlcUpgrades.hs
            "//test-common:upgrades-FailWhenATopLevelEnumChangesChangesTheOrderOfItsVariants-v1.dar",
            "//test-common:upgrades-FailWhenATopLevelEnumChangesChangesTheOrderOfItsVariants-v2.dar",
            "//test-common:upgrades-FailWhenATopLevelVariantChangesChangesTheOrderOfItsVariants-v1.dar",
            "//test-common:upgrades-FailWhenATopLevelVariantChangesChangesTheOrderOfItsVariants-v2.dar",

            # More more more tests ported from DamlcUpgrades.hs
            "//test-common:upgrades-SucceedsWhenAnInterfaceIsOnlyDefinedInTheInitialPackage-v1.dar",
            "//test-common:upgrades-SucceedsWhenAnInterfaceIsOnlyDefinedInTheInitialPackage-v2.dar",
            "//test-common:upgrades-FailsWhenAnInstanceIsDropped-dep.dar",
            "//test-common:upgrades-FailsWhenAnInstanceIsDropped-v1.dar",
            "//test-common:upgrades-FailsWhenAnInstanceIsDropped-v2.dar",
            "//test-common:upgrades-FailsWhenAnInterfaceIsDefinedInAnUpgradingPackageWhenItWasAlreadyInThePriorPackage-v1.dar",
            "//test-common:upgrades-FailsWhenAnInterfaceIsDefinedInAnUpgradingPackageWhenItWasAlreadyInThePriorPackage-v2.dar",
            "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedSeparateDep-dep.dar",
            "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedSeparateDep-v1.dar",
            "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedSeparateDep-v2.dar",
            "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedUpgradedPackage-v1.dar",
            "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedUpgradedPackage-v2.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelVariantAddsAVariant-v1.dar",
            "//test-common:upgrades-SucceedsWhenATopLevelVariantAddsAVariant-v2.dar",
            "//test-common:upgrades-FailsWhenDatatypeChangesVariety-v1.dar",
            "//test-common:upgrades-FailsWhenDatatypeChangesVariety-v2.dar",
        ],
        flaky = False,
        scala_deps = [
            "@maven//:org_apache_pekko_pekko_actor",
            "@maven//:org_apache_pekko_pekko_stream",
        ],
        visibility = ["//visibility:public"],
        deps = [
            ":upgrade-test-lib",
            "//canton:ledger_api_proto_scala",
            "//daml-lf/data",
            "//language-support/scala/bindings",
            "//ledger/ledger-api-client",
            "//ledger/ledger-api-common",
            "//libs-scala/ledger-resources",
            "//libs-scala/ports",
            "//libs-scala/resources",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//test-common/canton/it-lib",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    ),
] if not is_windows else []

da_scala_benchmark_jmh(
    name = "typechecking-benchmark",
    srcs = glob(["src/bench/**/*.scala"]),
    data = [
        "//test-common:model-tests-default.dar",
    ],
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/scenario-interpreter",
        "//daml-lf/transaction",
        "//daml-lf/validation",
        "//test-common:dar-files-default-lib",
        "@maven//:com_google_protobuf_protobuf_java",
    ],
)
