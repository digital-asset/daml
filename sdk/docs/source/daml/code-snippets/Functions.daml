-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- The Functions example.

module Functions where

import Daml.Script
import DA.Assert
import DA.Text

multiplyThreeNumbers : Int -> Int -> Int -> Int
multiplyThreeNumbers xx yy zz =
  xx * yy * zz

multiplyTwoNumbersWith7 = multiplyThreeNumbers 7

multiplyWith21 = multiplyTwoNumbersWith7 3

multiplyWith18 = multiplyThreeNumbers 3 6

multiplyWith18_v2 : Int -> Int
multiplyWith18_v2 xx = 
  multiplyThreeNumbers 3 6 xx


-- Higher order function
applyFilter (filter : Int -> Int -> Bool)
    (x : Int)
    (y : Int) = filter x y

compute = script do
    applyFilter (<) 3 2 === False
    applyFilter (/=) 3 2 === True

    round (2.5 : Decimal) === 3
    round (3.5 : Decimal) === 4

    explode "me" === ["m", "e"]

    applyFilter (\a b -> a /= b) 3 2 === True




compose (f : b -> c) (g : a -> b) (x : a) : c = f (g x)


t = script do
  compose ((+) 4) ((*) 2) 3 === 10
  assert (compose not ((&&) True) False)
  assert (or [True, True])
