-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module SimpleDvP where

import Daml.Script
import SimpleAsset

-- SNIPPET-DVP-BEGIN
template SimpleDvP with
    party1 : Party
    party2 : Party
    asset1 : ContractId SimpleAsset
    asset2 : ContractId SimpleAsset
  where
    signatory party1
    signatory party2

    choice Settle : (ContractId SimpleAsset, ContractId SimpleAsset)
      with
        actor : Party
      controller actor
      do
        assert $ actor == party1 || actor == party2
        new1 <- exercise asset1 Transfer with newOwner = party2
        new2 <- exercise asset2 Transfer with newOwner = party1
        pure (new1, new2)
-- SNIPPET-DVP-END

-- SNIPPET-PROPOSAL-BEGIN
template ProposeSimpleDvP with
    proposer : Party
    counterparty : Party
    allocated : ContractId SimpleAsset
    expected : SimpleAsset
  where
    signatory proposer
    observer counterparty

    choice Accept : ContractId SimpleDvP
      with
        toBeAllocated : ContractId SimpleAsset
      controller counterparty
      do
        fetchedAsset <- fetch toBeAllocated
        assert $ fetchedAsset == expected
        create $ SimpleDvP with
          party1 = proposer
          party2 = counterparty
          asset1 = allocated
          asset2 = toBeAllocated

    nonconsuming choice AcceptAndSettle : (ContractId SimpleAsset, ContractId SimpleAsset)
      with
        toBeAllocated: ContractId SimpleAsset
      controller counterparty
      do
        dvp <- exercise self $ Accept with ..
        exercise dvp $ Settle with actor = counterparty
-- SNIPPET-PROPOSAL-END

simpleDvp = script do
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"
    b1 <- allocateParty "Bank1"
    b2 <- allocateParty "Bank2"
    
    eur <- submit b1 do createCmd SimpleAsset with issuer = b1; owner = alice; asset = "1 EUR"
    
    let usdAsset = SimpleAsset with issuer = b2; owner = bob; asset = "1 USD"
    usd <- submit b2 do createCmd usdAsset
    
    proposeDvP <- submit alice do createCmd ProposeSimpleDvP with proposer = alice; counterparty = bob; allocated = eur; expected = usdAsset

    -- Bob allocates and settles in one go, but in theory either of the two could exercise Settle after Bob's allocation.
    (newUsd, newEur) <- submitMulti [bob] [alice] do exerciseCmd proposeDvP $ AcceptAndSettle with toBeAllocated = usd

    submit b2 do exerciseCmd newEur Archive
    submit b1 do exerciseCmd newUsd Archive
