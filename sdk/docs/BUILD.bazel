# Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@os_info//:os_info.bzl", "is_windows")
load("//rules_daml:daml.bzl", "daml_build_test", "daml_compile", "daml_multi_package_test", "daml_test")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@build_environment//:configuration.bzl", "mvn_version", "sdk_version")
load("@scala_version//:index.bzl", "scala_major_version")
load("//bazel_tools:scala.bzl", "da_scala_test")
load(
    "//daml-lf/language:daml-lf.bzl",
    "COMPILER_LF_MAJOR_VERSIONS",
    "ENGINE_LF_DEV_VERSIONS",
    "lf_version_configuration",
)

genrule(
    name = "hoogle_db",
    srcs = [
        "//compiler/damlc:daml-base-hoogle.txt",
        "//daml-script/daml:daml-script-hoogle.txt",
    ],
    outs = ["hoogle_db.tar.gz"],
    cmd = """
    mkdir hoogle
    cp -L $(location //compiler/damlc:daml-base-hoogle.txt) hoogle/
    cp -L $(location //daml-script/daml:daml-script-hoogle.txt) hoogle/
    $(execpath //bazel_tools/sh:mktgz) $@ hoogle
  """,
    tools = ["//bazel_tools/sh:mktgz"],
)

genrule(
    name = "index",
    srcs = [":sources"],
    outs = ["index.rst"],
    cmd = """
set -euo pipefail

DIR=$$(mktemp -d)
mkdir -p $$DIR/docs
tar xf $(location :sources) -C $$DIR/docs
cat << EOF >> $@
Daml Files
----------

.. toctree::
   :titlesonly:
   :maxdepth: 0
   :hidden:

   self
$$(cd $$DIR/docs/source; find . -name \\*.rst | sed 's:\\./\\(.*\\).rst:    \\1 <\\1>:')

Canton References
-----------------

.. toctree::
   canton-refs
EOF
    """,
)

genrule(
    name = "sources",
    srcs = glob(
        ["source/**"],
        exclude = ["**/.daml/**"],
    ) + [
        "//compiler/damlc:daml-base-rst.tar.gz",
        # "//daml-script/daml:daml-script-rst.tar.gz",
        "//:LICENSE",
        "//:NOTICES",
    ],
    outs = ["source.tar.gz"],
    cmd = """
        cp -rL docs/source source

        # Copy in Stdlib
        mkdir -p source/sdk/reference/daml/stdlib
        tar xf $(location //compiler/damlc:daml-base-rst.tar.gz) \\
            --strip-components 1 \\
            -C source/sdk/reference/daml/stdlib

        # Copy in daml-script documentation
        # mkdir -p source/sdk/reference/daml-script/api/
        # tar xf $$(location //daml-script/daml:daml-script-rst.tar.gz) \\
        #     --strip-components 1 \\
        #     -C source/sdk/reference/daml-script/api/

        # Copy in License and Notices
        cp -L $(location //:LICENSE) source/LICENSE
        cp -L $(location //:NOTICES) source/NOTICES

        $(execpath //bazel_tools/sh:mktgz) $@ source
    """,
    tools = ["//bazel_tools/sh:mktgz"],
)

genrule(
    name = "sphinx-source-tree-deps",
    srcs = [
        "configs/static/pygments_daml_lexer.py",
        "configs/static/typescript.py",
        "configs/html/conf.py",
        "configs/pdf/conf.py",
        "configs/pdf/logo.png",
        "//templates:templates-tarball",
        "//compiler/damlc:daml-base-rst.tar.gz",
        # "//daml-script/daml:daml-script-rst.tar.gz",
        "//:LICENSE",
        "//:NOTICES",
    ],
    outs = ["sphinx-source-tree-deps.tar.gz"],
    cmd = """
    set -eou pipefail
    DIR=$$(mktemp -d)
    trap "rm -rf $$DIR" EXIT

    mkdir -p $$DIR/deps/configs/{{static,pdf,html}}
    cp $(location configs/static/pygments_daml_lexer.py) $$DIR/deps/configs/static
    cp $(location configs/static/typescript.py) $$DIR/deps/configs/static
    cp $(location configs/html/conf.py) $$DIR/deps/configs/html
    cp $(location configs/pdf/conf.py) $$DIR/deps/configs/pdf
    cp $(location configs/pdf/logo.png) $$DIR/deps/configs/pdf

    cp $(location //templates:templates-tarball) $$DIR/deps/

    cp $(location //compiler/damlc:daml-base-rst.tar.gz) $$DIR/deps/
    # cp $$(location //daml-script/daml:daml-script-rst.tar.gz) $$DIR/deps/
    cp -L $(location //:LICENSE) $$DIR/deps/
    cp -L $(location //:NOTICES) $$DIR/deps/

    MKTGZ=$$PWD/$(execpath //bazel_tools/sh:mktgz)
    OUT_PATH=$$PWD/$@
    cd $$DIR
    $$MKTGZ $$OUT_PATH deps
  """.format(sdk = sdk_version),
    tools = [
        "//bazel_tools/sh:mktgz",
    ],
) if not is_windows else None

genrule(
    name = "sphinx-source-tree",
    srcs = [
        "configs/static/pygments_daml_lexer.py",
        "configs/static/typescript.py",
        "configs/html/conf.py",
        "configs/pdf/conf.py",
        "configs/pdf/logo.png",
        ":index",
        ":sources",
        "//templates:templates-tarball",
    ],
    outs = ["sphinx-source-tree.tar.gz"],
    cmd = """
    set -eou pipefail
    DIR=$$(mktemp -d)
    trap "rm -rf $$DIR" EXIT
    mkdir -p $$DIR/docs

    mkdir -p $$DIR/docs/configs/static $$DIR/docs/configs/html $$DIR/docs/configs/pdf/fonts
    cp $(location configs/static/pygments_daml_lexer.py) $$DIR/docs/configs/static
    cp $(location configs/static/typescript.py) $$DIR/docs/configs/static

    tar xf $(location :sources) -C $$DIR/docs

    cp $(location configs/html/conf.py) $$DIR/docs/configs/html
    cp $(location configs/pdf/conf.py) $$DIR/docs/configs/pdf
    sed -i "s,__VERSION__,"{sdk}"," $$DIR/docs/configs/html/conf.py
    sed -i "s,__VERSION__,"{sdk}"," $$DIR/docs/configs/pdf/conf.py
    cp $(location index) $$DIR/docs/source/index.rst

    cp $(location configs/pdf/logo.png) $$DIR/docs/configs/pdf

    TEMPLATES_DIR=$$DIR/docs/source/_templates
    mkdir -p $$TEMPLATES_DIR
    tar xf $(location //templates:templates-tarball) -C $$TEMPLATES_DIR --strip-components=1

    MKTGZ=$$PWD/$(execpath //bazel_tools/sh:mktgz)
    OUT_PATH=$$PWD/$@
    cd $$DIR
    $$MKTGZ $$OUT_PATH docs
  """.format(sdk = sdk_version),
    tools = [
        "//bazel_tools/sh:mktgz",
    ],
) if not is_windows else None

genrule(
    name = "sharable-docs",
    srcs = [
        ":hoogle_db.tar.gz",
        ":sources",
        "//templates:templates-tarball",
    ],
    outs = ["sharable-docs.tar.gz"],
    cmd = """
    set -eou pipefail
    DIR=$$(mktemp -d)
    trap "rm -rf $$DIR" EXIT
    mkdir -p $$DIR/docs

    tar xf $(location :sources) -C $$DIR/docs

    # Append hoogle DB
    tar xf $(location :hoogle_db.tar.gz) -C $$DIR/docs/source

    MKTGZ=$$PWD/$(execpath //bazel_tools/sh:mktgz)
    OUT_PATH=$$PWD/$@
    cd $$DIR
    $$MKTGZ $$OUT_PATH docs/source
  """.format(sdk = sdk_version),
    tools = [
        "//bazel_tools/sh:mktgz",
    ],
) if not is_windows else None

filegroup(
    name = "pdf-fonts",
    srcs = glob(["configs/pdf/fonts/**"]) + ["@freefont//:fonts"],
)

pkg_tar(
    name = "pdf-fonts-tar",
    srcs = [":pdf-fonts"],
    extension = "tar.gz",
)

# we prune InteractiveSubmissionDataOuterClass from the tarball becuase is full filename is too long
genrule(
    name = "non-sphinx-html-docs",
    srcs = [
        ":hoogle_db.tar.gz",
        "//language-support/java:javadoc",
        "//language-support/ts/daml-react:docs",
        "//language-support/ts/daml-ledger:docs",
        "//language-support/ts/daml-types:docs",
        "@daml-cheat-sheet//:site",
        ":redirects",
        "error.html",
    ],
    outs = ["non-sphinx-html-docs.tar.gz"],
    cmd = """
    set -eou pipefail
    DIR=$$(mktemp -d)
    trap "rm -rf DIR" EXIT
    mkdir -p $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-java/javadocs

    # Copy Javadoc using unzip to avoid having to know the path to the 'jar' binary. Note flag to overwrite
    unzip -q -o $(locations //language-support/java:javadoc) -d $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-java/javadocs
    # Remove JAR metadata
    rm -r $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-java/javadocs/META-INF

    # Copy generated documentation for typescript libraries
    mkdir -p $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-react
    mkdir -p $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-ledger
    mkdir -p $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-types
    tar -xzf $(location //language-support/ts/daml-react:docs) --strip-components 1 -C $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-react/
    tar -xzf $(location //language-support/ts/daml-ledger:docs) --strip-components 1 -C $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-ledger/
    tar -xzf $(location //language-support/ts/daml-types:docs) --strip-components 1 -C $$DIR/html/sdk/sdlc-howtos/applications/integrate/bindings-ts/daml-types/

    # Get the daml cheat sheet
    mkdir -p $$DIR/html/cheat-sheet
    tar -xzf $(location @daml-cheat-sheet//:site) --strip-components 1 -C $$DIR/html/cheat-sheet

    # Copy in hoogle DB
    cp -L $(location :hoogle_db.tar.gz) $$DIR/html/hoogle_db.tar.gz

    echo {{ \\"{version}\\" : \\"{version}\\" }} > $$DIR/html/versions.json
    cp $(location :error.html) $$DIR/html/
    tar xf $(location :redirects) --strip-components=1 -C $$DIR/html

    MKTGZ=$$PWD/$(execpath //bazel_tools/sh:mktgz)
    OUT_PATH=$$PWD/$@
    cd $$DIR
    $$MKTGZ $$OUT_PATH html
  """.format(version = sdk_version),
    tools = ["//bazel_tools/sh:mktgz"],
) if not is_windows else None

genrule(
    name = "redirects",
    srcs = [
        "redirects.map",
        "redirect_template.html",
    ],
    outs = ["redirects.tar.gz"],
    cmd = """
        mkdir redirects
        while read l; do
            from=$$(awk -F' -> ' '{print $$1}' <<<$$l)
            to=$$(awk -F' -> ' '{print $$2}' <<<"$$l")
            if [ $$to ]
            then
                mkdir -p redirects/$$(dirname $$from)
                cp -L docs/redirect_template.html redirects/$$from
                sed -i -e "s,__URL__,$${to}," redirects/$$from
            fi
        done <docs/redirects.map
        $(execpath //bazel_tools/sh:mktgz) $@ redirects
    """,
    tools = ["//bazel_tools/sh:mktgz"],
)

filegroup(
    name = "daml-assistant-iou-setup",
    srcs = glob(
        ["source/sdk/tutorials/quickstart/template-root/*"],
        # excluding quickstart-java stuff
        exclude = [
            "source/sdk/tutorials/quickstart/template-root/src",
            "source/sdk/tutorials/quickstart/template-root/pom.xml",
        ],
        exclude_directories = 0,
    ),
    visibility = ["//visibility:public"],
)

genrule(
    name = "quickstart-java",
    srcs = glob(["source/sdk/tutorials/quickstart/template-root/**"]),
    outs = ["quickstart-java.tar.gz"],
    cmd = """
        set -eou pipefail
        TMP_DIR=$$(mktemp -d)
        trap "rm -rf $$TMP_DIR" EXIT
        mkdir -p $$TMP_DIR/quickstart-java
        cp -rL docs/source/sdk/tutorials/quickstart/template-root/* $$TMP_DIR/quickstart-java/
        sed -i "s/__VERSION__/{mvn}/" $$TMP_DIR/quickstart-java/pom.xml
        $(execpath //bazel_tools/sh:mktgz) $@ -C $$TMP_DIR quickstart-java
    """.format(mvn = mvn_version),
    tools = ["//bazel_tools/sh:mktgz"],
    visibility = ["//visibility:public"],
)

load("//language-support/java/codegen:codegen.bzl", "dar_to_java")

genrule(
    name = "quickstart-model",
    srcs = [
        "//docs:source/sdk/tutorials/quickstart/template-root/daml/Main.daml",
        "//docs:source/sdk/tutorials/quickstart/template-root/daml/Iou.daml",
        "//docs:source/sdk/tutorials/quickstart/template-root/daml/IouTrade.daml",
        "//daml-script/daml:daml-script.dar",
    ],
    outs = ["quickstart-model.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -R -L $(location //docs:source/sdk/tutorials/quickstart/template-root/daml/Main.daml) $$TMP_DIR/daml/
      cp -R -L $(location //docs:source/sdk/tutorials/quickstart/template-root/daml/Iou.daml) $$TMP_DIR/daml/
      cp -R -L $(location //docs:source/sdk/tutorials/quickstart/template-root/daml/IouTrade.daml) $$TMP_DIR/daml/
      cp -L $(location //daml-script/daml:daml-script.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: quickstart-model
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
build-options: ["--ghc-option", "-Werror"]
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location quickstart-model.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
    visibility = ["//visibility:public"],
)

dar_to_java(
    name = "quickstart-model-java",
    src = "quickstart-model.dar",
    package_prefix = "com.daml.quickstart.model",
)

java_binary(
    name = "quickstart-java-lib",
    srcs = glob(["source/sdk/tutorials/quickstart/template-root/src/main/java/**/*.java"]) + [":quickstart-model-java-src.jar"],
    main_class = "com.daml.quickstart.iou.IouMain",
    deps = [
        "//canton:bindings-java",
        "//daml-lf/archive:daml_lf_archive_proto_java",
        "//language-support/java/bindings-rxjava",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_google_guava_guava",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:com_sparkjava_spark_core",
        "@maven//:io_reactivex_rxjava2_rxjava",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

daml_test(
    name = "ledger-api-daml-test",
    srcs = glob(["source/sdk/sdlc-howtos/applications/integrate/grpc/code-snippets/**/*.daml"]),
    additional_compiler_flags = [
        "-Wupgrade-interfaces",
        "-Wupgrade-exceptions",
    ],
    # TODO(https://github.com/digital-asset/daml/issues/18457): remove contract
    #   keys from the docs, delete the explicit target, and revert the
    #   daml-script.dar to the non-dev version.
    target = "2.dev",
    deps = ["//daml-script/daml:daml-script-2.dev.dar"],
)

daml_test(
    name = "bindings-java-daml-test",
    srcs = glob(["source/sdk/sdlc-howtos/applications/integrate/bindings-java/code-snippets/**/*.daml"]),
    additional_compiler_flags = [
        "-Wupgrade-interfaces",
        "-Wupgrade-exceptions",
    ],
    enable_interfaces = True,
    # TODO(https://github.com/digital-asset/daml/issues/18457): remove contract
    #   keys from the docs and delete the explicit target.
    target = "2.dev",
)

daml_test(
    name = "patterns-daml-test",
    srcs = glob(["source/sdk/sdlc-howtos/smart-contracts/develop/patterns/daml/**/*.daml"]),
    deps = ["//daml-script/daml:daml-script.dar"],
)

pkg_tar(
    name = "daml-patterns",
    srcs = glob(["source/sdk/sdlc-howtos/smart-contracts/develop/patterns/daml/**/*.daml"]) + ["source/sdk/sdlc-howtos/smart-contracts/develop/patterns/daml.yaml.template"],
    strip_prefix = "/docs/source/sdk/sdlc-howtos/smart-contracts/develop/patterns",
    visibility = ["//visibility:public"],
)

daml_test(
    name = "daml-studio-daml-test",
    srcs = glob(["source/sdk/component-howtos/smart_contracts/daml-studio/daml/**/*.daml"]),
    deps = ["//daml-script/daml:daml-script.dar"],
)

daml_test(
    name = "daml-ref-daml-test",
    timeout = "long",
    srcs = glob(["source/sdk/reference/daml/code-snippets/**/*.daml"]),
    additional_compiler_flags = [
        "-Wupgrade-interfaces",
        "-Wupgrade-exceptions",
    ],
    # TODO(https://github.com/digital-asset/daml/issues/18457): remove contract keys from the
    #  docs, delete the explicit target, and revert the daml-script.dar to the non-dev version.
    target = "2.dev",
    deps = ["//daml-script/daml:daml-script-2.dev.dar"],
)

[
    daml_test(
        name = "daml-ref-daml-test-{}".format(version),
        timeout = "long",
        srcs = glob(["source/sdk/reference/daml/code-snippets-dev/**/*.daml"]),
        additional_compiler_flags = [
            "-Wupgrade-interfaces",
            "-Wupgrade-exceptions",
        ],
        enable_interfaces = True,
        target = version,
    )
    for version in ENGINE_LF_DEV_VERSIONS
]

daml_test(
    name = "quickstart-daml-test",
    srcs = glob(
        include = ["source/sdk/tutorials/quickstart/template-root/daml/**/*.daml"],
    ),
    deps = ["//daml-script/daml:daml-script.dar"],
)

daml_test(
    name = "ledger-model-daml-test",
    srcs = glob(["source/overview/explanations/ledger-model/daml/**/*.daml"]),
    deps = ["//daml-script/daml:daml-script.dar"],
)

daml_test(
    name = "java-bindings-docs-daml-test",
    srcs = glob(["source/sdk/sdlc-howtos/applications/integrate/bindings-java/daml/**/*.daml"]),
)

daml_test(
    name = "daml-intro-daml-test-base",
    srcs = glob(
        ["source/sdk/tutorials/smart-contracts/daml/**/*.daml"],
        exclude = [
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-exceptions/**",
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-functional-101/**",
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-test/**",
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-9/**",
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-11/**",
        ],
    ),
    target = "2.1",
    deps = ["//daml-script/daml:daml-script-2.1.dar"],
)

[
    daml_test(
        name = "daml-intro-exceptions-daml-test-{}".format(version),
        srcs = glob(["source/sdk/tutorials/smart-contracts/daml/daml-intro-exceptions/**/*.daml"]),
        additional_compiler_flags = ["-Wupgrade-exceptions"],
        target = version,
        deps = ["//daml-script/daml:daml-script-{}.dar".format(version)],
    )
    for version in ENGINE_LF_DEV_VERSIONS
]

daml_test(
    name = "daml-intro-9-daml-test",
    srcs = glob(["source/sdk/tutorials/smart-contracts/daml/daml-intro-9/**/*.daml"]),
    data_deps = [":daml-intro-compose.dar"],
    deps = ["//daml-script/daml:daml-script.dar"],
)

daml_test(
    name = "daml-intro-daml-functional-101-test",
    srcs = glob(
        ["source/sdk/tutorials/smart-contracts/daml/daml-intro-functional-101/**/*.daml"],
    ),
    additional_compiler_flags = ["--ghc-option=-Wwarn=incomplete-patterns"],
    deps = ["//daml-script/daml:daml-script.dar"],
)

daml_build_test(
    name = "daml-intro-compose",
    daml_yaml = ":daml-intro-compose.yaml",
    dar_dict = {
        "//daml-script/daml:daml-script.dar": "daml-script.dar",
    },
    project_dir = "source/sdk/tutorials/smart-contracts/daml/daml-intro-compose",
)

daml_multi_package_test(
    name = "daml-intro-test",
    srcs = glob(["source/sdk/tutorials/smart-contracts/daml/daml-intro-test/**/*.daml"]),
    build_files = glob(["source/sdk/tutorials/smart-contracts/daml/daml-intro-test/**/daml.yaml.template"]),
    multi_package_file = ":source/sdk/tutorials/smart-contracts/daml/daml-intro-test/multi-package.yaml",
)

daml_build_test(
    name = "daml-upgrade-example-v1",
    dar_dict = {
        # TODO(https://github.com/digital-asset/daml/issues/18457): remove
        # contract keys from the docs and revert daml-script.dar to the non-dev
        # version.
        "//daml-script/daml:daml-script-2.dev.dar": "daml-script.dar",
    },
    project_dir = "source/sdk/sdlc-howtos/smart-contracts/upgrade/example/carbon-1.0.0",
)

daml_build_test(
    name = "daml-upgrade-example-v2",
    project_dir = "source/sdk/sdlc-howtos/smart-contracts/upgrade/example/carbon-2.0.0",
)

daml_build_test(
    name = "daml-upgrade-example-upgrade",
    dar_dict = {
        ":daml-upgrade-example-v1": "path/to/carbon-1.0.0.dar",
        ":daml-upgrade-example-v2": "path/to/carbon-2.0.0.dar",
    },
    project_dir = "source/sdk/sdlc-howtos/smart-contracts/upgrade/example/carbon-upgrade",
)

daml_build_test(
    name = "daml-upgrade-example-extend",
    dar_dict = {
        ":daml-upgrade-example-v1": "path/to/carbon-1.0.0.dar",
    },
    project_dir = "source/sdk/sdlc-howtos/smart-contracts/upgrade/example/carbon-label",
)

daml_build_test(
    name = "daml-upgrade-example-upgrade-script",
    dar_dict = {
        ":daml-upgrade-example-v1": "path/to/carbon-1.0.0.dar",
        ":daml-upgrade-example-v2": "path/to/carbon-2.0.0.dar",
        ":daml-upgrade-example-upgrade": "path/to/carbon-upgrade-1.0.0.dar",
        # TODO(https://github.com/digital-asset/daml/issues/18457): remove
        # contract keys from the docs and revert daml-script.dar to the non-dev
        # version.
        "//daml-script/daml:daml-script-2.dev.dar": "daml-script.dar",
    },
    project_dir = "source/sdk/sdlc-howtos/smart-contracts/upgrade/example/carbon-initiate-upgrade",
)

pkg_tar(
    name = "daml-intro-templates",
    srcs = glob(
        ["source/sdk/tutorials/smart-contracts/daml/**"],
        exclude = [
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-9/**",
            "source/sdk/tutorials/smart-contracts/daml/daml-intro-11/**",
        ],
    ),
    strip_prefix = "source/sdk/tutorials/smart-contracts/daml",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "script-example-template",
    srcs = glob(
        ["source/sdk/component-howtos/ledger-interaction/daml-script/template-root/**"],
        exclude = ["**/*~"],
    ),
    strip_prefix = "source/sdk/component-howtos/ledger-interaction/daml-script/template-root",
    visibility = ["//visibility:public"],
)

exports_files([
    "source/sdk/component-howtos/ledger-interaction/daml-script/template-root/src/ScriptExample.daml",
])
