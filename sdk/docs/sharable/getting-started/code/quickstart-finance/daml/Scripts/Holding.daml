module Scripts.Holding where

import DA.Map qualified as Map (fromList)
import DA.Set qualified as Set (fromList)
import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Account.V4.Factory qualified as AccountFactory (I)
import Daml.Finance.Interface.Holding.V4.Holding qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Token.V4.Factory qualified as TokenFactory (Create(..), I)
import Daml.Finance.Interface.Instrument.Token.V4.Types (Token(..))
import Daml.Finance.Interface.Types.Common.V3.Types (AccountKey, HoldingStandard(..), Id(..), InstrumentKey(..))

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Account.V4.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.V4.Factory qualified as Holding (Factory(..))
import Daml.Finance.Instrument.Token.V4.Factory qualified as Token (Factory(..))

import Workflow.CreateAccount qualified as CreateAccount (Accept(..), Request(..))
import Workflow.CreditAccount qualified as CreditAccount (Accept(..), Request(..))

import Scripts.Util (createHoldingFactory, createParty)

-- | Test script that
-- 1. creates accounts for Alice and Bob at the Bank
-- 2. issues a cash instrument
-- 3. credits a cash holding to Alice in her bank account
setupHolding : Script HoldingState
setupHolding = do

  -- Allocate parties
  [alice, bank, bob] <- mapA createParty ["Alice", "Bank", "Bob"]

  -- Account Factory (it is used by the bank to create accounts)
  -- CREATE_ACCOUNT_FACTORY_BEGIN
  accountFactoryCid <- toInterfaceContractId @AccountFactory.I <$> submit bank do
    createCmd Account.Factory with
      provider = bank
      observers = mempty
  -- CREATE_ACCOUNT_FACTORY_END

  -- Holding Factory (it is used by the bank to create holdings with the desired implementation)
  -- CREATE_HOLDING_FACTORY_BEGIN
  holdingFactory <- createHoldingFactory
    Holding.Factory with
      provider = bank
      id = Id "Holding Factory"
      observers = Map.fromList [("Settlers", Set.fromList [alice, bob])]
  -- CREATE_HOLDING_FACTORY_END

  -- Instrument Factory (it is used by the bank to create instruments with the desired
  -- implementation)
  -- CREATE_INSTRUMENT_FACTORY_BEGIN
  tokenFactoryCid <- toInterfaceContractId @TokenFactory.I <$> submit bank do
    createCmd Token.Factory with
      provider = bank
      observers = mempty
  -- CREATE_INSTRUMENT_FACTORY_END

  -- Alice sets up an account at the Bank
  -- SETUP_ALICE_ACCOUNT_BEGIN
  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request with
      owner = alice
      custodian = bank

  aliceAccount <- submit bank do
    exerciseCmd aliceRequestCid CreateAccount.Accept with
      label = "Alice@Bank"
      description = "Account of Alice at Bank"
      accountFactoryCid -- This is equivalent to writing accountFactoryCid = accountFactoryCid
      holdingFactory
      observers = []
  -- SETUP_ALICE_ACCOUNT_END

  -- Bob sets up an account at the Bank
  bobRequestCid <- submit bob do createCmd CreateAccount.Request with owner = bob; custodian = bank
  bobAccount <- submit bank do
    exerciseCmd bobRequestCid CreateAccount.Accept with
      label = "Bob@Bank"
      description = "Account of Bob at Bank"
      accountFactoryCid
      holdingFactory
      observers = [alice]

  -- Bank creates the cash instrument
  -- ISSUE_CASH_INSTRUMENT_BEGIN
  let
    instrumentId = Id "USD"
    instrumentVersion = "0"
    instrumentKey = InstrumentKey with
      issuer = bank
      depository = bank
      id = instrumentId
      version = instrumentVersion
      holdingStandard = TransferableFungible
  now <- getTime

  submit bank do
    exerciseCmd tokenFactoryCid TokenFactory.Create with
      token = Token with
        instrument = instrumentKey
        description = "Instrument representing units of a generic token"
        validAsOf = now
      observers = mempty
  -- ISSUE_CASH_INSTRUMENT_END

  -- Alice deposits cash at the bank
  -- CREATE_ALICE_HOLDING_BEGIN
  aliceRequestCid <- submit alice do
    createCmd CreditAccount.Request with
      account = aliceAccount
      instrument = instrumentKey
      amount = 1000.0

  aliceCashHoldingCid <- submit bank do exerciseCmd aliceRequestCid CreditAccount.Accept
  -- CREATE_ALICE_HOLDING_END

  pure HoldingState with
    alice
    bank
    bob
    aliceAccount
    bobAccount
    cashInstrument = instrumentKey
    tokenFactoryCid
    aliceCashHoldingCid

-- | Helper container used to transfer state to the next script.
data HoldingState = HoldingState
  with
    alice : Party
    bank : Party
    bob: Party
    aliceAccount : AccountKey
    bobAccount : AccountKey
    cashInstrument : InstrumentKey
    tokenFactoryCid : ContractId TokenFactory.I
    aliceCashHoldingCid : ContractId Holding.I
