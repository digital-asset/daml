-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE PartialTypeSignatures #-}

module GetTimeCoinTransfer where

import Daml.Script
import Utilities

template Coin
  with
    owner: Party
    issuer: Party
    amount: Decimal
  where
    signatory issuer
    signatory owner

    ensure amount > 0.0

-- BEGIN_GET_TIME_TRANSFER
    choice Transfer : ContractId TransferProposal
      with
        newOwner: Party
        timeLimit: Time
      controller owner
      do create TransferProposal
            with coin=this; newOwner; timeLimit
-- END_GET_TIME_TRANSFER

template TransferProposal
  with
    coin: Coin
    newOwner: Party
    timeLimit: Time
  where
    signatory coin.owner
    signatory coin.issuer
    observer newOwner

    choice WithdrawTransfer : ContractId Coin
      controller coin.owner
      do
        create coin

-- BEGIN_GET_TIME_ACCEPT_TRANSFER
    choice AcceptTransfer : ContractId Coin
      controller newOwner
      do
        t <- getTime
        _ <- unless (t < timeLimit) $ failWithStatus $
                       FailureStatus
                         "deadline-exceeded"
                         InvalidGivenCurrentSystemStateOther
                         ("Ledger time is after deadline " <> show timeLimit)
                         (TextMap.fromList [("timeLimit", show timeLimit)])
        create coin with owner = newOwner
-- END_GET_TIME_ACCEPT_TRANSFER

-- test
getTimeCoinTransfer : Script ()
getTimeCoinTransfer =
  script do

    [issuer, owner, newOwner] <- makePartiesFrom ["Bank", "Me", "You"]

    --test 1: owner's coin is transferred to a new owner within 5 minutes

    coin <- owner `submit` do createCmd Coin with owner; issuer; amount=100.0

    t0 <- getTime
    transferProposal <- owner `submit` do exerciseCmd coin1 Transfer with newOwner; timeLimit=addRelTime t0 (minutes 5)

    newOwner `submit` do exerciseCmd transferProposal AcceptTransfer

    --test 2: owner's coin is fails to transfer to a new owner after a 5 minute time limit has passed

    coin <- owner `submit` do createCmd Coin with owner; issuer; amount=150.0

    t1 <- getTime
    transferProposal <- owner `submit` do exerciseCmd coin1 Transfer with newOwner; timeLimit=addRelTime t1 (minutes 5)

    -- simulate waiting for over 5 minutes
    _ <- passTime (minutes 6)

    newOwner `submitMustFail` do exerciseCmd coinProposal AcceptTransfer
