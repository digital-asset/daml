# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//language-support/scala/codegen:codegen.bzl",
    "dar_to_scala",
)
load(
    "//language-support/java/codegen:codegen.bzl",
    "dar_to_java",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "lf_version_configuration",
    "mangle_for_damlc",
    "version_in",
)
load("//ledger-test-tool:conformance.bzl", "testtool_lf_versions")
load("//test-common:test-common.bzl", "da_scala_dar_resources_library")
load("//test-common:test-common.bzl", "merge_test_dars_versioned")
load("//test-common:test-common.bzl", "opts_get_lf_version")
load("//rules_daml:daml.bzl", "daml_compile", "default_damlc_opts")
load("//daml-lf/language:daml-lf.bzl", "mangle_for_java")

alias(
    name = "dar-files",
    actual = "dar-files-default",
    visibility = ["//visibility:public"],
)

[
    [
        # alias model-tests-KEYWORD.dar, dar-files-KEYWORD, and dar-files-KEYWORD-lib
        # to model-tests-TAG.dar, dar-files-TAG, dar-files-TAG-lib, and test-common-TAG
        # where : KEYWORD is a keyword like default, latest, or dev
        #         TAG is a (java friendly) version TAG like 1_8
        #         The mapping KEYWORD -> TAG is defined by test_common_configurations
        alias(
            name = "%s-%s%s" % (target_prefix, name, target_suffix),
            actual = ":%s-%s%s" % (target_prefix, lf_version, target_suffix),
            visibility = ["//visibility:public"],
        ),
    ]
    for (target_prefix, target_suffix) in [
        ("benchtool-tests", ".dar"),
        ("model-tests", ".dar"),
        ("dar-files", ""),
        ("dar-files", "-lib"),
    ]
    for (name, lf_version) in lf_version_configuration.items()
]

# Carbon tests helps to test upgrades when packages are dependent on each other
carbon_test_dars = {
    "carbonv1": [],
    "carbonv2": [],  #carbonv2 depends on carbon v1
    "carbonv3": [],  #carbonv3 depends on carbon v2
    "modelext": [],  #modelext depends on model
}

general_test_dars = {
    "benchtool": [],
    "model": [],
    "semantic": [],
    "performance": [],
    "package_management": [],
}

upgrading_test_dars = {
    "upgrade": [
        "1.0.0",
        "2.0.0",
        "3.0.0",
    ],
    "upgrade_fetch": [
        "1.0.0",
        "2.0.0",
    ],
}

test_dars = merge_test_dars_versioned(
    carbon_test_dars = carbon_test_dars,
    carbon_test_dars_v1_minor_version_range = ("15", "dev"),
    carbon_test_dars_v2_minor_version_range = ("0", "dev"),
    general_test_dars = general_test_dars,
    lf_versions = testtool_lf_versions,
    upgrading_test_dars = upgrading_test_dars,
    upgrading_test_dars_v1_minor_version_range = ("17", "dev"),
    upgrading_test_dars_v2_minor_version_range = ("0", "dev"),
)

da_scala_dar_resources_library(
    add_maven_tag = True,
    daml_root_dir = "src/main/daml",
    data_dependencies = {
        "carbonv2": ["//test-common:carbonv1-tests-%s.build"],
        "carbonv3": ["//test-common:carbonv2-tests-%s.build"],
        "modelext": ["//test-common:model-tests-%s.build"],
    },
    exclusions = {
        "1.8": [
            "**/*Exception*.daml",
            "**/*Interface*daml",
            "**/Limits.daml",
            "**/Foo.daml",
        ],
        "1.14": [
            "**/*Interface*daml",
        ],
    },
    lf_versions = testtool_lf_versions,
    maven_name_prefix = "test",
    test_dars = test_dars,
    visibility = ["//visibility:public"],
)

# Compiles FailsWhenUpgradedFieldFromDifferentPackageName/dep/Dep.daml to two packages with different names.
[
    daml_compile(
        name = "upgrades-{}-dep-{}".format(test_name, project_name),
        srcs = glob(["src/main/daml/upgrades/{}/dep/Dep.daml".format(test_name)]),
        project_name = project_name,
        target = "1.17",
        version = "1.0.0",
        visibility = ["//visibility:public"],
    )
    for test_name in [
        "FailsWhenUpgradedFieldFromDifferentPackageName",
        "WarnsWhenExpressionChangesPackageId",
        "FailsWhenAnInstanceIsReplacedWithADifferentInstanceOfAnIdenticallyNamedInterface",
    ]
    for project_name in [
        "name1",
        "name2",
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v1/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v2/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.17.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v2.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.17.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        # More more more tests ported from DamlcUpgrades.hs
        "FailsWithSynonymReturnTypeChangeInSeparatePackage",
        "SucceedsWhenUpgradingADependency",
        "FailsWhenDependencyIsNotAValidUpgrade",
        "WarnsWhenExpressionChangesUtilityToSchemaPackage",
    ]
]

[
    [
        daml_compile(
            name = "upgrades-{}-dep".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        # More more more tests ported from DamlcUpgrades.hs
        "FailsWhenAnInstanceIsDropped",
        "FailsWhenAnInstanceIsAddedSeparateDep",
        "SucceedsWhenAnInstanceIsAddedToNewTemplateSeparateDep",
    ]
]

# Two dars with an empty main module whose only point is to depend on the standard library.
# They are compiled to to two different LF versions: 1.17 and 1.dev, which means they
# embark two different versions of the standard library: 1.17 and 1.dev. The packages have
# different names on purpose: the goal is not to check that they are valid upgrades of each
# other, but rather to check that the package upgrade map is not confused when trying to
# compare the different versions of the standard library that they embark upon uploading.
[
    daml_compile(
        name = "upgrades-EmptyProject-{}".format(mangle_for_damlc(lf_version)),
        srcs = glob(["src/main/daml/upgrades/EmptyProject/*.daml"]),
        project_name = "upgrades-EmptyProject-{}".format(mangle_for_damlc(lf_version)),
        target = lf_version,
        version = "1.0.0",
        visibility = ["//visibility:public"],
    )
    for lf_version in [
        "1.17",
        "1.dev",
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v1/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v2/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v2.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.17.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.17.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "FailsWhenDepsDowngradeVersionsWhileUsingDatatypes",
        "SucceedsWhenDepsDowngradeVersionsWithoutUsingDatatypes",
        "WarnsWhenExpressionChangesFromNonUpgradeablePackages",
        "WarnsWhenExpressionDowngradesVersion",
        "WarnsWhenExpressionChangesBindingOrder",
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(alternative_sources if alternative_sources != None else identifier)]),
            data_dependencies = v1opts.get(
                "data_dependencies",
                default = [],
            ) + ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(opts_get_lf_version(v1opts))],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            module_prefixes = v1opts.get(
                "module_prefixes",
                default = {},
            ),
            project_name = "upgrades-example-{}".format(identifier),
            target = opts_get_lf_version(v1opts),
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(alternative_sources if alternative_sources != None else identifier)]),
            data_dependencies = v2opts.get(
                "data_dependencies",
                default = [],
            ) + ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(opts_get_lf_version(v2opts))],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            module_prefixes = v2opts.get(
                "module_prefixes",
                default = {},
            ),
            project_name = "upgrades-example-{}".format(identifier),
            target = opts_get_lf_version(v2opts),
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for (identifier, v1opts, v2opts, alternative_sources) in [
        ("MissingModule", {}, {}, None),
        ("MissingTemplate", {}, {}, None),
        ("MissingDataCon", {}, {}, None),
        ("MissingChoice", {}, {}, None),
        ("RecordFieldsNewNonOptional", {}, {}, None),
        ("TemplateAddedChoice", {}, {}, None),
        ("TemplateChangedKeyType", {}, {}, None),
        ("TemplateChangedKeyType2", {}, {}, None),
        ("ValidUpgrade", {}, {}, None),
        (
            "ValidUpgrade-v117",
            {"lf_version": "1.17"},
            {"lf_version": "1.17"},
            "ValidUpgrade",
        ),
        (
            "ValidUpgrade-v1dev",
            {"lf_version": "1.dev"},
            {"lf_version": "1.dev"},
            "ValidUpgrade",
        ),
        (
            "MissingChoice-v117",
            {"lf_version": "1.17"},
            {"lf_version": "1.17"},
            "MissingChoice",
        ),
        (
            "MissingChoice-v1dev",
            {"lf_version": "1.dev"},
            {"lf_version": "1.dev"},
            "MissingChoice",
        ),
        ("ValidParameterizedTypesUpgrade", {}, {}, None),
        ("ValidKeyTypeEquality", {}, {}, None),
        (
            "UploadSucceedsWhenDepsAreValidUpgrades",
            {"data_dependencies": ["//test-common:upgrades-ValidUpgrade-v1.dar"]},
            {"data_dependencies": ["//test-common:upgrades-ValidUpgrade-v2.dar"]},
            None,
        ),
        (
            "UploadSucceedsWhenDepsAreValidUpgradesDep",
            {},
            {},
            None,
        ),
        (
            "UploadFailsWhenDepsAreInvalidUpgrades",
            {"data_dependencies": ["//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v1.dar"]},
            {"data_dependencies": ["//test-common:upgrades-FailsWhenExistingFieldInTemplateIsChanged-v2.dar"]},
            None,
        ),
        (
            "FailsWhenDepIsInvalidPreviousVersionOfSelf",
            {},
            {
                "data_dependencies": ["//test-common:upgrades-FailsWhenDepIsInvalidPreviousVersionOfSelf-v1.dar"],
                "module_prefixes": {"upgrades-example-FailsWhenDepIsInvalidPreviousVersionOfSelf-1.0.0": "V1"},
            },
            None,
        ),
        (
            "SucceedsWhenDepIsValidPreviousVersionOfSelf",
            {},
            {
                "data_dependencies": ["//test-common:upgrades-SucceedsWhenDepIsValidPreviousVersionOfSelf-v1.dar"],
                "module_prefixes": {"upgrades-example-SucceedsWhenDepIsValidPreviousVersionOfSelf-1.0.0": "V1"},
            },
            None,
        ),

        # Ported from DamlcUpgrades.hs
        ("FailsWhenExistingFieldInTemplateChoiceIsChanged", {}, {}, None),
        ("FailsWhenExistingFieldInTemplateIsChanged", {}, {}, None),
        ("FailsWhenNewFieldIsAddedToTemplateChoiceWithoutOptionalType", {}, {}, None),
        ("FailsWhenNewFieldIsAddedToTemplateWithoutOptionalType", {}, {}, None),
        ("FailsWhenOldFieldIsDeletedFromTemplate", {}, {}, None),
        ("FailsWhenOldFieldIsDeletedFromTemplateChoice", {}, {}, None),
        ("FailsWhenTemplateAddsKeyType", {}, {}, None),
        ("FailsWhenTemplateChangesKeyType", {}, {}, None),
        ("SucceedsWhenTemplateUpgradesKeyType", {}, {}, None),
        ("FailsWhenTemplateChangesKeyTypeSuperficially", {}, {}, None),
        ("FailsWhenTemplateChoiceChangesItsReturnType", {}, {}, None),
        ("FailsWhenTemplateRemovesKeyType", {}, {}, None),
        ("SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplate", {}, {}, None),
        ("SucceedsWhenNewFieldWithOptionalTypeIsAddedToTemplateChoice", {}, {}, None),
        ("SucceedsWhenTemplateChoiceInputArgumentTemplateHasChanged", {}, {}, None),
        ("SucceedsWhenTemplateChoiceInputArgumentEnumHasChanged", {}, {}, None),
        ("SucceedsWhenTemplateChoiceInputArgumentStructHasChanged", {}, {}, None),
        ("SucceedsWhenTemplateChoiceInputArgumentVariantHasChanged", {}, {}, None),
        ("SucceedsWhenTemplateChoiceReturnsATemplateWhichHasChanged", {}, {}, None),
        ("SucceedsWhenNonSerializableTypesAreIncompatible", {}, {}, None),
        (
            "FailsWhenUpgradedFieldFromDifferentPackageName",
            {"data_dependencies": ["//test-common:upgrades-FailsWhenUpgradedFieldFromDifferentPackageName-dep-name1.dar"]},
            {"data_dependencies": ["//test-common:upgrades-FailsWhenUpgradedFieldFromDifferentPackageName-dep-name2.dar"]},
            None,
        ),
        (
            "FailsWhenUpgradedFieldPackagesAreNotUpgradable",
            {"data_dependencies": ["//test-common:upgrades-SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd-v2.dar"]},
            {"data_dependencies": ["//test-common:upgrades-SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd-v1.dar"]},
            None,
        ),

        # More tests ported from DamlcUpgrades.hs
        #("FailsWhenATopLevelEnumChanges", {}, {}, None),
        ("FailsWhenATopLevelRecordAddsANonOptionalField", {}, {}, None),
        ("FailsWhenATopLevelRecordAddsAnOptionalFieldBeforeTheEnd", {}, {}, None),
        ("FailsWhenATopLevelVariantAddsAFieldToAConstructorsType", {}, {}, None),
        ("FailsWhenATopLevelVariantAddsAConstructor", {}, {}, None),
        ("FailsWhenATopLevelVariantRemovesAConstructor", {}, {}, None),
        ("FailsWhenTwoDeeplyNestedTypeSynonymsResolveToDifferentDatatypes", {}, {}, None),
        ("SucceedsWhenATopLevelRecordAddsAnOptionalFieldAtTheEnd", {}, {}, None),
        ("SucceedsWhenATopLevelTypeSynonymChanges", {}, {}, None),
        ("SucceedsWhenTwoDeeplyNestedTypeSynonymsResolveToTheSameDatatypes", {}, {}, None),

        # More more tests ported from DamlcUpgrades.hs
        ("FailWhenATopLevelEnumChangesChangesTheOrderOfItsConstructors", {}, {}, None),
        ("FailWhenATopLevelVariantChangesChangesTheOrderOfItsConstructors", {}, {}, None),

        # More more more tests ported from DamlcUpgrades.hs
        ("FailsWhenAnInterfaceIsDefinedInAnUpgradingPackageWhenItWasAlreadyInThePriorPackage", {}, {}, None),
        ("SucceedsWhenAnInterfaceIsOnlyDefinedInTheInitialPackage", {}, {}, None),
        ("FailsWhenAnExceptionIsDefinedInAnUpgradingPackageWhenItWasAlreadyInThePriorPackage", {}, {}, None),
        ("SucceedsWhenAnExceptionIsOnlyDefinedInTheInitialPackage", {}, {}, None),
        (
            "FailsWhenAnInstanceIsAddedUpgradedPackage",
            {},
            {"data_dependencies": [
                "//test-common:upgrades-FailsWhenAnInstanceIsAddedUpgradedPackage-v1.dar",
            ]},
            None,
        ),
        (
            "SucceedsWhenAnInstanceIsAddedToNewTemplateUpgradedPackage",
            {},
            {"data_dependencies": [
                "//test-common:upgrades-SucceedsWhenAnInstanceIsAddedToNewTemplateUpgradedPackage-v1.dar",
            ]},
            None,
        ),
        (
            "SucceedsWhenAnInstanceIsAddedToNewTemplateSeparateDep",
            {"data_dependencies": ["//test-common:upgrades-SucceedsWhenAnInstanceIsAddedToNewTemplateSeparateDep-dep.dar"]},
            {"data_dependencies": ["//test-common:upgrades-SucceedsWhenAnInstanceIsAddedToNewTemplateSeparateDep-dep.dar"]},
            None,
        ),
        (
            "FailsWhenAnInstanceIsDropped",
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsDropped-dep.dar"]},
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsDropped-dep.dar"]},
            None,
        ),
        (
            "FailsWhenAnInstanceIsAddedSeparateDep",
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsAddedSeparateDep-dep.dar"]},
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsAddedSeparateDep-dep.dar"]},
            None,
        ),
        ("FailsOnlyInModuleNotInReexports", {}, {}, None),
        ("SucceedsWhenAddingNonOptionalFieldsToUnserializableTypes", {}, {}, None),
        ("SucceedsWhenDeletingUnserializableType", {}, {}, None),
        ("SucceedsWhenChangingConstructorOfUnserializableType", {}, {}, None),
        ("FailsWhenMakingTypeUnserializable", {}, {}, None),
        ("FailsWithSynonymReturnTypeChange", {}, {}, None),
        ("SucceedWhenATopLevelEnumAddsAField", {}, {}, None),
        ("FailsWhenAnEnumDropsAConstructor", {}, {}, None),
        ("SucceedsWhenATopLevelEnumChanges", {}, {}, None),
        ("SucceedsWhenATopLevelVariantAddsAConstructor", {}, {}, None),
        ("SucceedsWhenATopLevelVariantAddsAnOptionalFieldToAConstructorsType", {}, {}, None),
        ("WarnsWhenAnInterfaceAndATemplateAreDefinedInTheSamePackage", {}, {}, None),
        ("WarnsWhenAnInterfaceIsUsedInThePackageThatItsDefinedIn", {}, {}, None),
        ("WarnsWhenControllersOfTemplateChoiceAreChanged", {}, {}, None),
        ("WarnsWhenObserversOfTemplateChoiceAreChanged", {}, {}, None),
        ("WarnsWhenTemplateChangesEnsure", {}, {}, None),
        ("WarnsWhenTemplateChangesKeyExpression", {}, {}, None),
        ("WarnsWhenTemplateChangesKeyMaintainers", {}, {}, None),
        ("WarnsWhenTemplateChangesObservers", {}, {}, None),
        ("WarnsWhenTemplateChangesSignatories", {}, {}, None),
        ("WarnsWhenTemplateChangesAgreement", {}, {}, None),
        ("FailsWhenDatatypeChangesVariety", {}, {}, None),
        (
            "WarnsWhenExpressionChangesPackageId",
            {"data_dependencies": ["//test-common:upgrades-WarnsWhenExpressionChangesPackageId-dep-name1.dar"]},
            {"data_dependencies": ["//test-common:upgrades-WarnsWhenExpressionChangesPackageId-dep-name2.dar"]},
            None,
        ),
        (
            "SucceedsWhenUpgradingLFVersionWithoutExpressionWarning",
            {"lf_version": "1.17"},
            {"lf_version": "1.dev"},
            None,
        ),
        ("FailWhenParamCountChanges", {}, {}, None),
        ("SucceedWhenParamNameChanges", {}, {}, None),
        ("SucceedWhenPhantomParamBecomesUsed", {}, {}, None),
        (
            "FailsWhenNewerPackagesUsesAnOlderLFVersion",
            {"lf_version": "1.dev"},
            {"lf_version": "1.17"},
            None,
        ),
        (
            "SucceedsWhenNewerPackagesUsesANewerLFVersion",
            {"lf_version": "1.17"},
            {"lf_version": "1.dev"},
            None,
        ),
        (
            "FailsWhenAnInstanceIsReplacedWithADifferentInstanceOfAnIdenticallyNamedInterface",
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsReplacedWithADifferentInstanceOfAnIdenticallyNamedInterface-dep-name1.dar"]},
            {"data_dependencies": ["//test-common:upgrades-FailsWhenAnInstanceIsReplacedWithADifferentInstanceOfAnIdenticallyNamedInterface-dep-name2.dar"]},
            None,
        ),
        (
            "WarnsWhenUsingLF115DependencyInSerializablePositionDep",
            {"lf_version": "1.15"},
            {"lf_version": "1.15"},
            None,
        ),
        ("WarnsWhenUsingDamlScriptDatatype", {}, {}, None),
        (
            "WarnsWhenUsingLF115DependencyInSerializablePosition",
            {
                "data_dependencies": ["//test-common:upgrades-WarnsWhenUsingLF115DependencyInSerializablePositionDep-v1.dar"],
                "lf_version": "1.dev",
            },
            {
                "data_dependencies": ["//test-common:upgrades-WarnsWhenUsingLF115DependencyInSerializablePositionDep-v2.dar"],
                "lf_version": "1.dev",
            },
            None,
        ),
        ("NoOldLfWarningWhenDependingOnTuple", {}, {}, None),
        ("NoWarningWhenUsingDamlScriptDatatypeInLF115", {}, {}, None),
        (
            "NoWarningWhenUsingLF115DependencyInNonSerializablePosition",
            {
                "data_dependencies": ["//test-common:upgrades-NoWarningWhenUsingLF115DependencyInNonSerializablePositionDep-v1.dar"],
                "lf_version": "1.dev",
            },
            {
                "data_dependencies": ["//test-common:upgrades-NoWarningWhenUsingLF115DependencyInNonSerializablePositionDep-v2.dar"],
                "lf_version": "1.dev",
            },
            None,
        ),
        (
            "NoWarningWhenUsingLF115DependencyInNonSerializablePositionDep",
            {"lf_version": "1.15"},
            {"lf_version": "1.15"},
            None,
        ),
    ]
]

# Used for asserting that uploading a DAR with DAR-level incompatible changes (with MissingTemplates-v1.dar)
# but with a different package-name is successful
[
    daml_compile(
        name = "upgrades-MissingTemplateDifferentPackageName",
        srcs = glob(["src/main/daml/upgrades/MissingTemplateDifferentPackageName/*.daml"]),
        project_name = "upgrades-MissingTemplateDifferentPackageName",
        target = "1.17",
        version = "1.1.0",
        visibility = ["//visibility:public"],
    ),
]

[
    [
        filegroup(
            name = "upgrades-{}-dep-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "CannotUpgradeView",
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-dep-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-dep-v1/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.dev.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep-dep".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-dep-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-dep-v2/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.dev.dar"],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep-dep".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v1/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-dep-v1.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v2/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-dep-v2.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
                "//test-common:upgrades-{}-dep-dep-v1.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v2.dar".format(identifier),
                "//test-common:upgrades-{}-dep-dep-v2.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.dev",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "SucceedsWhenUpgradingADependencyOfAnUpgradedDependency",
        "FailsWhenUpgradingAnUnupgradeableDependencyOfAnUpgradedDependency",
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1a".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1a/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1b".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1b/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "CommonVersionFailure",
    ]
]

[
    daml_compile(
        name = "upgrades-{scriptType}-dep-lf{mainLf}-on-lf{scriptLf}".format(
            mainLf = mainLf,
            scriptLf = scriptLf,
            scriptType = scriptType,
        ),
        srcs = ["src/main/daml/upgrades/DependsOnScript/Main.daml"],
        data_dependencies = ["//daml-script/{scriptPrefix}:{scriptType}-1.{scriptLf}.dar".format(
            scriptLf = scriptLf,
            scriptPrefix = scriptPrefix,
            scriptType = scriptType,
        )],
        target = "1." + mainLf,
        version = "1.0.0",
        visibility = ["//visibility:public"],
    )
    for (mainLf, scriptLf, scriptPrefix, scriptType) in [
        ("15", "15", "daml", "daml-script"),
        ("17", "15", "daml", "daml-script"),
        ("15", "15", "daml-lts", "daml-script-lts"),
        ("17", "15", "daml-lts", "daml-script-lts"),
        ("17", "17", "daml-lts", "daml-script-lts"),
    ]
]

[
    [
        filegroup(
            name = "upgrades-{}-files-{}".format(identifier, target),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1-{}".format(identifier, target),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(target)],
            project_name = "upgrades-example-{}".format(identifier),
            target = target,
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v2-{}".format(identifier, target),
            srcs = glob(["src/main/daml/upgrades/{}/v2/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(target)],
            project_name = "upgrades-example-{}".format(identifier),
            target = target,
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1-{}.dar".format(identifier, target),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v3-{}".format(identifier, target),
            srcs = glob(["src/main/daml/upgrades/{}/v3/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(target)],
            project_name = "upgrades-example-{}".format(identifier),
            target = target,
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-v1-{}.dar".format(identifier, target),
            version = "3.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "SuccessUpgradingV2ThenV3",
        "SuccessUpgradingV3ThenV2",
        "FailsWhenUpgradingV2ThenV3",
        "FailsWhenUpgradingV3ThenV2",
    ]
    for target in [
        "1.17",
        "1.dev",
    ]
]

# test cases where there's only one v1 of a package depending on both v1 and v2 of a dep
[
    [
        filegroup(
            name = "upgrades-{}-files".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/*/*.daml".format(identifier)]),
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v1/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-dep-v2".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/dep-v2/*.daml".format(identifier)]),
            data_dependencies = ["//daml-script/daml-lts:daml-script-lts-1.17.dar"],
            project_name = "upgrades-example-{}-dep".format(identifier),
            target = "1.17",
            # We want to check the validity of this upgrade on the ledger
            # client, not during compilation
            typecheck_upgrades = False,
            upgrades = "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
            version = "2.0.0",
            visibility = ["//visibility:public"],
        ),
        daml_compile(
            name = "upgrades-{}-v1".format(identifier),
            srcs = glob(["src/main/daml/upgrades/{}/v1/*.daml".format(identifier)]),
            data_dependencies = [
                "//test-common:upgrades-{}-dep-v1.dar".format(identifier),
                "//test-common:upgrades-{}-dep-v2.dar".format(identifier),
                "//daml-script/daml-lts:daml-script-lts-1.17.dar",
            ],
            ghc_options = default_damlc_opts + ["--ghc-option=-Wno-unused-imports"],
            module_prefixes = {
                "upgrades-example-{}-dep-1.0.0".format(identifier): "V1",
                "upgrades-example-{}-dep-2.0.0".format(identifier): "V2",
            },
            project_name = "upgrades-example-{}".format(identifier),
            target = "1.17",
            version = "1.0.0",
            visibility = ["//visibility:public"],
        ),
    ]
    for identifier in [
        "FailsWhenDepsAreIncompatible",
    ]
]

[
    [
        [
            dar_to_java(
                name = "%s-tests-%s.java-codegen" % (test_name, target),
                src = ":%s-tests-%s.dar" % (test_name, target),
                package_prefix = "com.daml.ledger.test.java.%s" % test_name,
                tags = ["maven_coordinates=com.daml:test-common-%s-tests-java-%s:__VERSION__" % (
                    test_name.replace("_", "-"),
                    target,
                )],
                visibility = ["//visibility:public"],
            ),
        ]
        for test_name in test_dars.get(target, []).keys()
        if not test_dars[target][test_name]
    ]
    for target in testtool_lf_versions
]

[
    [
        [
            [
                dar_to_java(
                    name = "%s-tests-%s-%s.java-codegen" % (test_name, package_version, target),
                    src = ":%s-tests-%s-%s.dar" % (test_name, package_version, target),
                    package_prefix = "com.daml.ledger.test.java.%s.v%s" % (
                        test_name,
                        mangle_for_java(package_version),
                    ),
                    tags = ["maven_coordinates=com.daml:test-common-%s-tests-java-%s-%s:__VERSION__" % (
                        test_name.replace("_", "-"),
                        package_version,
                        target,
                    )],
                    visibility = ["//visibility:public"],
                ),
            ]
            for package_version in test_dars[target][test_name]
        ]
        for test_name in test_dars.get(target, []).keys()
    ]
    for target in testtool_lf_versions
]
