# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_benchmark_jmh",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "kind_projector_plugin",
    "lf_scalacopts",
)
load("//rules_daml:daml.bzl", "daml_compile")
load("//daml-lf/language:daml-lf.bzl", "lf_version_configuration")
load("@os_info//:os_info.bzl", "is_windows")
load("@scala_version//:index.bzl", "scala_major_version")
load("//ledger-service/utils:scalaopts.bzl", "hj_scalacopts")

[
    da_scala_library(
        name = "http-json-{}".format(edition),
        srcs = glob(["src/main/scala/**/*.scala"]),
        plugins = [
            kind_projector_plugin,
        ],
        scala_deps = [
            "@maven//:com_chuusai_shapeless",
            "@maven//:com_github_scopt_scopt",
            "@maven//:org_apache_pekko_pekko_http",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalaz_scalaz_core",
            "@maven//:org_tpolecat_doobie_core",
            "@maven//:org_tpolecat_doobie_free",
            "@maven//:org_tpolecat_doobie_postgres",
            "@maven//:org_typelevel_cats_core",
            "@maven//:org_typelevel_cats_effect",
            "@maven//:org_typelevel_cats_free",
            "@maven//:org_typelevel_cats_kernel",
            "@maven//:io_github_paoloboni_spray_json_derived_codecs",
        ],
        scalacopts = hj_scalacopts,
        tags = ["maven_coordinates=com.daml:http-json:__VERSION__"],
        visibility = ["//visibility:public"],
        runtime_deps = [
            "@maven//:ch_qos_logback_logback_classic",
            "@maven//:org_codehaus_janino_janino",
        ],
        deps = [
            "//runtime-components/jdbc-drivers:jdbc-drivers-{}".format(edition),
            "//daml-lf/api-type-signature",
            "//daml-lf/data",
            "//daml-lf/language",
            "//daml-lf/transaction",
            "//language-support/scala/bindings-pekko",
            "//libs-scala/rs-grpc-bridge",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-ledger-client:{}".format(edition),
            "//ledger-service/cli-opts",
            "//ledger-service/db-backend",
            "//ledger-service/fetch-contracts",
            "//ledger-service/lf-value-json",
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//ledger/error",
            "//ledger/ledger-api-auth",
            "//ledger/ledger-api-common",
            "//libs-scala/concurrent",
            "//libs-scala/contextualized-logging",
            "//libs-scala/db-utils",
            "//libs-scala/doobie-slf4j",
            "//libs-scala/jwt",
            "//libs-scala/ledger-resources",
            "//libs-scala/logging-entries",
            "//libs-scala/nonempty",
            "//libs-scala/nonempty-cats",
            "//libs-scala/ports",
            "//libs-scala/resources",
            "//libs-scala/scala-utils",
            "//libs-scala/struct-json/struct-spray-json",
            "//observability/metrics",
            "//observability/pekko-http-metrics",
            "@maven//:com_google_guava_guava",
            "@maven//:io_dropwizard_metrics_metrics_core",
            "@maven//:io_opentelemetry_opentelemetry_api",
            "@maven//:org_bouncycastle_bcpkix_jdk15on",
            "@maven//:org_bouncycastle_bcprov_jdk15on",
        ],
    )
    for edition in [
        "ce",
        "ee",
    ]
]

alias(
    name = "http-json",
    actual = "http-json-ce",
    visibility = ["//visibility:public"],
)

json_scala_deps = [
    "@maven//:com_chuusai_shapeless",
    "@maven//:com_github_scopt_scopt",
    "@maven//:org_apache_pekko_pekko_http",
    "@maven//:org_apache_pekko_pekko_http_core",
    "@maven//:org_apache_pekko_pekko_http_spray_json",
    "@maven//:org_apache_pekko_pekko_slf4j",
    "@maven//:com_typesafe_scala_logging_scala_logging",
    "@maven//:io_spray_spray_json",
    "@maven//:org_scalaz_scalaz_core",
    "@maven//:org_tpolecat_doobie_core",
    "@maven//:org_tpolecat_doobie_free",
    "@maven//:org_tpolecat_doobie_postgres",
    "@maven//:org_typelevel_cats_core",
    "@maven//:org_typelevel_cats_effect",
    "@maven//:org_typelevel_cats_free",
    "@maven//:org_typelevel_cats_kernel",
]

json_deps_shared = [
    "//daml-lf/api-type-signature",
    "//daml-lf/data",
    "//daml-lf/transaction",
    "//language-support/scala/bindings-pekko",
    "//libs-scala/rs-grpc-bridge",
    "//ledger-service/db-backend",
    "//libs-scala/jwt",
    "//ledger-service/lf-value-json",
    "//ledger-service/utils",
    "//ledger/ledger-api-auth",
    "//ledger/ledger-api-common",
    "//libs-scala/db-utils",
    "//libs-scala/auth-utils",
    "//libs-scala/ports",
    "//libs-scala/scala-utils",
    "@maven//:ch_qos_logback_logback_classic",
    "@maven//:io_dropwizard_metrics_metrics_core",
]

json_deps = {
    "ce": json_deps_shared + [
        ":http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/http-json-ledger-client:ce",
    ],
    "ee": json_deps_shared + [
        ":http-json-ee",
        "//ledger-service/http-json-cli:ee",
        "//ledger-service/http-json-ledger-client:ee",
        "@maven//:com_oracle_database_jdbc_ojdbc8",
    ],
}

da_scala_binary(
    name = "http-json-binary",
    main_class = "com.daml.http.Main",
    resources = [
        ":src/main/resources/application.conf",
        ":src/main/resources/logback.xml",
    ],
    scala_deps = json_scala_deps,
    scalacopts = hj_scalacopts,
    tags = [
        "maven_coordinates=com.daml:http-json-deploy:__VERSION__",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    deps = json_deps.get("ce"),
)

da_scala_binary(
    name = "http-json-binary-ee",
    main_class = "com.daml.http.Main",
    resources = [
        ":src/main/resources/application.conf",
        ":src/main/resources/logback.xml",
    ],
    scala_deps = json_scala_deps,
    scalacopts = hj_scalacopts,
    tags = [
        "ee-jar-license",
        "maven_coordinates=com.daml:http-json-deploy:__VERSION__",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    deps = json_deps.get("ee"),
)

daml_compile(
    name = "Account",
    srcs = ["src/it/daml/%s.daml" % m for m in [
        "Account",
        "IAccount",
        "Disclosure",
    ]],
    target = lf_version_configuration.get("default"),
    visibility = ["//ledger-service:__subpackages__"],
)

daml_compile(
    name = "User",
    srcs = ["src/it/daml/User.daml"],
    visibility = ["//ledger-service:__subpackages__"],
)

daml_compile(
    name = "CIou",
    srcs = ["src/it/daml/%s.daml" % m for m in [
        "CIou",
        "IIou",
        "RIIou",
        "Transferrable",
    ]],
    target = lf_version_configuration.get("default"),
    visibility = ["//ledger-service:__subpackages__"],
)

daml_compile(
    name = "RIou",
    srcs = ["src/it/daml/%s.daml" % m for m in [
        "RIou",
    ]],
    data_dependencies = ["//test-common:model-tests-%s.dar" % lf_version_configuration.get("default")],
    target = lf_version_configuration.get("default"),
    visibility = ["//ledger-service:__subpackages__"],
)

[
    da_scala_test(
        name = "tests-{}".format(edition),
        size = "medium",
        srcs = glob(["src/test/scala/**/*.scala"]),
        data = [
            ":src/test/resources/http-json-api.conf",
            ":src/test/resources/http-json-api-minimal.conf",
            "//test-common/test-certificates",
        ],
        plugins = [
            kind_projector_plugin,
        ],
        scala_deps = [
            "@maven//:com_chuusai_shapeless",
            "@maven//:com_lihaoyi_sourcecode",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalacheck_scalacheck",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalatest_scalatest_wordspec",
            "@maven//:org_scalatestplus_scalacheck_1_15",
            "@maven//:org_scalaz_scalaz_core",
            "@maven//:org_scalaz_scalaz_scalacheck_binding",
            "@maven//:org_tpolecat_doobie_core",
            "@maven//:org_tpolecat_doobie_free",
            "@maven//:org_typelevel_cats_core",
            "@maven//:org_typelevel_cats_effect",
            "@maven//:org_typelevel_cats_free",
            "@maven//:org_typelevel_cats_kernel",
        ],
        scalacopts = hj_scalacopts,
        tags = ["cpu:6"] + (["canton-ee"] if edition == "ee" else []),
        visibility = ["//test-evidence:__pkg__"] if edition == "ce" else None,
        deps = [
            ":http-json-{}".format(edition),
            "//bazel_tools/runfiles:scala_runfiles",
            "//daml-lf/api-type-signature",
            "//daml-lf/data",
            "//daml-lf/language",
            "//daml-lf/transaction",
            "//daml-lf/transaction-test-lib",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/db-backend",
            "//ledger-service/fetch-contracts",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/cli-opts",
            "//ledger-service/lf-value-json",
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//ledger/ledger-api-common",
            "//libs-scala/contextualized-logging",
            "//libs-scala/db-utils",
            "//libs-scala/jwt",
            "//libs-scala/logging-entries",
            "//libs-scala/nonempty",
            "//libs-scala/scala-utils",
            "//libs-scala/scalatest-utils",
            "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
            "//libs-scala/test-evidence/tag:test-evidence-tag",
            "//observability/metrics",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        #"ee",
    ]
]

alias(
    name = "tests",
    actual = "tests-ce",
)

[
    da_scala_library(
        name = "integration-tests-lib-{}".format(edition),
        srcs = glob(
            ["src/itlib/scala/**/*.scala"],
            exclude = ["src/itlib/scala/**/CE.scala"] if edition == "ee" else ["src/itlib/scala/**/EE.scala"],
        ),
        resources = glob(["src/itlib/resources/**/*"]),
        scala_deps = [
            "@maven//:com_lihaoyi_sourcecode",
            "@maven//:com_chuusai_shapeless",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:com_typesafe_scala_logging_scala_logging",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalacheck_scalacheck",
            "@maven//:org_scalactic_scalactic",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_freespec",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalaz_scalaz_core",
            "@maven//:org_tpolecat_doobie_core",
            "@maven//:org_tpolecat_doobie_hikari",
            "@maven//:org_tpolecat_doobie_free",
            "@maven//:org_typelevel_cats_core",
            "@maven//:org_typelevel_cats_effect",
            "@maven//:org_typelevel_cats_free",
            "@maven//:org_typelevel_cats_kernel",
        ],
        tags = ["canton-ee"] if edition == "ee" else [],
        visibility = ["//ledger-service:__subpackages__"],
        deps = [
            ":http-json-{}".format(edition),
            "//bazel_tools/runfiles:scala_runfiles",
            "//daml-lf/api-type-signature",
            "//daml-lf/archive:daml_lf_archive_reader",
            "//daml-lf/archive:daml_lf_dev_archive_proto_java",
            "//daml-lf/data",
            "//daml-lf/transaction",
            "//daml-lf/transaction-test-lib",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/fetch-contracts",
            "//libs-scala/ledger-resources",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
            "//libs-scala/test-evidence/tag:test-evidence-tag",
            "//libs-scala/testing-utils",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/db-backend",
            "//ledger-service/lf-value-json",
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//ledger/ledger-api-common",
            "//libs-scala/contextualized-logging",
            "//libs-scala/crypto",
            "//libs-scala/db-utils",
            "//libs-scala/doobie-slf4j",
            "//libs-scala/jwt",
            "//libs-scala/ports",
            "//libs-scala/ports:ports-testing",
            "//libs-scala/postgresql-testing",
            "//libs-scala/resources",
            "//libs-scala/resources-grpc",
            "//libs-scala/scala-utils",
            "//libs-scala/timer-utils",
            "//observability/metrics",
            "//observability/metrics:metrics-test-lib",
            "//runtime-components/non-repudiation",
            "//runtime-components/non-repudiation-postgresql",
            "//runtime-components/non-repudiation-testing",
            "//test-common:dar-files-default-lib",
            "//test-common/canton/it-lib",
            "@maven//:com_google_guava_guava",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        #"ee",
    ]
]

alias(
    name = "integration-tests-lib",
    actual = "integration-tests-lib-ce",
    visibility = ["//test-evidence:__pkg__"],
)

[
    da_scala_library(
        name = "integration-tests-lib-postgres-{}".format(edition),
        srcs = glob([
            "src/itpostgres/scala/**/*.scala",
        ]),
        plugins = [
            kind_projector_plugin,
        ],
        scala_deps = [
            "@maven//:com_chuusai_shapeless",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:com_typesafe_scala_logging_scala_logging",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalactic_scalactic",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalaz_scalaz_core",
        ],
        scalacopts = hj_scalacopts,
        tags = ["canton-ee"] if edition == "ee" else [],
        visibility = ["//test-evidence:__pkg__"] if edition == "ce" else None,
        deps = [
            ":http-json-{}".format(edition),
            ":integration-tests-lib-{}".format(edition),
            "//daml-lf/api-type-signature",
            "//daml-lf/data",
            "//daml-lf/transaction",
            "//daml-lf/transaction-test-lib",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/fetch-contracts",
            "//ledger/ledger-api-common",
            "//libs-scala/ledger-resources",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//libs-scala/db-utils",
            "//libs-scala/jwt",
            "//libs-scala/ports",
            "//libs-scala/postgresql-testing",
            "//libs-scala/resources",
            "//libs-scala/scala-utils",
            "//test-common/canton/it-lib",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        #"ee",
    ]
]

[
    da_scala_test_suite(
        name = "integration-tests-{}".format(edition),
        size = "large",
        srcs = glob([
            "src/it/scala/**/*.scala",
            "src/it/edition/{}/**/*.scala".format(edition),
        ]),
        data = [
            ":Account.dar",
            ":CIou.dar",
            ":RIou.dar",
            ":User.dar",
            "//docs:quickstart-model.dar",
            "//test-common:dar-files",
            "//test-common/test-certificates",
        ],
        # TODO https://github.com/digital-asset/daml/issues/11585
        flaky = True,
        plugins = [
            kind_projector_plugin,
        ],
        resources = glob(["src/it/resources/**/*"]),
        scala_deps = [
            "@maven//:com_chuusai_shapeless",
            "@maven//:com_lihaoyi_sourcecode",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:com_typesafe_scala_logging_scala_logging",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalacheck_scalacheck",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_flatspec",
            "@maven//:org_scalatest_scalatest_freespec",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalaz_scalaz_core",
            "@maven//:org_tpolecat_doobie_core",
            "@maven//:org_tpolecat_doobie_free",
            "@maven//:org_tpolecat_doobie_postgres",
            "@maven//:org_typelevel_cats_core",
            "@maven//:org_typelevel_cats_effect",
            "@maven//:org_typelevel_cats_free",
            "@maven//:org_typelevel_cats_kernel",
        ],
        scalacopts = hj_scalacopts,
        tags = [
            "cpu:6",
            "main-only",
        ] + (["canton-ee"] if edition == "ee" else []),
        visibility = ["//test-evidence:__pkg__"] if edition == "ce" else None,
        deps = [
            ":http-json-{}".format(edition),
            ":integration-tests-lib-{}".format(edition),
            ":integration-tests-lib-postgres-{}".format(edition),
            "//bazel_tools/runfiles:scala_runfiles",
            "//daml-lf/api-type-signature",
            "//daml-lf/data",
            "//daml-lf/transaction",
            "//daml-lf/transaction-test-lib",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/db-backend",
            "//ledger-service/fetch-contracts",
            "//ledger/ledger-api-auth",
            "//ledger/ledger-api-common",
            "//libs-scala/ledger-resources",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//libs-scala/contextualized-logging",
            "//libs-scala/db-utils",
            "//libs-scala/jwt",
            "//libs-scala/ports",
            "//libs-scala/postgresql-testing",
            "//libs-scala/resources",
            "//libs-scala/scala-utils",
            "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
            "//libs-scala/test-evidence/tag:test-evidence-tag",
            "//libs-scala/timer-utils",
            "//observability/metrics",
            "//observability/metrics:metrics-test-lib",
            "//runtime-components/non-repudiation",
            "//runtime-components/non-repudiation-postgresql",
            "//test-common/canton/it-lib",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        #"ee",
    ]
]

test_suite(
    name = "integration-tests",
    tests = ["integration-tests-ce"],
)

[
    da_scala_library(
        name = "failure-tests-lib-{}".format(edition),
        srcs = glob(
            ["src/failurelib/scala/**/*.scala"],
            exclude = ["src/failurelib/scala/**/CE.scala"] if edition == "ee" else ["src/failurelib/scala/**/EE.scala"],
        ),
        data = ["//test-common/canton:canton-ee_deploy.jar"] if edition == "ee" else [],
        plugins = [
            kind_projector_plugin,
        ],
        scala_deps = [
            "@maven//:com_lihaoyi_sourcecode",
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:com_typesafe_scala_logging_scala_logging",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalactic_scalactic",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_freespec",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalaz_scalaz_core",
            "@maven//:org_typelevel_cats_core",
            "@maven//:org_typelevel_cats_effect",
        ],
        scalacopts = hj_scalacopts,
        tags = ["canton-ee"] if edition == "ee" else [],
        visibility = ["//test-evidence:__pkg__"] if edition == "ce" else None,
        deps = [
            ":http-json-{}".format(edition),
            "//bazel_tools/runfiles:scala_runfiles",
            "//daml-lf/data",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/fetch-contracts",
            "//libs-scala/contextualized-logging",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//test-common/canton/it-lib",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/metrics",
            "//ledger-service/utils",
            "//ledger/ledger-api-common",
            "//libs-scala/db-utils",
            "//libs-scala/jwt",
            "//libs-scala/ledger-resources",
            "//libs-scala/ports",
            "//libs-scala/ports:ports-testing",
            "//libs-scala/postgresql-testing",
            "//libs-scala/resources",
            "//libs-scala/scala-utils",
            "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
            "//libs-scala/test-evidence/tag:test-evidence-tag",
            "//libs-scala/timer-utils",
            "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        "ee",
    ]
]

[
    da_scala_test_suite(
        name = "failure-tests-{}".format(edition),
        srcs = glob(["src/failure/scala/**/*.scala"]),
        data = [
            ":Account.dar",
            "//docs:quickstart-model.dar",
            "//test-common:dar-files",
            "//test-common/test-certificates",
            "@toxiproxy_dev_env//:bin/toxiproxy-server" if not is_windows else "@toxiproxy_dev_env//:toxiproxy-server-windows-amd64.exe",
        ],
        # See https://github.com/digital-asset/daml/issues/9886
        flaky = True,
        plugins = [
            kind_projector_plugin,
        ],
        resources = glob(["src/failure/resources/**/*"]),
        scala_deps = [
            "@maven//:org_apache_pekko_pekko_http_core",
            "@maven//:com_typesafe_scala_logging_scala_logging",
            "@maven//:io_spray_spray_json",
            "@maven//:org_scalactic_scalactic",
            "@maven//:org_scalatest_scalatest_core",
            "@maven//:org_scalatest_scalatest_freespec",
            "@maven//:org_scalatest_scalatest_matchers_core",
            "@maven//:org_scalatest_scalatest_shouldmatchers",
            "@maven//:org_scalaz_scalaz_core",
        ],
        scalacopts = hj_scalacopts,
        tags = [
            "cpu:6",
            "main-only",
        ] + (["canton-ee"] if edition == "ee" else []),
        visibility = ["//test-evidence:__pkg__"] if edition == "ce" else None,
        deps = [
            ":http-json-{}".format(edition),
            ":failure-tests-lib-{}".format(edition),
            "//bazel_tools/runfiles:scala_runfiles",
            "//daml-lf/data",
            "//language-support/scala/bindings-pekko",
            "//ledger-service/fetch-contracts",
            "//libs-scala/contextualized-logging",
            "//libs-scala/rs-grpc-bridge",
            "//libs-scala/testing-utils",
            "//test-common/canton/it-lib",
            "//ledger-service/http-json-cli:{}".format(edition),
            "//ledger-service/http-json-testing:{}".format(edition),
            "//ledger-service/utils",
            "//ledger/ledger-api-common",
            "//libs-scala/caching",
            "//libs-scala/db-utils",
            "//libs-scala/jwt",
            "//libs-scala/ledger-resources",
            "//libs-scala/ports",
            "//libs-scala/ports:ports-testing",
            "//libs-scala/postgresql-testing",
            "//libs-scala/resources",
            "//libs-scala/scala-utils",
            "//libs-scala/timer-utils",
            "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
            "@maven//:io_dropwizard_metrics_metrics_core",
            "@maven//:org_scalatest_scalatest_compatible",
        ],
    )
    for edition in [
        "ce",
        "ee",
    ]
]

test_suite(
    name = "failure-tests",
    tests = ["failure-tests-ce"],
    visibility = ["//test-evidence:__pkg__"],
)

exports_files(["src/main/resources/logback.xml"])

da_scala_benchmark_jmh(
    name = "contractdao-bench",
    srcs = glob(["src/bench/scala/**/*.scala"]),
    resources = [
        ":src/main/resources/logback.xml",
    ],
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:io_spray_spray_json",
        "@maven//:org_tpolecat_doobie_core",
        "@maven//:org_tpolecat_doobie_free",
        "@maven//:org_typelevel_cats_kernel",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_effect",
        "@maven//:org_typelevel_cats_free",
        "@maven//:com_chuusai_shapeless",
        "@maven//:com_typesafe_scala_logging_scala_logging",
    ],
    deps = [
        ":http-json",
        "//daml-lf/api-type-signature",
        "//language-support/scala/bindings",
        "//ledger-service/db-backend",
        "//ledger-service/fetch-contracts",
        "//ledger-service/http-json-cli:base",
        "//ledger-service/metrics",
        "//ledger-service/utils",
        "//libs-scala/contextualized-logging",
        "//libs-scala/db-utils",
        "//libs-scala/doobie-slf4j",
        "//libs-scala/nonempty",
        "//libs-scala/oracle-testing",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "//libs-scala/scala-utils",
        "@maven//:com_oracle_database_jdbc_ojdbc8",
        "@maven//:io_dropwizard_metrics_metrics_core",
        "@maven//:org_slf4j_slf4j_api",
    ],
)
