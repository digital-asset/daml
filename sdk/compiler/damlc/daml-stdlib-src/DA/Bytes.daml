-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

#ifndef DAML_CCTP

-- | HIDE
module DA.Bytes where

#else

-- | TODO:
module DA.Bytes
  (Bytes
  , HasToBytes(..)
  , HasFromBytes(..)
  , size
  , slice
  , pack
  ) where

import GHC.Types (primitive)
import DA.Optional (fromSome)

instance Eq Bytes where
  (==) = primitive @"BEEqualBytes"

class HasToBytes a b where
  toBytes : a -> b

class HasFromBytes a where
  fromBytes : Bytes -> a

instance HasToBytes Text (Optional Bytes) where
  -- | TODO:
  toBytes = primitive @"BETextToBytes"

instance HasToBytes Text Bytes where
  -- | TODO:
  toBytes txt = fromSome (primitive @"BETextToBytes" txt)

instance HasToBytes Int Bytes where
  -- | TODO:
  toBytes = primitive @"BEInt64ToBytes"

instance HasFromBytes Text where
  -- | TODO:
  fromBytes = primitive @"BEBytesToText"

instance HasFromBytes (Optional Int) where
  -- | TODO:
  fromBytes = primitive @"BEBytesToInt64"

instance Show Bytes where
  show = fromBytes

instance Semigroup Bytes where
  (<>) = primitive @"BEAppendBytes"

-- | TODO:
slice : Bytes -> Int -> Int -> Bytes
slice = primitive @"BESliceBytes"

-- | TODO:
size : Bytes -> Int
size = primitive @"BESizeBytes"

-- | TODO:
pack : Int -> Bytes -> Bytes
pack = primitive @"BEPackBytes"

#endif
