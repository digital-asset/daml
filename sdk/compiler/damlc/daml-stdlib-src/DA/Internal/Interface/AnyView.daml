-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

module DA.Internal.Interface.AnyView (
  module DA.Internal.Interface.AnyView.Types,
  HasFromAnyView(..),
  fromAnyView,
) where

import DA.Internal.LF
import DA.Internal.Record
import DA.Internal.Interface.AnyView.Types

class HasFromAnyView i v | i -> v where
  -- | HIDE
  _fromAnyView : proxy i -> Any -> Optional v

fromAnyView : forall i v. (HasTemplateTypeRep i, HasFromAnyView i v) => AnyView -> Optional v
fromAnyView (AnyView any typeRep)
  | Some c <- _fromAnyView ([] : [i]) any
  , fromTemplateTypeRep (templateTypeRep @i) == typeRep = Some c
  | otherwise = None

deriving instance Eq InterfaceTypeRep
deriving instance Ord InterfaceTypeRep

fromTemplateTypeRep : TemplateTypeRep -> InterfaceTypeRep
fromTemplateTypeRep (TemplateTypeRep rep) = InterfaceTypeRep rep

instance HasField "getAnyView" AnyView Any where
  setField any anyView = anyView { getAnyView = any }
  getField = getAnyView

instance HasField "getAnyViewInterfaceTypeRep" AnyView InterfaceTypeRep where
  setField any anyView = anyView { getAnyViewInterfaceTypeRep = any }
  getField = getAnyViewInterfaceTypeRep

