-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

module DA.Assert
  ( module DA.Assert
  , CanAssert (assertFail)
  , assert
  , assertMsg
  , assertAfter
  , assertBefore
#ifdef DAML_EXCEPTIONS
  , AssertionFailed (AssertionFailed)
#endif
  ) where

import DA.Action (when, unless)
import DA.Time (isLedgerTimeGE)

infix 4 ===
infix 4 =/=

-- | Check two values for equality. If they're not equal,
-- fail with a message.
assertEq : (CanAssert m, Show a, Eq a) => a -> a -> m ()
-- NOTE(MH): We do not define `assertEq` in terms of `assertMsg` to avoid
-- constructing the error message in the successful case.
assertEq x y
  | x == y = return ()
  | otherwise = assertFail ("Failure, expected " <> show x <> " == " <> show y)

-- | Infix version of `assertEq`.
(===) : (CanAssert m, Show a, Eq a) => a -> a -> m ()
(===) = assertEq

-- | Check two values for inequality. If they're equal,
-- fail with a message.
assertNotEq : (CanAssert m, Show a, Eq a) => a -> a -> m ()
assertNotEq x y
  | x /= y = return ()
  | otherwise = assertFail ("Failure, expected " <> show x <> " /= " <> show y)

-- | Infix version of `assertNotEq`.
(=/=) : (CanAssert m, Show a, Eq a) => a -> a -> m ()
(=/=) = assertNotEq

-- | Check whether the given time is in the future. If it's not,
-- abort with a message.
assertAfterMsg : (CanAssert m, HasTime m) => Text -> Time -> m ()
assertAfterMsg msg time = do
  now <- getTime
  if time > now
    then assertFail msg
    else return ()

-- | Check whether the given time is in the past. If it's not,
-- abort with a message.
assertBeforeMsg : (CanAssert m, HasTime m) => Text -> Time -> m ()
assertBeforeMsg msg time = do
  now <- getTime
  if time < now
    then assertFail msg
    else return ()

-- | Check whether the ledger time of the transaction is strictly before the given deadline.
-- If it's not, abort with a message.
assertWithinDeadline: Text -> Time -> Update ()
assertWithinDeadline name deadline = do
  deadlineExceeded <- isLedgerTimeGE deadline
  when deadlineExceeded $ assertFail $
    "Ledger time is strictly before deadline '" <> name <> "' at " <> show deadline

-- | Check whether the ledger time of the transaction ia at or after the given deadline.
-- If it's not, abort with a message.
assertDeadlineExceeded: Text -> Time -> Update ()
assertDeadlineExceeded name deadline = do
  deadlineExceeded <- isLedgerTimeGE deadline
  unless deadlineExceeded $ assertFail $
      "Ledger time is at or after deadline '" <> name <> "' at " <> show deadline
