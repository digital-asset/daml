-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | DA.Action.State
module DA.Action.State
  ( State(..)
  , evalState
  , execState
  , get
  , put
  , modify
  ) where

import DA.Action.State.Type (State (..))
import DA.Action.State.Class

instance Functor (State s) where
  fmap f (State x) = State $ \s ->
    let (x', s') = x s
    in (f x', s')

instance Applicative (State s) where
  pure a = State (\s -> (a, s))
  State f <*> State x = State $ \s ->
    let (f', s') = f s
        (x', s'') = x s'
    in (f' x', s'')

instance Action (State s) where
  State x >>= f = State $ \s ->
    let (x', s') = x s
    in runState (f x') s'

-- | Special case of `runState` that does not return the final state.
evalState : State s a -> s -> a
evalState a s = fst (runState a s)

-- | Special case of `runState` that does only retun the final state.
execState : State s a -> s -> s
execState a s = snd (runState a s)

instance ActionState s (State s) where
  get = State (\s -> (s, s))
  put s = State (\_ -> ((), s))
  modify f = State (\s -> ((), f s))
