-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @ WARN if=DAML_CONTRACT_KEYS; -Werror=upgrade-interfaces
-- @ WARN if=DAML_CONTRACT_KEYS; -Werror=upgrade-interfaces
-- @ WARN Import of internal module Daml.Script.Internal of package daml-script is discouraged, as this module will change without warning.

{-# LANGUAGE ApplicativeDo #-}
{-# LANGUAGE CPP #-}

module Submit where

import Daml.Script
import Daml.Script.Internal
import DA.Assert
import DA.Text

data View = View with
  i_p : Party

#ifdef DAML_INTERFACE_EXTENDED
interface ExerciseGuardedInterface where
  viewtype View
  nonconsuming choice ExerciseGuarded : () with
      shouldArchive : Bool
    controller (view this).i_p
    do
      exerciseGuarded (const shouldArchive) self Archive
#endif

template T1 with
    t1_p : Party
  where
  signatory t1_p

#ifdef DAML_CONTRACT_KEYS
  key t1_p : Party
  maintainer key
#endif

#ifdef DAML_INTERFACE_EXTENDED
  interface instance ExerciseGuardedInterface for T1 where
    view = View with i_p = t1_p
#endif

template T2 with
    t2_p : Party
    moreThan3 : Int
  where
  signatory t2_p
  ensure moreThan3 > 3

template T3 with
    t3_p : Party
    ms : [Party]
  where
  signatory t3_p

#ifdef DAML_CONTRACT_KEYS
  key (t3_p, ms) : (Party, [Party])
  maintainer key._2
#endif

template FetchByKeyT3 with
    fetcher : Party
    fetchKey : (Party, [Party])
  where
  signatory fetcher

#ifdef DAML_CONTRACT_KEYS
  choice DoFetch : (ContractId T3, T3)
    controller fetcher
    do fetchByKey @T3 fetchKey
#endif

template T4 with
    t4_p : Party
    keyParties : [Party]
  where
  signatory t4_p

#ifdef DAML_CONTRACT_KEYS
  key (t4_p, keyParties) : (Party, [Party])
  maintainer key._1
#endif

template T5 with
    t5_s : Text
    keyParty : Party
  where
  signatory keyParty

#ifdef DAML_CONTRACT_KEYS
  key (t5_s, keyParty) : (Text, Party)
  maintainer key._2

  nonconsuming choice DoLookup : [Optional (ContractId T5)]
    with keys: [Text]
    controller keyParty
    do
      forA keys (\key -> lookupByKey @T5 (key, keyParty))
#endif

-- ContractNotFound: Cannot test contract not found with IDELedger, no way to get an invalid contract ID

#ifdef DAML_CONTRACT_KEYS
contractKeyNotFound : Script ()
contractKeyNotFound = script do
  alice <- allocateParty "alice"
  res <- alice `trySubmit` exerciseByKeyCmd @T1 alice Archive
  case res of
    Left (ContractKeyNotFound (fromAnyContractKey @T1 -> Some shouldBeAlice)) -> shouldBeAlice === alice
    Left e -> error $ "contractKeyNotFound incorrect error: " <> show e
    Right _ -> error "contractKeyNotFound incorrectly succeeded"
#endif

authorizationError : Script ()
authorizationError = script do
  alice <- allocateParty "alice"
  bob <- allocateParty "bob"
  res <- alice `trySubmit` createCmd T1 with t1_p = bob
  case res of
    Left (AuthorizationError err) ->
      assert $ ("requires authorizers " <> partyToText bob <> ", but only " <> partyToText alice <> " were given") `isInfixOf` err
    Left e -> error $ "authorizationError incorrect error: " <> show e
    Right _ -> error "authorizationError incorrectly succeeded"

contractNotActive : Script ()
contractNotActive = script do
  alice <- allocateParty "alice"
  cid <- alice `submit` createCmd T1 with t1_p = alice
  res <- alice `trySubmit` do
    exerciseCmd cid Archive
    exerciseCmd cid Archive
    pure ()
  case res of
    Left e@(ContractNotFound _ mbAdditionalInfo) ->

      case mbAdditionalInfo of
        None -> error "contractNotActive no additional info"
        Some additionalInfo ->
          case isNotActive additionalInfo of
            None -> error "contractNotActive additional info is not NotActive variant"
            Some anyCid ->
              case fromAnyContractId @T1 anyCid of
                None -> error $ "contractNotActive cannot find contract with id: " <> show e
                Some shouldBeCid -> shouldBeCid === cid
    Left e -> error $ "contractNotActive incorrect error: " <> show e
    Right _ -> error "contractNotActive incorrectly succeeded"

-- TODO[SW] Behaviour between Canton and IDE Ledger here is different - canton will give a NotFound, whereas IDE gives a NotActive.
-- Changes to IDE needed to match canton behavior, alongside restructing of NotFound to provide more IDE context.
-- As such, we don't run this test yet

-- contractNotActiveSeparate : Script ()
-- contractNotActiveSeparate = script do
--   alice <- allocateParty "alice"
--   cid <- alice `submit` createCmd T1 with t1_p = alice
--   alice `submit` exerciseCmd cid Archive
--   res <- alice `trySubmit` exerciseCmd cid Archive
--   case res of
--     Left (ContractNotActive (fromAnyContractId @T1 -> Some shouldBeCid)) -> shouldBeCid === cid
--     Left e -> error $ "contractNotActive incorrect error: " <> show e
--     Right _ -> error "contractNotActive incorrectly succeeded"

-- DisclosedContractKeyHashingError: Cannot test DisclosedContractKeyHashingError yet, scripts does not support this functionality

-- InconsistentContractKey: I don't know how to trigger an InconsistentContractKey error

failureStatusError : Script ()
failureStatusError = script do
  alice <- allocateParty "alice"
  res <- alice `trySubmit` createCmd T2 with t2_p = alice, moreThan3 = 2
  case res of
    Left (FailureStatusError fsError) -> assert $ "Template precondition violated" `isInfixOf` fsError.message
    Left e -> error $ "failureStatusError incorrect error: " <> show e
    Right _ -> error "failureStatusError incorrectly succeeded"

-- UserError: Only throwable pre LF 1.14, which daml-script doesn't support. Consider dropping the error
-- but keep in mind that daml-script may be usable against a ledger running older contracts, so it might be possible
-- TODO: verify this

-- TemplatePreconditionViolated: Same as above

#ifdef DAML_CONTRACT_KEYS
createEmptyContractKeyMaintainers : Script ()
createEmptyContractKeyMaintainers = script do
  alice <- allocateParty "alice"
  let t3 = T3 with t3_p = alice, ms = []
  res <- alice `trySubmit` createCmd t3
  case res of
    Left (CreateEmptyContractKeyMaintainers (fromAnyTemplate @T3 -> Some shouldBeT3)) -> shouldBeT3 === t3
    Left e -> error $ "createEmptyContractKeyMaintainers incorrect error: " <> show e
    Right _ -> error "createEmptyContractKeyMaintainers incorrectly succeeded"

fetchEmptyContractKeyMaintainers : Script ()
fetchEmptyContractKeyMaintainers = script do
  alice <- allocateParty "alice"
  let t3Key = (alice, [])
  res <- alice `trySubmit` createAndExerciseCmd (FetchByKeyT3 with fetcher = alice, fetchKey = t3Key) DoFetch
  case res of
    Left (FetchEmptyContractKeyMaintainers (fromAnyContractKey @T3 -> Some shouldBeT3Key)) -> shouldBeT3Key === t3Key
    Left e -> error $ "fetchEmptyContractKeyMaintainers incorrect error: " <> show e
    Right _ -> error "fetchEmptyContractKeyMaintainers incorrectly succeeded"
#endif

wronglyTypedContract : Script ()
wronglyTypedContract = script do
  alice <- allocateParty "alice"
  t1Cid <- alice `submit` createCmd T1 with t1_p = alice
  let t2Cid = coerceContractId @T1 @T2 t1Cid
  res <- alice `trySubmit` exerciseCmd t2Cid Archive
  case res of
    Left (WronglyTypedContract (fromAnyContractId @T1 -> Some shouldBeT1Cid) expectedTypeRep actualTypeRep) -> do
      shouldBeT1Cid === t1Cid
      assertMsg "Expected type incorrect" $ expectedTypeRep == templateTypeRep @T2
      assertMsg "Actual type incorrect" $ actualTypeRep == templateTypeRep @T1
    Left e -> error $ "wronglyTypedContract incorrect error: " <> show e
    Right _ -> error "wronglyTypedContract incorrectly succeeded"

-- ContractDoesNotImplementInterface: Can't do this from daml-script with IDELedger
-- ContractDoesNotImplementRequiringInterface: Can't do this from daml-script with IDELedger
-- NonComparableValues: Can't do this from daml-script with IDELedger
-- ContractIdInContractKey: Can't do this from daml-script with IDELedger
-- ContractIdComparability: Can't do this from daml-script with IDELedger

#ifdef DAML_INTERFACE_EXTENDED
devError : Script ()
devError = script do
  alice <- allocateParty "alice"
  cid <- alice `submit` createCmd T1 with t1_p = alice
  res <- alice `trySubmit` exerciseCmd (toInterfaceContractId @ExerciseGuardedInterface cid) ExerciseGuarded with shouldArchive = False
  case res of
    Left (DevError ChoiceGuardFailed msg) -> assert $ "Choice guard failed for" `isInfixOf` msg
    Left e -> error $ "devError incorrect error: " <> show e
    Right _ -> error "devError incorrectly succeeded"
#endif

-- UnknownError: Shouldn't be testable, we should know all the possible errors.
-- Can reproduce right now with a timeout, or package vetting test.

-- Using contractKeyNotFound with an enormous key
#ifdef DAML_CONTRACT_KEYS
truncatedError : Script ()
truncatedError = script do
  alice <- allocateParty "alice"
  let t4Key = (alice, replicate 10000 alice)
  res <- alice `trySubmit` exerciseByKeyCmd @T4 t4Key Archive
  case res of
    -- We specifically throw a fixed string to be caught by the real Ledger tests
    Left (TruncatedError "ContractKeyNotFound" _) -> error "EXPECTED_TRUNCATED_ERROR"
    -- We silently accept this case for the IDE Ledger
    Left (ContractKeyNotFound (fromAnyContractKey @T4 -> Some shouldBeT4Key)) | shouldBeT4Key == t4Key -> pure ()
    Left e -> error $ "contractKeyNotFound incorrect error: " <> show e
    Right _ -> error "contractKeyNotFound incorrectly succeeded"

prefetchContractKeys : Script ()
prefetchContractKeys = script do
  alice <- allocateParty "alice"
  let key2 = "key2"
  t5cid <- alice `submit` createCmd T5 with t5_s = key2; keyParty = alice
  let keys = ["key1", key2, "key3"]
  let t5Keys = map (\s -> toAnyContractKey @T5 (s, alice)) keys
  res <- (actAs alice <> prefetchKeys t5Keys) `submit` exerciseCmd t5cid DoLookup with keys = keys
  res === [None, Some t5cid, None]
#endif
