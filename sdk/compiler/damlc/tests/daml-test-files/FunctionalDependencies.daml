-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- Check that functional dependency metadata is added when available.

-- @SINCE-LF 2.dev
-- Querying for the structure of these foralls was a lot easier when foralls
-- could quantify over a list. Now, we have to it this ugly verbose way, or be
-- more clever with a function
-- @QUERY-LF $pkg | .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$fdFoo"]) | .type | lf::norm_ty($pkg) | .forall | select(.vars | length == 1) | .body | .forall | select(.vars | length == 1) | .body | lf::norm_ty($pkg) | .struct | .fields | length == 1
-- @QUERY-LF $pkg | .modules[] | .values[] | .name_with_type | select(lf::get_value_name($pkg) == ["$$$$fdBar"]) | .type | lf::norm_ty($pkg) | .forall | select(.vars | length == 1) | .body | .forall | select(.vars | length == 1) | .body | .forall | select(.vars | length == 1) | .body | .forall | select(.vars | length == 1) | .body | .forall | select(.vars | length == 1) | .body | lf::norm_ty($pkg) | .struct | .fields | length == 3
module FunctionalDependencies where

class Foo a b | a -> b where
    foo : a -> b

-- The crazy kinds here are to make sure that the functional dependency metadata works
-- regardless of the kind. (A naÃ¯ve implementation falls over when the type variables
-- are not of kind star.)
class Bar a (b: GHC.Types.Nat) c (d: GHC.Types.Nat -> *) (e: * -> *) | a -> b c, a d -> e, d -> a where
    bar : a -> d b -> e c
