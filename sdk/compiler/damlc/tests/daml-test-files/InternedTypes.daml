-- Copyright (c) 2021, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- Test that interning of types using hash-consing works. We particularly
-- test that sharing works.
-- The code below should produce the following type interning table:
-- 0: a
-- 1: b
-- 2: $0 -> $1
-- 3: $2 -> $2
-- 4: forall a b. $3
-- 5-etc: type based representation of modules with orphan instances in scope

-- It should produce the following three values, with interned types:
-- ap1: $4
-- ap2: $4
-- $$imports: $-1 (last entry in the type interning table)

-- @SINCE-LF 1.11 2.0
-- @QUERY-LF $pkg.interned_types | (length >= 4) and (.[0] | .var.var_interned_str | isnormal) and (.[1] | .var.var_interned_str | isnormal) and (.[2].prim | (.args | map(.interned) == [0, 1]) and (.prim == "ARROW")) and (.[3].prim | (.args | map(.interned) == [2, 2]) and (.prim == "ARROW")) and (.[4].forall.body.interned == 3)
-- @QUERY-LF [$pkg.modules[].values[]] | .[0:2] | all(.name_with_type.type.interned == 4)
-- @QUERY-LF [$pkg.modules[].values[]][-1].name_with_type.type.interned == ($pkg.interned_types | length - 1)

module InternedTypes where

ap1: (a -> b) -> a -> b
ap1 f x = f x

-- A second copy to make sure we share across functions.
ap2: (a -> b) -> (a -> b)
ap2 f x = f x
