-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @SINCE-LF 2.dev

{-# OPTIONS_GHC -Wno-x-crypto #-}

module AttestationTests where

import AttestationTestData
import DA.Assert ((===))
import DA.Crypto.Text
import DA.Foldable (forA_)
import DA.Optional (fromSome)
import Daml.Script

template ValidateTestMessageSignature with
    signature : SignatureHex
    publicKey : PublicKeyHex
    messageHash : BytesHex
    owner : Party
  where
    signatory owner
    ensure secp256k1WithEcdsaOnly signature messageHash publicKey

main =
  script do
    forA_ testData \test -> do
      ((serializeTestMessage test.message) === test.encodedMessage)
      ((keccak256 (serializeTestMessage test.message)) === test.messageHash)
      derEncodedSig <- secp256k1signWithEcdsaOnly derEncodedSignerPrivateKey test.messageHash
      --((Some derEncodedSig) === (derEncodeSignature test.signature))
      alice <- allocateParty "Alice"
      submit alice do
        createCmd ValidateTestMessageSignature with
          publicKey = derEncodedSignerPublicKey
          messageHash = test.messageHash
          signature = fromSome (derEncodeSignature test.signature) -- derEncodedSig
          owner = alice
    pure ()
