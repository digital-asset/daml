module ExceptionTryCatch where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import DA.Exception
test1 : ActionCatch m => m Int
test1
  = DA.Internal.Desugar._tryCatch
      \ _ -> pure (10 / 0)
      \case
        (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
          -> DA.Internal.Desugar.Some pure 0
        _ -> DA.Internal.Desugar.None
test2 : ActionCatch m => m Int
test2
  = do DA.Internal.Desugar._tryCatch
         \ _ -> pure (10 / 0)
         \case
           (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
             -> DA.Internal.Desugar.Some pure 0
           _ -> DA.Internal.Desugar.None
test3 : ActionCatch m => m Int
test3
  = do x <- DA.Internal.Desugar._tryCatch
              \ _ -> pure (10 / 0)
              \case
                (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
                  -> DA.Internal.Desugar.Some pure 0
                _ -> DA.Internal.Desugar.None
       pure (x + 1)
test4 : ActionCatch m => m Int
test4
  = do x <- DA.Internal.Desugar._tryCatch
              \ _ -> pure (10 / 0)
              \case
                (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
                  -> DA.Internal.Desugar.Some pure 0
                _ -> DA.Internal.Desugar.None
       pure (x + 1)
test5 : ActionCatch m => m Int
test5
  = DA.Internal.Desugar._tryCatch
      \ _ -> pure (10 / 0)
      \case
        (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : GeneralError))
          -> DA.Internal.Desugar.Some pure 1
        (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some (_ : ArithmeticError))
          | 1 == 2 -> DA.Internal.Desugar.Some pure 2
          | otherwise -> DA.Internal.Desugar.Some pure 3
        _ -> DA.Internal.Desugar.None
