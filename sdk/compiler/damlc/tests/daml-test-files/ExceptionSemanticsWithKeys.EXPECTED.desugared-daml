module ExceptionSemanticsWithKeys where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Exception
data DA.Internal.Desugar.DamlException => E
  = E {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasMessage E where
  message this@E = let _ = this in "E"
instance DA.Internal.Desugar.HasThrow E where
  throwPure = GHC.Types.primitive @"EThrow"
instance DA.Internal.Desugar.HasToAnyException E where
  toAnyException = GHC.Types.primitive @"EToAnyException"
instance DA.Internal.Desugar.HasFromAnyException E where
  fromAnyException = GHC.Types.primitive @"EFromAnyException"
data GHC.Types.DamlTemplate => K
  = K {p : Party, v : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.GetField "p" K Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @K @Party
instance DA.Internal.Record.SetField "p" K Party where
  setField = DA.Internal.Record.setFieldPrim @"p" @K @Party
instance DA.Internal.Record.GetField "v" K Int where
  getField = DA.Internal.Record.getFieldPrim @"v" @K @Int
instance DA.Internal.Record.SetField "v" K Int where
  setField = DA.Internal.Record.setFieldPrim @"v" @K @Int
instance DA.Internal.Desugar.HasSignatory K where
  signatory this@K {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver K where
  observer this@K {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure K where
  ensure this@K {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasArchive K where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate K where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch K where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate K where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate K where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep K where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType K where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise K DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice K DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice K DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController K DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver K DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_K$Archive :
  (DA.Internal.Desugar.Consuming K,
   K -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (K
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (K
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId K
   -> K
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_K$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
instance DA.Internal.Desugar.HasExerciseByKey K (Party,
                                                 Int) DA.Internal.Desugar.Archive (()) where
  _exerciseByKey = GHC.Types.primitive @"UExerciseByKey"
instance DA.Internal.Desugar.HasKey K (Party, Int) where
  key this@K {..}
    = userWrittenTuple (p, v)
    where
        _ = this
instance DA.Internal.Desugar.HasMaintainer K (Party, Int) where
  _maintainer _ key
    = DA.Internal.Desugar.toParties
        ((DA.Internal.Record.getField @"_1" key))
    where
        _ = key
instance DA.Internal.Desugar.HasLookupByKey K (Party, Int) where
  lookupNByKey = GHC.Types.primitive @"ULookupByKey"
instance DA.Internal.Desugar.HasToAnyContractKey K (Party,
                                                    Int) where
  _toAnyContractKey = GHC.Types.primitive @"EToAnyContractKey"
instance DA.Internal.Desugar.HasFromAnyContractKey K (Party,
                                                      Int) where
  _fromAnyContractKey = GHC.Types.primitive @"EFromAnyContractKey"
data GHC.Types.DamlTemplate => T
  = T {p : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.GetField "p" T Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @T @Party
instance DA.Internal.Record.SetField "p" T Party where
  setField = DA.Internal.Record.setFieldPrim @"p" @T @Party
data TransientDuplicate
  = TransientDuplicate {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.GetField "i" TransientDuplicate Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @TransientDuplicate @Int
instance DA.Internal.Record.SetField "i" TransientDuplicate Int where
  setField
    = DA.Internal.Record.setFieldPrim @"i" @TransientDuplicate @Int
data NonTransientDuplicate
  = NonTransientDuplicate {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.GetField "i" NonTransientDuplicate Int where
  getField
    = DA.Internal.Record.getFieldPrim @"i" @NonTransientDuplicate @Int
instance DA.Internal.Record.SetField "i" NonTransientDuplicate Int where
  setField
    = DA.Internal.Record.setFieldPrim @"i" @NonTransientDuplicate @Int
data RollbackKey
  = RollbackKey {i : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.GetField "i" RollbackKey Int where
  getField = DA.Internal.Record.getFieldPrim @"i" @RollbackKey @Int
instance DA.Internal.Record.SetField "i" RollbackKey Int where
  setField = DA.Internal.Record.setFieldPrim @"i" @RollbackKey @Int
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise T TransientDuplicate (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T TransientDuplicate (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T TransientDuplicate (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T TransientDuplicate where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T TransientDuplicate where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise T NonTransientDuplicate (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T NonTransientDuplicate (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T NonTransientDuplicate (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T NonTransientDuplicate where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T NonTransientDuplicate where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise T RollbackKey (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T RollbackKey (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T RollbackKey (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T RollbackKey where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T RollbackKey where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T$Archive :
  (DA.Internal.Desugar.Consuming T,
   T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_T$TransientDuplicate :
  (DA.Internal.Desugar.NonConsuming T,
   T -> TransientDuplicate -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> TransientDuplicate -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> TransientDuplicate -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T -> TransientDuplicate -> DA.Internal.Desugar.Update (()))
_choice$_T$TransientDuplicate
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@TransientDuplicate {..}
              -> let _ = this in
                 let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@TransientDuplicate {..}
              -> let _ = self in
                 let _ = this in
                 let _ = arg
                 in
                   do DA.Internal.Desugar._tryCatch
                        \ _
                          -> do create (K p i)
                                create (K p i)
                                throw E
                        \case
                          (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                            -> DA.Internal.Desugar.Some pure ()
                          _ -> DA.Internal.Desugar.None)
_choice$_T$NonTransientDuplicate :
  (DA.Internal.Desugar.NonConsuming T,
   T -> NonTransientDuplicate -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> NonTransientDuplicate -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> NonTransientDuplicate -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T -> NonTransientDuplicate -> DA.Internal.Desugar.Update (()))
_choice$_T$NonTransientDuplicate
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@NonTransientDuplicate {..}
              -> let _ = this in
                 let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@NonTransientDuplicate {..}
              -> let _ = self in
                 let _ = this in
                 let _ = arg
                 in
                   do DA.Internal.Desugar._tryCatch
                        \ _
                          -> do create (K p i)
                                throw E
                        \case
                          (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                            -> DA.Internal.Desugar.Some pure ()
                          _ -> DA.Internal.Desugar.None)
_choice$_T$RollbackKey :
  (DA.Internal.Desugar.NonConsuming T,
   T -> RollbackKey -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> RollbackKey -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> RollbackKey -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T -> RollbackKey -> DA.Internal.Desugar.Update (()))
_choice$_T$RollbackKey
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@RollbackKey {..}
              -> let _ = this in
                 let _ = arg in DA.Internal.Desugar.toParties (p), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@RollbackKey {..}
              -> let _ = self in
                 let _ = this in
                 let _ = arg
                 in
                   do DA.Internal.Desugar._tryCatch
                        \ _
                          -> do create (K p i)
                                throw E
                        \case
                          (DA.Internal.Desugar.fromAnyException -> DA.Internal.Desugar.Some E)
                            -> DA.Internal.Desugar.Some create (K p i) >> pure ()
                          _ -> DA.Internal.Desugar.None)
duplicateKey
  = script
      do p <- allocateParty "p"
         submitMustFail p
           $ createAndExerciseCmd (T p) (TransientDuplicate 0)
         submit p $ createCmd (K p 1)
         submitMustFail p
           $ createAndExerciseCmd (T p) (NonTransientDuplicate 1)
         submit p $ createAndExerciseCmd (T p) (RollbackKey 2)
         pure ()
