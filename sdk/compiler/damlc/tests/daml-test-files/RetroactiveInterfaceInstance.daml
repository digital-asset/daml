-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}
{-# OPTIONS -Wno-retroactive-interface-instances #-}
-- TODO(https://github.com/digital-asset/daml/issues/18049):
-- Retroactive interface instances will be removed in LF 2.x, after which
-- this test will no longer make sense.

-- @SUPPORTS-LF-FEATURE DAML_INTERFACE
-- @ WARN since-lf=1.16 2.0; -Werror=upgrade-interfaces
module RetroactiveInterfaceInstance where

import Daml.Script
import Asset

import DA.Assert ((===))
import ScriptAssertHelpers

data TokenView = TokenView with
  owner : Party
  amount : Int

interface Token where
  viewtype TokenView

  setAmount : Int -> Token
  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token) -- ^ An interface choice comment.
    with
      splitAmount : Int -- ^ A choice field comment.
    controller (view this).owner
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller (view this).owner, newOwner
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller (view this).owner
    do
      noopImpl this nothing

  choice GetRich : ContractId Token
    with
      byHowMuch : Int
    controller (view this).owner
    do
        assert (byHowMuch > 0)
        create $ setAmount this ((view this).amount + byHowMuch)

  interface instance Token for Asset where
    view = TokenView with owner, amount

    setAmount x = toInterface @Token (this with amount = x)

    splitImpl splitAmount = do
      assert (splitAmount < amount)
      cid1 <- create this with amount = splitAmount
      cid2 <- create this with amount = amount - splitAmount
      pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

    transferImpl newOwner = do
      cid <- create this with owner = newOwner
      pure (toInterfaceContractId @Token cid)

    noopImpl nothing = do
      [1] === [1] -- make sure `mkMethod` calls are properly erased in the presence of polymorphism.
      pure ()

main = script do
  p <- allocateParty "Alice"
  cidAsset1 <- p `submit` do
    createCmd Asset with
      issuer = p
      owner = p
      amount = 15
  let cidToken1 = toInterfaceContractId @Token cidAsset1
  (cidToken2, cidToken3) <- p `submit` do
    exerciseCmd cidToken1 (Noop ())
    r <- exerciseCmd cidToken1 (Split 10)
    pure r

  token2 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken2
  -- Party is duplicated because p is both observer & issuer
  signatory token2 === [p, p]
  (view (toInterface @Token token2)).amount === 10
  Asset.amount token2 === 10

  token3 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken3
  (view (toInterface @Token token3)).amount === 5
  Asset.amount token3 === 5

  cidToken4 <- p `submit` do exerciseCmd cidToken3 (GetRich 20)

  token4 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken4
  (view (toInterface @Token token4)).amount === 25
  Asset.amount token4 === 25

  pure ()
