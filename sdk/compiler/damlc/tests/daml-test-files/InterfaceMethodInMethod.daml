-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @ WARN since-lf=1.16 2.0; warn-bad-interface-instances
-- @ WARN since-lf=1.16 2.0; warn-bad-interface-instances
-- @ WARN since-lf=1.16 2.0; warn-bad-interface-instances
-- regression test for https://github.com/digital-asset/daml/issues/15459

-- @SUPPORTS-LF-FEATURE DAML_INTERFACE
module InterfaceMethodInMethod where

import Daml.Script
import DA.Assert ((===))
import DA.Foldable (forA_)

data IV = IV with
    unit : ()
  deriving (Eq, Ord, Show)

interface I where
  viewtype IV
  im : Int -> Int

data JV = JV with
    iv : IV
  deriving (Eq, Ord, Show)

interface J where
  viewtype JV

template T
  with
    p : Party
  where
    signatory p

    interface instance I for T where
      view = IV ()
      im = succ

    interface instance J for T where
      -- using 'view' inside 'view' implementation
      view = JV (view (toInterface @I this))

template U
  with
    p : Party
    t : T
  where
    signatory p, t.p

    interface instance I for U where
      view = IV ()
      -- using method 'im' inside method 'im' implementation
      im = (2 *) . im (toInterface @I t)

main = script do
  alice <- allocateParty "alice"
  let
    t = T alice
    u = U alice t
    it = toInterface @I t
    jt = toInterface @J t
    iu = toInterface @I u

  view it === IV ()
  view jt === JV (IV ())

  forA_ [1..10] \x -> do
    im it x === succ x
    im iu x === 2 * succ x

  pure ()
