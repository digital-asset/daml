-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- @SUPPORTS-LF-FEATURE DAML_CCTP

module CCTPMintToken where

import DA.Assert ((===))
import DA.Bytes
import DA.Crypto
import Daml.Script

type Bytes32 = Bytes
type UInt32 = Bytes
type UInt64 = Bytes
type UInt256 = Bytes

toBytes32: HasToBytes a Bytes32 => a -> Bytes32
toBytes32 v = pack 32 (toBytes v)

toUInt32: HasToBytes a UInt32 => a -> UInt32
toUInt32 v = pack 5 (toBytes v)

toUInt64: HasToBytes a UInt64 => a -> UInt64
toUInt64 v = pack 6 (toBytes v)

toUInt256: HasToBytes a UInt256 => a -> UInt256
toUInt256 v = pack 8 (toBytes v)

data BurnMessage = BurnMessage with
    version : UInt32
    burnToken : Bytes32
    mintRecipient : Bytes32
    amount : Int
    messageSender : Bytes32
  deriving (Eq, Show)

serialize : BurnMessage -> Bytes
serialize (BurnMessage version burnToken mintRecipient amount messageSender) =
  version <> burnToken <> mintRecipient <> (toUInt256 amount) <> messageSender

template MintToken with
    signature : Signature
    publicKey : PublicKey
    burnMessage : BurnMessage
    owner : Party
  where
    signatory owner
    ensure secp256k1 signature (keccak256 (serialize burnMessage)) publicKey

main =
  let burnMessage = BurnMessage with
        version = toUInt32 1
        burnToken = toBytes32 "3517c087b52939457009670b62e4ebed4f0460beb6aa6323aca9055cb466b8fe"
        mintRecipient = toBytes32 "19da614fb886703d58063b8d45974f5625e9189f24bab2209277f28506798e33"
        amount = 1
        messageSender = toBytes32 "b05b55170b4fb7095ed658e521b491fb0de98f47947f455e416c4cdbc1446518"
      spoofBurnMessage = BurnMessage with
        version = toUInt32 1
        burnToken = toBytes32 "3517c087b52939457009670b62e4ebed4f0460beb6aa6323aca9055cb466b8fe"
        mintRecipient = toBytes32 "19da614fb886703d58063b8d45974f5625e9189f24bab2209277f28506798e33"
        amount = 1000
        messageSender = toBytes32 "b05b55170b4fb7095ed658e521b491fb0de98f47947f455e416c4cdbc1446518"
      -- privateKey = "30818d020100301006072a8648ce3d020106052b8104000a0476307402010104207308c95bf6e240ed8de37b5a7c5f453d88ece2b5e93c02ef985e8553f856474aa00706052b8104000aa144034200043f4ae6efb79de2cf60636219110f11b695d5c1776c0b0dad1468672fba1c6f6acf79396b8403e110cbf60ccd7aefab4c541d49844a51049fcbd22dae1a51d681"
      publicKey = toBytes "3056301006072a8648ce3d020106052b8104000a034200043f4ae6efb79de2cf60636219110f11b695d5c1776c0b0dad1468672fba1c6f6acf79396b8403e110cbf60ccd7aefab4c541d49844a51049fcbd22dae1a51d681"
      invalidPublicKey = toBytes "30569f300d06092a864886f70d010101050003818d00308189028181009107a23dd899451c443f40f00c43361b5476794ba1c04b83da5a46dc8c6b7ff86e58de42a0a798fc4a85d8b3c63f75b5410a76f2e501c86de2eeeb"
      incorrectPublicKey = toBytes "3056301006072a8648ce3d020106052b8104000a03420004c1741ea55443e7f2a93673b176d4fa6af7b53492b3ebe72e858561ca6280f4d2c5ed8d7bf6897d70ac105a992812a7a5ab1689867d0ac730ee119c60e5646c10"
      expectedDigest = toBytes32 "11e130eb28132d3947c7cd88fd1598ee7d87342d8becaa02070fb18a97e26987"
      burnMessageSignature = toBytes "3045022100c98df1319c7730b2cf57eb573d4b86e199a76121ca38d7feccdfa6ed80da0efb022003d2cf8f43f181c3cdacec4d28b72d484e39bf3698577f7dda4a0d8092293ee3"
      malformedSignature = toBytes "3046beefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
      invalidSignature = toBytes "30450221009944dfb75e1e46006dd6922ba41145ab47dd00da2af75027a95589764fb5e72902200ac5c17d31d102dbdde75e4f5809dccbba9a118cf4a6bffd50108e8444bb69b5"
  in
    script do
      alice <- allocateParty "Alice"
      submitMustFail alice do
        createCmd MintToken with
          publicKey = publicKey
          burnMessage = spoofBurnMessage
          signature = burnMessageSignature
          owner = alice
      submitMustFail alice do
        createCmd MintToken with
          publicKey = incorrectPublicKey
          burnMessage = burnMessage
          signature = burnMessageSignature
          owner = alice
      submitMustFail alice do
        createCmd MintToken with
          publicKey = publicKey
          burnMessage = burnMessage
          signature = invalidSignature
          owner = alice
      submitMustFail alice do
        createCmd MintToken with
          publicKey = invalidPublicKey
          burnMessage = burnMessage
          signature = burnMessageSignature
          owner = alice
      submitMustFail alice do
        createCmd MintToken with
          publicKey = publicKey
          burnMessage = burnMessage
          signature = malformedSignature
          owner = alice
      ((keccak256 (serialize burnMessage)) === expectedDigest)
      _ <- submit alice do
        createCmd MintToken with
          publicKey = publicKey
          burnMessage = burnMessage
          signature = burnMessageSignature
          owner = alice
      pure ()
