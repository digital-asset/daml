module InterfaceConversions where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Assert ( (===) )
import DA.Functor ( void )
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => Iface = Iface GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Iface where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Iface where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Iface Iface where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Iface Iface where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Iface "getOwner" (Party)
getOwner : Iface -> Party
getOwner = GHC.Types.primitiveInterface @"getOwner"
instance DA.Internal.Desugar.HasToAnyTemplate Iface where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Iface where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Iface where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Iface where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Iface where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Iface where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType Iface where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Iface where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive Iface where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice Iface DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Iface DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded Iface DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Iface cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Iface cid pred)
instance DA.Internal.Desugar.HasExercise Iface DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Iface cid)
        arg
instance DA.Internal.Desugar.HasChoiceController Iface DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Iface DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasToAnyChoice Iface MyChoice (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Iface MyChoice (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded Iface MyChoice (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Iface cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Iface cid pred)
instance DA.Internal.Desugar.HasExercise Iface MyChoice (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Iface cid)
        arg
instance DA.Internal.Desugar.HasChoiceController Iface MyChoice where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Iface MyChoice where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
data MyChoice
  = MyChoice {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice$_Iface$Archive :
  (DA.Internal.Desugar.Consuming Iface,
   Iface
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Iface
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Iface
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Iface
   -> Iface
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Iface$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Iface$MyChoice :
  (DA.Internal.Desugar.Consuming Iface,
   Iface -> MyChoice -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Iface
                                 -> MyChoice -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Iface
                                 -> MyChoice -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Iface
   -> Iface -> MyChoice -> DA.Internal.Desugar.Update (()))
_choice$_Iface$MyChoice
  = (DA.Internal.Desugar.Consuming, 
     \ this arg@MyChoice
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner this), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this arg@MyChoice
       -> let _ = self in let _ = this in let _ = arg in do pure ())
instance DA.Internal.Desugar.HasInterfaceView Iface EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView Iface EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlInterface => Iface2 = Iface2 GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Iface2 where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Iface2 where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Iface2 Iface2 where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Iface2 Iface2 where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Iface2 "getOwner2" (Party)
getOwner2 : Iface2 -> Party
getOwner2 = GHC.Types.primitiveInterface @"getOwner2"
instance DA.Internal.Desugar.HasToAnyTemplate Iface2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Iface2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Iface2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Iface2 where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Iface2 where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Iface2 where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType Iface2 where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Iface2 where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive Iface2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice Iface2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Iface2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded Iface2 DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Iface2 cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Iface2 cid pred)
instance DA.Internal.Desugar.HasExercise Iface2 DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Iface2 cid)
        arg
instance DA.Internal.Desugar.HasChoiceController Iface2 DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Iface2 DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasToAnyChoice Iface2 MyChoice2 (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Iface2 MyChoice2 (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded Iface2 MyChoice2 (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Iface2 cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Iface2 cid pred)
instance DA.Internal.Desugar.HasExercise Iface2 MyChoice2 (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Iface2 cid)
        arg
instance DA.Internal.Desugar.HasChoiceController Iface2 MyChoice2 where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Iface2 MyChoice2 where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
data MyChoice2
  = MyChoice2 {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice$_Iface2$Archive :
  (DA.Internal.Desugar.Consuming Iface2,
   Iface2
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Iface2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Iface2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Iface2
   -> Iface2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Iface2$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Iface2$MyChoice2 :
  (DA.Internal.Desugar.Consuming Iface2,
   Iface2 -> MyChoice2 -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Iface2
                                 -> MyChoice2 -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Iface2
                                 -> MyChoice2 -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Iface2
   -> Iface2 -> MyChoice2 -> DA.Internal.Desugar.Update (()))
_choice$_Iface2$MyChoice2
  = (DA.Internal.Desugar.Consuming, 
     \ this arg@MyChoice2
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getOwner2 this), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this arg@MyChoice2
       -> let _ = self in let _ = this in let _ = arg in do pure ())
instance DA.Internal.Desugar.HasInterfaceView Iface2 EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView Iface2 EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlTemplate => Template1
  = Template1 {owner1 : Party, value1 : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner1" Template1 Party where
  getField
    = DA.Internal.Record.getFieldPrim @"owner1" @Template1 @Party
  setField
    = DA.Internal.Record.setFieldPrim @"owner1" @Template1 @Party
instance DA.Internal.Record.HasField "value1" Template1 Int where
  getField
    = DA.Internal.Record.getFieldPrim @"value1" @Template1 @Int
  setField
    = DA.Internal.Record.setFieldPrim @"value1" @Template1 @Int
instance DA.Internal.Desugar.HasSignatory Template1 where
  signatory this@Template1 {..}
    = DA.Internal.Desugar.toParties (owner1)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Template1 where
  observer this@Template1 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Template1 where
  ensure this@Template1 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Template1 where
  agreement this@Template1 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Template1 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Template1 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Template1 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Template1 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Template1 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Template1 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Template1 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Template1 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Template1 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Template1 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Template1 DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Template1 DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Template1$Archive :
  (DA.Internal.Desugar.Consuming Template1,
   Template1
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Template1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Template1
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Template1
   -> Template1
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Template1$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_Template1_Iface_Template1 :
  DA.Internal.Desugar.InterfaceInstance Template1 Iface Template1
_interface_instance$_Template1_Iface_Template1
  = DA.Internal.Desugar.mkInterfaceInstance
      @Template1 @Iface @Template1
_method$_Template1_Iface_Template1_getOwner :
  DA.Internal.Desugar.Method Template1 Iface Template1 "getOwner"
_method$_Template1_Iface_Template1_getOwner
  = DA.Internal.Desugar.mkMethod
      @Template1
      @Iface
      @Template1
      @"getOwner"
      \ this@Template1 {..}
        -> let _ = this in let $getOwner = owner1 in $getOwner
_view$_Template1_Iface_Template1 :
  DA.Internal.Desugar.InterfaceView Template1 Iface Template1
_view$_Template1_Iface_Template1
  = DA.Internal.Desugar.mkInterfaceView
      @Template1
      @Iface
      @Template1
      \ this@Template1 {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface Template1 Iface where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Template1 Iface where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data GHC.Types.DamlTemplate => Template2
  = Template2 {owner2 : Party, value2 : Text}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "owner2" Template2 Party where
  getField
    = DA.Internal.Record.getFieldPrim @"owner2" @Template2 @Party
  setField
    = DA.Internal.Record.setFieldPrim @"owner2" @Template2 @Party
instance DA.Internal.Record.HasField "value2" Template2 Text where
  getField
    = DA.Internal.Record.getFieldPrim @"value2" @Template2 @Text
  setField
    = DA.Internal.Record.setFieldPrim @"value2" @Template2 @Text
instance DA.Internal.Desugar.HasSignatory Template2 where
  signatory this@Template2 {..}
    = DA.Internal.Desugar.toParties (owner2)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Template2 where
  observer this@Template2 {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Template2 where
  ensure this@Template2 {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Template2 where
  agreement this@Template2 {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Template2 where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Template2 where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Template2 where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Template2 where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Template2 where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Template2 where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Template2 where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Template2 DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Template2 DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Template2 DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Template2 DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Template2 DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Template2$Archive :
  (DA.Internal.Desugar.Consuming Template2,
   Template2
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Template2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Template2
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Template2
   -> Template2
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Template2$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_Template2_Iface_Template2 :
  DA.Internal.Desugar.InterfaceInstance Template2 Iface Template2
_interface_instance$_Template2_Iface_Template2
  = DA.Internal.Desugar.mkInterfaceInstance
      @Template2 @Iface @Template2
_method$_Template2_Iface_Template2_getOwner :
  DA.Internal.Desugar.Method Template2 Iface Template2 "getOwner"
_method$_Template2_Iface_Template2_getOwner
  = DA.Internal.Desugar.mkMethod
      @Template2
      @Iface
      @Template2
      @"getOwner"
      \ this@Template2 {..}
        -> let _ = this in let $getOwner = owner2 in $getOwner
_view$_Template2_Iface_Template2 :
  DA.Internal.Desugar.InterfaceView Template2 Iface Template2
_view$_Template2_Iface_Template2
  = DA.Internal.Desugar.mkInterfaceView
      @Template2
      @Iface
      @Template2
      \ this@Template2 {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface Template2 Iface where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Template2 Iface where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
useActionFrom :
  Party -> (ContractId Template2 -> Update ()) -> Update ()
useActionFrom p action
  = do cid <- create (toInterface @Iface (Template1 p 10))
       action (fromInterfaceContractId @Template2 cid)
useActionCoerce :
  Party -> (ContractId Iface2 -> Update ()) -> Update ()
useActionCoerce p action
  = do cid <- create (toInterface @Iface (Template1 p 10))
       action (coerceInterfaceContractId @Iface2 cid)
data GHC.Types.DamlTemplate => Test
  = Test {party : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "party" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"party" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"party" @Test @Party
data TemplateInterfaceMatching
  = TemplateInterfaceMatching {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data VoidFromInterface
  = VoidFromInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data FetchFromInterface
  = FetchFromInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data ArchiveFromInterface
  = ArchiveFromInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data VoidCoerceInterface
  = VoidCoerceInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data ExerciseCoerceInterface
  = ExerciseCoerceInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data FetchCoerceInterface
  = FetchCoerceInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
data ArchiveCoerceInterface
  = ArchiveCoerceInterface {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasSignatory Test where
  signatory this@Test {..}
    = DA.Internal.Desugar.toParties (party)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Test where
  observer this@Test {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Test where
  ensure this@Test {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Test where
  agreement this@Test {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Test where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Test where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Test where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Test where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Test where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Test where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Test where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Test DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test TemplateInterfaceMatching (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test TemplateInterfaceMatching (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test TemplateInterfaceMatching (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test TemplateInterfaceMatching where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test TemplateInterfaceMatching where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test VoidFromInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test VoidFromInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test VoidFromInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test VoidFromInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test VoidFromInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test FetchFromInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test FetchFromInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test FetchFromInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test FetchFromInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test FetchFromInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test ArchiveFromInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test ArchiveFromInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test ArchiveFromInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test ArchiveFromInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test ArchiveFromInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test VoidCoerceInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test VoidCoerceInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test VoidCoerceInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test VoidCoerceInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test VoidCoerceInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test ExerciseCoerceInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test ExerciseCoerceInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test ExerciseCoerceInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test ExerciseCoerceInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test ExerciseCoerceInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test FetchCoerceInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test FetchCoerceInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test FetchCoerceInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test FetchCoerceInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test FetchCoerceInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test ArchiveCoerceInterface (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test ArchiveCoerceInterface (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test ArchiveCoerceInterface (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test ArchiveCoerceInterface where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test ArchiveCoerceInterface where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Test$Archive :
  (DA.Internal.Desugar.Consuming Test,
   Test -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Test$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Test$TemplateInterfaceMatching :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> TemplateInterfaceMatching -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> TemplateInterfaceMatching -> DA.Internal.Desugar.Update (()))
_choice$_Test$TemplateInterfaceMatching
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@TemplateInterfaceMatching
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@TemplateInterfaceMatching
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do let template1 = Template1 party 10
               let template2 = Template2 party "Hi"
               let iface1 = toInterface @Iface template1
               let iface2 = toInterface @Iface template2
               fromInterface @Template1 iface1 === Some template1
               fromInterface @Template2 iface1 === None
               fromInterface @Template1 iface2 === None
               fromInterface @Template2 iface2 === Some template2
               templateCid1 <- create template1
               templateCid2 <- create template2
               let ifaceCid1 = toInterfaceContractId @Iface templateCid1
               let ifaceCid2 = toInterfaceContractId @Iface templateCid2
               fromInterfaceContractId ifaceCid1 === templateCid1
               fromInterfaceContractId ifaceCid2 === templateCid2
               x1 <- fetchFromInterface @Template1 ifaceCid1
               x2 <- fetchFromInterface @Template2 ifaceCid1
               x3 <- fetchFromInterface @Template1 ifaceCid2
               x4 <- fetchFromInterface @Template2 ifaceCid2
               x1 === Some userWrittenTuple (templateCid1, template1)
               x2 === None
               x3 === None
               x4 === Some userWrittenTuple (templateCid2, template2))
_choice$_Test$VoidFromInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> VoidFromInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> VoidFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> VoidFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> VoidFromInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$VoidFromInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@VoidFromInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@VoidFromInterface
       -> let _ = self in
          let _ = this in
          let _ = arg in do useActionFrom party $ \ _cid -> pure ())
_choice$_Test$FetchFromInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> FetchFromInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> FetchFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> FetchFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> FetchFromInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$FetchFromInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@FetchFromInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@FetchFromInterface
       -> let _ = self in
          let _ = this in
          let _ = arg in do useActionFrom party $ \ cid -> void (fetch cid))
_choice$_Test$ArchiveFromInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> ArchiveFromInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> ArchiveFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> ArchiveFromInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> ArchiveFromInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$ArchiveFromInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@ArchiveFromInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@ArchiveFromInterface
       -> let _ = self in
          let _ = this in
          let _ = arg in do useActionFrom party $ \ cid -> archive cid)
_choice$_Test$VoidCoerceInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> VoidCoerceInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> VoidCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> VoidCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> VoidCoerceInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$VoidCoerceInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@VoidCoerceInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@VoidCoerceInterface
       -> let _ = self in
          let _ = this in
          let _ = arg in do useActionCoerce party $ \ _cid -> pure ())
_choice$_Test$ExerciseCoerceInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> ExerciseCoerceInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> ExerciseCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> ExerciseCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> ExerciseCoerceInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$ExerciseCoerceInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@ExerciseCoerceInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@ExerciseCoerceInterface
       -> let _ = self in
          let _ = this in
          let _ = arg
          in do useActionCoerce party $ \ cid -> exercise cid MyChoice2)
_choice$_Test$FetchCoerceInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> FetchCoerceInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> FetchCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> FetchCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> FetchCoerceInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$FetchCoerceInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@FetchCoerceInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@FetchCoerceInterface
       -> let _ = self in
          let _ = this in
          let _ = arg
          in do useActionCoerce party $ \ cid -> void (fetch cid))
_choice$_Test$ArchiveCoerceInterface :
  (DA.Internal.Desugar.NonConsuming Test,
   Test -> ArchiveCoerceInterface -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> ArchiveCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> ArchiveCoerceInterface -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> ArchiveCoerceInterface -> DA.Internal.Desugar.Update (()))
_choice$_Test$ArchiveCoerceInterface
  = (DA.Internal.Desugar.NonConsuming, 
     \ this@Test {..} arg@ArchiveCoerceInterface
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@ArchiveCoerceInterface
       -> let _ = self in
          let _ = this in
          let _ = arg in do useActionCoerce party $ \ cid -> archive cid)
exerciseTest : Choice Test c () => c -> Script ()
exerciseTest c
  = script
      do p <- allocateParty "Alice"
         p `submit` createAndExerciseCmd (Test p) c
         pure ()
templateInterfaceMatchingTest
  = exerciseTest TemplateInterfaceMatching
voidFromInterfaceTest = exerciseTest VoidFromInterface
fetchFromInterfaceTest = exerciseTest FetchFromInterface
archiveFromInterfaceTest = exerciseTest ArchiveFromInterface
voidCoerceInterfaceTest = exerciseTest VoidCoerceInterface
exerciseCoerceInterfaceTest = exerciseTest ExerciseCoerceInterface
fetchCoerceInterfaceTest = exerciseTest FetchCoerceInterface
archiveCoerceInterfaceTest = exerciseTest ArchiveCoerceInterface
