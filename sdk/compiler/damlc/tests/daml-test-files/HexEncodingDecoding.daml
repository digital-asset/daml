-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

{-# OPTIONS_GHC -Wno-x-crypto #-}

module HexEncodingDecoding where

import DA.Assert ((===))
import DA.Crypto.Text
import DA.Optional (fromSome)
import DA.Text (fromCodePoints)
import Daml.Script

replaceChar : Text
replaceChar = fromCodePoints [256, 253]

replaceHex : BytesHex
replaceHex = "c480c3bd"

main =
  script do
    debugRaw ("DEBUGGY: " <> (toHex replaceChar))
    ((toHex "") === "")
    ((fromHex "") === (None : Optional Text))
    ((toHex "Hello world!") === "48656c6c6f20776f726c6421")
    ((fromHex "48656c6c6f20776f726c6421") === Some "Hello world!")
    ((toHex "DeadBeef") === "4465616442656566")
    ((fromHex "4465616442656566") === Some "DeadBeef")
    ((toHex "843d0824-9133-4bc9-b0e8-7cb4e8487dd1") === "38343364303832342d393133332d346263392d623065382d376362346538343837646431")
    ((fromHex "38343364303832342d393133332d346263392d623065382d376362346538343837646431") === Some "843d0824-9133-4bc9-b0e8-7cb4e8487dd1")
    ((toHex (fromSome ((fromHex "00") : Optional Text))) === "00")
    ((toHex (fromSome ((fromHex "0001") : Optional Text))) === "0001")
    ((fromHex "0") === (None : Optional Text))
    ((fromHex "Hello World!") === (None : Optional Text))
    ((fromHex "0000b4334b") === (None : Optional Text))
    ((toHex ("\NUL\NUL" <> replaceChar <> "3K")) === ("0000" <> replaceHex <> "334b"))
    ((fromHex ("0000" <> replaceHex <> "334b")) === Some ("\NUL\NUL" <> replaceChar <> "3K"))
    ((fromHex "6865c6c6f2") === (None : Optional Text))
    ((toHex ("he" <> replaceChar <> replaceChar <> replaceChar)) === ("6865" <> replaceHex <> replaceHex <> replaceHex))
    ((fromHex ("6865" <> replaceHex <> replaceHex <> replaceHex)) === Some ("he" <> replaceChar <> replaceChar <> replaceChar))
    pure ()
