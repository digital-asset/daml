module InterfaceEq where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => I = I GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep I where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch I where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface I I where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface I I where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasToAnyTemplate I where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate I where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep I where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory I where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver I where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate I where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType I where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq I where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive I where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice I DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice I DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded I DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @I cid pred)
instance DA.Internal.Desugar.HasExercise I DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
instance DA.Internal.Desugar.HasChoiceController I DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver I DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_I$Archive :
  (DA.Internal.Desugar.Consuming I,
   I -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (I
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (I
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId I
   -> I
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_I$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
instance DA.Internal.Desugar.HasInterfaceView I EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView I EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlTemplate => T
  = T {p : Party, f : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" T Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @T @Party
instance DA.Internal.Record.HasField "f" T Int where
  getField = DA.Internal.Record.getFieldPrim @"f" @T @Int
  setField = DA.Internal.Record.setFieldPrim @"f" @T @Int
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T where
  agreement this@T {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T$Archive :
  (DA.Internal.Desugar.Consuming T,
   T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_T_I_T :
  DA.Internal.Desugar.InterfaceInstance T I T
_interface_instance$_T_I_T
  = DA.Internal.Desugar.mkInterfaceInstance @T @I @T
_view$_T_I_T : DA.Internal.Desugar.InterfaceView T I T
_view$_T_I_T
  = DA.Internal.Desugar.mkInterfaceView
      @T
      @I
      @T
      \ this@T {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface T I where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T I where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data GHC.Types.DamlTemplate => U
  = U {p : Party, f : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" U Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @U @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @U @Party
instance DA.Internal.Record.HasField "f" U Int where
  getField = DA.Internal.Record.getFieldPrim @"f" @U @Int
  setField = DA.Internal.Record.setFieldPrim @"f" @U @Int
instance DA.Internal.Desugar.HasSignatory U where
  signatory this@U {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver U where
  observer this@U {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure U where
  ensure this@U {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement U where
  agreement this@U {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive U where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate U where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch U where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate U where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate U where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep U where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType U where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise U DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice U DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice U DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController U DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver U DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_U$Archive :
  (DA.Internal.Desugar.Consuming U,
   U -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (U
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (U
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId U
   -> U
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_U$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_U_I_U :
  DA.Internal.Desugar.InterfaceInstance U I U
_interface_instance$_U_I_U
  = DA.Internal.Desugar.mkInterfaceInstance @U @I @U
_view$_U_I_U : DA.Internal.Desugar.InterfaceView U I U
_view$_U_I_U
  = DA.Internal.Desugar.mkInterfaceView
      @U
      @I
      @U
      \ this@U {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface U I where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface U I where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
main
  = script
      do p <- allocateParty "p"
         assertMsg "tpl x == tpl y && cts x == cts y ==> I x == I y"
           $ toInterface @I (T p 0)
           == toInterface @I (T p 0)
         assertMsg "tpl x == tpl y && cts x /= cts y ==> I x /= I y"
           $ toInterface @I (T p 0)
           /= toInterface @I (T p 1)
         assertMsg "tpl x /= tpl y ==> I x /= I y" $ toInterface @I (T p 0)
           /= toInterface @I (U p 0)
           && toInterface @I (T p 0)
           /= toInterface @I (U p 1)
           && toInterface @I (T p 0)
           /= toInterface @I (U p (- 1))
