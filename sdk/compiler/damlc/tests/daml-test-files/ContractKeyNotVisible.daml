-- @ERROR range=18:1-18:8; Couldn't see contract with key 'Bob'
-- @ERROR range=61:1-61:15; Attempt to fetch, lookup or exercise a key associated with a contract
-- @ERROR range=78:1-78:12; Attempt to fetch, lookup or exercise a key associated with a contract
module ContractKeyNotVisible where

import Daml.Script
import DA.Optional
import ScriptAssertHelpers

template Foo
  with
    p : Party
  where
    signatory p
    key p : Party
    maintainer key

aScript = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  _ <- submit bob do createCmd Foo with p = bob
  canSeeKey @Foo alice bob
  pure ()

template Keyed
  with
    sig : Party
  where
    signatory sig

    key sig : Party
    maintainer key

template Divulger
  with
    divulgee : Party
    sig : Party
  where
    signatory divulgee
    observer sig

    nonconsuming choice DivulgeKeyed : Keyed
      with
        keyedCid : ContractId Keyed
      controller sig
      do fetch keyedCid

template Delegation
  with
    sig : Party
    divulgee : Party
  where
    signatory sig
    observer divulgee

    choice LookupKeyed
      : Optional (ContractId Keyed)
      controller divulgee
      do lookupByKey @Keyed sig

divulgeeLookup = script do
  sig <- allocateParty "s" -- Signatory
  divulgee <- allocateParty "d" -- Divulgee
  keyedCid <- submit sig do createCmd Keyed with ..
  divulgercid <- submit divulgee do createCmd Divulger with ..
  submit sig do exerciseCmd divulgercid DivulgeKeyed with ..
  -- Divulgee can't do positive lookup with maintainer authority.
  -- Note that the lookup returns `None` so the assertion passes.
  -- If the assertion is changed to `isSome`, the assertion fails,
  -- which means the error message changes. The reason is that the
  -- assertion is checked at interpretation time, before the lookup
  -- is checked at validation time.
  delegationCid <- submit sig $ createCmd (Delegation sig divulgee)
  mcid <- submit divulgee do exerciseCmd delegationCid LookupKeyed
  assert (isNone mcid)
  pure ()

blindLookup = script do
  sig <- allocateParty "s" -- Signatory
  blind <- allocateParty "b" -- Blind
  _ <- submit sig do createCmd Keyed with ..
  -- Blind party can't do positive lookup with maintainer authority.
  cid <- submit sig $ createCmd (Delegation sig blind)
  mcid <- submit blind do exerciseCmd cid LookupKeyed
  assert (isNone mcid)
  pure ()

template LocalKeyVisibility
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs
    choice LocalLookup : ()
      controller obs
      do create (Keyed sig)
         Some _ <- lookupByKey @Keyed sig
         pure ()

    choice LocalFetch : ()
      controller obs
      do create (Keyed sig)
         _ <- fetchByKey @Keyed sig
         pure ()

localLookup = script do
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  cid <- submit p1 $ createCmd (LocalKeyVisibility p1 p2)
  submit p2 $ exerciseCmd cid LocalLookup

localFetch = script do
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  cid <- submit p1 $ createCmd (LocalKeyVisibility p1 p2)
  submit p2 $ exerciseCmd cid LocalFetch
