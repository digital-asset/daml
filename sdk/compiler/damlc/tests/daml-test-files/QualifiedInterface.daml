-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

-- @SUPPORTS-LF-FEATURE DAML_INTERFACE
-- @ WARN since-lf=1.16 2.0; warn-bad-interface-instances
-- @ WARN since-lf=1.16 2.0; warn-bad-interface-instances

module QualifiedInterface where

import Daml.Script
import qualified Interface
import DA.Assert ((===))
import ScriptAssertHelpers

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner
    interface instance Interface.Token for Asset where
      view = Interface.EmptyInterfaceView
      getOwner = owner
      getAmount = amount
      setAmount x = toInterface @Interface.Token (this with amount = x)

      splitImpl splitAmount = do
        assert (splitAmount < amount)
        cid1 <- create this with amount = splitAmount
        cid2 <- create this with amount = amount - splitAmount
        pure (toInterfaceContractId @Interface.Token cid1, toInterfaceContractId @Interface.Token cid2)

      transferImpl newOwner = do
        cid <- create this with owner = newOwner
        pure (toInterfaceContractId @Interface.Token cid)

      noopImpl nothing = do
        [1] === [1] -- make sure `mkMethod` calls are properly erased in the presence of polymorphism.
        pure ()

main = script do
  p <- allocateParty "Alice"
  cidAsset1 <- p `submit` do
    createCmd Asset with
      issuer = p
      owner = p
      amount = 15
  let cidToken1 = toInterfaceContractId @Interface.Token cidAsset1
  (cidToken2, cidToken3) <- p `submit` do
    exerciseCmd cidToken1 (Interface.Noop ())
    r <- exerciseCmd cidToken1 (Interface.Split 10)
    pure r

  token2 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken2
  -- Party is duplicated because p is both observer & issuer
  signatory token2 === [p, p]
  Interface.getAmount (toInterface @Interface.Token token2) === 10
  amount token2 === 10

  token3 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken3
  Interface.getAmount (toInterface @Interface.Token token3) === 5
  amount token3 === 5

  cidToken4 <- p `submit` do exerciseCmd cidToken3 (Interface.GetRich 20)

  token4 <- queryAssertContractId p $ fromInterfaceContractId @Asset cidToken4
  Interface.getAmount (toInterface @Interface.Token token4) === 25
  amount token4 === 25

  pure ()
