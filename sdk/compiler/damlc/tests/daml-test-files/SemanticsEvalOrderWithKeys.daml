-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

-- Here we test that evaluation order proceeds as we expect. We do this by
-- raising multiple errors and seeing which one percolates to the top (i.e.
-- which error was evaluated first).
--
-- (Convention: When testing a rule in the operational semantics, we use the
-- rule's name in the error message itself. If there are multiple tests for
-- the same rule, we use `R_1`, `R_2`, `R_3`, and so on. This is why there is
-- `evExpRecUpdErr1`, `evExpRecUpdErr2_1`, and `evExpRecUpdErr2_2`, for example.)

{-# LANGUAGE ApplicativeDo #-}

-- @SUPPORTS-LF-FEATURE DAML_CONTRACT_KEYS

module SemanticsEvalOrderWithKeys where

import Daml.Script
import ScriptAssertHelpers

-- @ERROR EvUpdCreateErr3_2 OK
template T_EvUpdCreateErr3_2
  with
    p : Party
  where
    ensure True
    signatory p
    observer (error @Party "EvUpdCreateErr3_2 OK")
    key error @Party "EvUpdCreateErr3_2 failed" : Party
    maintainer error @Party "EvUpdCreateErr3_2 failed"

evUpdCreateErr3_2 : Script ()
evUpdCreateErr3_2 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateErr3_2 p)
  abort "EvUpdCreateErr3_2 failed"

-- @ERROR EvUpdCreateWithKeyErr1 OK
template T_EvUpdCreateWithKeyErr1
  with
    p : Party
  where
    ensure True
    signatory p
    observer [] : [Party]
    key error @Party "EvUpdCreateWithKeyErr1 OK" : Party
    maintainer error @Party "EvUpdCreateWithKeyErr1 failed"

evUpdCreateWithKeyErr1 : Script ()
evUpdCreateWithKeyErr1 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateWithKeyErr1 p)
  abort "EvUpdCreateWithKeyErr1 failed"

-- @ERROR EvUpdCreateWithKeyErr2 OK
template T_EvUpdCreateWithKeyErr2
  with
    p : Party
  where
    ensure True
    signatory p
    observer [] : [Party]
    key p : Party
    maintainer error @Party "EvUpdCreateWithKeyErr2 OK"

evUpdCreateWithKeyErr2 : Script ()
evUpdCreateWithKeyErr2 = script do
  p <- allocateParty "Alice"
  submit p do
    createCmd (T_EvUpdCreateWithKeyErr2 p)
  abort "EvUpdCreateWithKeyErr2 failed"

-- @ERROR Couldn't see contract with key ()
template T_EvUpdFetchByKeyErr
  with
    p : Party
  where
    signatory p
    key () : ()
    maintainer (error @Party "EvUpdFetchByKeyErr OK")

evUpdFetchByKeyErr : Script ()
evUpdFetchByKeyErr = script do
  p <- allocateParty "Alice"
  canSeeKey @T_EvUpdFetchByKeyErr p ()
  abort "EvUpdFetchByKeyErr failed"

template T_EvUpdFetchByKeyErrContract
  with
    p : Party
  where
    signatory p
    key () : ()
    maintainer (error @Party "EvUpdFetchByKeyErrContract OK")

-- Caller contract to ensure above follows correct evalation path
-- @ERROR EvUpdFetchByKeyErrContract OK
template T_EvUpdFetchByKeyErrCaller
  with
    p : Party
  where
    signatory p
    choice DoFetch : ()
      controller p
      do
        fetchByKey @T_EvUpdFetchByKeyErrContract ()
        pure ()

evUpdFetchByKeyErrContract : Script ()
evUpdFetchByKeyErrContract = script do
  p <- allocateParty "Alice"
  p `submit` createAndExerciseCmd (T_EvUpdFetchByKeyErrCaller p) DoFetch
  abort "EvUpdFetchByKeyErrContract failed"
