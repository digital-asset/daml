module InterfaceChoiceGuardFailed where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => I = I GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep I where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch I where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface I I where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface I I where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod I "getController" (Party)
getController : I -> Party
getController = GHC.Types.primitiveInterface @"getController"
instance DA.Internal.Desugar.HasToAnyTemplate I where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate I where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep I where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory I where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver I where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate I where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType I where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq I where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive I where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice I DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice I DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded I DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @I cid pred)
instance DA.Internal.Desugar.HasExercise I DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
instance DA.Internal.Desugar.HasChoiceController I DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver I DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasToAnyChoice I IChoice (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice I IChoice (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded I IChoice (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @I cid pred)
instance DA.Internal.Desugar.HasExercise I IChoice (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @I cid)
        arg
instance DA.Internal.Desugar.HasChoiceController I IChoice where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver I IChoice where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
data IChoice
  = IChoice {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
_choice$_I$Archive :
  (DA.Internal.Desugar.Consuming I,
   I -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (I
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (I
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId I
   -> I
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_I$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_I$IChoice :
  (DA.Internal.Desugar.Consuming I,
   I -> IChoice -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (I
                                 -> IChoice -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (I
                                 -> IChoice -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId I
   -> I -> IChoice -> DA.Internal.Desugar.Update (()))
_choice$_I$IChoice
  = (DA.Internal.Desugar.Consuming, 
     \ this arg@IChoice
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (getController this), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this arg@IChoice
       -> let _ = self in let _ = this in let _ = arg in do pure ())
instance DA.Internal.Desugar.HasInterfaceView I EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView I EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlTemplate => T
  = T {party : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "party" T Party where
  getField = DA.Internal.Record.getFieldPrim @"party" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"party" @T @Party
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (party)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T where
  agreement this@T {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T$Archive :
  (DA.Internal.Desugar.Consuming T,
   T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_T_I_T :
  DA.Internal.Desugar.InterfaceInstance T I T
_interface_instance$_T_I_T
  = DA.Internal.Desugar.mkInterfaceInstance @T @I @T
_method$_T_I_T_getController :
  DA.Internal.Desugar.Method T I T "getController"
_method$_T_I_T_getController
  = DA.Internal.Desugar.mkMethod
      @T
      @I
      @T
      @"getController"
      \ this@T {..}
        -> let _ = this in let $getController = party in $getController
_view$_T_I_T : DA.Internal.Desugar.InterfaceView T I T
_view$_T_I_T
  = DA.Internal.Desugar.mkInterfaceView
      @T
      @I
      @T
      \ this@T {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface T I where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface T I where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data GHC.Types.DamlTemplate => Test
  = Test {party : Party, cidI : ContractId I}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "party" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"party" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"party" @Test @Party
instance DA.Internal.Record.HasField "cidI" Test (ContractId I) where
  getField
    = DA.Internal.Record.getFieldPrim @"cidI" @Test @ContractId I
  setField
    = DA.Internal.Record.setFieldPrim @"cidI" @Test @ContractId I
data Call
  = Call {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasSignatory Test where
  signatory this@Test {..}
    = DA.Internal.Desugar.toParties (party)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Test where
  observer this@Test {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Test where
  ensure this@Test {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Test where
  agreement this@Test {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Test where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Test where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Test where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Test where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Test where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Test where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Test where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Test DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test Call (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test Call (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test Call (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test Call where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test Call where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Test$Archive :
  (DA.Internal.Desugar.Consuming Test,
   Test -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Test$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Test$Call :
  (DA.Internal.Desugar.Consuming Test,
   Test -> Call -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> Call -> DA.Internal.Desugar.Update (()))
_choice$_Test$Call
  = (DA.Internal.Desugar.Consuming, 
     \ this@Test {..} arg@Call
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (party), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@Call
       -> let _ = self in
          let _ = this in
          let _ = arg in do exerciseGuarded (const False) cidI IChoice)
main
  = script
      do alice <- allocateParty "alice"
         cidT <- alice `submit` createCmd T {party = alice}
         let cidI = toInterfaceContractId @I cidT
         alice
           `submit`
             createAndExerciseCmd (Test {party = alice, cidI = cidI}) Call
