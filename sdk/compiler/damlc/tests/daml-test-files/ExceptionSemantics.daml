-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SUPPORTS-LF-FEATURE DAML_EXCEPTIONS
-- @ERROR range=102:1-102:23; Unhandled exception: ExceptionSemantics:E
-- @ERROR range=117:1-117:25; Unhandled exception: DA.Exception.ArithmeticError:ArithmeticError with message = "ArithmeticError while evaluating (DIV_INT64 1 0)."
-- @ERROR range=132:1-132:11; Attempt to fetch or exercise a contract not visible to the reading parties.
-- @ERROR range=143:1-143:11; Attempt to exercise a consumed contract
-- @WARN warn-bad-exceptions
module ExceptionSemantics where

import Daml.Script
import DA.Exception
import DA.Assert ((===))

exception E
  where
    message "E"

template K
  with
    p : Party
    v : Int
  where
    signatory p

template T
  with
    p : Party
  where
    signatory p
    nonconsuming choice Throw : ()
      controller p
      do throw E
    nonconsuming choice Catch : ()
      controller p
      do try (exercise self Throw)
         catch
           E -> pure ()

    nonconsuming choice ThrowArithmeticError : Int
      controller p
      do pure (1/0)
    nonconsuming choice CatchArithmeticError : Int
      controller p
      do try (exercise self ThrowArithmeticError)
         catch
           (_: ArithmeticError) -> pure 42

    nonconsuming choice UncatchableTry : ()
      with
        cid : ContractId K
      controller p
      do try (() <$ fetch cid)
         catch
           E -> pure()

    nonconsuming choice RollbackArchive : ()
      with
        i : Int
      controller p
      do cid <- create (K p i)
         try (archive cid >> throw E)
         catch
           E -> archive cid

    nonconsuming choice NonRollbackArchive : ()
      with
        i : Int
      controller p
      do cid <- create (K p i)
         try (archive cid)
         catch
           E -> pure ()
         archive cid

template Fetcher
  with
    sig : Party
    obs : Party
  where
    signatory sig
    observer obs
    choice Fetch : K
      with
        cid : ContractId K
      controller obs
      do fetch cid
    choice RollbackFetch : ()
      with
        cid : ContractId K
      controller obs
      do try (fetch cid >> throw E)
         catch
           E -> pure ()

uncaughtUserException = script do
  p <- allocateParty "p"
  _ <- submitMustFail p $ createAndExerciseCmd (T p) Throw
  pure ()

unhandledUserException = script do
  p <- allocateParty "p"
  _ <- submit p $ createAndExerciseCmd (T p) Throw
  pure ()

handledUserException = script do
  p <- allocateParty "p"
  _ <- submit p $ createAndExerciseCmd (T p) Catch
  pure ()

uncaughtArithmeticError = script do
  p <- allocateParty "p"
  _ <- submitMustFail p $ createAndExerciseCmd (T p) ThrowArithmeticError
  pure ()

unhandledArithmeticError = script do
  p <- allocateParty "p"
  _ <- submit p $ createAndExerciseCmd (T p) ThrowArithmeticError
  pure ()

handledArithmeticError = script do
  p <- allocateParty "p"
  r <- submit p $ createAndExerciseCmd (T p) CatchArithmeticError
  r === 42

rollbackArchive = script do
  p <- allocateParty "p"
  submit p $ createAndExerciseCmd (T p) (RollbackArchive 0)
  submitMustFail p $ createAndExerciseCmd (T p) (NonRollbackArchive 0)

divulgence = script do
  p1 <- allocateParty "p1"
  p2 <- allocateParty "p2"
  cid <- submit p1 $ createCmd (K p1 0)
  divulger <- submit p2 $ createCmd (Fetcher p2 p1)
  fetcher <- submit p1 $ createCmd (Fetcher p1 p2)
  submitMustFail p2 $ exerciseCmd fetcher (Fetch cid)
  submit p1 $ exerciseCmd divulger (RollbackFetch cid)
  submit p2 $ exerciseCmd fetcher (Fetch cid)
  pure ()

tryContext = script do
  p <- allocateParty "p"
  kCid <- submit p $ createCmd (K p 0)
  submit p $ archiveCmd kCid
  c <- submit p $ createCmd (T p)
  -- This will result in a partial transaction with ptx.context.info
  -- pointing to a TryContextInfo.
  submit p $ exerciseCmd c (UncatchableTry kCid)
