module InterfaceFunctions where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Assert ( (===) )
data EmptyInterfaceView = EmptyInterfaceView {}
data GHC.Types.DamlInterface => Token = Token GHC.Types.Opaque
instance DA.Internal.Desugar.HasInterfaceTypeRep Token where
  _interfaceTypeRep
    = GHC.Types.primitive @"EInterfaceTemplateTypeRep"
instance DA.Internal.Desugar.HasFetch Token where
  fetch = GHC.Types.primitive @"UFetchInterface"
instance DA.Internal.Desugar.HasToInterface Token Token where
  _toInterface this = this
instance DA.Internal.Desugar.HasFromInterface Token Token where
  fromInterface this = DA.Internal.Desugar.Some this
  unsafeFromInterface _ this = this
instance DA.Internal.Desugar.HasMethod Token "getAmount" (Int)
getAmount : Token -> Int
getAmount = GHC.Types.primitiveInterface @"getAmount"
instance DA.Internal.Desugar.HasToAnyTemplate Token where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Token where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Token where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasSignatory Token where
  signatory = GHC.Types.primitive @"ESignatoryInterface"
instance DA.Internal.Desugar.HasObserver Token where
  observer = GHC.Types.primitive @"EObserverInterface"
instance DA.Internal.Desugar.HasCreate Token where
  create = GHC.Types.primitive @"UCreateInterface"
instance DA.Internal.Desugar.HasIsInterfaceType Token where
  _isInterfaceType _ = DA.Internal.Desugar.True
instance DA.Internal.Desugar.Eq Token where
  (==) = GHC.Types.primitive @"BEEqual"
instance DA.Internal.Desugar.HasArchive Token where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
instance DA.Internal.Desugar.HasToAnyChoice Token DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Token DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasExerciseGuarded Token DA.Internal.Desugar.Archive (()) where
  exerciseGuarded pred cid arg
    = GHC.Types.primitive
        @"UExerciseInterfaceGuarded"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
        (DA.Internal.Desugar._exerciseInterfaceGuard @Token cid pred)
instance DA.Internal.Desugar.HasExercise Token DA.Internal.Desugar.Archive (()) where
  exercise cid arg
    = GHC.Types.primitive
        @"UExerciseInterface"
        (DA.Internal.Desugar.toInterfaceContractId @Token cid)
        arg
instance DA.Internal.Desugar.HasChoiceController Token DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Token DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Token$Archive :
  (DA.Internal.Desugar.Consuming Token,
   Token
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Token
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Token
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Token
   -> Token
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Token$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
instance DA.Internal.Desugar.HasInterfaceView Token EmptyInterfaceView where
  _view = GHC.Types.primitive @"EViewInterface"
instance DA.Internal.Desugar.HasFromAnyView Token EmptyInterfaceView where
  _fromAnyView = GHC.Types.primitive @"EFromAnyView"
data GHC.Types.DamlTemplate => Asset
  = Asset {issuer : Party, owner : Party, amount : Int}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "issuer" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"issuer" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"issuer" @Asset @Party
instance DA.Internal.Record.HasField "owner" Asset Party where
  getField = DA.Internal.Record.getFieldPrim @"owner" @Asset @Party
  setField = DA.Internal.Record.setFieldPrim @"owner" @Asset @Party
instance DA.Internal.Record.HasField "amount" Asset Int where
  getField = DA.Internal.Record.getFieldPrim @"amount" @Asset @Int
  setField = DA.Internal.Record.setFieldPrim @"amount" @Asset @Int
instance DA.Internal.Desugar.HasSignatory Asset where
  signatory this@Asset {..}
    = DA.Internal.Desugar.toParties (issuer)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Asset where
  observer this@Asset {..}
    = DA.Internal.Desugar.concat
        [DA.Internal.Desugar.toParties (owner),
         DA.Internal.Desugar.toParties (issuer)]
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Asset where
  ensure this@Asset {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Asset where
  agreement this@Asset {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Asset where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Asset where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Asset where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Asset where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Asset where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Asset where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Asset where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Asset DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Asset DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Asset DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Asset DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Asset$Archive :
  (DA.Internal.Desugar.Consuming Asset,
   Asset
   -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Asset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Asset
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Asset
   -> Asset
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Asset$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_interface_instance$_Asset_Token_Asset :
  DA.Internal.Desugar.InterfaceInstance Asset Token Asset
_interface_instance$_Asset_Token_Asset
  = DA.Internal.Desugar.mkInterfaceInstance @Asset @Token @Asset
_method$_Asset_Token_Asset_getAmount :
  DA.Internal.Desugar.Method Asset Token Asset "getAmount"
_method$_Asset_Token_Asset_getAmount
  = DA.Internal.Desugar.mkMethod
      @Asset
      @Token
      @Asset
      @"getAmount"
      \ this@Asset {..}
        -> let _ = this in let $getAmount = amount in $getAmount
_view$_Asset_Token_Asset :
  DA.Internal.Desugar.InterfaceView Asset Token Asset
_view$_Asset_Token_Asset
  = DA.Internal.Desugar.mkInterfaceView
      @Asset
      @Token
      @Asset
      \ this@Asset {..}
        -> let _ = this in let $view = EmptyInterfaceView in $view
instance DA.Internal.Desugar.HasToInterface Asset Token where
  _toInterface = GHC.Types.primitive @"EToInterface"
instance DA.Internal.Desugar.HasFromInterface Asset Token where
  fromInterface = GHC.Types.primitive @"EFromInterface"
  unsafeFromInterface = GHC.Types.primitive @"EUnsafeFromInterface"
data GHC.Types.DamlTemplate => Test
  = Test {alice : Party, bob : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "alice" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"alice" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"alice" @Test @Party
instance DA.Internal.Record.HasField "bob" Test Party where
  getField = DA.Internal.Record.getFieldPrim @"bob" @Test @Party
  setField = DA.Internal.Record.setFieldPrim @"bob" @Test @Party
data Call
  = Call {}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Desugar.HasSignatory Test where
  signatory this@Test {..}
    = DA.Internal.Desugar.toParties (alice)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver Test where
  observer this@Test {..}
    = []
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure Test where
  ensure this@Test {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement Test where
  agreement this@Test {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive Test where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate Test where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch Test where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate Test where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate Test where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep Test where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType Test where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise Test DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise Test Call (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice Test Call (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice Test Call (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController Test Call where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver Test Call where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_Test$Archive :
  (DA.Internal.Desugar.Consuming Test,
   Test -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_Test$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_Test$Call :
  (DA.Internal.Desugar.Consuming Test,
   Test -> Call -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (Test
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId Test
   -> Test -> Call -> DA.Internal.Desugar.Update (()))
_choice$_Test$Call
  = (DA.Internal.Desugar.Consuming, 
     \ this@Test {..} arg@Call
       -> let _ = this in
          let _ = arg in DA.Internal.Desugar.toParties (alice), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@Test {..} arg@Call
       -> let _ = self in
          let _ = this in
          let _ = arg
          in
            do let asset = Asset alice bob 15
               let token = toInterface @Token asset
               fromInterface token === Some asset
               getAmount token === 15
               cid <- create token
               token' <- fetch cid
               fromInterface token' === Some asset
               getAmount token' === 15
               signatory token === [alice]
               observer token === [bob, alice]
               assert (interfaceTypeRep token == templateTypeRep @Asset)
               assert (interfaceTypeRep token /= templateTypeRep @Token))
main
  = script
      do alice <- allocateParty "Alice"
         bob <- allocateParty "Bob"
         alice `submit` do createAndExerciseCmd (Test alice bob) Call
