
-- | This module checks that what is considered a value in
-- the operational semantics of Daml-LF matches what is
-- treated as a value in Daml.
--
-- According to the spec, a value is "an expression which does not
-- need to be evaluated further". Any unevaluated subexpressions
-- in a value should remain unevaluated. In particular, this
-- includes:
--
-- * term lambdas
-- * type lambdas where the parameter has kind 'nat'
-- * updates with 'bind' or 'embed_expr'
-- * scripts with 'sbind' or 'sembed_expr'
--
-- Where we can, we test this from Daml by using values with
-- embedded error expressions. The value should evaluate without
-- raising an error.
--
-- Any errors here are tagged with the name of the rule in
-- the semantics that they violate.
--
-- See the sister module, SemanticsValueSince17, for the missing
-- ValExpTyAbsNat case.

{-# LANGUAGE ApplicativeDo #-}

module SemanticsValue where

import Daml.Script

template Test
  with
    p : Party
  where
    signatory p
    choice UpdatesDontErrorWhenNotInvoked : ()
      controller p
      do
        let
          _ : Update Int = do
            _ <- pure ()
            error "ValUpdateBindContract"
        pure ()
    
    choice Errors : ()
      controller p
      do error "I fail!"
          
scriptAndUpdate = script do
  let 
    _ : Int -> Int = 
      (\ (x : Int) -> error "ValExpAbs")
  -- ValExpTyAbsNat is tested in SemanticsValueSince17
  let 
    _ : Update Int = do
      _ <- pure ()
      error "ValUpdateBind"
  let 
    _ : Script () = do
      _ <- pure ()
      error "ValScriptBind"

  p <- allocateParty "Alice"

  -- Ensure Updates in contract do not error if not invoked
  p `submit` createAndExerciseCmd (Test p) UpdatesDontErrorWhenNotInvoked

  -- Ensure Semantically that submitMustFail does catch direct calls to `error` (in the contract)
  p `submitMustFail` createAndExerciseCmd (Test p) Errors

  pure ()

-- @ERROR range=75:1-75:18; Evaluated error without creating
commandsAreStrict = script do
  p <- allocateParty "Alice"
  let
    _ : Script () = do
      p `submit` do
        createAndExerciseCmd (Test p) Errors
        error "Evaluated error without creating"
        pure ()
  pure ()
