module ChoiceShadowing where
import (implicit) qualified DA.Internal.Record
import (implicit) qualified GHC.Types
import (implicit) qualified DA.Internal.Desugar
import (implicit) DA.Internal.RebindableSyntax
import Daml.Script
import DA.Assert
data GHC.Types.DamlTemplate => T
  = T {p : Party, p2 : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" T Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @T @Party
instance DA.Internal.Record.HasField "p2" T Party where
  getField = DA.Internal.Record.getFieldPrim @"p2" @T @Party
  setField = DA.Internal.Record.setFieldPrim @"p2" @T @Party
data Call
  = Call {p : Party}
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)
instance DA.Internal.Record.HasField "p" Call Party where
  getField = DA.Internal.Record.getFieldPrim @"p" @Call @Party
  setField = DA.Internal.Record.setFieldPrim @"p" @Call @Party
instance DA.Internal.Desugar.HasSignatory T where
  signatory this@T {..}
    = DA.Internal.Desugar.toParties (p)
    where
        _ = this
instance DA.Internal.Desugar.HasObserver T where
  observer this@T {..}
    = DA.Internal.Desugar.toParties ([p, p2])
    where
        _ = this
instance DA.Internal.Desugar.HasEnsure T where
  ensure this@T {..}
    = DA.Internal.Desugar.True
    where
        _ = this
instance DA.Internal.Desugar.HasAgreement T where
  agreement this@T {..}
    = ""
    where
        _ = this
instance DA.Internal.Desugar.HasArchive T where
  archive cid
    = DA.Internal.Desugar.exercise cid DA.Internal.Desugar.Archive
    where
        _ = cid
instance DA.Internal.Desugar.HasCreate T where
  create = GHC.Types.primitive @"UCreate"
instance DA.Internal.Desugar.HasFetch T where
  fetch = GHC.Types.primitive @"UFetch"
instance DA.Internal.Desugar.HasToAnyTemplate T where
  _toAnyTemplate = GHC.Types.primitive @"EToAnyTemplate"
instance DA.Internal.Desugar.HasFromAnyTemplate T where
  _fromAnyTemplate = GHC.Types.primitive @"EFromAnyTemplate"
instance DA.Internal.Desugar.HasTemplateTypeRep T where
  _templateTypeRep = GHC.Types.primitive @"ETemplateTypeRep"
instance DA.Internal.Desugar.HasIsInterfaceType T where
  _isInterfaceType _ = DA.Internal.Desugar.False
instance DA.Internal.Desugar.HasExercise T DA.Internal.Desugar.Archive (()) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T DA.Internal.Desugar.Archive (()) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T DA.Internal.Desugar.Archive (()) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T DA.Internal.Desugar.Archive where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T DA.Internal.Desugar.Archive where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
instance DA.Internal.Desugar.HasExercise T Call (ContractId T) where
  exercise = GHC.Types.primitive @"UExercise"
instance DA.Internal.Desugar.HasToAnyChoice T Call (ContractId T) where
  _toAnyChoice = GHC.Types.primitive @"EToAnyChoice"
instance DA.Internal.Desugar.HasFromAnyChoice T Call (ContractId T) where
  _fromAnyChoice = GHC.Types.primitive @"EFromAnyChoice"
instance DA.Internal.Desugar.HasChoiceController T Call where
  _choiceController = GHC.Types.primitive @"EChoiceController"
instance DA.Internal.Desugar.HasChoiceObserver T Call where
  _choiceObserver = GHC.Types.primitive @"EChoiceObserver"
_choice$_T$Archive :
  (DA.Internal.Desugar.Consuming T,
   T -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> DA.Internal.Desugar.Archive -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T
      -> DA.Internal.Desugar.Archive -> DA.Internal.Desugar.Update (()))
_choice$_T$Archive
  = (DA.Internal.Desugar.Consuming, 
     \ this _ -> DA.Internal.Desugar.signatory this, 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ _ _ _ -> pure ())
_choice$_T$Call :
  (DA.Internal.Desugar.Consuming T,
   T -> Call -> [DA.Internal.Desugar.Party],
   DA.Internal.Desugar.Optional (T
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.Optional (T
                                 -> Call -> [DA.Internal.Desugar.Party]),
   DA.Internal.Desugar.ContractId T
   -> T -> Call -> DA.Internal.Desugar.Update (ContractId T))
_choice$_T$Call
  = (DA.Internal.Desugar.Consuming, 
     \ this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@Call {..}
              -> let _ = this in
                 let _ = arg in DA.Internal.Desugar.toParties (p2), 
     DA.Internal.Desugar.None, DA.Internal.Desugar.None, 
     \ self this@T {..}
       -> DA.Internal.Desugar.bypassReduceLambda
            \ arg@Call {..}
              -> let _ = self in
                 let _ = this in let _ = arg in do create T {p = p, p2 = p2})
test1
  = script
      do alice <- allocateParty "Alice"
         bob <- allocateParty "Bob"
         cid <- submit alice $ createCmd (T alice bob)
         cid2 <- submit bob $ exerciseCmd cid (Call bob)
         newT <- queryContractId bob cid2
         newT === Some (T bob bob)
