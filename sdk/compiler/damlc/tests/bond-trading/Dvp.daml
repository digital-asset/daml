-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Dvp where

import Daml.Script

import Bond hiding (Withdraw, Reject, Accept)
import Bond qualified
import Cash hiding (Withdraw, Reject, Accept)
import Cash qualified
import DvpTerms
import DvpNotification hiding (Accept)
import DvpNotification qualified

import DA.Assert
import DA.Date

template DvpProposal
  with
    c : DvpTerms
  where
    signatory c.buyer
    observer c.seller
    ensure isValidDvp c

    choice Accept : DvpId
      controller c.seller
      do create Dvp with c  = c

    choice Reject : ()
      controller c.seller
      do return ()

    choice Withdraw : ()
      controller c.buyer
      do return ()

type DvpId = ContractId Dvp

template Dvp
  with
    c : DvpTerms
  where
    ensure isValidDvp c
    signatory c.buyer, c.seller

    choice Allocate : (DvpAllocatedId, CashId)
      with cashCid : CashId
      controller c.buyer
      do cash <- fetch cashCid
         assert $ not $ isLocked cash
         cash.amount === c.cashAmount
         cash.issuer === c.cashIssuer
         cash.currency === c.cashCurrency
         lid <- create LockPoA with locker = c.seller; issuer = cash.issuer; owner = cash.owner
         cashCid <- exercise cashCid Lock with lid; _lockMaturity = c.settleTime
         alloc <- create DvpAllocated with c=c; cashCid
         return (alloc, cashCid)

type DvpAllocatedId = ContractId DvpAllocated

template DvpAllocated
  with
    c : DvpTerms
    cashCid : CashId
  where
    ensure isValidDvp c

    signatory c.buyer, c.seller

    choice Settle : SettleResult
      with bondCid : BondId
      controller c.seller
      do assertAfter c.settleTime

         bond <- fetch bondCid
         bond.amount === c.bondAmount
         bond.issuer === c.bondIssuer
         bond.isin === c.bondIsin
         bond.owner === c.seller
         _ <- create DvpAllocated with c; cashCid
         bondCid <- exercise bondCid Bond.Transfer with newOwner = c.buyer
         bondCid <- exercise bondCid Bond.Accept

         cash <- fetch cashCid
         assert $ isLocked cash
         cash.amount === c.cashAmount
         cash.issuer === c.cashIssuer
         cash.currency === c.cashCurrency
         cash.owner === c.buyer
         cashCid <- exercise cashCid Cash.TransferToLocker

         notificationCid <- create DvpNotification with c = c
         return SettleResult with ..

data SettleResult = SettleResult
  with
    bondCid : BondId
    cashCid : CashId
    notificationCid : DvpNotificationId

setDate : Int -> Month -> Int -> Script ()
setDate year month day = setTime $ datetime year month day 0 0 0

main = script do
  setDate 2018 May 14

   --2018-05-14T00:00Z
  acmeBank <- allocateParty "AcmeBank"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  cashAliceCid <- acmeBank `submit` createCmd
    CashTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      receiver = alice
      currency = "USD"
      amount = 100.0
      locker = acmeBank
      lockMaturity = None

  cashAliceCid <-
    alice `submit` exerciseCmd cashAliceCid Cash.Accept

  bondBobCid <- acmeBank `submit` createCmd
    BondTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = bob
      isin = "1234"
      amount = 100.0

  bondBobCid <- bob `submit` exerciseCmd bondBobCid Bond.Accept

  dvpProposalCid <- alice `submit` createCmd
    DvpProposal with
      c = DvpTerms with
        buyer = alice
        seller = bob
        bondIssuer = acmeBank
        bondIsin = "1234"
        bondAmount = 100.0
        cashIssuer = acmeBank
        cashCurrency = "USD"
        cashAmount = 100.0
        settleTime = datetime 2018 Aug 14 0 0 0
        dvpId = "abc"


  dvpCid <- bob `submit` exerciseCmd dvpProposalCid Accept

  setDate 2018 Aug 14

  (dvpAllocatedCid, _) <-
    alice `submit` exerciseCmd dvpCid Allocate with cashCid = cashAliceCid

  r <-
    bob `submit` exerciseCmd dvpAllocatedCid Settle with bondCid = bondBobCid

  alice `submit` exerciseCmd r.notificationCid DvpNotification.Accept

  Some bond <- queryContractId alice r.bondCid
  assertMsg "unexpected issuer" $ bond.issuer == acmeBank
  assertMsg "unexpected owner" $ bond.owner == alice
  assertMsg "unexpected isin" $ bond.isin == "1234"
  assertMsg "unexpected amount" $ bond.amount == 100.0

  Some cash <- queryContractId bob r.cashCid
  assertMsg "unexpected issuer" $ cash.issuer == acmeBank
  assertMsg "unexpected owner" $ cash.owner == bob
  assertMsg "unexpected currency" $ cash.currency == "USD"
  assertMsg "unexpected amount" $ cash.amount == 100.0
