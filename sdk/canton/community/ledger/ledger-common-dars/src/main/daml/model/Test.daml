-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- file that contains the declarations used in the sandbox tests

module Test where

import Iou()
import IouTrade()

template Dummy
  with
    operator : Party
  where
    signatory operator

    choice DummyChoice1 : ()
      controller operator
      do return ()

    choice FailingChoice : ()
      controller operator
      do assert False

    nonconsuming choice DummyNonConsuming: ()
      controller operator
      do return ()

    nonconsuming choice Clone: ContractId Dummy
      controller operator
      do create Dummy with operator

    nonconsuming choice FailingClone : ()
      controller operator
      do clone <- exercise self Clone
         exercise self FailingChoice

    choice ConsumeIfTimeIsBetween : ()
      with
        begin : Time
        end : Time
      controller operator
      do currentTime <- getTime
         assert (begin <= currentTime)
         assert (currentTime <= end)

    choice WrapWithAddress : ContractId AddressWrapper
      with address : Address
      controller operator
      do create AddressWrapper with operator; address

    choice PublicChoice: ()
      with
        anyParty: Party
      controller anyParty
      do return ()

data Address = Address
  { street: Text
  , city: Text
  , state: Text
  , zip: Text
  } deriving (Eq, Show)

-- DEL-4615
template AddressWrapper
  with
    operator: Party
    address: Address
  where
    signatory operator

template DummyWithParam
  with
    operator : Party
  where
    signatory operator

    choice DummyChoice2 : ()
      with paramString: Text
      controller operator
      do return ()

template DummyWithAnnotation
  with
    operator : Party
    annotation : Text
  where
    signatory operator

template DummyFactory
  with
    operator: Party
  where
    signatory operator

    choice DummyFactoryCall : ()
      controller operator
      do split <- create Dummy with operator
         rest <- create DummyWithParam with operator
         return ()

    choice DummyFactoryCallWithExercise : ()
      controller operator
      do dummy1 <- create Dummy with operator
         dummy2 <- create Dummy with operator
         dummy3 <- create Dummy with operator
         rest <- create DummyWithParam with operator
         _ <- exercise dummy1 Clone
         _ <- exercise dummy2 DummyChoice1
         _ <- exercise dummy3 DummyNonConsuming
         return ()


data OptionalInteger = SomeInteger Int | NoInteger
  deriving (Eq, Show)

data NestedOptionalInteger = NestedOptionalInteger {value: OptionalInteger}
  deriving (Eq, Show)

template ParameterShowcase
  with
    operator: Party
    integer: Int
    decimal: Decimal
    text: Text
    bool: Bool
    time: Time
    nestedOptionalInteger: NestedOptionalInteger
    integerList: [Int]
    optionalText: Optional Text
  where
    signatory operator

    -- multiple argument choice
    choice Choice1 : ContractId ParameterShowcase
      with
        newInteger: Int
        newDecimal: Decimal
        newText: Text
        newBool: Bool
        newTime: Time
        newNestedOptionalInteger: NestedOptionalInteger
        newIntegerList: [Int]
        newOptionalText: Optional Text
      controller operator
      do let new = this with
               { integer = newInteger
               , decimal = newDecimal
               , text = newText
               , bool = newBool
               , time = newTime
               , nestedOptionalInteger = newNestedOptionalInteger
               , integerList = newIntegerList
               , optionalText = newOptionalText
               }
         create new

    -- single argument choice
    choice Choice2 : ContractId ParameterShowcase
      with newInteger: Int
      controller operator
      do let new = this with integer = newInteger
         create new

template Agreement
  with
    receiver: Party
    giver: Party
  where
    signatory receiver, giver

    choice AcceptTriProposal : ContractId TriAgreement
      with cid : ContractId TriProposal
      controller giver
      do prop <- fetch cid
         assert (prop.receiver == receiver && prop.giver == giver)
         exercise cid TriProposalAccept

    choice UnrestrictedAcceptTriProposal : ContractId TriAgreement
      with cid: ContractId TriProposal
      controller giver
      do exercise cid TriProposalAccept

template DummyContractFactory
 with
    operator: Party
  where
    signatory operator

    choice DummyContractFactoryCall : ContractId Dummy
      controller operator
      do split <- create Dummy with operator
         rest <- create DummyWithParam with operator
         pure split

template AgreementFactory
  with
    receiver: Party
    giver: Party
  where
    signatory giver
    observer receiver

    nonconsuming choice CreateAgreement : ContractId Agreement
      controller receiver
      do create Agreement with receiver, giver

    nonconsuming choice AgreementFactoryAccept : ContractId Agreement
      controller receiver
      do create Agreement with receiver, giver

template TriAgreement
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator, receiver, giver

template TriProposal
  with
    operator: Party
    receiver: Party
    giver: Party
  where
    signatory operator
    observer receiver, giver

    choice TriProposalAccept : ContractId TriAgreement
      controller [receiver, giver]
      do create TriAgreement with operator, receiver, giver

template TextContainer
  with
    operator: Party
    text: Text
  where
    signatory operator

    choice Consume : ()
      controller operator
      do return ()

template NothingArgument
  with
    operator: Party
    arg1: Optional Text
  where
    signatory operator

    choice Choose : ()
      controller operator
      do return ()

template WithObservers
  with
    giver : Party
    observers : [Party]
  where
  signatory giver
  observer observers

  choice Ping : ()
    controller giver
    do return ()

template BranchingSignatories
  with
    whichSign : Bool
    signTrue : Party
    signFalse : Party
  where
  signatory (if whichSign then signTrue else signFalse)

ctrl : BranchingControllers -> Party
ctrl BranchingControllers { whichCtrl, ctrlTrue, ctrlFalse } =
  if whichCtrl then ctrlTrue else ctrlFalse

template BranchingControllers
  with
    giver : Party
    whichCtrl : Bool
    ctrlTrue : Party
    ctrlFalse : Party
  where
  signatory giver
  observer ctrl this

  choice Delete : ()
    controller ctrl this
    do return ()


template PayOut
  with
    receiver: Party
    giver: Party
  where
    signatory receiver
    signatory giver

template CallablePayout
  with
    giver: Party
    receiver: Party
  where
    signatory giver
    observer receiver
    choice Call : ContractId PayOut
      controller receiver
      do create PayOut with receiver, giver
    choice Transfer : ContractId CallablePayout
      with newReceiver: Party
      controller receiver
      do create this with receiver = newReceiver

-- dummy contract to be divulged out-of-band
template Divulgence1
  with
    div1Party: Party
  where
    signatory div1Party

-- contract to be used to divulge out of band. the owner of the
-- `Divulgence1` contract should be the fetcher, and the party
-- to disclose to the signatory.
template Divulgence2
  with
    div2Signatory: Party
    div2Fetcher: Party
  where
    signatory div2Signatory
    observer div2Fetcher

    nonconsuming choice Divulgence2Fetch: ()
      with
        div1ToFetch: ContractId Divulgence1
      controller div2Fetcher
      do _ <- fetch div1ToFetch
         return ()

    nonconsuming choice Divulgence2Archive: ()
      with
        div1ToArchive: ContractId Divulgence1
      controller div2Fetcher
      do archive div1ToArchive

template DecimalRounding
  with
    party: Party
    number: Decimal
  where
    signatory party

template Delegated
  with
    owner : Party
    k : Text
  where
    signatory owner

    choice Recreate: ()
      controller owner
      do create this
         return ()

template Delegation
  with
    owner : Party
    delegate : Party
  where
    signatory owner
    observer delegate

    nonconsuming choice FetchDelegated: Delegated
      with delegated: ContractId Delegated
      controller delegate
      do fetch delegated

template ShowDelegated
  with
    owner: Party
    delegate: Party
  where
    signatory owner
    observer delegate
    choice ShowIt : ()
      with delegatedId: ContractId Delegated
      controller owner
      do fetch delegatedId
         return ()

template Witnesses
  with
    p_signatory: Party
    p_observer: Party
    p_actor: Party
  where
    signatory p_signatory
    observer p_observer

    -- need to use new choice syntax for the controller to not
    -- be an observer
    choice WitnessesChoice: ()
     controller p_actor
     do
      return ()

    -- need to use new choice syntax for the controller to not
    -- be an observer
    nonconsuming choice WitnessesNonConsumingChoice: ()
     controller p_actor
     do
      return ()

    nonconsuming choice WitnessesCreateNewWitnesses: ContractId Witnesses
     controller p_actor
     do
      create this with p_signatory = p_actor

template CreateAndFetch
  with
    p: Party
  where
    signatory p

    choice CreateAndFetch_Run: ()
      controller p
      do cid <- create CreateAndFetch with p
         _ <- fetch cid
         return ()

template MultiPartyContract
  with
    parties: [Party]
    value: Text
  where
    signatory parties

    choice MPAddSignatories : ContractId MultiPartyContract
      with
        newParties: [Party]
      controller parties ++ newParties
      do
        create this with
          parties = parties ++ newParties

    nonconsuming choice MPFetchOther : ()
      with
        cid: ContractId MultiPartyContract
        actors: [Party]
      controller actors
      do
        actualContract <- fetch cid
        return ()

template DiscloseCreate
  with
    owner: Party
  where
    signatory owner

    choice DiscloseCreate_To: ()
      with disclosee: Party
      observer disclosee
      controller owner
      do
        create Dummy with operator = owner
        return ()

template Sync
  with
    from: Party
    to: Party
  where
    signatory from
    observer to
