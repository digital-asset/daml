// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v1;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

// Signed integer types are used, even though they are always non-negative in network-sent data, to match the Java gRPC
//  implementation, which uses signed integers because the JVM doesn't support unsigned integers.

service BftOrderingService {
  rpc Ping(PingRequest) returns (PingResponse);

  // For simplicity and to avoid the usage of mTLS, which is not well supported by all network
  // infrastructure, each BFT ordering node (client endpoint) opens its own P2P connection to every
  // other peer (server endpoint), performs server authentication (currently just receives the
  // sequencer id) and then pushes messages to it.
  //
  // Note that the Java gRPC implementation seems to implement unidirectional streams as
  // bidirectional ones, which seems to require anyway at least one server-sent message before
  // completion (according to https://github.com/grpc/grpc-java/issues/6568).
  // Using a unidirectional stream and sending an empty response from the server results
  // in Netty reference-counted buffer leaks.
  rpc Receive(stream BftOrderingServiceReceiveRequest) returns (stream BftOrderingServiceReceiveResponse);
}

message PingRequest {}

message PingResponse {}

message BftOrderingServiceReceiveRequest {
  string trace_context = 1;
  BftOrderingMessageBody body = 2;
  string sent_by_sequencer_uid = 3;
}

message BftOrderingServiceReceiveResponse {
  string sequencer_uid = 1;
}

message BftOrderingMessageBody {
  oneof message {
    SignedMessage /* AvailabilityMessage */availability_message = 1;
    SignedMessage /* ConsensusMessage */consensus_message = 2;
    SignedMessage /* StateTransferMessage */state_transfer_message = 3;
    SignedMessage /* EpochStatus */retransmission_message = 4;
  }
}

message SignedMessage {
  bytes message = 1;
  string from = 2;
  com.digitalasset.canton.crypto.v30.Signature signature = 3;
}

message AvailabilityMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  oneof message {
    google.protobuf.Empty ping = 1;
    StoreRequest store_request = 2;
    StoreResponse store_response = 3;
    BatchRequest batch_request = 4;
    BatchResponse batch_response = 5;
  }
}

// A `StoreRequest` is requesting another availability node to store
message StoreRequest {
  bytes batch_id = 1;
  Batch batch = 2;
}

message Batch {
  repeated OrderingRequest ordering_requests = 1;
}

message OrderingRequest {
  string trace_context = 1;
  string tag = 2;
  bytes payload = 3;

  // The following field is only used for metrics.
  google.protobuf.Timestamp ordering_start_instant = 4;
}

message StoreResponse {
  bytes batch_id = 1;
  com.digitalasset.canton.crypto.v30.Signature signature = 2;
}

message BatchRequest {
  bytes batch_id = 1;
}

message BatchResponse {
  bytes batch_id = 1;
  Batch batch = 2;
}

message ConsensusMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  BlockMetadata block_metadata = 1;
  int64 view_number = 2;
  string from_sequencer_uid = 3;
  int64 local_timestamp = 4; // in microseconds of UTC time since Unix epoch, updated for each newly created message
  // Might want to include segment

  oneof message {
    PrePrepare pre_prepare = 5;
    Prepare prepare = 6;
    Commit commit = 7;
    ViewChange view_change = 8;
    NewView new_view = 9;
  }
}

message BlockMetadata {
  int64 epoch_number = 1;
  int64 block_number = 2;
}

// A `PrePrepare` message is the proposal sent by the leader in a round
message PrePrepare {
  OrderingBlock block = 1;
  CanonicalCommitSet bft_time_canonical_commit_set = 2;
}

// A `Prepare` is an acknowledgement that a node received the `PrePrepare`
message Prepare {
  bytes block_hash = 1;
}

// A `Commit` means that a node have received a quorum of `Prepare`
// Upon receiving a quorum of `Commit`, a node considers the round complete
message Commit {
  bytes block_hash = 1;
}

// A `ViewChange` message is sent when an instance of PBFT fails to make progress
// before a timeout triggers.
message ViewChange {
  int32 segment_index = 1;
  repeated ConsensusCertificate consensus_certs = 2;
}

// A `NewView` message is sent by the next node taking over leader responsibilities
// of a PBFT instance at the end of a view change
message NewView {
  int32 segment_index = 1;
  repeated SignedMessage /*ConsensusMessage*/view_changes = 2;
  repeated SignedMessage /*ConsensusMessage*/pre_prepares = 3;
}

// A canonical (fixed) set of (usually 2f+1) Commit messages that completed the recent stable block.
// Check the BFT time design for more details.
message CanonicalCommitSet {
  repeated SignedMessage /*ConsensusMessage*/canonical_commits = 1;
}

message ConsensusCertificate {
  oneof certificate {
    PrepareCertificate prepare_certificate = 1;
    CommitCertificate commit_certificate = 2;
  }
}

// A self-contained, cryptographically-verifiable set of one PrePrepare and quorum-1 Prepares that
// prove a particular value (payload) was prepared for a particular (epoch, block, view)-tuple
message PrepareCertificate {
  SignedMessage /*ConsensusMessage*/pre_prepare = 1;
  repeated SignedMessage /*ConsensusMessage*/prepares = 2;
}

// A self-contained, cryptographically-verifiable set of one PrePrepare and quorum-1 Commits that
// prove a particular value (payload) was committed for a particular (epoch, block, view)-tuple
message CommitCertificate {
  SignedMessage /*ConsensusMessage*/pre_prepare = 1;
  repeated SignedMessage /*ConsensusMessage*/commits = 2;
}

// Retransmissions
message RetransmissionMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  oneof message {
    EpochStatus retransmission_request = 1;
    RetransmissionResponse retransmission_response = 2;
  }
}

message RetransmissionResponse {
  repeated CommitCertificate commit_certificates = 1;
}

// Node's status of consensus for the whole epoch. Acts as a retransmission request
// where receiving node will compute what they can retransmit based on what the requesting
// node is lacking from looking at this status message.
message EpochStatus {
  int64 epoch_number = 1;
  repeated SegmentStatus segments = 2;
}

// Node's status of consensus for a specific segment, which is identified by its order inside of the EpochStatus
message SegmentStatus {
  oneof status {
    google.protobuf.Empty complete = 1;
    SegmentInViewChange in_view_change = 2;
    SegmentInProgress in_progress = 3;
  }
}
message SegmentInViewChange {
  int64 view_number = 1;
  repeated bool view_change_messages_present = 2;
  repeated bool are_blocks_complete = 3;
}
message SegmentInProgress {
  int64 view_number = 1;
  repeated BlockStatus block_statuses = 2;
}

// Node's status of consensus of a specific block in a segment, which is identified by its order inside of the SegmentInProgress
message BlockStatus {
  oneof status {
    google.protobuf.Empty complete = 1;
    BlockInProgress in_progress = 2;
  }
}
message BlockInProgress {
  bool pre_prepared = 1;
  repeated bool prepares_present = 2;
  repeated bool commits_present = 3;
}

message OrderingBlock {
  repeated ProofOfAvailability proofs = 1;
}

message ProofOfAvailability {
  bytes batch_id = 1;
  repeated AvailabilityAck acks = 2;
}

message AvailabilityAck {
  string from_sequencer_uid = 1;
  com.digitalasset.canton.crypto.v30.Signature signature = 2;
}

// State transfer
message StateTransferMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  oneof message {
    BlockTransferRequest block_request = 1;
    BlockTransferResponse block_response = 2;
  }
}

message BlockTransferRequest {
  int64 start_epoch = 1;
  int64 latest_completed_epoch = 2;
}

message BlockTransferResponse {
  // Latest completed epoch of the serving node.
  int64 latest_completed_epoch = 1;
  repeated SignedMessage /*ConsensusMessage*/block_pre_prepares = 2;
}
