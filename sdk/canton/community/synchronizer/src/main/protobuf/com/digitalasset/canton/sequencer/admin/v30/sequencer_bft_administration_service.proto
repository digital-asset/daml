// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.sequencer.admin.v30;

service SequencerBftAdministrationService {
  rpc AddPeerEndpoint(AddPeerEndpointRequest) returns (AddPeerEndpointResponse);
  rpc RemovePeerEndpoint(RemovePeerEndpointRequest) returns (RemovePeerEndpointResponse);
  rpc GetPeerNetworkStatus(GetPeerNetworkStatusRequest) returns (GetPeerNetworkStatusResponse);
  rpc GetOrderingTopology(GetOrderingTopologyRequest) returns (GetOrderingTopologyResponse);
  rpc SetPerformanceMetricsEnabled(SetPerformanceMetricsEnabledRequest) returns (SetPerformanceMetricsEnabledResponse);
}

message AddPeerEndpointRequest {
  PeerEndpoint endpoint = 1;
}

message RemovePeerEndpointRequest {
  PeerEndpointId endpoint_id = 1;
}

message PeerEndpoint {
  string address = 1;
  uint32 port = 2;
  oneof security {
    PlainTextPeerEndpoint plain_text = 3;
    TlsPeerEndpoint tls = 4;
  }
}

message PeerEndpointId {
  string address = 1;
  uint32 port = 2;
  bool tls = 3;
}

message PlainTextPeerEndpoint {}

message TlsPeerEndpoint {
  optional bytes custom_server_trust_certificate = 1;
  TlsClientCertificate client_certificate = 2;
}

message TlsClientCertificate {
  bytes certificate_chain = 1;
  string private_key_file = 2;
}

message AddPeerEndpointResponse {
  // False if already present
  bool added = 1;
}
message RemovePeerEndpointResponse {
  // False if not found
  bool removed = 1;
}

message Authenticated {
  string sequencer_id = 1;
}

message PeerEndpointHealthStatus {
  oneof status {
    UnknownEndpoint unknown_endpoint = 1;
    Disconnected disconnected = 2;
    Unauthenticated unauthenticated = 3;
    Authenticated authenticated = 4;
  }

  message UnknownEndpoint {}
  message Disconnected {}
  message Unauthenticated {}
}

message PeerEndpointHealth {
  PeerEndpointHealthStatus status = 1;
  optional string description = 2;
}

message PeerEndpointStatus {
  PeerEndpointId endpoint_id = 1;
  bool is_outgoing_connection = 2;
  PeerEndpointHealth health = 3;
}

message PeerConnectionStatus {
  oneof status {
    PeerEndpointStatus peer_endpoint_status = 1;
    Authenticated peer_incoming_connection = 2;
  }
}

message GetPeerNetworkStatusRequest {
  // If empty, the status of all known endpoints will be returned
  repeated PeerEndpointId endpoint_ids = 1;
}

message GetPeerNetworkStatusResponse {
  repeated PeerConnectionStatus statuses = 1;
}

message GetOrderingTopologyRequest {}

message GetOrderingTopologyResponse {
  // The current epoch, through which the topology is valid.
  int64 current_epoch = 1;
  // The sequencer IDs of the active BFT ordering nodes in the network.
  repeated string sequencer_ids = 2;
}

message SetPerformanceMetricsEnabledRequest {
  bool enabled = 1;
}

message SetPerformanceMetricsEnabledResponse {}
