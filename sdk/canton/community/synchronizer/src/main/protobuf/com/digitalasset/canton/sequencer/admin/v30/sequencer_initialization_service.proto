// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.sequencer.admin.v30;

import "com/digitalasset/canton/protocol/v30/sequencing.proto";

// Service allowing a sequencer node to initialize the sequencer instance.
// Should typically only be exposed to the sequencer node and not all clients
service SequencerInitializationService {
  // Initialize the Sequencer
  // If the sequencer has not been previously initialized the request must either fail or start the sequencer and return successfully.
  // The synchronizer will expect the SequencerService to be fully available when it receives a successful response
  // and will immediately attempt to use it.
  // If the request is received after the sequencer has been successfully initialized it should return successfully
  // if the synchronizer_id matches the synchronizer that the sequencer has been initialized for, otherwise it should fail.
  rpc InitializeSequencerFromGenesisState(stream InitializeSequencerFromGenesisStateRequest) returns (InitializeSequencerFromGenesisStateResponse);
  rpc InitializeSequencerFromOnboardingState(stream InitializeSequencerFromOnboardingStateRequest) returns (InitializeSequencerFromOnboardingStateResponse);
}

// Includes sufficient detail for:
//  - topology and additional bootstrap information
message InitializeSequencerFromGenesisStateRequest {
  // a topology snapshot up until (including) the point where this sequencer is becoming active on the synchronizer
  // the topology snapshot will be persisted in the synchronizer store of the sequencer
  bytes topology_snapshot = 1;

  com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters synchronizer_parameters = 2;
}

message InitializeSequencerFromGenesisStateResponse {
  // Indicate if the initialized sequencer is replicated
  bool replicated = 1;
}

message InitializeSequencerFromOnboardingStateRequest {
  bytes onboarding_state = 1;
}

message InitializeSequencerFromOnboardingStateResponse {
  // Indicate if the initialized sequencer is replicated
  bool replicated = 1;
}
