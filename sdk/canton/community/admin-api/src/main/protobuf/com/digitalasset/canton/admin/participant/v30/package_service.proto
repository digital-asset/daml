// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.admin.participant.v30;

import "google/protobuf/empty.proto";

service PackageService {
  // List all Daml-LF archives on the participant node - return their hashes
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse);

  // Lists all the modules in package on the participant node
  rpc ListPackageContents(ListPackageContentsRequest) returns (ListPackageContentsResponse);

  // List all DARs on the participant node - return their hashes and filenames
  rpc ListDars(ListDarsRequest) returns (ListDarsResponse);

  // List content of a Dar
  rpc ListDarContents(ListDarContentsRequest) returns (ListDarContentsResponse);

  // Upload a DAR file and all packages inside to the participant node
  rpc UploadDar(UploadDarRequest) returns (UploadDarResponse);

  // Validate a DAR file and all packages inside to the participant node
  rpc ValidateDar(ValidateDarRequest) returns (ValidateDarResponse);

  // Remove a package that is not vetted
  // TODO(#17635): This operation is not safe as it can remove packages still in use by the Ledger API
  rpc RemovePackage(RemovePackageRequest) returns (RemovePackageResponse);

  // Enable vetting for all packages pertaining to a specific DAR
  rpc VetDar(VetDarRequest) returns (VetDarResponse);

  // Revoke vetting for all packages pertaining to a specific DAR.
  // NOTE:  Experimental operation for which expert-level knowledge is required.
  //        Erroneous usage might result in the participant failing to process transactions.
  rpc UnvetDar(UnvetDarRequest) returns (UnvetDarResponse);

  // Remove a DAR that is not needed
  // TODO(#17635): This operation is not safe as it can remove packages still in use by the Ledger API
  rpc RemoveDar(RemoveDarRequest) returns (RemoveDarResponse);

  // Obtain a DAR file by hash -- for inspection & download
  rpc GetDar(GetDarRequest) returns (GetDarResponse);
}

message ListPackageContentsRequest {
  string package_id = 1;
}

message ListPackageContentsResponse {
  repeated ModuleDescription modules = 1;
}

message ListDarContentsRequest {
  string dar_id = 1;
}

message ListDarContentsResponse {
  string description = 1;
  string main = 2;
  repeated string packages = 3;
  repeated string dependencies = 4;
}

message RemovePackageRequest {
  string package_id = 1;
  bool force = 2;
}

message RemovePackageResponse {
  google.protobuf.Empty success = 1;
}

message VetDarRequest {
  string dar_hash = 1;
  // if set to true, the API call waits until the vetting transaction has been
  // observed by this participant on all connected domains.
  bool synchronize = 2;
}

message VetDarResponse {}

message UnvetDarRequest {
  string dar_hash = 1;
}

message UnvetDarResponse {}

message RemoveDarRequest {
  string dar_hash = 1;
}

message RemoveDarResponse {
  google.protobuf.Empty success = 1;
}

message ModuleDescription {
  string name = 1;
}

message ListPackagesRequest {
  int32 limit = 1;
}

message ListPackagesResponse {
  repeated PackageDescription package_descriptions = 1;
}

message ListDarsRequest {
  int32 limit = 1;
}

message ListDarsResponse {
  repeated DarDescription dars = 1;
}

message DarDescription {
  string hash = 1;
  string name = 2;
}

message UploadDarRequest {
  bytes data = 1;
  string filename = 2;
  // if set to true, we'll register the vetting topology transactions with the idm
  bool vet_all_packages = 3;
  // if set to true, we'll wait until the vetting transaction has been observed by this participant on all connected domains
  bool synchronize_vetting = 4;
}

message UploadDarResponse {
  oneof value {
    Success success = 1;
    Failure failure = 2;
  }
  message Success {
    string hash = 1;
  }
  message Failure {
    string reason = 1;
  }
}

// Performs the same checks that UploadDarRequest would perform, but doesn't
// upload the DAR.
message ValidateDarRequest {
  bytes data = 1;
  string filename = 2;
}

message ValidateDarResponse {
  string hash = 1;
}

message GetDarRequest {
  string hash = 1;
}

message GetDarResponse {
  bytes data = 1;
  string name = 2;
}

message PackageDescription {
  string package_id = 1;
  string source_description = 3;
}
