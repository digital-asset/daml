// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.admin.health.v30;

import "google/protobuf/duration.proto";

service StatusService {
  // Streams back a zip file as byte chunks, containing a health dump of the full canton process (including other nodes)
  rpc HealthDump(HealthDumpRequest) returns (stream HealthDumpResponse);
  // Toggle log levels
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse);
  // Get the last errors observed on this node
  // This is a built in functionality where we keep track of the last errors and all messages that were logged with the same trace id within a certain time frame
  rpc GetLastErrors(GetLastErrorsRequest) returns (GetLastErrorsResponse);
  // Get the trace of the last errors observed
  rpc GetLastErrorTrace(GetLastErrorTraceRequest) returns (GetLastErrorTraceResponse);
}

message TopologyQueueStatus {
  // how many topology changes are currently queued at the manager
  uint32 manager = 1;
  // how many topology changes are currently queued at the dispatcher
  uint32 dispatcher = 2;
  // how many topology changes are currently waiting to become effective (across all connected domains in the case of participants)
  uint32 clients = 3;
}

message ComponentStatus {
  string name = 1;
  oneof status {
    StatusData ok = 2;
    StatusData degraded = 3;
    StatusData failed = 4;
    StatusData fatal = 5;
  }
  message StatusData {
    optional string description = 1;
  }
}

message NotInitialized {
  enum WaitingForExternalInput {
    WAITING_FOR_EXTERNAL_INPUT_UNSPECIFIED = 0;
    WAITING_FOR_EXTERNAL_INPUT_ID = 1;
    WAITING_FOR_EXTERNAL_INPUT_NODE_TOPOLOGY = 2;
    WAITING_FOR_EXTERNAL_INPUT_INITIALIZATION = 3;
  }

  bool active = 1; // Indicate if the node is active, usually true unless it's a replicated node that is passive
  WaitingForExternalInput waiting_for_external_input = 2; // Indicates whether the node is waiting for external input
}

message Status {
  string uid = 1;
  google.protobuf.Duration uptime = 2;
  map<string, int32> ports = 3;
  bool active = 4; // Indicate if the node is active, usually true unless it's a replicated node that is passive
  TopologyQueueStatus topology_queues = 5; // indicates the state of the topology queues (manager / dispatcher only where they exist)
  repeated ComponentStatus components = 6; // Health state of component dependencies of the node
  string version = 7; // Version of the binary
}

message HealthDumpRequest {
  // Size of the byte chunks to stream back.
  // Defaults to 2MB (half of the default gRPC max message size)
  optional uint32 chunk_size = 1;
}

message HealthDumpResponse {
  bytes chunk = 1; // A chunk of of the health dump file
}

message SetLogLevelRequest {
  // TODO(#18445) use an enum for the log level as right now, it also accepts OFF and null
  // The log level to set (DEBUG, INFO, WARN, ERROR, OFF)
  string level = 1;
  // TODO(#18445) provide the ability to set it per logger
}

message SetLogLevelResponse {}

message GetLastErrorsRequest {}
message GetLastErrorsResponse {
  message Error {
    string trace_id = 1;
    string message = 2;
  }
  repeated Error errors = 1;
}

message GetLastErrorTraceRequest {
  // The trace id of the error
  string trace_id = 1;
}
message GetLastErrorTraceResponse {
  repeated string messages = 1;
}
