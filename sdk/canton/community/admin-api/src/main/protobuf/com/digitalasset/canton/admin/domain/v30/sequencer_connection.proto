// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.admin.domain.v30;

import "google/protobuf/duration.proto";
import "scalapb/scalapb.proto";

message SequencerConnection {
  oneof type {
    Grpc grpc = 2;
  }

  string alias = 3;

  message Grpc {
    // connection information to sequencer (http[s]://<host>:<port>")
    repeated string connections = 1;
    // Should the connection use TLS?
    bool transportSecurity = 2;
    optional bytes customTrustCertificates = 3;
  }
}

enum SequencerConnectionValidation {
  UNKNOWN = 0;
  // Do not validate the sequencer connection
  DISABLED = 1;
  // Validate only the ones we could reach
  ACTIVE = 2;
  // Validate all the connections
  ALL = 3;

}

message SequencerConnections {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StorageProtoVersion";

  repeated SequencerConnection sequencer_connections = 1;

  // This field determines the minimum level of agreement, or consensus, required among the sequencers before a message
  // is considered reliable and accepted by the system.
  // This value must be positive.
  uint32 sequencerTrustThreshold = 2;

  SubmissionRequestAmplification submission_request_amplification = 3;
}

message SubmissionRequestAmplification {
  // Determines to how often the client should try to send a submission request that is eligible for deduplication.
  // A higher value increases the chance of a submission request being accepted by the system, but also increases the load on the sequencers
  // and thus the costs incurred by the client.
  // This value must be positive.
  uint32 factor = 1;

  // Determines how long the sequencer client waits for observing the sequencing before it sends the submission request again.
  // This value must be non-negative.
  google.protobuf.Duration patience = 2;
}
