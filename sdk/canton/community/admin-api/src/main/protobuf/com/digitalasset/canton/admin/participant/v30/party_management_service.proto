// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.admin.participant.v30;

import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

/**
 * The PartyManagementService allows modifying party hosting on participants.
 */
service PartyManagementService {
  // Initiate adding a party already hosted on one or more non-local participants to the
  // local participant in the specified synchronizer.
  // Performs some checks synchronously and then starts the replication asynchronously.
  rpc AddPartyAsync(AddPartyAsyncRequest) returns (AddPartyAsyncResponse);

  // Status endpoint that given an add_party_request_id returns status information about progress,
  // completion, or errors of a previous call to AddPartyAsync on the source or target
  // participant.
  //
  // Note that the status reflects the state as perceived by the local participant and does not
  // imply the state of remote participants. The status on the target participant is more
  // authoritative as the target participant drives the process of adding the party. For example
  // when the target participant status indicates "completed", the party has been added
  // successfully.
  rpc GetAddPartyStatus(GetAddPartyStatusRequest) returns (GetAddPartyStatusResponse);

  // Export the ACS for the given parties from the participant
  rpc ExportAcs(ExportAcsRequest) returns (stream ExportAcsResponse);
}

message AddPartyAsyncRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The party to replicate
  // Required
  string party_id = 1;
  // The synchronizer in which to replicate the party
  // Required
  string synchronizer_id = 2;
  // Optionally, the source participant already hosting the party
  // Required if the party is already hosted on multiple participants.
  string source_participant_uid = 3;
  // Optionally, the topology serial number of this request (auto-determined if omitted)
  // NOTE: omitting the serial MAY end up overwriting previous mappings processed concurrently.
  // To avoid such cases, first read the PartyToParticipant state using the TopologyManagerReadService
  // and update the mappings accordingly, incrementing the serial by one and setting it explicitly.
  uint32 serial = 4;
}

message AddPartyAsyncResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The identifier used to uniquely track the add party request.
  string add_party_request_id = 1;
}

message GetAddPartyStatusRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The add party request ID returned by AddPartyAsync
  // Required
  string add_party_request_id = 1;
}

message GetAddPartyStatusResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  string party_id = 1;
  string synchronizer_id = 2;
  string source_participant_uid = 3;
  string target_participant_uid = 4;

  message Status {
    // The add-party request has been submitted by the target participant, or accepted by the
    // source participant.
    message ProposalProcessed {
      optional uint32 topology_serial = 1;
    }
    // The add-party request has been observed as agreed to by all participants.
    message AgreementAccepted {
      string sequencer_uid = 1;
      optional uint32 topology_serial = 2;
    }
    // The PartyToParticipant topology transaction has been authorized by all party and
    // participant signers.
    message TopologyAuthorized {
      string sequencer_uid = 1;
      uint32 topology_serial = 2;
      // The timestamp at which the ACS snapshot for replication is taken.
      google.protobuf.Timestamp timestamp = 3;
    }
    // The local participant has connected to the sequencer channel for ACS replication.
    message ConnectionEstablished {
      string sequencer_uid = 1;
      uint32 topology_serial = 2;
      google.protobuf.Timestamp timestamp = 3;
    }
    // The local participant is ready for ACS replication or has started replicating the ACS.
    message ReplicatingAcs {
      string sequencer_uid = 1;
      uint32 topology_serial = 2;
      google.protobuf.Timestamp timestamp = 3;
      uint32 contracts_replicated = 4;
    }
    // The local participant has completed its part of the ACS replication.
    message Completed {
      string sequencer_uid = 1;
      uint32 topology_serial = 2;
      google.protobuf.Timestamp timestamp = 3;
      uint32 contracts_replicated = 4;
    }
    // The add-party request has failed after the specified last successful status.
    message Error {
      string error_message = 1;
      Status status_prior_to_error = 2;
    }

    oneof status {
      // Party Replication Daml admin workflow proposal and agreement handling
      ProposalProcessed proposal_processed = 1;
      AgreementAccepted agreement_accepted = 2;

      // Topology management
      TopologyAuthorized topology_authorized = 3;

      // Party Replication ACS replication
      ConnectionEstablished connection_established = 4;
      ReplicatingAcs replicating_acs = 5;
      Completed completed = 6;

      // Error indicating that party replication has failed.
      Error error = 7;
    }
  }

  Status status = 5;
}

message ExportAcsTargetSynchronizer {
  // The ID of the synchronizer where the contract is supposed to be assigned when the export is being imported
  string target_synchronizer_id = 1;
}

message ExportAcsRequest {
  // The parties for which the ACS should be exported
  // Required
  repeated string party_ids = 1;

  // The IDs of the synchronizers to filter the contracts by
  // Optional, if set the contracts will be filtered by the exact match of the ID of the synchronizer
  // to which it's assigned
  string filter_synchronizer_id = 2; // optional; exact match if set

  // The ledger offset at which the ACS snapshot should be taken.
  // Required
  int64 ledger_offset = 3;

  // Mapping from one synchronizer ID and protocol version. If provided, the assignation of the contracts
  // will be changed according to map values. However, these mappings are not proper reassignments.
  // Optional, if not provided the contracts will be exported with the same synchronizer ID as they are
  // currently assigned.
  // Default: empty
  map<string, ExportAcsTargetSynchronizer> contract_synchronizer_renames = 4;
}

message ExportAcsResponse {
  // The raw binary of the ACS snapshot to be imported
  // This is meant to be streamed and every message should be a chunk of the snapshot
  // Required
  bytes chunk = 1;
}
