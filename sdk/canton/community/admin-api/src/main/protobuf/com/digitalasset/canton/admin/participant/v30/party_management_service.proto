// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.admin.participant.v30;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

/**
 * The PartyManagementService allows modifying party hosting on participants.
 *
 * Note that ACS refers to Active Contract Set.
 */
service PartyManagementService {
  // Initiate adding a party already hosted on one or more source participants to this
  // target participant in the specified synchronizer.
  // Performs some checks synchronously and then starts the party addition asynchronously.
  //
  // Depends on the party authorizing the PartyToParticipant topology proposal at the
  // specified topology_serial prior or concurrently to this endpoint. On the other hand,
  // this target participant authorizes the topology proposal as part of this endpoint in
  // a specific, intermediate step, and therefore the target participant signature must not
  // already be in place prior to the call.
  rpc AddPartyAsync(AddPartyAsyncRequest) returns (AddPartyAsyncResponse);

  // Status endpoint that given an add_party_request_id returns status information about progress,
  // completion, or errors of a previous call to AddPartyAsync on the source or target
  // participant.
  //
  // Note that the status reflects the state as perceived by this participant and does not
  // imply the state of other participants. The status on the target participant is more
  // authoritative as the target participant drives the process of adding the party. For example
  // when the target participant status indicates "completed", the party has been added
  // successfully.
  rpc GetAddPartyStatus(GetAddPartyStatusRequest) returns (GetAddPartyStatusResponse);

  // Party replication focused ACS export.
  //
  // Exports the ACS of a single party from a source participant, so that the party can be
  // replicated onto a target participant.
  //
  // This endpoint works in conjunction with the ImportPartyAcs endpoint.
  rpc ExportPartyAcs(ExportPartyAcsRequest) returns (stream ExportPartyAcsResponse);

  // Party replication focused ACS import.
  //
  // Imports the party's ACS into the target participant.
  //
  // This endpoint works in conjunction with ExportPartyAcs endpoint.
  rpc ImportPartyAcs(stream ImportPartyAcsRequest) returns (ImportPartyAcsResponse);

  // For a given timestamp, find the highest ledger offset among all events that have record time <= timestamp.
  //
  // Returns a ledger offset, or an error otherwise. Depending on the error cause, a retry may make sense.
  // Retryable errors are defined as: OUT_OF_RANGE/INVALID_TIMESTAMP_PARTY_MANAGEMENT_ERROR.
  // Further, a returned offset is guaranteed to be "clean", meaning all events have been processed fully and
  // published to the Ledger API DB until the requested timestamp.
  rpc GetHighestOffsetByTimestamp(GetHighestOffsetByTimestampRequest) returns (GetHighestOffsetByTimestampResponse);
}

message AddPartyAsyncRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The party to replicate
  // Required
  string party_id = 1;
  // The synchronizer in which to replicate the party
  // Required
  string synchronizer_id = 2;
  // A source participant already hosting the party
  // Required
  string source_participant_uid = 3;
  // The topology serial number of the PartyToParticipant topology transaction used to
  // add the party to this target participant.
  // Required
  uint32 topology_serial = 4;
  // The permission level of the party on the target participant.
  // Required
  ParticipantPermission participant_permission = 5;
}

message AddPartyAsyncResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The identifier used to uniquely track the add party request.
  string add_party_request_id = 1;
}

message GetAddPartyStatusRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // The add party request ID returned by AddPartyAsync
  // Required
  string add_party_request_id = 1;
}

message GetAddPartyStatusResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  string party_id = 1;
  string synchronizer_id = 2;
  string source_participant_uid = 3;
  string target_participant_uid = 4;
  uint32 topology_serial = 5;
  ParticipantPermission participant_permission = 6;

  message Status {
    // The add-party request has been submitted by the target participant, or accepted by the
    // source participant.
    message ProposalProcessed {}
    // The add-party request has been observed as agreed to by all participants.
    message AgreementAccepted {
      string sequencer_uid = 1;
    }
    // The PartyToParticipant topology transaction has been authorized by all party and
    // participant signers.
    message TopologyAuthorized {
      string sequencer_uid = 1;
      // The timestamp at which the ACS snapshot for replication is taken.
      google.protobuf.Timestamp timestamp = 2;
    }
    // This participant has connected to the sequencer channel for ACS replication.
    message ConnectionEstablished {
      string sequencer_uid = 1;
      google.protobuf.Timestamp timestamp = 2;
    }
    // This participant is ready for ACS replication or has started replicating the ACS.
    message ReplicatingAcs {
      string sequencer_uid = 1;
      google.protobuf.Timestamp timestamp = 2;
      uint32 contracts_replicated = 3;
    }
    // This participant has completed its part of the ACS replication: In case of the source participant
    // all contracts have been sent, and for the target participant all contracts have been received.
    message FullyReplicatedAcs {
      string sequencer_uid = 1;
      google.protobuf.Timestamp timestamp = 2;
      uint32 contracts_replicated = 3;
    }
    // The party has been added to the target participant.
    message Completed {
      string sequencer_uid = 1;
      google.protobuf.Timestamp timestamp = 2;
      uint32 contracts_replicated = 3;
    }
    // The add-party request has failed after the specified last successful status.
    message Error {
      string error_message = 1;
      Status status_prior_to_error = 2;
    }
    // The participant has disconnected from the sequencer channel used for ACS replication.
    message Disconnected {
      string disconnect_message = 1;
      // Prior status is one of ConnectionEstablished or ReplicatingAcs.
      Status status_prior_to_disconnect = 2;
    }

    oneof status {
      // Party Replication Daml admin workflow proposal and agreement handling
      ProposalProcessed proposal_processed = 1;
      AgreementAccepted agreement_accepted = 2;

      // Topology management
      TopologyAuthorized topology_authorized = 3;

      // Party Replication ACS replication
      ConnectionEstablished connection_established = 4;
      ReplicatingAcs replicating_acs = 5;
      FullyReplicatedAcs fully_replicated_acs = 6;

      // Completed indicating that party successfully has been added to target participant.
      Completed completed = 7;

      // Error indicating that party replication has failed.
      Error error = 8;

      // Conditions that party replication is attempting to recover from.
      Disconnected disconnected = 9;
    }
  }

  Status status = 7;
}

// Enum indicating the permission level of the party on the target participant.
// Refer to topology.proto:`ParticipantPermission` for definitions.
enum ParticipantPermission {
  PARTICIPANT_PERMISSION_UNSPECIFIED = 0;

  PARTICIPANT_PERMISSION_SUBMISSION = 1;

  PARTICIPANT_PERMISSION_CONFIRMATION = 2;

  PARTICIPANT_PERMISSION_OBSERVATION = 3;
}

// Exports the ACS for a given party to facilitate its replication from a source to a target participant.
//
// This request uses the party's most recent activation on the target participant to determine the precise
// historical state of the ACS to export from the source participant.
//
// "Activation" on the target participant means the new hosting arrangement has been authorized by both
// the party itself and the target participant via party-to-participant topology transactions.
//
// This request will fail if the party has not yet been activated on the target participant.
message ExportPartyAcsRequest {
  // The identifier of the party being replicated. This party must already be active on the target participant
  // for the ACS export to succeed.
  // Required
  string party_id = 1;

  // The identifier of the synchronizer managing the contract to be exported. This scopes the ACS export to only
  // contracts assigned to this synchronizer.
  // Required
  string synchronizer_id = 2;

  // The unique identifier of the target participant where the party will be replicated.
  // Required
  string target_participant_uid = 3;

  // The exclusive ledger offset used as starting point to find the party's most recent activation on the target
  // participant.
  // Required
  int64 begin_offset_exclusive = 4;

  // The maximum duration the service will wait to find the topology transaction that activates the party on
  // the target participant.
  // If not set, the service use will use a default timeout.
  // Optional
  google.protobuf.Duration wait_for_activation_timeout = 5;
}

message ExportPartyAcsResponse {
  // A chunk of the ACS snapshot. This response is streamed, with each message containing a portion of the
  // complete ACS data. The raw binary data within each chunk consists of Ledger API active contract messages,
  // specifically wrapped in `v30.active_contract.ActiveContract` messages. However, a single chunk does not
  // necessarily contain exactly one complete message.
  // This field will be populated in each streamed response.
  // Required
  bytes chunk = 1;
}

message ImportPartyAcsRequest {
  // The raw binary of the ACS snapshot to be imported
  // The binary content does not align on individual active contracts! It may contain bytes that are part of
  // an active contract, or include several active contracts - depending on how much data fits into the
  // configured gRPC message size.
  // Required
  bytes acs_snapshot = 1;
}

message ImportPartyAcsResponse {}

// Requests the highest ledger offset among all events belonging to the synchronizer (`synchronizer_id`)
// that have a record time before or at the given `timestamp`.
//
// This endpoint features a `force` message field. This is intended for disaster recovery scenarios only.
message GetHighestOffsetByTimestampRequest {
  // The identifier of the synchronizer.
  // Required
  string synchronizer_id = 1;

  // The requested timestamp for which a ledger offset should be found.
  // Required
  google.protobuf.Timestamp timestamp = 2;

  // If true, return the highest known ledger offset with a record time before or at the specified `timestamp`
  // even if higher offsets with a record time before or at `timestamp` can be created in the future.
  // Required, defaults to false.
  bool force = 3;
}

message GetHighestOffsetByTimestampResponse {
  // The highest ledger offset among events that have their record time before or at the requested timestamp.
  // An error when no such offset (yet) exists.
  // Required
  int64 ledger_offset = 1;
}
