// Composability tutorial part 2

// architecture-handbook-entry-begin: topology
val iouAlias = "iou"
val paintAlias = "paint"

// create the synchronizers
val iouSynchronizerOwner = iou_sequencer
val iouId = bootstrap.synchronizer(
  iouAlias,
  sequencers = Seq(iou_sequencer),
  mediators = Seq(iou_mediator),
  synchronizerOwners = Seq(iouSynchronizerOwner),
  synchronizerThreshold = PositiveInt.one,
  staticSynchronizerParameters = StaticSynchronizerParameters.defaultsWithoutKMS(ProtocolVersion.latest),
)

val paintSynchronizerOwner = paint_sequencer
val paintId = bootstrap.synchronizer(
  paintAlias,
  sequencers = Seq(paint_sequencer),
  mediators = Seq(paint_mediator),
  synchronizerOwners = Seq(paintSynchronizerOwner),
  synchronizerThreshold = PositiveInt.one,
  staticSynchronizerParameters = StaticSynchronizerParameters.defaultsWithoutKMS(ProtocolVersion.latest),
)

// update parameters
// disable automatic assignments
iouSynchronizerOwner.topology.synchronizer_parameters
  .propose_update(iouId, _.update(assignmentExclusivityTimeout = 0 seconds))
paintSynchronizerOwner.topology.synchronizer_parameters
  .propose_update(paintId, _.update(assignmentExclusivityTimeout = 2 seconds))


// connect participants to the synchronizers
participant1.synchronizers.connect_local(iou_sequencer, alias = iouAlias)
participant2.synchronizers.connect_local(iou_sequencer, alias = iouAlias)
participant3.synchronizers.connect_local(iou_sequencer, alias = iouAlias)
participant2.synchronizers.connect_local(paint_sequencer, alias = paintAlias)
participant3.synchronizers.connect_local(paint_sequencer, alias = paintAlias)
participant4.synchronizers.connect_local(iou_sequencer, alias = iouAlias)
participant5.synchronizers.connect_local(iou_sequencer, alias = iouAlias)

// create the parties
val Bank = participant1.parties.enable("Bank")
val HouseOwner = participant2.parties.enable("House Owner")
val Painter = participant3.parties.enable("Painter", waitForSynchronizer = SynchronizerChoice.All)

// Wait until the party enabling has taken effect and has been observed at the participants
val initialPartyAssignment = Set(Bank -> participant1, HouseOwner -> participant2, Painter -> participant3)
participant1.parties.await_topology_observed(initialPartyAssignment)
participant2.parties.await_topology_observed(initialPartyAssignment)
participant3.parties.await_topology_observed(initialPartyAssignment)

// Enable the house owner on participant 5 and the painter on participant 4
// This works here because the parties are fresh, i.e., they do not have any contracts yet.
import com.digitalasset.canton.console.ParticipantReference
def addPartyToParticipant(partyId: PartyId, synchronizerId: SynchronizerId, createdAt: ParticipantReference, to: ParticipantReference): Unit = {
  Seq(createdAt, to).foreach(participant =>
    participant.topology.party_to_participant_mappings.propose_delta(
      partyId,
      adds = List((to.id, ParticipantPermission.Submission)),
      store = synchronizerId.filterString,
    )
  )
}
addPartyToParticipant(HouseOwner, iouId, participant2, participant5)
addPartyToParticipant(Painter, iouId, participant3, participant4)

// Wait until the party enabling has taken effect and has been observed at the participants
val partyAssignment = Set(HouseOwner -> participant2, HouseOwner -> participant5, Painter -> participant3, Painter -> participant4)
participant2.parties.await_topology_observed(partyAssignment)
participant3.parties.await_topology_observed(partyAssignment)

// upload the Daml model to all participants
val darPath = Option(System.getProperty("canton-examples.dar-path")).getOrElse("dars/CantonExamples.dar")
participants.all.dars.upload(darPath)
// architecture-handbook-entry-end: topology

// architecture-handbook-entry-begin: setup
import com.digitalasset.canton.BigDecimalImplicits._
import com.digitalasset.canton.examples.java.iou.{Amount, Iou}
import com.digitalasset.canton.examples.java.paint.{OfferToPaintHouseByOwner, PaintHouse}
import com.digitalasset.canton.participant.ledger.api.client.JavaDecodeUtil.decodeAllCreated
import com.digitalasset.canton.participant.util.JavaCodegenUtil.ContractIdSyntax

import scala.jdk.CollectionConverters._

val createIouCmd = new Iou(
  Bank.toProtoPrimitive,
  HouseOwner.toProtoPrimitive,
  new Amount(100.0.toBigDecimal, "USD"),
  List.empty.asJava
).create.commands.asScala.toSeq
val Seq(iouContractUnshared) = decodeAllCreated(Iou.COMPANION)(
  participant1.ledger_api.javaapi.commands.submit_flat(Seq(Bank), createIouCmd, synchronizerId =Some(iouId)))

// Wait until the house owner sees the IOU in the active contract store
participant2.ledger_api.state.acs.await_active_contract(HouseOwner, iouContractUnshared.id.toLf)

// The house owner adds the Painter as an observer on the IOU
val shareIouCmd = iouContractUnshared.id.exerciseShare(Painter.toProtoPrimitive).commands.asScala.toSeq
val Seq(iouContract) = decodeAllCreated(Iou.COMPANION)(
  participant2.ledger_api.javaapi.commands.submit_flat(Seq(HouseOwner), shareIouCmd, synchronizerId =Some(iouId)))
// architecture-handbook-entry-end: setup

// architecture-handbook-entry-begin: paint-offer
// The house owner creates a paint offer using participant 2 and the Paint synchronizer
val paintOfferCmd = new OfferToPaintHouseByOwner(
  HouseOwner.toProtoPrimitive,
  Painter.toProtoPrimitive,
  Bank.toProtoPrimitive,
  iouContract.id
).create.commands.asScala.toSeq
val Seq(paintOffer) = decodeAllCreated(OfferToPaintHouseByOwner.COMPANION)(
  participant2.ledger_api.javaapi.commands.submit_flat(Seq(HouseOwner), paintOfferCmd, synchronizerId =Some(paintId)))
// architecture-handbook-entry-end: paint-offer

// architecture-handbook-entry-begin: unassignment
// Wait until the painter sees the paint offer in the active contract store
participant3.ledger_api.state.acs.await_active_contract(Painter, paintOffer.id.toLf)

// Painter reasigns the paint offer to the IOU synchronizer
val paintOfferReassignmentId = participant3.ledger_api.commands.submit_unassign(
  Painter,                      // Initiator of the reassignment
  paintOffer.id.toLf,           // Contract to be reassigned
  paintId,                      // Source synchronizer
  iouId                         // Target synchronizer
).unassignedEvent.unassignId
// architecture-handbook-entry-end: unassignment

// architecture-handbook-entry-begin: assignment
participant3.ledger_api.commands.submit_assign(
  Painter,
  paintOfferReassignmentId,
  paintId,
  iouId
)
// architecture-handbook-entry-end: assignment

// architecture-handbook-entry-begin: accept
// Wait until the Painter sees the IOU contract on participant 3.
participant3.ledger_api.state.acs.await_active_contract(Painter, iouContract.id.toLf)

// Painter accepts the paint offer on the Iou synchronizer
val acceptCmd = paintOffer.id.exerciseAcceptByPainter().commands.asScala.toSeq
val acceptTx = participant3.ledger_api.javaapi.commands.submit_flat(Seq(Painter), acceptCmd, synchronizerId =Some(iouId))
val Seq(painterIou) = decodeAllCreated(Iou.COMPANION)(acceptTx)
val Seq(paintHouse) = decodeAllCreated(PaintHouse.COMPANION)(acceptTx)
// architecture-handbook-entry-end: accept

// architecture-handbook-entry-begin: automatic-assignment
// Wait until the house owner sees the PaintHouse agreement
participant2.ledger_api.state.acs.await_active_contract(HouseOwner, paintHouse.id.toLf)

val paintHouseId = paintHouse.id
// The house owner moves the PaintHouse agreement back to the Paint synchronizer
participant2.ledger_api.commands.submit_unassign(
  HouseOwner,
  paintHouseId.toLf,
  iouId,
  paintId
)
// After the exclusivity period, which is set to 2 seconds,
// the contract is automatically reassigned into the target synchronizer
utils.retry_until_true(10.seconds) {
  // in the absence of other activity, force the participants to update their view of the latest synchronizer time
  participant2.testing.fetch_synchronizer_times()
  participant3.testing.fetch_synchronizer_times()

  participant3.testing.acs_search(paintAlias, filterId=paintHouseId.contractId).nonEmpty &&
    participant2.testing.acs_search(paintAlias, filterId=paintHouseId.contractId).nonEmpty
}
// architecture-handbook-entry-end: automatic-assignment

// architecture-handbook-entry-begin: call
// Painter converts the Iou into cash
participant4.ledger_api.javaapi.commands.submit_flat(
  Seq(Painter),
  painterIou.id.exerciseCall().commands.asScala.toSeq,
  synchronizerId =Some(iouId)
)
// architecture-handbook-entry-end: call
