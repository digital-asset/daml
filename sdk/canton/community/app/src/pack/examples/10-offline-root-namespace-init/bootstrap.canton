import better.files.File
import scala.sys.process.{Process, ProcessLogger}
// start participant node
participant1.start()

val tmpDir = Option(System.getProperty("canton-examples.openssl-keys-dir")).map(File(_)).getOrElse(File.newTemporaryDirectory())
// Generate intermediate key
val intermediateKeyPath = (tmpDir / "intermediate_key.pub").pathAsString
val intermediateKey = participant1.keys.secret.generate_signing_key(
  name = "IntermediateKey",
  usage = Set(SigningKeyUsage.Namespace),
)
// Write public intermediate key to a file
participant1.keys.public.download_to(intermediateKey.id, intermediateKeyPath)

val opensslScriptDirectory = Option(System.getProperty("canton-examples.openssl-script-dir")).getOrElse(".")
// Run the scripts generating the signed root and delegation certificates
// This would usually be done on the offline site after having transfered intermediate_key.pub to it
Process(
  Seq(
    s"$opensslScriptDirectory/openssl-example.sh",
    intermediateKeyPath,
  ),
  cwd = File(opensslScriptDirectory).toJava,
  extraEnv = "OUTPUT_DIR" -> tmpDir.pathAsString,
).!(utils.cantonProcessLogger())

// Once the certificates have be generated on the offline site, they can be transfered back
// to initialize the participant node
participant1.topology.init_id(
  identifier = "participant1",
  delegationFiles = Seq(
    (tmpDir / "root_namespace.cert").pathAsString,
    (tmpDir / "intermediate_namespace.cert").pathAsString,
  ),
)

if (participant1.is_initialized) {
  println("participant initialization completed successfully")
} else {
  Console.err.println("participant initialization failed")
}
