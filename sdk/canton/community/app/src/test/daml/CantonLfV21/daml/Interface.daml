-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- @SINCE-LF-FEATURE DAML_INTERFACE

module Interface where

import DA.Assert()
import Daml.Script

data EmptyInterfaceView = EmptyInterfaceView {}

-- | An interface comment.
interface Token where
  viewtype EmptyInterfaceView
  getOwner : Party -- ^ A method comment.
  getAmount : Int
  setAmount : Int -> Token

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  showTokenImpl : Party -> Update (ContractId Token)

  choice Split : (ContractId Token, ContractId Token) -- ^ An interface choice comment.
    with
      splitAmount : Int -- ^ A choice field comment.
    controller getOwner this
    do
      splitImpl this splitAmount

  choice ShowToken : ContractId Token
    with
      newOwner : Party
    controller getOwner this
    do
      showTokenImpl this newOwner

template Asset
  with
    owner : Party
    amount : Int
    possibleObserver: Optional Party
  where
    signatory owner
    observer possibleObserver

    ensure (amount >= 0)

    interface instance Token for Asset where
      view = EmptyInterfaceView
      getOwner = owner
      getAmount = amount
      setAmount x = toInterface @Token (this with amount = x)

      splitImpl splitAmount = do
        assert (splitAmount < amount)
        cid1 <- create this with amount = splitAmount
        cid2 <- create this with amount = amount - splitAmount
        pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

      showTokenImpl newOwner = do
        cid <- create this with possibleObserver = Some newOwner
        pure (toInterfaceContractId @Token cid)


main: Script ()
main = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  assetCid <- submit alice $ createCmd Asset with owner = alice, amount = 100, possibleObserver = None
  let interfaceCid = (toInterfaceContractId @Token assetCid)
  offerCid <- submit alice $ exerciseCmd interfaceCid ShowToken with newOwner = bob
  pure ()
