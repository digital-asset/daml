-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Universal where

import Daml.Script
import DA.Assert
import DA.List

{-
Template allowing to configure maintainers, signatories, observers, actors, and key separately.
Every choice has choice observers that can again be configured via choice parameters.
The template can be used to create a wide range of transaction structures.

Limitations:
- It does not contain any rollbacks.
- It does not attempt to cover all combinations of consuming / non-consuming choices.
- It does not have any post-consuming choice.
-}
template UniversalContract
  with
    maintainers: [Party]
    signatories: [Party]
    observers: [Party]
    actors: [Party]
    keyText: Text
  where
    signatory signatories ++ maintainers
    observer observers
    key (maintainers, keyText): ([Party], Text)
    maintainer fst key

    -- A plain non-consuming choice.
    nonconsuming choice Touch: ()
      with
        touchObservers: [Party]
      observer touchObservers
      controller actors
      do pure ()

    -- A consuming choice that creates a new version of the contract.
    choice Replace: ContractId UniversalContract
      with
        newMaintainers: [Party]
        newSignatories: [Party]
        newObservers: [Party]
        newActors: [Party]
        replaceObservers: [Party]
      observer replaceObservers
      controller actors
        do
          cid <- create UniversalContract
            with
              maintainers = newMaintainers
              signatories = newSignatories
              observers = newObservers
              actors = newActors
              ..
          pure cid

    choice Delete: ()
      with
        deleteObservers: [Party]
      observer deleteObservers
      controller actors
      do pure ()

    -- Choice that fetches a universal contract as its consequence.
    nonconsuming choice DelegateFetch: UniversalContract
      with
        cid: ContractId UniversalContract
        delegateObservers: [Party]
      observer delegateObservers
      controller actors
        do fetch cid

    -- Choice that fetches a universal contract by key as its consequence.
    nonconsuming choice DelegateFetchByKey: (ContractId UniversalContract, UniversalContract)
      with
        k: ([Party], Text)
        delegateObservers: [Party]
      observer delegateObservers
      controller actors
        do fetchByKey @UniversalContract k

    -- Choice that looks up a universal contract by key as its consequence.
    nonconsuming choice DelegateLookup: Optional (ContractId UniversalContract)
      with
        k: ([Party], Text)
        delegateObservers: [Party]
      observer delegateObservers
      controller actors
        do lookupByKey @UniversalContract k

    -- Choice that exercises Touch as its consequence.
    nonconsuming choice DelegateTouch: ()
      with
        cid: ContractId UniversalContract
        delegateObservers: [Party]
        touchObservers: [Party]
      observer delegateObservers
      controller actors
        do exercise cid Touch with ..

    -- Choice that exercises Touch by key as its consequence.
    nonconsuming choice DelegateTouchByKey: ()
      with
        k: ([Party], Text)
        delegateObservers: [Party]
        touchObservers: [Party]
      observer delegateObservers
      controller actors
        do exerciseByKey @UniversalContract k Touch with ..

    -- Choice that exercises Replace as its consequence.
    nonconsuming choice DelegateReplace: ContractId UniversalContract
      with
        cid: ContractId UniversalContract
        delegateObservers: [Party]
        newMaintainers: [Party]
        newSignatories: [Party]
        newObservers: [Party]
        newActors: [Party]
        replaceObservers: [Party]
      observer delegateObservers
      controller actors
        do
          exercise cid Replace with ..

    -- Choice that exercises Replace by key as its consequence.
    nonconsuming choice DelegateReplaceByKey: ContractId UniversalContract
      with
        k: ([Party], Text)
        delegateObservers: [Party]
        newMaintainers: [Party]
        newSignatories: [Party]
        newObservers: [Party]
        newActors: [Party]
        replaceObservers: [Party]
      observer delegateObservers
      controller actors
        do
          exerciseByKey @UniversalContract k Replace with ..

test: Script ()
test = script do
  -- Parties used as maintainer, signatory, observer, or actor.
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  charlie <- allocateParty "Charlie"
  eve <- allocateParty "Eve"

  -- Parties used as choice observers.
  let obsNames = map (\i -> "Observer" <> show i) [0..20]
  obs <- mapA allocateParty obsNames

  -- Test the simple choices (i.e., not of the form Delegate*)

  -- Firstly, create some universal contract
  universalProp <- submit alice $ createCmd UniversalContract with
    maintainers = [alice], signatories = [], observers = [bob], actors = [bob], keyText = "keyText"
  universal <- submit bob $ exerciseCmd universalProp Replace with
    newMaintainers = [alice], newSignatories = [bob], newObservers = [charlie], newActors = [eve], replaceObservers = [eve]

  -- touch
  () <- submit eve $ exerciseCmd universal Touch with touchObservers = [obs!!0]

  -- replace
  universal <- submit eve $ exerciseCmd universal Replace with
    newMaintainers = [eve], newSignatories = [alice], newObservers = [bob], newActors = [charlie], replaceObservers = [obs!!1]
  let universalContract = UniversalContract {maintainers = [eve], signatories = [alice], observers = [bob], actors = [charlie], keyText = "keyText"}

  -- Test the choices of the form Delegate*

  -- Firstly, create contracts used at the transaction root.
  rootEve <- submit eve $ createCmd UniversalContract with
    maintainers = [eve], signatories = [], observers = [], actors = [eve], keyText = "root"

  rootCharlie <- submit charlie $ createCmd UniversalContract with
    maintainers = [charlie], signatories = [], observers = [], actors = [charlie], keyText = "root"

  rootEveCharlieProp <- submit eve $ createCmd UniversalContract with
    maintainers = [eve], signatories = [], observers = [charlie], actors = [charlie], keyText = "root_eve_charlie"
  rootEveCharlie <- submit charlie $ exerciseCmd rootEveCharlieProp Replace with
    newMaintainers = [eve], newSignatories = [charlie], newObservers = [], newActors = [eve], replaceObservers = []

  -- delegate fetch
  delegateFetchContract <- submit eve $ exerciseCmd rootEve DelegateFetch with
    cid = universal, delegateObservers = [obs!!2]
  delegateFetchContract === universalContract

  -- delegate fetch by key
  (delegateFetchByKeyCid, delegateFetchByKeyContract) <- submit eve $ exerciseCmd rootEve DelegateFetchByKey with
    k = ([eve], "keyText"), delegateObservers = [obs!!3]
  delegateFetchByKeyCid === universal
  delegateFetchByKeyContract === universalContract

  -- delegate lookup (positive)
  delegateLookupPosCid <- submit eve $ exerciseCmd rootEve DelegateLookup with
    k = ([eve], "keyText"), delegateObservers = [obs!!4]
  delegateLookupPosCid === Some universal

  -- delegate lookup (negative)
  delegateLookupNegCid <- submit eve $ exerciseCmd rootEve DelegateLookup with
    k = ([eve], "not-assigned"), delegateObservers = [obs!!5]
  delegateLookupNegCid === None

  -- delegate touch
  () <- submit charlie $ exerciseCmd rootCharlie DelegateTouch with
    cid = universal, delegateObservers = [obs!!6], touchObservers = [obs!!7]

  -- delegate touch by key
  () <- submit eve $ exerciseCmd rootEveCharlie DelegateTouchByKey with
    k = ([eve], "keyText"), delegateObservers = [obs!!8], touchObservers = [obs!!9]

  -- delegate replace
  universal <- submit charlie $ exerciseCmd rootCharlie DelegateReplace with
    cid = universal, delegateObservers = [obs!!10], newMaintainers = [eve], newSignatories = [alice], newObservers = [], newActors = [charlie], replaceObservers = [obs!!11]

  -- delegate replace by key
  universal <- submit eve $ exerciseCmd rootEveCharlie DelegateReplaceByKey with
    k = ([eve], "keyText"), delegateObservers = [obs!!12], newMaintainers = [eve], newSignatories = [], newObservers = [], newActors = [charlie], replaceObservers = [obs!!13]

  pure ()
