// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.topology.admin.v0;

import "com/digitalasset/canton/crypto/v0/crypto.proto";
import "com/digitalasset/canton/protocol/v0/sequencing.proto";
import "com/digitalasset/canton/protocol/v0/topology.proto";
import "com/digitalasset/canton/protocol/v1/sequencing.proto";
import "com/digitalasset/canton/protocol/v2/domain_params.proto";
import "com/digitalasset/canton/topology/admin/v0/topology_ext.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// domain + idm + participant
service TopologyManagerReadService {
  rpc ListAvailableStores(ListAvailableStoresRequest) returns (ListAvailableStoresResult);
  rpc ListPartyToParticipant(ListPartyToParticipantRequest) returns (ListPartyToParticipantResult);
  rpc ListOwnerToKeyMapping(ListOwnerToKeyMappingRequest) returns (ListOwnerToKeyMappingResult);
  rpc ListNamespaceDelegation(ListNamespaceDelegationRequest) returns (ListNamespaceDelegationResult);
  rpc ListIdentifierDelegation(ListIdentifierDelegationRequest) returns (ListIdentifierDelegationResult);
  rpc ListSignedLegalIdentityClaim(ListSignedLegalIdentityClaimRequest) returns (ListSignedLegalIdentityClaimResult);
  rpc ListParticipantDomainState(ListParticipantDomainStateRequest) returns (ListParticipantDomainStateResult);
  rpc ListMediatorDomainState(ListMediatorDomainStateRequest) returns (ListMediatorDomainStateResult);
  rpc ListVettedPackages(ListVettedPackagesRequest) returns (ListVettedPackagesResult);
  rpc ListCheckOnlyPackages(ListCheckOnlyPackagesRequest) returns (ListCheckOnlyPackagesResult);
  rpc ListDomainParametersChanges(ListDomainParametersChangesRequest) returns (ListDomainParametersChangesResult);
  rpc ListAll(ListAllRequest) returns (ListAllResponse);
}

message ListNamespaceDelegationRequest {
  BaseQuery base_query = 1;
  string filter_namespace = 2;
}

message ListNamespaceDelegationResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.NamespaceDelegation item = 2;
    string target_key_fingerprint = 3;
  }
  repeated Result results = 1;
}

message ListIdentifierDelegationRequest {
  BaseQuery base_query = 1;
  string filter_uid = 2;
}

message ListIdentifierDelegationResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.IdentifierDelegation item = 2;
    string target_key_fingerprint = 3;
  }
  repeated Result results = 1;
}

message BaseQuery {
  string filter_store = 1;
  bool use_state_store = 2;
  com.digitalasset.canton.protocol.v0.TopologyChangeOp operation = 3;
  /** if true, then we'll filter the results according to above defined operation */
  bool filter_operation = 4;
  message TimeRange {
    google.protobuf.Timestamp from = 2;
    google.protobuf.Timestamp until = 3;
  }
  oneof time_query {
    google.protobuf.Timestamp snapshot = 5;
    google.protobuf.Empty head_state = 6;
    TimeRange range = 7;
  }
  string filter_signed_key = 8;
  google.protobuf.StringValue protocol_version = 9;
}

message BaseResult {
  string store = 1;
  // TODO(#15223) reorder once we break the admin api
  google.protobuf.Timestamp sequenced = 7;
  google.protobuf.Timestamp valid_from = 2;
  google.protobuf.Timestamp valid_until = 3;
  com.digitalasset.canton.protocol.v0.TopologyChangeOp operation = 4;
  bytes serialized = 5;
  string signed_by_fingerprint = 6;
}

message ListPartyToParticipantResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.PartyToParticipant item = 2;
  }
  repeated Result results = 2;
}

message ListPartyToParticipantRequest {
  BaseQuery base_query = 1;
  string filter_party = 2;
  string filter_participant = 3;
  message FilterRequestSide {
    com.digitalasset.canton.protocol.v0.RequestSide value = 1;
  }
  FilterRequestSide filter_request_side = 4;
  message FilterPermission {
    com.digitalasset.canton.protocol.v0.ParticipantPermission value = 1;
  }
  FilterPermission filter_permission = 5;
}

message ListOwnerToKeyMappingRequest {
  BaseQuery base_query = 1;
  string filter_key_owner_type = 2;
  string filter_key_owner_uid = 3;
  message FilterKeyPurpose {
    com.digitalasset.canton.crypto.v0.KeyPurpose value = 1;
  }
  FilterKeyPurpose filter_key_purpose = 4;
}

message ListOwnerToKeyMappingResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.OwnerToKeyMapping item = 2;
    string key_fingerprint = 3;
  }
  repeated Result results = 1;
}

message ListSignedLegalIdentityClaimRequest {
  BaseQuery base_query = 1;
  string filter_uid = 2;
}

message ListSignedLegalIdentityClaimResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.SignedLegalIdentityClaim item = 2;
  }
  repeated Result results = 1;
}

message ListVettedPackagesRequest {
  BaseQuery base_query = 1;
  string filter_participant = 2;
}

message ListVettedPackagesResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.VettedPackages item = 2;
  }
  repeated Result results = 1;
}

message ListCheckOnlyPackagesRequest {
  BaseQuery base_query = 1;
  string filter_participant = 2;
}

message ListCheckOnlyPackagesResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.CheckOnlyPackages item = 2;
  }
  repeated Result results = 1;
}

message ListDomainParametersChangesRequest {
  BaseQuery base_query = 1;
}

message ListDomainParametersChangesResult {
  message Result {
    BaseResult context = 1;
    oneof parameters {
      com.digitalasset.canton.protocol.v0.DynamicDomainParameters v0 = 2;
      com.digitalasset.canton.protocol.v1.DynamicDomainParameters v1 = 3;
      com.digitalasset.canton.protocol.v2.DynamicDomainParameters v2 = 4;
    }
  }

  repeated Result results = 1;
}

message ListAvailableStoresRequest {}
message ListAvailableStoresResult {
  repeated string store_ids = 1;
}

message ListParticipantDomainStateRequest {
  BaseQuery base_query = 1;
  string filter_domain = 2;
  string filter_participant = 3;
}

message ListParticipantDomainStateResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.ParticipantState item = 2;
  }
  repeated Result results = 1;
}

message ListMediatorDomainStateRequest {
  BaseQuery base_query = 1;
  string filter_domain = 2;
  string filter_mediator = 3;
}

message ListMediatorDomainStateResult {
  message Result {
    BaseResult context = 1;
    com.digitalasset.canton.protocol.v0.MediatorDomainState item = 2;
  }
  repeated Result results = 1;
}

message ListAllRequest {
  BaseQuery base_query = 1;
}

message ListAllResponse {
  com.digitalasset.canton.protocol.v0.TopologyTransactions result = 1;
}
