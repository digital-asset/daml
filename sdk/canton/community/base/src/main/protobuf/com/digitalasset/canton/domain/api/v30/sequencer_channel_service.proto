// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.domain.api.v30;

import "com/digitalasset/canton/v30/trace_context.proto";
import "scalapb/scalapb.proto";

// The service that a member can use to establish a bidirectional channel to another member via the sequencer
service SequencerChannelService {
  // Request to connect to a channel and begin interacting with it via bidirectional streams mostly opaque to the
  // sequencer channel service (except for a handful of initialization messages).
  // The sequencer channel service forwards requests from one member as responses to another member.
  rpc ConnectToSequencerChannel(stream ConnectToSequencerChannelRequest) returns (stream ConnectToSequencerChannelResponse);

  // Ping to check if the sequencer supports and has enabled channels.
  rpc Ping(PingRequest) returns (PingResponse);
}

// The request/response payload represents the lowest of multiple protocol layers in which the sequencer channel service
// forwards opaque payload between channel member endpoints.
//
// The middle protocol layer consist of initialization messages between the sequencer channel client and service
// (e.g. SequencerChannelMetadata and SequencerChannelConnectedToAllEndpoints) and between sequencer channel clients
// of different member endpoints (to exchange security keys).
//
// Finally the highest protocol layer exchanges messages among channel client users (e.g. for Online Party Replication).
//
message ConnectToSequencerChannelRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // Exactly the first message of the channel request stream must be SequencerChannelMetadata
  // for use by the sequencer channel service to match channel endpoint members.
  // Payload from the second message onward is opaque to the sequencer channel service and client.
  oneof request {
    SequencerChannelMetadata metadata = 1;
    bytes payload = 2;
  }

  // Canton trace context
  // Required
  com.digitalasset.canton.v30.TraceContext trace_context = 3;
}

message ConnectToSequencerChannelResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  // Exactly the first message of the channel response stream must be SequencerChannelConnectedToMembers
  // for use by the sequencer channel client to notify the request initiator that the channel is ready for use.
  // Payload from the second message onward is opaque to the sequencer channel service and client.
  // Required
  oneof response {
    SequencerChannelConnectedToAllEndpoints connected = 1;
    bytes payload = 2;
  }

  // Canton trace context
  // Required
  com.digitalasset.canton.v30.TraceContext trace_context = 3;
}

message PingRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
}

message PingResponse {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
}

// Metadata for a sequencer channel to be established between two members.
message SequencerChannelMetadata {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  // Channel identifier
  // Required
  string channel_id = 1;

  // The member initiating the channel connect request
  // Required
  string initiating_member = 2;

  // The member to connect to via the channel
  // Required
  string receiving_member = 3;
}

// Notification that a sequencer channel has been connected to the members specified in the SequencerChannelMetadata.
message SequencerChannelConnectedToAllEndpoints {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
}
