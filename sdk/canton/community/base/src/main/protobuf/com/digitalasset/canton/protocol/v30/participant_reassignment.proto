// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "com/digitalasset/canton/protocol/v30/common_stable.proto";
import "com/digitalasset/canton/protocol/v30/merkle.proto";
import "com/digitalasset/canton/time/v30/time_proof.proto";
import "scalapb/scalapb.proto";

// Messages sent by a participant as part of the reassignment protocol

message ReassignmentId {
  string source_domain = 1;
  int64 timestamp = 2; // in microseconds of UTC time since Unix epoch
}

// Messages sent by a participant as part of the reassignment protocol

message UnassignmentCommonData {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v30.Salt salt = 1;
  string source_domain = 2;

  Stakeholders stakeholders = 3;
  repeated string confirming_reassigning_participant_uids = 4;
  repeated string observing_reassigning_participant_uids = 5;

  string uuid = 6;
  int32 source_mediator_group = 7;
  ReassignmentSubmitterMetadata submitter_metadata = 8;
}

message ReassignmentViewTree {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  bytes common_data = 1;
  BlindableNode participant_data = 2;
}

message AssignmentMediatorMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  ReassignmentViewTree tree = 1;
  com.digitalasset.canton.crypto.v30.Signature submitting_participant_signature = 2;
}

message UnassignmentMediatorMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  ReassignmentViewTree tree = 1;
  com.digitalasset.canton.crypto.v30.Signature submitting_participant_signature = 2;
}

message AssignmentCommonData {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v30.Salt salt = 1;
  string target_domain = 2;

  Stakeholders stakeholders = 3; // stakeholders of the contract

  string uuid = 4; // request uuid
  int32 target_mediator_group = 5;
  ReassignmentSubmitterMetadata submitter_metadata = 6;
  repeated string confirming_reassigning_participant_uids = 7;
  repeated string observing_reassigning_participant_uids = 8;
}

message ReassignmentSubmitterMetadata {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  string submitter = 1;
  string submitting_participant_uid = 2;
  string command_id = 3;
  string submission_id = 4; // optional
  string application_id = 5;
  string workflow_id = 6; // optional
}

message UnassignmentView {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v30.Salt salt = 1;
  string target_domain = 3;
  com.digitalasset.canton.time.v30.TimeProof target_time_proof = 4;
  int32 target_protocol_version = 5;
  int64 reassignment_counter = 6;
  com.digitalasset.canton.protocol.v30.SerializableContract contract = 7;
}

message AssignmentView {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  com.digitalasset.canton.crypto.v30.Salt salt = 1;
  v30.SerializableContract contract = 2;
  // Serialized SignedContent[SequencedEvent]
  bytes unassignment_result_event = 3;
  int32 source_protocol_version = 4;
  int64 reassignment_counter = 5;
}
