// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "com/digitalasset/canton/domain/api/v30/sequencer_service.proto";
import "com/digitalasset/canton/protocol/v30/signed_content.proto";
import "com/digitalasset/canton/v30/trace_context.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";
import "scalapb/scalapb.proto";

// Messages for sequencing
message PossiblyIgnoredSequencedEvent {
  int64 counter = 1;
  int64 timestamp = 2; // in microseconds of UTC time since Unix epoch
  com.digitalasset.canton.v30.TraceContext trace_context = 3;
  bool is_ignored = 4;
  v30.SignedContent underlying = 5; // Optional if is_ignored == true, required otherwise
  com.digitalasset.canton.domain.api.v30.SequencedEventTrafficState traffic_state = 6; // Optional
}

// Protobuf has a hard limit on the nesting depth of messages, so this message could potentially hit
// the nesting depth limit. However this probably won't be an issue any time soon.
message RecipientsTree {
  repeated string recipients = 1;
  repeated com.digitalasset.canton.protocol.v30.RecipientsTree children = 2;
}

message Recipients {
  repeated RecipientsTree recipients_tree = 1;
}

message ServiceAgreement {
  string id = 1; // A unique identifier of an agreement within a domain, which must change when the legal text changes
  string legal_text = 2;
}

// Messages for performing a version handshake with a sequencer service
// Reused between sequencer services
// IMPORTANT: changing the version handshakes can lead to issues with upgrading domains - be very careful
// when changing the handshake message format
message Handshake {
  message Request {
    repeated string client_protocol_versions = 1;
    google.protobuf.StringValue minimum_protocol_version = 2;
  }

  message Response {
    string server_protocol_version = 1;
    oneof value {
      Success success = 2;
      Failure failure = 3;
    }
  }

  message Success {}

  message Failure {
    string reason = 1;
  }
}

// Messages used for synchronization between sequencer nodes

message AggregationRule {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  repeated string eligible_members = 1;
  int32 threshold = 2;
}

message StaticDomainParameters {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  repeated com.digitalasset.canton.crypto.v30.SigningKeyScheme required_signing_key_schemes = 1;
  repeated com.digitalasset.canton.crypto.v30.EncryptionKeyScheme required_encryption_key_schemes = 2;
  repeated com.digitalasset.canton.crypto.v30.SymmetricKeyScheme required_symmetric_key_schemes = 3;
  repeated com.digitalasset.canton.crypto.v30.HashAlgorithm required_hash_algorithms = 4;
  repeated com.digitalasset.canton.crypto.v30.CryptoKeyFormat required_crypto_key_formats = 5;
  int32 protocol_version = 6;
}

message Envelope {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  // Contains a v30.EnvelopeContent if signatures are empty and a v30.TypedSignedProtocolMessageContent otherwise
  bytes content = 1;
  com.digitalasset.canton.protocol.v30.Recipients recipients = 2;
  repeated com.digitalasset.canton.crypto.v30.Signature signatures = 3;
}

message Batch {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  repeated Envelope envelopes = 1;
}

message CompressedBatch {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  enum CompressionAlgorithm {
    COMPRESSION_ALGORITHM_UNSPECIFIED = 0;
    COMPRESSION_ALGORITHM_GZIP = 1;
  }

  v30.CompressedBatch.CompressionAlgorithm algorithm = 1;
  // contains possibly compressed v30.Batch
  bytes compressed_batch = 2;
}

message SequencedEvent {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  int64 counter = 1;
  int64 timestamp = 2; // in microseconds of UTC time since Unix epoch
  string domain_id = 3;
  google.protobuf.StringValue message_id = 4; // Optional: Present for DeliverError, present for the sender of a Deliver.
  CompressedBatch batch = 5; // Optional: Present for Deliver, absent for DeliverError
  google.rpc.Status deliver_error_reason = 6; // Optional: Present for DeliverError, absent for other events
  google.protobuf.Int64Value topology_timestamp = 7; // Optional: Present for Deliver events when it is different from timestamp, absent for other events
}

// Messages used for synchronization between sequencer nodes
message SubmissionRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  string sender = 1;
  string message_id = 2;
  bool is_request = 3;
  CompressedBatch batch = 4;
  int64 max_sequencing_time = 5; // in microseconds of UTC time since Unix epoch
  google.protobuf.Int64Value topology_timestamp = 6; // in microseconds of UTC time since Unix epoch
  v30.AggregationRule aggregation_rule = 7; // optional
}
