// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "com/digitalasset/canton/protocol/v30/domain_parameters.proto";
import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";

message Enums {
  enum TopologyChangeOp {
    TOPOLOGY_CHANGE_OP_UNSPECIFIED = 0;

    // Adds a new or replaces an existing mapping
    TOPOLOGY_CHANGE_OP_ADD_REPLACE = 1;

    // Remove an existing mapping
    TOPOLOGY_CHANGE_OP_REMOVE = 2;
  }

  // enum indicating the participant permission level
  enum ParticipantPermission {
    PARTICIPANT_PERMISSION_UNSPECIFIED = 0;

    // participant is active, can submit transactions
    PARTICIPANT_PERMISSION_SUBMISSION = 1;

    // participant is passive, can only confirm transactions
    PARTICIPANT_PERMISSION_CONFIRMATION = 2;

    // participant is passive, can only observe transactions
    PARTICIPANT_PERMISSION_OBSERVATION = 3;
  }
}

// namespace delegation (equivalent to X509v3 CA root or intermediate CAs)
// if is_root_delegation==false, the target key may sign all mappings requiring a signature
// for the namespace except other NamespaceDelegation mappings.
// authorization: a namespace delegation is either signed by the root key, or is signed by
//   a key for which there exists a series of properly authorized namespace delegations
//   that are ultimately signed by the root key
// UNIQUE(namespace, target_key)
message NamespaceDelegation {
  // fingerprint of the root key defining the namespace
  string namespace = 1;

  // target key of getting full rights on the namespace (if target == namespace, it's a root CA)
  com.digitalasset.canton.crypto.v30.SigningPublicKey target_key = 2;
  // flag indicating whether the given delegation is a root delegation or not
  // a root delegation is also allowed to issue other NamespaceDelegations.
  bool is_root_delegation = 3;
}

// a decentralized namespace definition that creates a new namespace supported by the
// the original owners
// authorization: the decentralized namespace definition with serial = 1 must be authorized by all the
//   owners of the namespace that form the decentralized namespace.
//   for definitions with serial > 1, we need the authorization of #threshold owners plus
//   all new owners
//
//   any further transaction within the decentralized namespace other than decentralized namespace definitions needs
//   #threshold signatures of the owners
//
// UNIQUE(decentralized_namespace)
message DecentralizedNamespaceDefinition {
  // name of the decentralized namespace, computed from the hash of its initial owners
  string decentralized_namespace = 1;

  // the threshold required for any subsequent update signing
  int32 threshold = 2;

  // the namespaces of the owners
  repeated string owners = 3;
}

// identifier delegation giving right to issue topology transaction on that particular identifier
// authorization: must have sufficient signatures by keys of the namespace of the given unique
//   identifier. If the identifier is for a consortium, it can mean that we need multiple signatures
// UNIQUE (all fields)
message IdentifierDelegation {
  // identifier
  string unique_identifier = 1;

  // target key getting the right
  com.digitalasset.canton.crypto.v30.SigningPublicKey target_key = 2;
}

// mapping a member (participant, mediator, sequencer) to a key
// authorization: whoever controls the member uid
// UNIQUE(member, domain)
message OwnerToKeyMapping {
  // the sequencing process member
  string member = 1;

  // the designated keys
  repeated com.digitalasset.canton.crypto.v30.PublicKey public_keys = 2;
  // optionally restricted to domain
  string domain = 3;
}

// the trust certificate issued by the participant confirming that the participant
// wishes to be present on the given domain
// authorization: whoever controls the participant uid
// UNIQUE(participant,domain)
message DomainTrustCertificate {
  // the uid of the participant
  string participant = 1;

  // the uid of the domain that the participant trusts
  string domain = 2;

  // if true, the participant restricts the domains to which it accepts transfer-outs
  // TODO(#1252) implement transfer permissions
  bool transfer_only_to_given_target_domains = 3;

  // the uids of the target domains that this participants supports for transfer if transfer
  // is restricted.
  repeated string target_domains = 4;
}

// the optional trust certificate of the domain towards the participant
// authorization: whoever controls the domain uid
// UNIQUE(domain,participant)
message ParticipantDomainPermission {
  string domain = 1;
  string participant = 2;

  // the permission level of the participant on this domain (usually submission)
  Enums.ParticipantPermission permission = 3;

  // optional individual limits for this participant
  ParticipantDomainLimits limits = 4;

  // optional earliest time when participant can log in (again)
  // used to temporarily disable participants
  // In microseconds of UTC time since Unix epoch
  // TODO(#14049) implement participant deny list
  google.protobuf.Int64Value login_after = 5;
}

// the optional hosting limits for a party on a given domain
// these limits can be used to limit the number of participants that can host a given party
// authorization: whoever controls the domain uid
// UNIQUE(domain,party)
// TODO(#14050) implement me
message PartyHostingLimits {
  string domain = 1;
  string party = 2;

  // how many participants can be assigned to the given party
  uint32 quota = 3;
}

// list of packages supported by this participant
// authorization: whoever controls the participant uid
// UNIQUE(participant, domain)
message VettedPackages {
  // the participant vetting the packages
  string participant = 1;

  // the hash of the vetted packages
  repeated string package_ids = 2;

  // optionally restricted to domain
  string domain = 3;
}

// mapping that maps a party to a participant
// authorization: whoever controls the party and all the owners of the participants that
//   were not already present in the tx with serial = n - 1
//   exception:
//     - a participant can disassociate itself with the party unilaterally as long there will be
//       enough participants to reach "threshold" during confirmation. The disassociating participant
//       must lower the threshold by one, if otherwise the number of hosting participants would go
//       below the threshold.
// UNIQUE(party, domain)
message PartyToParticipant {
  message HostingParticipant {
    // the target participant that the party should be mapped to
    string participant = 1;

    // permission of the participant for this particular party (the actual
    // will be min of ParticipantDomainPermission.ParticipantPermission and this setting)
    Enums.ParticipantPermission permission = 2;
  }

  // the party that is to be represented by the participants
  string party = 1;

  // the signatory threshold required by the participants to be able to act on behalf of the party.
  // a mapping with threshold > 1 is considered a definition of a consortium party
  uint32 threshold = 2;

  // which participants will host the party.
  // if threshold > 1, must be Confirmation or Observation
  repeated HostingParticipant participants = 3;

  // if true, then the canton transaction is addressed to the party (group broadcast)
  // and not to the individual participants for efficiency reasons
  bool group_addressing = 4;

  // optionally restricted to domain
  string domain = 5;
}

// which parties can exercise the authority over another party
// authorization: whoever controls the consortium and all the owners of the parties that
//   were not already present in the tx with serial = n - 1
// UNIQUE(party, domain)
message AuthorityOf {
  // the party for which some other parties can gain authority
  string party = 1;

  // the signatory threshold required by the parties to be able to act on behalf of the consortium within Daml
  uint32 threshold = 2;

  // the list of parties which can gain authority
  repeated string parties = 3;

  // optionally restricted to domain
  string domain = 4;
}

// which dynamic domain parameters are supposed to be used on the given domain
// authorization: whoever controls the domain
// UNIQUE(domain)
message DomainParametersState {
  // domain affected by the new domain parameters
  string domain = 1;

  DynamicDomainParameters domain_parameters = 2;
}

// which mediators and mediator groups are active on the given domain
// authorization: whoever controls the domain
// UNIQUE(domain, group)
message MediatorDomainState {
  // the domain-id of the mediator group
  string domain = 1;

  // the group-id used for sharding multiple mediator groups
  uint32 group = 2;

  // the signature threshold required to reach consensus among the mediators
  uint32 threshold = 3;

  // the list of active mediators (uid) within the group
  repeated string active = 4;

  // the list of observing mediators (uid) within the group (read messages but don't respond)
  repeated string observers = 5;
}

// which sequencers are active on the given domain
// authorization: whoever controls the domain
// UNIQUE(domain)
message SequencerDomainState {
  // the domain-id of the sequencer group
  string domain = 1;

  // the signature threshold required to reach consensus
  uint32 threshold = 2;

  // the list of active sequencers
  repeated string active = 3;

  // the list of observing sequencers (uid) within the group (read messages but don't respond)
  repeated string observers = 4;

  // TODO(#14046) add payload for BFT-configuration
  // bytes payload = 5;
}

// explicitly invalidate topology transactions for good
// this can be used by the domain to offboard participants forcefully or to
// remove stray topology transactions
// authorization: whoever controls the domain
// UNIQUE(domain)
message PurgeTopologyTransaction {
  // the domain-id
  string domain = 1;

  // the list of mappings to remove from this domain
  repeated TopologyMapping mappings = 2;
}

message TopologyMapping {
  oneof mapping {
    NamespaceDelegation namespace_delegation = 1;
    IdentifierDelegation identifier_delegation = 2;
    DecentralizedNamespaceDefinition decentralized_namespace_definition = 3;

    OwnerToKeyMapping owner_to_key_mapping = 4;

    DomainTrustCertificate domain_trust_certificate = 5;
    ParticipantDomainPermission participant_permission = 6;
    PartyHostingLimits party_hosting_limits = 7;
    VettedPackages vetted_packages = 8;

    PartyToParticipant party_to_participant = 9;
    AuthorityOf authority_of = 10;

    DomainParametersState domain_parameters_state = 11;
    MediatorDomainState mediator_domain_state = 12;
    SequencerDomainState sequencer_domain_state = 13;
    PurgeTopologyTransaction purge_topology_txs = 14;
  }
}

message TopologyTransaction {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  Enums.TopologyChangeOp operation = 1;

  // Serial identifier of this transaction used to prevent replay attacks.
  // A topology transaction is replacing the existing transaction with serial - 1
  // that has the same unique key.
  uint32 serial = 2;

  // the element of this topology transaction
  TopologyMapping mapping = 3;
}

message SignedTopologyTransaction {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  // serialized topology transaction (protobuf bytestring)
  bytes transaction = 1;

  // multiple signatures (at least one)
  repeated com.digitalasset.canton.crypto.v30.Signature signatures = 2;
  // if true, this transaction is just a proposal. this means that every signature is valid,
  // but the signatures are insufficient to properly authorize the transaction.
  // proposals are distributed via the topology channel too. proposals will be pruned automatically
  // when the nodes are pruned
  // TODO(#14045) implement pruning
  bool proposal = 3;
}

/** Accepted topology transaction
 *
 * A member sends topology transactions to the topology transaction broadcast address.
 * The transactions are validated by all members individually against their respective domain store,
 * including the member the submitted the broadcast.
 */
message TopologyTransactionsBroadcast {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  message Broadcast {
    string broadcast_id = 1;
    repeated SignedTopologyTransaction transactions = 2;
  }

  string domain = 1;
  repeated Broadcast broadcasts = 2;
}
