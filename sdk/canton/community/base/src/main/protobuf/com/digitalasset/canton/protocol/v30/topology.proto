// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "com/digitalasset/canton/protocol/v30/sequencing_parameters.proto";
import "com/digitalasset/canton/protocol/v30/synchronizer_parameters.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

message Enums {
  enum TopologyChangeOp {
    TOPOLOGY_CHANGE_OP_UNSPECIFIED = 0;

    // Adds a new or replaces an existing mapping
    TOPOLOGY_CHANGE_OP_ADD_REPLACE = 1;

    // Remove an existing mapping
    TOPOLOGY_CHANGE_OP_REMOVE = 2;
  }

  // enum indicating the participant permission level
  // Regardless of the ParticipantPermission level, all participants can submit a reassignment.
  enum ParticipantPermission {
    PARTICIPANT_PERMISSION_UNSPECIFIED = 0;

    // participant is active, can submit transactions and reassignments
    PARTICIPANT_PERMISSION_SUBMISSION = 1;

    // participant is passive, can only confirm transactions and submit reassignments
    PARTICIPANT_PERMISSION_CONFIRMATION = 2;

    // participant is passive, can only observe transactions and submit reassignments
    PARTICIPANT_PERMISSION_OBSERVATION = 3;
  }
}

// namespace delegation (equivalent to X509v3 CA root or intermediate CAs)
// if is_root_delegation==false, the target key may sign all mappings requiring a signature
// for the namespace except other NamespaceDelegation mappings.
// authorization: a namespace delegation is either signed by the root key, or is signed by
//   a key for which there exists a series of properly authorized namespace delegations
//   that are ultimately signed by the root key
// UNIQUE(namespace, target_key)
message NamespaceDelegation {
  // fingerprint of the root key defining the namespace
  string namespace = 1;

  // target key of getting full rights on the namespace (if target == namespace, it's a root CA)
  com.digitalasset.canton.crypto.v30.SigningPublicKey target_key = 2;
  // flag indicating whether the given delegation is a root delegation or not
  // a root delegation is also allowed to issue other NamespaceDelegations.
  bool is_root_delegation = 3;
}

// a decentralized namespace definition that creates a new namespace supported by the
// the original owners
// authorization: the decentralized namespace definition with serial = 1 must be authorized by all the
//   owners of the namespace that form the decentralized namespace.
//   for definitions with serial > 1, we need the authorization of #threshold owners plus
//   all new owners
//
//   any further transaction within the decentralized namespace other than decentralized namespace definitions needs
//   #threshold signatures of the owners
//
// UNIQUE(decentralized_namespace)
message DecentralizedNamespaceDefinition {
  // name of the decentralized namespace, computed from the hash of its initial owners
  string decentralized_namespace = 1;

  // the threshold required for any subsequent update signing
  int32 threshold = 2;

  // the namespaces of the owners
  repeated string owners = 3;
}

// identifier delegation giving right to issue topology transaction on that particular identifier
// authorization: must have sufficient signatures by keys of the namespace of the given unique
//   identifier. If the identifier is for a consortium, it can mean that we need multiple signatures
// UNIQUE (all fields)
message IdentifierDelegation {
  // identifier
  string unique_identifier = 1;

  // target key getting the right
  com.digitalasset.canton.crypto.v30.SigningPublicKey target_key = 2;
}

// mapping a member (participant, mediator, sequencer) to a key
// authorization: whoever controls the member uid
// UNIQUE(member)
message OwnerToKeyMapping {
  // the sequencing process member
  string member = 1;

  // the designated keys
  repeated com.digitalasset.canton.crypto.v30.PublicKey public_keys = 2;

  reserved 3; // was synchronizer = 3;
}

// mapping a party to a key
// authorization: whoever controls the party uid
// UNIQUE(party)
message PartyToKeyMapping {
  // the party
  string party = 1;
  // the authorization threshold
  uint32 threshold = 3;
  // the designated signing keys
  repeated com.digitalasset.canton.crypto.v30.SigningPublicKey signing_keys = 4;

  reserved 2; // was synchronizer_id = 2
}

// the trust certificate issued by the participant confirming that the participant
// wishes to be present on the given synchronizer
// authorization: whoever controls the participant uid
// UNIQUE(participant,synchronizer_id)
message SynchronizerTrustCertificate {
  // the uid of the participant
  string participant_uid = 1;

  // the uid of the synchronizer that the participant trusts
  string synchronizer_id = 2;

  reserved 3; // was bool reassignment_only_to_given_target_synchronizer_ids = 3;

  reserved 4; // was repeated string target_synchronizer_ids = 4;
}

// the optional trust certificate of the synchronizer towards the participant
// authorization: whoever controls the synchronizer id
// UNIQUE(synchronizer_id,participant)
message ParticipantSynchronizerPermission {
  string synchronizer_id = 1;
  string participant_uid = 2;

  // the permission level of the participant on this synchronizer (usually submission)
  Enums.ParticipantPermission permission = 3;

  // optional individual limits for this participant
  ParticipantSynchronizerLimits limits = 4;

  // optional earliest time when participant can log in (again)
  // used to temporarily disable participants
  // In microseconds of UTC time since Unix epoch
  optional int64 login_after = 5;
}

// the optional hosting limits for a party on a given synchronizer
// these limits can be used to limit the number of participants that can host a given party
// authorization: whoever controls the synchronizer id
// UNIQUE(synchronizer_id,party)
message PartyHostingLimits {
  string synchronizer_id = 1;
  string party = 2;
  reserved 3; // was quota = 3;
}

// list of packages supported by this participant
// authorization: whoever controls the participant uid
// UNIQUE(participant)
message VettedPackages {
  message VettedPackage {
    // the hash of the vetted package
    string package_id = 1;
    // optional earliest ledger effective time (exclusive) as of which the package is considered valid.
    // must be less than or equal to valid_until if both are present.
    google.protobuf.Timestamp valid_from = 2;
    // optional latest ledger effective time (inclusive) until which the package is considered valid.
    // must be greater than or equal to valid_from if both are present.
    google.protobuf.Timestamp valid_until = 3;
  }
  // the participant vetting the packages
  string participant_uid = 1;

  // DEPRECATED: no longer used, but kept for backwards compatibility.
  // the hashes of the vetted packages.
  // package hashes may only be listed in one of the two fields: package_ids or packages.
  // a package listed in package_ids is equivalent to a package listed in packages with unbounded validity.
  repeated string package_ids = 2 [deprecated = true];

  // the hashes of vetted packages with a validity period.
  // only one entry per package_id is permitted.
  repeated VettedPackage packages = 4;

  reserved 3; // was synchronizer_id = 3;
}

// mapping that maps a party to a participant
// authorization: whoever controls the party and all the owners of the participants that
//   were not already present in the tx with serial = n - 1
//   exception:
//     - a participant can disassociate itself with the party unilaterally as long there will be
//       enough participants to reach "threshold" during confirmation. The disassociating participant
//       must lower the threshold by one, if otherwise the number of hosting participants would go
//       below the threshold.
// UNIQUE(party)
message PartyToParticipant {
  message HostingParticipant {
    // the target participant that the party should be mapped to
    string participant_uid = 1;

    // permission of the participant for this particular party (the actual
    // will be min of ParticipantSynchronizerPermission.ParticipantPermission and this setting)
    Enums.ParticipantPermission permission = 2;
  }

  // the party that is to be represented by the participants
  string party = 1;

  // the signatory threshold required by the participants to be able to act on behalf of the party.
  // a mapping with threshold > 1 is considered a definition of a consortium party
  uint32 threshold = 2;

  // which participants will host the party.
  // if threshold > 1, must be Confirmation or Observation
  repeated HostingParticipant participants = 3;

  reserved 4; // was group_addressing = 4;

  reserved 5; // was synchronizer = 5;
}

// which dynamic synchronizer parameters are supposed to be used on the given synchronizer
// authorization: whoever controls the synchronizer
// UNIQUE(synchronizer_id)
message SynchronizerParametersState {
  // synchronizer affected by the new synchronizer parameters
  string synchronizer_id = 1;

  DynamicSynchronizerParameters synchronizer_parameters = 2;
}

// which sequencing dynamic parameters are supposed to be used on the given synchronizer; defaults are used when not set
// authorization: whoever controls the synchronizer
// UNIQUE(synchronizer_id)
message DynamicSequencingParametersState {
  // synchronizer affected by the new synchronizer parameters
  string synchronizer_id = 1;

  DynamicSequencingParameters sequencing_parameters = 2;
}

// which mediators and mediator groups are active on the given synchronizer
// authorization: whoever controls the synchronizer
// UNIQUE(synchronizer_id, group)
message MediatorSynchronizerState {
  // the synchronizer id of the mediator group
  string synchronizer_id = 1;

  // the group-id used for sharding multiple mediator groups
  uint32 group = 2;

  // the signature threshold required to reach consensus among the mediators
  uint32 threshold = 3;

  // the list of active mediators (uid) within the group
  repeated string active = 4;

  // the list of observing mediators (uid) within the group (read messages but don't respond)
  repeated string observers = 5;
}

// which sequencers are active on the given synchronizer
// authorization: whoever controls the synchronizer
// UNIQUE(synchronizer_id)
message SequencerSynchronizerState {
  // the synchronizer id of the sequencer group
  string synchronizer_id = 1;

  // The system can tolerate up to min(threshold - 1, (activeWithSigningKey.size - 1)/3) malicious active sequencers,
  // where activeWithSigningKey is the set of sequencers from active that have an active OwnerToKeyMapping with a signing key.
  // In order to make the system resilient against f malicious active sequencers, you need to:
  // (1) configure threshold := f + 1,
  // (2) possibly add active sequencers such that f <= (activeWithSigningKey.size - 1)/3.
  // (3) possibly register signing keys for active sequencers,
  uint32 threshold = 2;

  // the list of active sequencers
  // If a sequencer without an active signing key is added to this set, it has no effect on the topology state.
  repeated string active = 3;

  // the list of observing sequencers (uid) within the group (read messages but don't respond)
  repeated string observers = 4;
}

// explicitly invalidate topology transactions for good
// this can be used by the synchronizer to offboard participants forcefully or to
// remove stray topology transactions
// authorization: whoever controls the synchronizer
// UNIQUE(synchronizer_id)
message PurgeTopologyTransaction {
  // the synchronizer id
  string synchronizer_id = 1;

  // the list of mappings to remove from this synchronizer
  repeated TopologyMapping mappings = 2;
}

message TopologyMapping {
  oneof mapping {
    NamespaceDelegation namespace_delegation = 1;
    IdentifierDelegation identifier_delegation = 2;
    DecentralizedNamespaceDefinition decentralized_namespace_definition = 3;

    OwnerToKeyMapping owner_to_key_mapping = 4;

    SynchronizerTrustCertificate synchronizer_trust_certificate = 5;
    ParticipantSynchronizerPermission participant_permission = 6;
    PartyHostingLimits party_hosting_limits = 7;
    VettedPackages vetted_packages = 8;

    PartyToParticipant party_to_participant = 9;

    SynchronizerParametersState synchronizer_parameters_state = 11;
    MediatorSynchronizerState mediator_synchronizer_state = 12;
    SequencerSynchronizerState sequencer_synchronizer_state = 13;
    PurgeTopologyTransaction purge_topology_txs = 14;
    DynamicSequencingParametersState sequencing_dynamic_parameters_state = 15;

    PartyToKeyMapping party_to_key_mapping = 16;
  }
  reserved 10; // was authority_of, but cannot be reserved inside the oneof
}

message TopologyTransaction {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  Enums.TopologyChangeOp operation = 1;

  // Serial identifier of this transaction used to prevent replay attacks.
  // A topology transaction is replacing the existing transaction with serial - 1
  // that has the same unique key.
  uint32 serial = 2;

  // the element of this topology transaction
  TopologyMapping mapping = 3;
}

message SignedTopologyTransaction {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // serialized topology transaction (protobuf bytestring)
  bytes transaction = 1;

  // multiple signatures (at least one)
  repeated com.digitalasset.canton.crypto.v30.Signature signatures = 2;
  // if true, this transaction is just a proposal. this means that every signature is valid,
  // but the signatures are insufficient to properly authorize the transaction.
  // proposals are distributed via the topology channel too. proposals will be pruned automatically
  // when the nodes are pruned
  // TODO(#14045) implement pruning
  bool proposal = 3;
}

message SignedTopologyTransactions {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // serialized signed topology transaction (protobuf bytestring)
  repeated bytes signed_transaction = 1;
}

/** Accepted topology transaction
 *
 * A member sends topology transactions to the topology transaction broadcast address.
 * The transactions are validated by all members individually against their respective synchronizer store,
 * including the member the submitted the broadcast.
 */
message TopologyTransactionsBroadcast {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  string synchronizer_id = 1;
  SignedTopologyTransactions signed_transactions = 2;
}
