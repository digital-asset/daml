// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "google/protobuf/duration.proto";
import "scalapb/scalapb.proto";

message TrafficControlParameters {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  // In bytes, the maximum amount of base traffic that can be accumulated
  uint64 max_base_traffic_amount = 1;

  // Maximum duration over which the base rate can be accumulated
  // Consequently, base_traffic_rate = max_base_traffic_amount / max_base_traffic_accumulation_duration
  google.protobuf.Duration max_base_traffic_accumulation_duration = 3;

  // Read scaling factor to compute the event cost. In parts per 10 000.
  uint32 read_vs_write_scaling_factor = 4;

  // Window size used to compute the max sequencing time of a submission request
  // This impacts how quickly a submission is expected to be accepted before a retry should be attempted by the caller
  google.protobuf.Duration set_balance_request_submission_window_size = 5;

  // If true, submission requests without enough traffic credit will not be delivered
  bool enforce_rate_limiting = 6;
}

// Message representing traffic consumed by a member at a given point in time
message TrafficConsumed {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";
  // Member consuming the traffic
  string member = 1;
  // Total extra traffic consumed (that is traffic purchased via balance updates)
  uint64 extra_traffic_consumed = 2;
  // Remaining free base traffic
  uint64 base_traffic_remainder = 3;
  // Timestamp at which this state is valid - this timestamp is used to compute the base traffic remainder above
  int64 sequencing_timestamp = 4; // in microseconds of UTC time since Unix epoch
}

// Message representing a traffic purchase made on behalf of a member
message TrafficPurchased {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";
  // Member receiving the traffic
  string member = 1;
  // Serial of the update
  uint32 serial = 2;
  // New total extra traffic purchased
  uint64 extra_traffic_purchased = 3;
  // Timestamp at which the update was sequenced
  int64 sequencing_timestamp = 4; // // in microseconds of UTC time since Unix epoch
}

message SetTrafficPurchasedMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  // Member to update the balance for
  string member = 1;
  // Serial number - must be unique and monotonically increasing for each new purchase update
  uint32 serial = 2;
  // New total traffic purchased entry
  uint64 total_traffic_purchased = 4;
  // Domain Id
  string domain_id = 5;
}
