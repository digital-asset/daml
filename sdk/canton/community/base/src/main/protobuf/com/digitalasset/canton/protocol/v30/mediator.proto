// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.protocol.v30;

import "com/digitalasset/canton/protocol/v30/common.proto";
import "com/digitalasset/canton/protocol/v30/confirmation_response.proto";
import "com/digitalasset/canton/protocol/v30/merkle.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";
import "scalapb/scalapb.proto";

// Messages related to the transaction or reassignment protocol sent by a mediator

message InformeeTree {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StableProtoVersion";

  GenTransactionTree tree = 1;
}

message ParticipantReject {
  repeated RejectionReason reasons = 1;
}

message RejectionReason {
  repeated string parties = 1;
  com.digitalasset.canton.protocol.v30.LocalVerdict reject = 2;
}

message MediatorReject {
  google.rpc.Status reason = 1; // Must not be OK
  bool is_malformed = 2; // True if the request has been recognized as malformed.
}

message Verdict {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  oneof some_verdict {
    google.protobuf.Empty approve = 1;
    com.digitalasset.canton.protocol.v30.ParticipantReject participant_reject = 2;
    com.digitalasset.canton.protocol.v30.MediatorReject mediator_reject = 3;
  }
}

// This covers transactions and reassignments
message ConfirmationResultMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  string synchronizer_id = 1;
  com.digitalasset.canton.protocol.v30.ViewType view_type = 2;
  int64 request_id = 3;
  bytes root_hash = 4;
  Verdict verdict = 5;
}
