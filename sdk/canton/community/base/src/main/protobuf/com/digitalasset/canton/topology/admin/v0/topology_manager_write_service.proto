// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.topology.admin.v0;

import "com/digitalasset/canton/crypto/v0/crypto.proto";
import "com/digitalasset/canton/protocol/v0/sequencing.proto";
import "com/digitalasset/canton/protocol/v0/topology.proto";
import "com/digitalasset/canton/protocol/v1/sequencing.proto";
import "com/digitalasset/canton/protocol/v2/domain_params.proto";

/**
 * Write operations on the local topology manager.
 *
 * Both, participant and domain run a local topology manager exposing the same write interface.
 */
service TopologyManagerWriteService {
  /**
   * Authorizes a party to participant mapping change (add/remove) on the node local topology manager.
   */
  rpc AuthorizePartyToParticipant(PartyToParticipantAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes an owner to key mapping change (add/remove) on the local topology manager
   */
  rpc AuthorizeOwnerToKeyMapping(OwnerToKeyMappingAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a namespace delegation (root or intermediate CA) (add/remove) on the local topology manager
   */
  rpc AuthorizeNamespaceDelegation(NamespaceDelegationAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a new identifier delegation (identifier certificate) (add/remove) on the local topology manager
   */
  rpc AuthorizeIdentifierDelegation(IdentifierDelegationAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a new package vetting transaction
   */
  rpc AuthorizeVettedPackages(VettedPackagesAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a new check-only package transaction
   */
  rpc AuthorizeCheckOnlyPackages(CheckOnlyPackagesAuthorization) returns (AuthorizationSuccess);

  /** Authorizes a change of parameters for the domain */
  rpc AuthorizeDomainParametersChange(DomainParametersChangeAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a participant domain state
   */
  rpc AuthorizeParticipantDomainState(ParticipantDomainStateAuthorization) returns (AuthorizationSuccess);

  /**
   * Authorizes a mediator domain state
   */
  rpc AuthorizeMediatorDomainState(MediatorDomainStateAuthorization) returns (AuthorizationSuccess);

  /**
   * Adds a signed topology transaction to the Authorized store
   */
  rpc AddSignedTopologyTransaction(SignedTopologyTransactionAddition) returns (AdditionSuccess);
}

message AuthorizationSuccess {
  bytes serialized = 1;
}

message AdditionSuccess {}

message SignedTopologyTransactionAddition {
  bytes serialized = 1;
}

message AuthorizationData {
  /** Add / Remove / Replace */
  com.digitalasset.canton.protocol.v0.TopologyChangeOp change = 1;

  /**
   * Fingerprint of the key signing the authorization
   *
   * The signing key is used to identify a particular `NamespaceDelegation` or `IdentifierDelegation` certificate,
   * which is used to justify the given authorization.
   */
  string signed_by = 2;

  /** if true, the authorization will also replace the existing (makes only sense for adds) */
  bool replace_existing = 3;

  /** Force change even if dangerous */
  bool force_change = 4;
}

message NamespaceDelegationAuthorization {
  AuthorizationData authorization = 1;

  // The namespace for which the authorization is issued.
  string namespace = 2;

  /**
   * The fingerprint of the signing key which will be authorized to issue topology transactions for this namespace.
   *
   * The key needs to be present in the local key registry either by being locally
   * generated or by having been previously imported.
   */
  string fingerprint_of_authorized_key = 3;

  /**
   * Flag indicating whether authorization is a root key delegation
   */
  bool is_root_delegation = 4;
}

message IdentifierDelegationAuthorization {
  AuthorizationData authorization = 1;
  string identifier = 2;

  /**
   * The fingerprint of the signing key which will be authorized to issue topology transaction for this particular identifier.
   *
   * As with `NamespaceDelegation`s, the key needs to be present locally.
   */
  string fingerprint_of_authorized_key = 3;
}

message PartyToParticipantAuthorization {
  AuthorizationData authorization = 1;
  /**
   * The request side of this transaction
   *
   * A party to participant mapping can map a party from one namespace on a participant from another namespace.
   * Such a mapping needs to be authorized by both namespace keys. If the namespace is the same, we use
   * RequestSide.Both and collapse into a single transaction. Otherwise, `From` needs to be signed by a namespace key
   * of the party and `To` needs to be signed by a namespace key of the participant.
   */
  com.digitalasset.canton.protocol.v0.RequestSide side = 2;

  // The unique identifier of the party
  string party = 3;
  // The unique identifier of the participant
  string participant = 4;
  // The permission of the participant that will allow him to act on behalf of the party.
  com.digitalasset.canton.protocol.v0.ParticipantPermission permission = 5;
}

message OwnerToKeyMappingAuthorization {
  AuthorizationData authorization = 1;

  /**
   * The key owner
   *
   * An entity in Canton is described by his role and his unique identifier. As such, the same unique identifier
   * can be used for a mediator, sequencer, domain topology manager or even participant. Therefore, we expect
   * here the protoPrimitive of a key owner which is in effect its type as a three letter code separated
   * from the unique identifier.
   */
  string key_owner = 2;

  /**
   * The fingerprint of the key that will be authorized
   *
   * The key needs to be present in the local key registry (can be imported via KeyService)
   */
  string fingerprint_of_key = 3;

  /**
   * Purpose of the key
   */
  com.digitalasset.canton.crypto.v0.KeyPurpose key_purpose = 4;
}

message ParticipantDomainStateAuthorization {
  AuthorizationData authorization = 1;
  /** which side (domain or participant) is attempting to issue the authorization */
  com.digitalasset.canton.protocol.v0.RequestSide side = 2;
  /** domain this authorization refers to */
  string domain = 3;
  /** participant that should be authorized */
  string participant = 4;
  /** permission that should be used (lower of From / To) */
  com.digitalasset.canton.protocol.v0.ParticipantPermission permission = 5;
  /** trust level that should be used (ignored for side from, defaults to Ordinary) */
  com.digitalasset.canton.protocol.v0.TrustLevel trust_level = 6;
}

message MediatorDomainStateAuthorization {
  AuthorizationData authorization = 1;
  /** which side (domain or mediator) is attempting to issue the authorization */
  com.digitalasset.canton.protocol.v0.RequestSide side = 2;
  /** domain this authorization refers to */
  string domain = 3;
  /** mediator that should be authorized */
  string mediator = 4;
}

message VettedPackagesAuthorization {
  AuthorizationData authorization = 1;
  string participant = 2;
  repeated string package_ids = 3;
}

message CheckOnlyPackagesAuthorization {
  AuthorizationData authorization = 1;
  string participant = 2;
  repeated string package_ids = 3;
}

message DomainParametersChangeAuthorization {
  AuthorizationData authorization = 1;
  /** domain this authorization refers to */
  string domain = 2;
  /** new parameters for the domain */
  oneof parameters {
    com.digitalasset.canton.protocol.v0.DynamicDomainParameters parameters_v0 = 3;
    com.digitalasset.canton.protocol.v1.DynamicDomainParameters parameters_v1 = 4;
    com.digitalasset.canton.protocol.v2.DynamicDomainParameters parameters_v2 = 5;
  }
}
