// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.protocol.v30;

import "com/digitalasset/canton/protocol/v30/participant_transaction.proto";
import "com/digitalasset/canton/protocol/v30/participant_transfer.proto";
import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";

// LedgerSyncEvent is a canton type alias for the daml-on-x com.daml.ledger.participant.state.v2.Update
message LedgerSyncEvent {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.StorageProtoVersion";

  oneof value {
    PartyAddedToParticipant party_added_to_participant = 1;
    TransactionAccepted transaction_accepted = 2;
    CommandRejected command_rejected = 3;
    PartyAllocationRejected party_allocation_rejected = 4;
    TransferredOut transferred_out = 5;
    TransferredIn transferred_in = 6;
    ContractsAdded contracts_added = 7;
    ContractsPurged contracts_purged = 8;
    PartiesAddedToParticipant parties_added = 9;
    PartiesRemovedFromParticipant parties_removed = 10;
    Init init = 11;
  }
}

message PartyAddedToParticipant {
  string party = 1;
  string display_name = 2;
  string participant_id = 3;
  int64 record_time = 4; // in microseconds of UTC time since Unix epoch
  string submission_id = 5;
}

message PartyAllocationRejected {
  string submission_id = 1;
  string participant_id = 2;
  int64 record_time = 3; // in microseconds of UTC time since Unix epoch
  string rejection_reason = 4;
}

message TransactionAccepted {
  CompletionInfo completion_info = 1;
  TransactionMeta transaction_meta = 2;
  bytes transaction = 3;
  string transaction_id = 4;
  int64 record_time = 5; // in microseconds of UTC time since Unix epoch
  repeated DivulgedContract divulged_contracts = 6;
  BlindingInfo blinding_info = 7; // optional
  map<string, bytes> contract_metadata = 8; //optional
  repeated string hosted_witnesses = 9; // not empty in case multi-domain deployment, empty otherwise
  string domain_id = 10;
}

message CompletionInfo {
  repeated string act_as = 1;
  string application_id = 2;
  string command_id = 3;
  com.digitalasset.canton.protocol.v30.DeduplicationPeriod opt_deduplication_period = 4;
  string submission_id = 5;
}

message TransactionMeta {
  int64 ledger_time = 1; // in microseconds of UTC time since Unix epoch
  google.protobuf.StringValue workflow_id = 2;
  int64 submission_time = 3; // in microseconds of UTC time since Unix epoch
  bytes submission_seed = 4;
  repeated string used_packages = 5;
  repeated NodeSeed node_seeds = 6;
  ByKeyNodes by_key_nodes = 7; // optional

  message ByKeyNodes {
    repeated int32 by_key_node = 1;
  }
}

message NodeSeed {
  int32 node_index = 1;
  bytes node_seed = 2;
}

message DivulgedContract {
  string contract_id = 1;
  bytes contract_inst = 2;
}

message BlindingInfo {
  map<int32, Parties> disclosure = 1;
  map<string, Parties> divulgence = 2;
}

message Parties {
  repeated string parties = 1;
}

enum CommandKind {
  COMMAND_KIND_TRANSACTION_UNSPECIFIED = 0;
  COMMAND_KIND_TRANSFER_OUT = 1;
  COMMAND_KIND_TRANSFER_IN = 2;
}

message CommandRejected {
  CompletionInfo completion_info = 1;
  int64 record_time = 2; // in microseconds of UTC time since Unix epoch
  GrpcRejectionReasonTemplate rejection_reason = 3;
  // Is always a `com.daml.ledger.participant.state.v2.FinalReason`
  message GrpcRejectionReasonTemplate {
    bytes status = 1;
  }
  CommandKind command_kind = 4;
  string domain_id = 5;
}

message TransferredOut {
  string update_id = 1;
  CompletionInfo completion_info = 2; // optional
  string submitter = 3; // optional
  int64 record_time = 4; // in microseconds of UTC time since Unix epoch
  string contract_id = 5;
  repeated string contract_stakeholders = 6;
  string source_domain = 7;
  string target_domain = 8;
  google.protobuf.Int64Value transfer_in_exclusivity = 9; // in microseconds of UTC time since Unix epoch
  string workflow_id = 10; // optional
  string template_id = 11; // optional
  bool is_transferring_participant = 12;
  repeated string hosted_stakeholders = 13;
  int64 transfer_counter = 14;
  string package_name = 15;
}

message TransferredIn {
  string update_id = 1;
  CompletionInfo completion_info = 2; // optional
  string submitter = 3; // optional
  int64 record_time = 4; // in microseconds of UTC time since Unix epoch
  int64 ledger_create_time = 5; // in microseconds of UTC time since Unix epoch
  bytes create_node = 6;
  string creating_transaction_id = 7;
  bytes contract_metadata = 8;
  com.digitalasset.canton.protocol.v30.TransferId transfer_out_id = 9;
  string target_domain = 10;
  string workflow_id = 11; // optional
  bool is_transferring_participant = 12;
  repeated string hosted_stakeholders = 13;
  int64 transfer_counter = 14;
}

message ContractsAdded {
  string transaction_id = 1;
  repeated bytes contracts = 2;
  string domain_id = 3;
  int64 ledger_time = 4; // in microseconds of UTC time since Unix epoch
  int64 record_time = 5; // in microseconds of UTC time since Unix epoch
  repeated string hosted_witnesses = 6;
  map<string, bytes> contract_metadata = 7;
  string workflow_id = 8;
}

message ContractsPurged {
  string transaction_id = 1;
  repeated bytes contracts = 2;
  string domain_id = 3;
  int64 record_time = 4; // in microseconds of UTC time since Unix epoch
  repeated string hosted_witnesses = 5;
}

message PartiesAddedToParticipant {
  repeated string parties = 1;
  string participant_id = 2;
  int64 record_time = 3; // in microseconds of UTC time since Unix epoch
  int64 effective_time = 4; // in microseconds of UTC time since Unix epoch
}

message PartiesRemovedFromParticipant {
  repeated string parties = 1;
  string participant_id = 2;
  int64 record_time = 3; // in microseconds of UTC time since Unix epoch
  int64 effective_time = 4; // in microseconds of UTC time since Unix epoch
}

message Init {
  int64 record_time = 1; // in microseconds of UTC time since Unix epoch
}
