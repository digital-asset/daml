// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.admin.v0;

import "google/protobuf/timestamp.proto";

/**
 * Inspection Service
 *
 * Supports inspecting the Participant for details about its ledger.
 * This contains only a subset of the ParticipantInspection commands that can run over the admin-api instead of requiring
 * direct access to the participant node instance.
 */
service InspectionService {
  // Lookup the domain where a contract is currently active.
  // Supports querying many contracts at once.
  rpc LookupContractDomain(LookupContractDomain.Request) returns (LookupContractDomain.Response);
  // Lookup the domain that the transaction was committed over. Can fail with NOT_FOUND if no domain was found.
  rpc LookupTransactionDomain(LookupTransactionDomain.Request) returns (LookupTransactionDomain.Response);
  // Look up the ledger offset corresponding to the timestamp, specifically the largest offset such that no later
  // offset corresponds to a later timestamp than the specified one.
  rpc LookupOffsetByTime(LookupOffsetByTime.Request) returns (LookupOffsetByTime.Response);
  // Look up the ledger offset by an index, e.g. 1 returns the first offset, 2 the second, etc.
  rpc LookupOffsetByIndex(LookupOffsetByIndex.Request) returns (LookupOffsetByIndex.Response);
  // Count in-flight submissions and transactions for a domain
  rpc CountInFlight(CountInFlight.Request) returns (CountInFlight.Response);
}

message LookupContractDomain {
  message Request {
    // set of contract ids to lookup their active domain aliases.
    repeated string contract_id = 1;
  }

  message Response {
    // map of contract id to domain alias.
    // if a request contract id from the request is missing from this map it indicates that the contract was not
    // active on any current domain.
    map<string, string> results = 1;
  }
}

message LookupTransactionDomain {
  message Request {
    // the transaction to look up
    string transaction_id = 1;
  }

  message Response {
    // the domain that the transaction was committed over
    string domain_id = 1;
  }
}

message LookupOffsetByTime {
  message Request {
    // the timestamp to look up the offset for
    google.protobuf.Timestamp timestamp = 1;
  }

  message Response {
    // the absolute offset as a string corresponding to the specified timestamp.
    // empty string if no such offset exists.
    string offset = 1;
  }
}

message LookupOffsetByIndex {
  message Request {
    // the index to look up the offset for, needs to be 1 or larger
    int64 index = 1;
  }

  message Response {
    // the absolute offset as a string corresponding to the specified index.
    // empty string if no such offset exists.
    string offset = 1;
  }
}

message CountInFlight {
  message Request {
    // the domain to query for pending submissions and in-flight transactions
    string domain_id = 1;
  }

  message Response {
    uint32 pending_submissions = 1;
    uint32 pending_transactions = 2;
  }
}
