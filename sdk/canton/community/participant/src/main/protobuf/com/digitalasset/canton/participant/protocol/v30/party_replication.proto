// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.protocol.v30;

import "com/digitalasset/canton/admin/participant/v30/active_contract.proto";
import "scalapb/scalapb.proto";

/**
 * Party replication protocol message sent by the target participant to the source participant.
 */
message PartyReplicationTargetParticipantMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  message SendAcsSnapshotUpTo {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
    // ACS snapshot contract ordinal (0-based) deterministic on the source participant. This serves as a
    // watermark specifying up to which contract ordinal inclusively the source participant is expected
    // to send ACS batches. This puts the target participant in charge of flow-controlling the rate of
    // ACS ingestion.
    // Required
    uint32 max_contract_ordinal_inclusive = 1;
  }

  oneof instruction {
    SendAcsSnapshotUpTo send_acs_snapshot_up_to = 1;
  }
}

/**
 * Party replication protocol message sent by the source participant to the target participant.
 */
message PartyReplicationSourceParticipantMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  // Batch of ACS contracts previously requested by the target participant.
  message AcsBatch {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

    // The portion of the ACS in the batch expressed as nonempty list
    // TODO(#24326) - Use a Ledger API representation instead.
    // Required
    repeated com.digitalasset.canton.admin.participant.v30.ActiveContractOld contracts = 1;
  }

  message SourceParticipantIsReady {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  }

  message EndOfACS {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  }

  oneof data_or_status {
    AcsBatch acs_batch = 1;
    SourceParticipantIsReady source_participant_is_ready = 2;
    EndOfACS end_of_acs = 3;
  }
}
