// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.admin.party.v30;

import "com/digitalasset/canton/admin/participant/v30/active_contract.proto";
import "scalapb/scalapb.proto";

message PartyReplicationInstruction {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  // ACS snapshot chunk counter (0-based) up to which the source participant is allowed to send ACS chunks
  // inclusively
  // Required
  uint32 max_counter = 1;
}

message PartyReplicationSourceMessage {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  message AcsChunk {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

    // ACS chunk counter (0-based)
    // Required
    uint32 chunk_counter = 1;

    // The portion of the ACS in the chunk expressed as nonempty list
    // TODO(#18525): Use a Ledger API representation instead.
    // Required
    repeated com.digitalasset.canton.admin.participant.v30.ActiveContract contracts = 2;
  }

  message SourceParticipantIsReady {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  }

  message EndOfACS {
    option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";
  }

  oneof data_or_status {
    AcsChunk acs_chunk = 1;
    SourceParticipantIsReady source_participant_is_ready = 2;
    EndOfACS end_of_acs = 3;
  }
}
