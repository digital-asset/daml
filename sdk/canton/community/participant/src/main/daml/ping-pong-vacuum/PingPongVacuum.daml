-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module PingPongVacuum where

import Daml.Script

import PingPong

template PingCleanup
  with
    owner: Party
    pingCid: ContractId Ping
  where
    signatory owner

    choice Process: ()
      controller owner
        do
          pingResult <- exercise pingCid Respond with winner = owner
          either
            (`exercise` Ack)
            (`exercise` ExpireExplode)
            pingResult

test_clean_ping_pong = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  pingCid <- submit alice $
    createCmd Ping with
      id = "1"
      initiator = alice
      validators = []
      responders = [bob]
      maxLevel = 0 -- will generate a Pong when Respond-ed

  -- alice can simply archive the Ping
  submit alice $
    archiveCmd pingCid

  pings <- query @Ping alice
  assertMsg "Ping did not get cleaned up" (null pings)

test_clean_ping_pong_with_validators = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  charlie <- allocateParty "Charlie"

  proposalCid <- submit alice $
    createCmd PingProposal with
      id = "1"
      initiator = alice
      candidates = [bob, charlie]
      validators = []
      responders = []
      maxLevel = 0 -- will generate a Pong when Respond-ed

  Left pingProposalCid <- submit bob $
    exerciseCmd proposalCid Accept with validator = bob

  Right pingCid <- submit charlie $
    exerciseCmd pingProposalCid Accept with validator = charlie

  -- alice cannot archive the Ping as she is not the only signatory
  submitMustFail alice $ archiveCmd pingCid

  -- but she can use the cleanup helper contract
  submit alice $
    createAndExerciseCmd PingCleanup with
        owner = alice
        pingCid
      Process

  pings <- query @Ping alice
  assertMsg "Ping did not get cleaned up" (null pings)
  pongs <- query @Pong alice
  assertMsg "Pong did not get cleaned up" (null pongs)

test_clean_ping_explode = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  pingCid <- submit alice $
    createCmd Ping with
      id = "1"
      initiator = alice
      validators = []
      responders = [bob]
      maxLevel = 1 -- will generate an Explode when Respond-ed

  -- alice could directly archive, but we use the cleanup to test it
  submit alice $
    createAndExerciseCmd PingCleanup with
        owner = alice
        pingCid
      Process

  pings <- query @Ping alice
  assertMsg "Ping did not get cleaned up" (null pings)
  explodes <- query @Explode alice
  assertMsg "Explode did not get cleaned up" (null explodes)
