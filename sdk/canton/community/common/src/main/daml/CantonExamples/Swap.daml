-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Swap where

import Daml.Script
import Iou

data IOUs = IOUs {iou1: ContractId Iou; iou2: ContractId Iou} deriving (Eq, Show)

template Swap
  with
    party1: Party
    party2: Party
    iou1: ContractId Iou
    exchangeRate: Decimal
    currencyDesired: Text
  where
    signatory party1
    observer party2

    choice Accept : IOUs
      with iou2 : ContractId Iou
      controller party2
        do
          iou2data <- fetch iou2
          iou1data <- fetch iou1
          assert (iou2data.amount.currency == currencyDesired)
          assert (iou2data.amount.value == iou1data.amount.value * exchangeRate)
          iouB <- exercise iou1 Transfer with newOwner = party2
          iouA <- exercise iou2 Transfer with newOwner = party1
          return IOUs {iou1 = iouA; iou2 = iouB}


aliceAndBobSwapIous =
  script do
    bank <- allocateParty "Bank"
    bobsBank <- allocateParty "BobsBank"
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"
    iou1 <- submit bank do createCmd $ Iou with payer=bank; owner = alice; amount = Amount {value = 1000.0; currency = "USD"}; viewers = []
    iou2 <- submit bobsBank do createCmd $ Iou with payer=bobsBank; owner = bob; amount = Amount {value = 900.0; currency = "CHF"}; viewers = []
    swap <- submit alice do createCmd $ Swap with party1 = alice; party2 = bob; iou1 = iou1; exchangeRate = 0.9; currencyDesired = "CHF"
    discloseIou <- submit alice do createCmd $ DiscloseIou with sender = alice; receiver = bob; iou = iou1
    submit alice do exerciseCmd discloseIou Disclose
    submit bob do exerciseCmd swap Accept with iou2
