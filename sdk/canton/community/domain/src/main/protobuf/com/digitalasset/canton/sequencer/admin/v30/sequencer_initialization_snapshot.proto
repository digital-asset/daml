// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.sequencer.admin.v30;

import "com/digitalasset/canton/crypto/v30/crypto.proto";
import "com/digitalasset/canton/protocol/v30/common_stable.proto";
import "com/digitalasset/canton/protocol/v30/traffic_control_parameters.proto";
import "scalapb/scalapb.proto";

message SequencerSnapshot {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.AlphaProtoVersion";

  int64 latest_timestamp = 1; // in microseconds of UTC time since Unix epoch
  uint64 last_block_height = 2;
  repeated MemberCounter head_member_counters = 3;
  SequencerPruningStatus status = 4;
  ImplementationSpecificInfo additional = 5;
  repeated InFlightAggregationWithId in_flight_aggregations = 6;
  repeated com.digitalasset.canton.protocol.v30.TrafficPurchased traffic_purchased = 7;
  repeated com.digitalasset.canton.protocol.v30.TrafficConsumed traffic_consumed = 8;

  message MemberCounter {
    string member = 1;
    int64 sequencer_counter = 2;
  }

  message InFlightAggregationWithId {
    bytes aggregation_id = 1;
    com.digitalasset.canton.protocol.v30.AggregationRule aggregation_rule = 2;
    int64 max_sequencing_time = 3; // in microseconds of UTC time since Unix epoch
    repeated AggregationBySender aggregated_senders = 4;
  }

  message AggregationBySender {
    string sender = 1;
    int64 sequencing_timestamp = 2; // in microseconds of UTC time since Unix epoch
    repeated SignaturesForEnvelope signatures_by_envelope = 3;
  }

  message SignaturesForEnvelope {
    repeated com.digitalasset.canton.crypto.v30.Signature signatures = 3;
  }
}

message SequencerMemberStatus {
  string member = 1;
  int64 registered_at = 2; // in microseconds of UTC time since Unix epoch
  optional int64 last_acknowledged = 3; // in microseconds of UTC time since Unix epoch
  bool enabled = 4;
}

message SequencerPruningStatus {
  // current time according to the sequencer in microseconds of UTC time since Unix epoch
  int64 now = 1;
  // the earliest event we are currently storing in microseconds of UTC time since Unix epoch
  int64 earliest_event_timestamp = 2;
  // details of each member registered on the sequencer
  repeated SequencerMemberStatus members = 3;
}

// additional sequencer implementation specific piece of data
message ImplementationSpecificInfo {
  string implementation_name = 1;
  bytes info = 2;
}
