// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.domain.admin.v2;

import "com/digitalasset/canton/protocol/v1/sequencing.proto";
import "com/digitalasset/canton/topology/admin/v0/topology_ext.proto";
import "scalapb/scalapb.proto";

// Service allowing a Domain node to initialize the sequencer instance.
// Should typically only be exposed to the domain node and not all clients
service SequencerInitializationService {
  // Initialize the Sequencer
  // If the sequencer has not been previously initialized the request must either fail or start the sequencer and return successfully.
  // The domain will expect the SequencerService to be fully available when it receives a successful response
  // and will immediately attempt to use it.
  // If the request is received after the sequencer has been successfully initialized it should return successfully
  // if the domain_id matches the domain that the sequencer has been initialized for, otherwise it should fail.
  rpc Initialize(InitializeSequencerRequest) returns (InitializeSequencerResponse);
}

// Includes sufficient detail for:
//  - the sequencer to generate its own key to return the public key to the domain node
//  - topology and additional bootstrap information
message InitializeSequencerRequest {
  // a topology snapshot up until (including) the point where this sequencer is becoming active on the domain
  // the topology snapshot will be persisted in the domain store of the sequencer
  com.digitalasset.canton.protocol.v0.TopologyTransactions topology_snapshot = 1;
  com.digitalasset.canton.protocol.v1.StaticDomainParameters domain_parameters = 2;
  // optional - snapshot to initialize sequencer from, as a versioned SequencerSnapshot of version v1 or higher
  bytes snapshot = 3;
}

message InitializeSequencerResponse {
  // Indicate if the initialized sequencer is replicated
  bool replicated = 1;
}

// Includes sufficient detail for (used in Daml 2.x):
//  - the sequencer to generate its own key to return the public key to the domain node
//  - topology and additional bootstrap information
message InitRequest {
  option (scalapb.message).companion_extends = "com.digitalasset.canton.version.UnstableProtoVersion";

  string domain_id = 1;
  // a topology snapshot up until the point where this sequencer's key is registered
  com.digitalasset.canton.protocol.v0.TopologyTransactions topology_snapshot = 2;
  com.digitalasset.canton.protocol.v1.StaticDomainParameters domain_parameters = 4;
  // optional - snapshot to initialize sequencer from, as a versioned SequencerSnapshot of version v1 or higher
  bytes snapshot = 3;
}
