-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module HealthInsurance where

import Daml.Script
{-
  Import Bank module from the bank.dar

  In the daml.yaml file of this project, we include the
  bank-0.0.1.dar as a reference, such that we can compose
  a new workflow on top of the banks workflows.

  The bank workflows don't need to be changed, extended or
  even be aware that they are referenced from another workflow.

  And also the bank will not have to install foreign DARs in its
  system. The bank will only see people transacting on the bank
  contracts.
-}
import Bank

{-
  Simple definition of a treatment as a text string.

  We will use the treatment definition in order to simulate the
  treatment catalogue included in an health insurance policy.
-}
type Treatment = Text

-- Type alias for a Claim and Policy instance
type ClaimId = ContractId Claim
type PolicyId = ContractId Policy

addOnce : [Party] -> Party -> [Party]
addOnce list party = if (any (\x -> x == party) list) then list else party :: list

{-
  Health care insurance policy

  We simplistically model the insurance policy here as a contract
  between the insurer and a client, which includes the set of
  treatments included in this policy.
-}
template Policy
  with
    insurer : Party
    client : Party
    paymentBank : Party
    treatments : [Treatment]
    observers : [Party]
  where

    signatory insurer
    observer client, observers

    {-
      Claim a treatment

      The only choice included in this contract is a choice that allows
      a client to create a claim for a treatment he received from
      a doctor.

      Note one special thing: the choice is non-consuming which means
      that in contrast to normal choices, exercising this choice will
      keep the insurance Policy contract active.
    -}
    nonconsuming choice CreateClaim : ClaimId
      with
        treatment : Treatment
        doctor : Party
        fee : Amount
      controller client
        do
          -- Check that claimed treatment is covered
          assert (any (\x -> x == treatment) treatments)
          -- Create a new claim for the given treatment
          create Claim with insurer, doctor, client, paymentBank, treatment, fee

    {-
      Add an observer to this contract

      This makes the given contract visible to the new observer.
    -}
    choice AddObserver : PolicyId
      with
        party : Party
      controller client
        do
          create this with observers = addOnce observers party

{-
  Claim contract representing an open claim for a received treatment

  If the insurance accepts the claim, it will have to settle it with
  a corresponding payment.
-}
template Claim
  with
    insurer : Party
    doctor : Party
    client : Party
    paymentBank : Party
    treatment : Treatment
    fee : Bank.Amount
  where

    signatory insurer
    observer doctor

    agreement "This is a honest and genuine claim by the "
      <> (show client)
      <> " for a treamtment of " <> treatment
      <> " according to the insurance plan"


    choice AcceptAndSettleClaim : Bank.CashId
      with
        cashId : Bank.CashId
      controller insurer
        do
          cash <- fetch cashId
          assert (cash.amount.quantity == fee.quantity)
          assert (cash.amount.currency == fee.currency)
          assert (cash.bank == paymentBank)
          exercise cashId Transfer with newOwner = doctor

setup = script do

  let treatments = ["GeneralCounsel", "Flu-shot", "Hip-replacement"]
  client <- allocateParty "Alice"
  insurer <- allocateParty "Insurance"
  bank <- allocateParty "Bank"

  policyId <- submit insurer do
    createCmd Policy with insurer, client, paymentBank = bank, treatments, observers = []

  return (client, insurer, policyId)

test = script do

  doctor <- allocateParty "Doctor"
  bank <- allocateParty "Bank"

  (client, insurer, ip) <- HealthInsurance.setup
  (bank, doctor, doctorCash, insurer, insurerCash) <- Bank.setup

  claim <- submit client do
    exerciseCmd ip CreateClaim with
      treatment = "Flu-shot"
      doctor = doctor
      fee = (Bank.money 10)

  (insurerSplit, insurerAccount) <- submit insurer do
    exerciseCmd insurerCash Split with quantity = 10
  cashO <- submit insurer do
    exerciseCmd claim AcceptAndSettleClaim with cashId = insurerSplit

  submit doctor do
    exerciseCmd doctorCash Merge with cashId = cashO

  return (client, insurer, doctor, bank, ip)
