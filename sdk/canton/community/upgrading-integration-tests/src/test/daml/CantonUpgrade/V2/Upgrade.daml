{-# LANGUAGE CPP #-}

module Upgrade where

import UpgradeIf

template Upgrading with
  issuer : Party
  owner : Party
  field : Int
  more : Optional[Text]
 where
  signatory issuer
  observer owner

  choice ChangeOwner : ContractId Upgrading
      with newOwner: Party
    controller owner
      do create this with owner = newOwner, field = field + 2

  choice Upgrading_Fetch : Upgrading
      with fetcher: Party
      controller fetcher
      do pure this

--
-- Interface Testing
--

template UpgradeItTemplate with
    owner : Party
  where
  signatory owner

  interface instance UpgradeIf.UpgradeItInterface for UpgradeItTemplate where
    view = UpgradeIf.UpgradeItView with view_party = owner
    version = 2

template UpgradeItCallInterface with
    owner : Party
  where
  signatory owner

  nonconsuming choice UpgradeItCallStamp : ()
        with
          ifId: ContractId UpgradeItInterface
    controller owner
        do exercise ifId UpgradeIf.UpgradeItStamp with context = "indirect"

  nonconsuming choice UpgradeItIfFetch : ()
        with
          ifId: ContractId UpgradeItInterface
    controller owner
        do
          fetchFromInterface @UpgradeItInterface ifId
          pure ()

-- Inter view upgrade testing

template InterView with
  alice: Party
  bob: Party
 where
  signatory alice
  nonconsuming choice DelegateChoice: ()
    controller alice
    do
      let ifaceInst = toInterfaceContractId @IFace self
      exercise ifaceInst IfDispatchChoice

  interface instance IFace for InterView where
    view = EmptyInterfaceView
    controllerMethod = alice
    observerMethod = bob

--
-- Conformance Testing
--

template Quote
  with
    issuer: [Party]
    observer: [Party]
    stockName: Text
    value: Int
  where
    signatory issuer
    observer observer

    nonconsuming choice Q_Fetch: Quote
      with fetcher: Party
      controller fetcher
      do pure this

    interface instance IQuote for Quote where
      view = EmptyInterfaceView

template FetchQuote
  with
    fetcher: Party
    confirmer: Party
    observer: Party
  where
    signatory [fetcher, confirmer]
    observer observer

    nonconsuming choice FQ_IFetch: ()
      with iid: ContractId IQuote
      controller fetcher
      do
        quote <- fetch iid
        pure ()

    nonconsuming choice FQ_ExFetch: Quote
      with cid: ContractId Quote
      controller fetcher
      do
        quote <- exercise cid Q_Fetch with fetcher = fetcher
        pure quote

    choice FQ_ObserverConfirms: ContractId FetchQuote
      controller observer
      do
        create this with confirmer = observer

    choice FQ_ConFetch: Quote
      with cid: ContractId Quote
      controller fetcher
      do
        quote <- exercise cid Q_Fetch with fetcher = fetcher
        pure quote

    nonconsuming choice FQ_RawFetch: Quote
      with cid: ContractId Quote
      controller fetcher
      do
        quote <- fetch cid
        pure quote

template SigStakeInf with
  owner : Party
  observerParty: Party
 where
  signatory owner -- owner confirms
  observer observerParty -- observer observes

  choice SigStakeInf_NoOp : ()
    with submitter: Party -- submitter confirms but needs explicit disclosure if not a stakeholder
    controller submitter
    do pure ()
