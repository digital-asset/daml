// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/commands.proto";
import "com/daml/ledger/api/v2/transaction.proto";
import "com/daml/ledger/api/v2/transaction_filter.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "CommandServiceOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Command Service is able to correlate submitted commands with completion data, identify timeouts, and return contextual
// information with each tracking result. This supports the implementation of stateless clients.
//
// Note that submitted commands generally produce completion events as well, even in case a command gets rejected.
// For example, the participant SHOULD produce a completion event for a rejection of a duplicate command.
service CommandService {
  // Submits a single composite command and waits for its result.
  // Propagates the gRPC error of failed submissions including Daml interpretation errors.
  rpc SubmitAndWait(SubmitAndWaitRequest) returns (SubmitAndWaitResponse);

  // Submits a single composite command, waits for its result, and returns the transaction.
  // Propagates the gRPC error of failed submissions including Daml interpretation errors.
  rpc SubmitAndWaitForTransaction(SubmitAndWaitForTransactionRequest) returns (SubmitAndWaitForTransactionResponse);

  // TODO(i23504) Provided for backwards compatibility, it will be removed in the final version.
  // Submits a single composite command, waits for its result, and returns the transaction tree.
  // Propagates the gRPC error of failed submissions including Daml interpretation errors.
  rpc SubmitAndWaitForTransactionTree(SubmitAndWaitRequest) returns (SubmitAndWaitForTransactionTreeResponse);
}

// These commands are executed as a single atomic transaction.
message SubmitAndWaitRequest {
  // The commands to be submitted.
  // Required
  Commands commands = 1;
}

// These commands are executed as a single atomic transaction.
message SubmitAndWaitForTransactionRequest {
  // The commands to be submitted.
  // Required
  Commands commands = 1;

  // Required
  TransactionFormat transaction_format = 2;
}

message SubmitAndWaitResponse {
  // The id of the transaction that resulted from the submitted command.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // The details of the offset field are described in ``community/ledger-api/README.md``.
  // Required
  int64 completion_offset = 2;
}

message SubmitAndWaitForTransactionResponse {
  // The transaction that resulted from the submitted command.
  // The transaction might contain no events (request conditions result in filtering out all of them).
  // Required
  Transaction transaction = 1;
}

// TODO(i23504) Provided for backwards compatibility, it will be removed in the final version.
message SubmitAndWaitForTransactionTreeResponse {
  // The transaction tree that resulted from the submitted command.
  // The transaction might contain no events (request conditions result in filtering out all of them).
  // Required
  TransactionTree transaction = 1;
}
