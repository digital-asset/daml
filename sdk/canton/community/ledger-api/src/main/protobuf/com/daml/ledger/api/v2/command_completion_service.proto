// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/completion.proto";
import "com/daml/ledger/api/v2/offset_checkpoint.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "CommandCompletionServiceOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Allows clients to observe the status of their submissions.
// Commands may be submitted via the Command Submission Service.
// The on-ledger effects of their submissions are disclosed by the Update Service.
//
// Commands may fail in 2 distinct manners:
//
// 1. Failure communicated synchronously in the gRPC error of the submission.
// 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
//
// Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
// choose to produce a completion event for a rejection of a duplicate command.
//
// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
service CommandCompletionService {
  // Subscribe to command completion events.
  rpc CompletionStream(CompletionStreamRequest) returns (stream CompletionStreamResponse);
}

message CompletionStreamRequest {
  // Only completions of commands submitted with the same application_id will be visible in the stream.
  // Must be a valid ApplicationIdString (as described in ``value.proto``).
  // Required unless authentication is used with a user token or a custom token specifying an application-id.
  // In that case, the token's user-id, respectively application-id, will be used for the request's application_id.
  string application_id = 1;

  // Non-empty list of parties whose data should be included.
  // Only completions of commands for which at least one of the ``act_as`` parties is in the given set of parties
  // will be visible in the stream.
  // Must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  repeated string parties = 2;

  // This field indicates the minimum offset for completions. This can be used to resume an earlier completion stream.
  // Optional, if not set the ledger uses the ledger begin offset instead.
  // If specified, it must be a valid absolute offset (positive integer) or zero (ledger begin offset).
  // If the ledger has been pruned, this parameter must be specified and greater than the pruning offset.
  int64 begin_exclusive = 3;
}

message CompletionStreamResponse {
  oneof completion_response {
    Completion completion = 1;
    OffsetCheckpoint offset_checkpoint = 2;
  }
}
