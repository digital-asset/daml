// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "PackageReferenceOuterClass";
option java_package = "com.daml.ledger.api.v2";

message PackageReference {
  // Required
  string package_id = 1;
  // Required
  string package_name = 2;
  // Required
  string package_version = 3;
}

// A package that is vetting on a given participant and synchronizer,
// modelled after ``VettedPackage`` in `topology.proto <https://github.com/digital-asset/canton/blob/main/community/base/src/main/protobuf/com/digitalasset/canton/protocol/v30/topology.proto#L206>`_,
// enriched with the package name and version.
message VettedPackage {
  // Package ID of this package. Always present.
  string package_id = 1;

  // The time from which this package is vetted. Empty if vetting time has no
  // lower bound.
  optional google.protobuf.Timestamp valid_from_inclusive = 2;

  // The time until which this package is vetted. Empty if vetting time has no
  // upper bound.
  optional google.protobuf.Timestamp valid_until_exclusive = 3;

  // Name of this package.
  // Only available if the package has been uploaded to the current participant.
  optional string package_name = 4;

  // Version of this package.
  // Only available if the package has been uploaded to the current participant.
  optional string package_version = 5;
}

// The list of packages vetted on a given participant and synchronizer, modelled
// after ``VettedPackages`` in `topology.proto <https://github.com/digital-asset/canton/blob/main/community/base/src/main/protobuf/com/digitalasset/canton/protocol/v30/topology.proto#L206>`_.
// The list only contains packages that matched a filter in the query that
// originated it.
message VettedPackages {
  // Sorted by package_name and package_version where known, and package_id as a
  // last resort.
  repeated VettedPackage packages = 1;

  // Participant on which these packages are vetted. Always present.
  string participant_id = 2;

  // Synchronizer on which these packages are vetted. Always present.
  string synchronizer_id = 3;

  // Serial of last ``VettedPackages`` topology transaction of this participant
  // and on this synchronizer.
  uint32 topology_serial = 4;
}
