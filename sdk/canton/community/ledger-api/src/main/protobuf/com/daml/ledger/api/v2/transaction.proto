// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/event.proto";
import "com/daml/ledger/api/v2/trace_context.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "TransactionOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Each tree event message type below contains a ``witness_parties`` field which
// indicates the subset of the requested parties that can see the event
// in question.
//
// Note that transaction trees might contain events with
// _no_ witness parties, which were included simply because they were
// children of events which have witnesses.
message TreeEvent {
  oneof kind {
    CreatedEvent created = 1;
    ExercisedEvent exercised = 2;
  }
}

// Complete view of an on-ledger transaction.
message TransactionTree {
  // Assigned by the server. Useful for correlating logs.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string command_id = 2;

  // The workflow ID used in command submission. Only set if the ``workflow_id`` for the command was set.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 3;

  // Ledger effective time.
  // Required
  google.protobuf.Timestamp effective_at = 4;

  // The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
  // Required, it is a valid absolute offset (positive integer).
  int64 offset = 5;

  // Changes to the ledger that were caused by this transaction. Nodes of the transaction tree.
  // Each key must be a valid LedgerString (as describe in ``value.proto``).
  // Required
  map<string, TreeEvent> events_by_id = 6;

  // Roots of the transaction tree.
  // Each element must be a valid LedgerString (as describe in ``value.proto``).
  // The elements are in the same order as the commands in the
  // corresponding Commands object that triggered this transaction.
  // Required
  repeated string root_event_ids = 7;

  // A valid domain ID.
  // Identifies the domain that synchronized the transaction.
  // Required
  string domain_id = 8;

  // Optional; ledger api trace context
  //
  // The trace context transported in this message corresponds to the trace context supplied
  // by the client application in a HTTP2 header of the original command submission.
  // We typically use a header to transfer this type of information. Here we use message
  // body, because it is used in gRPC streams which do not support per message headers.
  // This field will be populated with the trace context contained in the original submission.
  // If that was not provided, a unique ledger-api-server generated trace context will be used
  // instead.
  TraceContext trace_context = 9;

  // The time at which the transaction was recorded. The record time refers to the domain
  // which synchronized the transaction.
  // Required
  google.protobuf.Timestamp record_time = 10;
}

// Filtered view of an on-ledger transaction's create and archive events.
message Transaction {
  // Assigned by the server. Useful for correlating logs.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string command_id = 2;

  // The workflow ID used in command submission.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 3;

  // Ledger effective time.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  google.protobuf.Timestamp effective_at = 4;

  // The collection of events.
  // Only contains ``CreatedEvent`` or ``ArchivedEvent``.
  // Required
  repeated Event events = 5;

  // The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
  // Required, it is a valid absolute offset (positive integer).
  int64 offset = 6;

  // A valid domain ID.
  // Identifies the domain that synchronized the transaction.
  // Required
  string domain_id = 7;

  // Optional; ledger api trace context
  //
  // The trace context transported in this message corresponds to the trace context supplied
  // by the client application in a HTTP2 header of the original command submission.
  // We typically use a header to transfer this type of information. Here we use message
  // body, because it is used in gRPC streams which do not support per message headers.
  // This field will be populated with the trace context contained in the original submission.
  // If that was not provided, a unique ledger-api-server generated trace context will be used
  // instead.
  TraceContext trace_context = 8;

  // The time at which the transaction was recorded. The record time refers to the domain
  // which synchronized the transaction.
  // Required
  google.protobuf.Timestamp record_time = 9;
}
