// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/value.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "CommandsOuterClass";
option java_package = "com.daml.ledger.api.v2";

// A command can either create a new contract or exercise a choice on an existing contract.
message Command {
  oneof command {
    CreateCommand create = 1;
    ExerciseCommand exercise = 2;
    ExerciseByKeyCommand exercise_by_key = 4;
    CreateAndExerciseCommand create_and_exercise = 3;
  }
}

// Create a new contract instance based on a template.
message CreateCommand {
  // The template of contract the client wants to create.
  // Required
  Identifier template_id = 1;

  // The arguments required for creating a contract from this template.
  // Required
  Record create_arguments = 2;
}

// Exercise a choice on an existing contract.
message ExerciseCommand {
  // The template of contract the client wants to exercise.
  // Required
  Identifier template_id = 1;

  // The ID of the contract the client wants to exercise upon.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string contract_id = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``)
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}

// Exercise a choice on an existing contract specified by its key.
message ExerciseByKeyCommand {
  // The template of contract the client wants to exercise.
  // Required
  Identifier template_id = 1;

  // The key of the contract the client wants to exercise upon.
  // Required
  Value contract_key = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``)
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}

// Create a contract and exercise a choice on it in the same transaction.
message CreateAndExerciseCommand {
  // The template of the contract the client wants to create.
  // Required
  Identifier template_id = 1;

  // The arguments required for creating a contract from this template.
  // Required
  Record create_arguments = 2;

  // The name of the choice the client wants to exercise.
  // Must be a valid NameString (as described in ``value.proto``).
  // Required
  string choice = 3;

  // The argument for this choice.
  // Required
  Value choice_argument = 4;
}

// An additional contract that is used to resolve
// contract & contract key lookups.
message DisclosedContract {
  // The template id of the contract.
  // Required
  Identifier template_id = 1;
  // The contract id
  // Required
  string contract_id = 2;

  // Opaque byte string containing the complete payload required by the Daml engine
  // to reconstruct a contract not known to the receiving participant.
  // Required
  bytes created_event_blob = 3;

  // The ID of the domain where the contract is currently assigned
  // Optional
  string domain_id = 4;
}

// A composite command that groups multiple commands together.
message Commands {
  // Identifier of the on-ledger workflow that this command is a part of.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string workflow_id = 1;

  // Uniquely identifies the application or participant user that issued the command.
  // Must be a valid ApplicationIdString (as described in ``value.proto``).
  // Required unless authentication is used with a user token or a custom token specifying an application-id.
  // In that case, the token's user-id, respectively application-id, will be used for the request's application_id.
  string application_id = 2;

  // Uniquely identifies the command.
  // The triple (application_id, act_as, command_id) constitutes the change ID for the intended ledger change,
  // where act_as is interpreted as a set of party names.
  // The change ID can be used for matching the intended ledger changes with all their completions.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 3;

  // Individual elements of this atomic command. Must be non-empty.
  // Required
  repeated Command commands = 4;

  // Specifies the deduplication period for the change ID.
  // If omitted, the participant will assume the configured maximum deduplication time (see
  // ``ledger_configuration_service.proto``).
  oneof deduplication_period {
    // Specifies the length of the deduplication period.
    // It is interpreted relative to the local clock at some point during the submission's processing.
    // Must be non-negative. Must not exceed the maximum deduplication time (see
    // ``ledger_configuration_service.proto``).
    google.protobuf.Duration deduplication_duration = 5;

    // Specifies the start of the deduplication period by a completion stream offset (exclusive).
    // Must be a valid absolute offset (positive integer).
    int64 deduplication_offset = 6;
  }

  // Lower bound for the ledger time assigned to the resulting transaction.
  // Note: The ledger time of a transaction is assigned as part of command interpretation.
  // Use this property if you expect that command interpretation will take a considerate amount of time, such that by
  // the time the resulting transaction is sequenced, its assigned ledger time is not valid anymore.
  // Must not be set at the same time as min_ledger_time_rel.
  // Optional
  google.protobuf.Timestamp min_ledger_time_abs = 7;

  // Same as min_ledger_time_abs, but specified as a duration, starting from the time the command is received by the server.
  // Must not be set at the same time as min_ledger_time_abs.
  // Optional
  google.protobuf.Duration min_ledger_time_rel = 8;

  // Set of parties on whose behalf the command should be executed.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to act on behalf of each of the given parties.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Required, must be non-empty.
  repeated string act_as = 9;

  // Set of parties on whose behalf (in addition to all parties listed in ``act_as``) contracts can be retrieved.
  // This affects Daml operations such as ``fetch``, ``fetchByKey``, ``lookupByKey``, ``exercise``, and ``exerciseByKey``.
  // Note: A participant node of a Daml network can host multiple parties. Each contract present on the participant
  // node is only visible to a subset of these parties. A command can only use contracts that are visible to at least
  // one of the parties in ``act_as`` or ``read_as``. This visibility check is independent from the Daml authorization
  // rules for fetch operations.
  // If ledger API authorization is enabled, then the authorization metadata must authorize the sender of the request
  // to read contract data on behalf of each of the given parties.
  // Optional
  repeated string read_as = 10;

  // A unique identifier to distinguish completions for different submissions with the same change ID.
  // Typically a random UUID. Applications are expected to use a different UUID for each retry of a submission
  // with the same change ID.
  // Must be a valid LedgerString (as described in ``value.proto``).
  //
  // If omitted, the participant or the committer may set a value of their choice.
  // Optional
  string submission_id = 11;

  // Additional contracts used to resolve contract & contract key lookups.
  // Optional
  repeated DisclosedContract disclosed_contracts = 12;

  // Must be a valid domain ID
  // Optional
  string domain_id = 13;

  // The package-id selection preference of the client for resolving
  // package names and interface instances in command submission and interpretation
  repeated string package_id_selection_preference = 14;
}
