// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/commands.proto";
import "com/daml/ledger/api/v2/reassignment_command.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "CommandSubmissionServiceOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Allows clients to attempt advancing the ledger's state by submitting commands.
// The final states of their submissions are disclosed by the Command Completion Service.
// The on-ledger effects of their submissions are disclosed by the Update Service.
//
// Commands may fail in 2 distinct manners:
//
// 1. Failure communicated synchronously in the gRPC error of the submission.
// 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
//
// Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
// choose to produce a completion event for a rejection of a duplicate command.
//
// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
service CommandSubmissionService {
  // Submit a single composite command.
  rpc Submit(SubmitRequest) returns (SubmitResponse);

  // Submit a single reassignment.
  rpc SubmitReassignment(SubmitReassignmentRequest) returns (SubmitReassignmentResponse);
}

// The submitted commands will be processed atomically in a single transaction. Moreover, each ``Command`` in ``commands`` will be executed in the order specified by the request.
message SubmitRequest {
  // The commands to be submitted in a single transaction.
  // Required
  Commands commands = 1;
}

message SubmitResponse {}

message SubmitReassignmentRequest {
  // The reassignment command to be submitted.
  // Required
  ReassignmentCommand reassignment_command = 1;
}

message SubmitReassignmentResponse {}
