// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/offset_checkpoint.proto";
import "com/daml/ledger/api/v2/reassignment.proto";
import "com/daml/ledger/api/v2/topology_transaction.proto";
import "com/daml/ledger/api/v2/transaction.proto";
import "com/daml/ledger/api/v2/transaction_filter.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "UpdateServiceOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Allows clients to read updates (transactions, (un)assignments, topology events) from the ledger.
//
// ``GetUpdates`` and ``GetUpdateTrees`` provide a comprehensive stream of updates/changes
// which happened on the virtual shared ledger. These streams are indexed with ledger
// offsets, which are strictly increasing.
// The virtual shared ledger consist of changes happening on multiple synchronizers which are
// connected to the serving participant. Each update belongs to one synchronizer, this is
// provided in the result (the ``synchronizer_id`` field in ``Transaction`` and ``TransactionTree``
// for transactions, the ``source`` field in ``UnassignedEvent`` and the ``target`` field in ``AssignedEvent``).
// Consumers can rely on strong causal guarantees on the virtual shared ledger for a single
// synchronizer: updates which have greater offsets are happened after than updates with smaller
// offsets for the same synchronizer. Across different synchronizers this is not guaranteed.
service UpdateService {
  // Read the ledger's filtered update stream for the specified contents and filters.
  // It returns the event types in accordance with the stream contents selected. Also the selection criteria
  // for individual events depends on the transaction shape chosen.
  //
  // - ACS delta: a requesting party must be a stakeholder of an event for it to be included.
  // - ledger effects: a requesting party must be a witness of an en event for it to be included.
  rpc GetUpdates(GetUpdatesRequest) returns (stream GetUpdatesResponse);

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Read the ledger's complete transaction tree stream and related (un)assignments for a set of parties.
  // The stream will be filtered only by the parties as wildcard parties.
  // The template/interface filters describe the respective fields in the ``CreatedEvent`` results.
  rpc GetUpdateTrees(GetUpdatesRequest) returns (stream GetUpdateTreesResponse);

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Lookup a transaction tree by its offset.
  // For looking up a transaction instead of a transaction tree, please see GetTransactionByEventId
  // If the transaction cannot be found for the request, or all the events are filtered, a TRANSACTION_NOT_FOUND error will be raised.
  rpc GetTransactionTreeByOffset(GetTransactionByOffsetRequest) returns (GetTransactionTreeResponse);

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Lookup a transaction tree by its ID.
  // For looking up a transaction instead of a transaction tree, please see GetTransactionById
  // If the transaction cannot be found for the request, or all the events are filtered, a TRANSACTION_NOT_FOUND error will be raised.
  rpc GetTransactionTreeById(GetTransactionByIdRequest) returns (GetTransactionTreeResponse);

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Lookup a transaction by its offset.
  // If there is no transaction with this offset, or all the events are filtered, a TRANSACTION_NOT_FOUND error will be raised.
  // Use a wildcard template filter if you want to retrieve any transaction visible to the parties you can read as.
  rpc GetTransactionByOffset(GetTransactionByOffsetRequest) returns (GetTransactionResponse);

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Lookup a transaction by its ID.
  // If there is no transaction with this id, or all the events are filtered, a TRANSACTION_NOT_FOUND error will be raised.
  // Use a wildcard template filter if you want to retrieve any transaction visible to the parties you can read as.
  rpc GetTransactionById(GetTransactionByIdRequest) returns (GetTransactionResponse);

  // Lookup an update by its offset.
  // If there is no update with this offset, or all the events are filtered, an UPDATE_NOT_FOUND error will be raised.
  rpc GetUpdateByOffset(GetUpdateByOffsetRequest) returns (GetUpdateResponse);

  // Lookup an update by its ID.
  // If there is no update with this ID, or all the events are filtered, an UPDATE_NOT_FOUND error will be raised.
  rpc GetUpdateById(GetUpdateByIdRequest) returns (GetUpdateResponse);
}

message GetUpdatesRequest {
  // Beginning of the requested ledger section (non-negative integer).
  // The response will only contain transactions whose offset is strictly greater than this.
  // If zero, the stream will start from the beginning of the ledger.
  // If positive, the streaming will start after this absolute offset.
  // If the ledger has been pruned, this parameter must be specified and be greater than the pruning offset.
  int64 begin_exclusive = 1;

  // End of the requested ledger section.
  // The response will only contain transactions whose offset is less than or equal to this.
  // Optional, if empty, the stream will not terminate.
  // If specified, the stream will terminate after this absolute offset (positive integer) is reached.
  optional int64 end_inclusive = 2;

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // Requesting parties with template filters.
  // Template filters must be empty for GetUpdateTrees requests.
  // Optional for backwards compatibility, if defined update_format must be unset
  TransactionFilter filter = 3;

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
  // In particular, setting the verbose flag to true triggers the ledger to include labels, record and variant type ids
  // for record fields.
  // Optional for backwards compatibility, if defined update_format must be unset
  bool verbose = 4;

  // Must be unset for GetUpdateTrees request.
  // Optional for backwards compatibility for GetUpdates request: defaults to an UpdateFormat where:
  //
  // - include_transactions.event_format.filters_by_party = the filter.filters_by_party on this request
  // - include_transactions.event_format.filters_for_any_party = the filter.filters_for_any_party on this request
  // - include_transactions.event_format.verbose = the same flag specified on this request
  // - include_transactions.transaction_shape = TRANSACTION_SHAPE_ACS_DELTA
  // - include_reassignments.filter = the same filter specified on this request
  // - include_reassignments.verbose = the same flag specified on this request
  // - include_topology_events.include_participant_authorization_events.parties = all the parties specified in filter
  UpdateFormat update_format = 5;
}

message GetUpdatesResponse {
  // The update that matches the filter in the request.
  oneof update {
    Transaction transaction = 1;
    Reassignment reassignment = 2;
    OffsetCheckpoint offset_checkpoint = 3;
    TopologyTransaction topology_transaction = 4;
  }
}

// Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
message GetUpdateTreesResponse {
  // The update that matches the filter in the request.
  oneof update {
    TransactionTree transaction_tree = 1;
    Reassignment reassignment = 2;
    OffsetCheckpoint offset_checkpoint = 3;
  }
}

// Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
message GetTransactionByOffsetRequest {
  // The offset of the transaction being looked up.
  // Must be a valid absolute offset (positive integer).
  // Required
  int64 offset = 1;

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Must be set for GetTransactionTreeByOffset request.
  // Optional for backwards compatibility for GetTransactionByOffset request: if defined transaction_format must be
  // unset (falling back to defaults).
  repeated string requesting_parties = 2;

  // Must be unset for GetTransactionTreeByOffset request.
  // Optional for GetTransactionByOffset request for backwards compatibility: defaults to a TransactionFormat, where:
  //
  // - event_format.filters_by_party will have template-wildcard filters for all the requesting_parties
  // - event_format.filters_for_any_party is unset
  // - event_format.verbose = true
  // - transaction_shape = TRANSACTION_SHAPE_ACS_DELTA
  TransactionFormat transaction_format = 3;
}

// Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
message GetTransactionByIdRequest {
  // The ID of a particular transaction.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
  // The parties whose events the client expects to see.
  // Events that are not visible for the parties in this collection will not be present in the response.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Must be set for GetTransactionTreeById request.
  // Optional for backwards compatibility for GetTransactionById request: if defined transaction_format must be
  // unset (falling back to defaults).
  repeated string requesting_parties = 2;

  // Must be unset for GetTransactionTreeById request.
  // Optional for GetTransactionById request for backwards compatibility: defaults to a transaction_format, where:
  //
  // - event_format.filters_by_party will have template-wildcard filters for all the requesting_parties
  // - event_format.filters_for_any_party is unset
  // - event_format.verbose = true
  // - transaction_shape = TRANSACTION_SHAPE_ACS_DELTA
  TransactionFormat transaction_format = 3;
}

// Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
message GetTransactionTreeResponse {
  // Required
  TransactionTree transaction = 1;
}

// Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
message GetTransactionResponse {
  // Required
  Transaction transaction = 1;
}

message GetUpdateByOffsetRequest {
  // The offset of the update being looked up.
  // Must be a valid absolute offset (positive integer).
  // Required
  int64 offset = 1;

  // The format for the update.
  // Required
  UpdateFormat update_format = 2;
}

message GetUpdateByIdRequest {
  // The ID of a particular update.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string update_id = 1;

  // The format for the update.
  // Required
  UpdateFormat update_format = 2;
}

message GetUpdateResponse {
  // The update that matches the filter in the request.
  oneof update {
    Transaction transaction = 1;
    Reassignment reassignment = 2;
    TopologyTransaction topology_transaction = 3;
  }
}
