// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/value.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "InteractiveSubmissionDataOuterClass";
option java_package = "com.daml.ledger.api.v2";

/**
 * Contains all the information needed to externally sign a transaction.
 * The hash to be signed can and must be computed only using the data in this message.
 */
message PreparedTransaction {
  DamlTransaction transaction = 1;
  Metadata metadata = 2;
}

message Metadata {
  message SubmitterInfo {
    repeated string act_as = 1;
    repeated string read_as = 2;
    string command_id = 3;
  }

  message NodeSeed {
    int32 node_id = 1;
    bytes seed = 2;
  }

  message GlobalKeyMappingEntry {
    GlobalKey key = 1;
    optional Value value = 2;
  }

  message ProcessedDisclosedContract {
    Create contract = 1;
    uint64 created_at = 2;
    bytes driver_metadata = 3;
  }

  SubmitterInfo submitter_info = 1;
  bytes submission_seed = 2;
  uint64 submission_time = 3;
  repeated string used_packages = 4;
  repeated NodeSeed node_seeds = 5;
  repeated GlobalKeyMappingEntry global_key_mapping = 6;
  repeated ProcessedDisclosedContract disclosed_events = 7;
  optional uint64 ledger_effective_time = 8;
  optional string workflow_id = 9;
  uint64 interpretation_time_nanos = 10;
  string domain_id = 11;
  uint32 mediator_group = 12;
  string transaction_id = 13;
}

/*
 * Daml Transaction.
 * This represents the effect on the ledger if this transaction is successfully committed.
 */
message DamlTransaction {
  // Daml version of this transaction
  string version = 1;
  // Root nodes of the transaction
  repeated string roots = 2;
  // List of nodes in the transaction
  repeated Node nodes = 3;
}

message Node {
  optional string version = 1;
  string node_id = 2;
  oneof node_type {
    Create create = 3;
    Fetch fetch = 4;
    Exercise exercise = 5;
    Rollback rollback = 6;
    LookupByKey lookup_by_key = 7;
  }

  // Fetch node
  message Fetch {
    string contract_id = 1;
    string package_name = 2;
    Identifier template_id = 3;
    repeated string signatories = 4;
    repeated string stakeholders = 5;
    repeated string acting_parties = 6;
    GlobalKeyWithMaintainers key_with_maintainers = 7;
    bool by_key = 8;
  }

  // Exercise node
  message Exercise {
    Fetch fetch = 1;
    Identifier interface_id = 2;
    string choice_id = 3;
    Value chosen_value = 4;
    bool consuming = 5;
    repeated string children = 6;
    Value exercise_result = 7;
    repeated string choice_observers = 8;
    repeated string choice_authorizers = 9;
  }

  // Rollback node
  message Rollback {
    repeated string children = 1;
  }

  // Lookup by key node
  message LookupByKey {
    string package_name = 1;
    Identifier template_id = 2;
    GlobalKeyWithMaintainers key = 3;
    optional string contract_id = 4;
  }
}

// Create Node
// Is not inlined in the Node message because it is used in the PreparedTransaction metadata as disclosed_events
message Create {
  string contract_id = 1;
  string package_name = 2;
  Identifier template_id = 3;
  Value argument = 4;
  repeated string signatories = 5;
  repeated string stakeholders = 6;
  optional string package_version = 7;
  GlobalKeyWithMaintainers global_key_with_maintainers = 8;
}

message GlobalKey {
  Identifier template_id = 1;
  string package_name = 2;
  Value key = 3;
  bytes hash = 4;
}

message GlobalKeyWithMaintainers {
  GlobalKey key = 1;
  repeated string maintainers = 2;
}
