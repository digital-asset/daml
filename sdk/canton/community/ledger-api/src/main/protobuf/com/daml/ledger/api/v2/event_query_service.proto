// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

import "com/daml/ledger/api/v2/event.proto";
import "com/daml/ledger/api/v2/transaction_filter.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "EventQueryServiceOuterClass";
option java_package = "com.daml.ledger.api.v2";

message GetEventsByContractIdRequest {
  // The contract id being queried.
  // Required
  string contract_id = 1;

  // Format of the events in the result, the presentation will be of TRANSACTION_SHAPE_ACS_DELTA.
  // Required
  EventFormat event_format = 2;
}

// Query events by contract id.
//
// Note that querying by contract key is not (yet) supported, as contract keys
// are not supported (yet) in multi-synchronizer scenarios.
service EventQueryService {
  // Get the create and the consuming exercise event for the contract with the provided ID.
  // No events will be returned for contracts that have been pruned because they
  // have already been archived before the latest pruning offset.
  // If the contract cannot be found for the request, or all the contract-events are filtered, a CONTRACT_EVENTS_NOT_FOUND error will be raised.
  rpc GetEventsByContractId(GetEventsByContractIdRequest) returns (GetEventsByContractIdResponse);
}

message GetEventsByContractIdResponse {
  // The create event for the contract with the ``contract_id`` given in the request
  // provided it exists and has not yet been pruned.
  // Optional
  Created created = 1;

  // The archive event for the contract with the ``contract_id`` given in the request
  // provided such an archive event exists and it has not yet been pruned.
  // Optional
  Archived archived = 2;
}

message Created {
  // Required
  // The event as it appeared in the context of its original update (i.e. daml transaction or
  // reassignment) on this participant node. You can use its offset and node_id to find the
  // corresponding update and the node within it.
  CreatedEvent created_event = 1;

  // The synchronizer which sequenced the creation of the contract
  // Required
  string synchronizer_id = 2;
}

message Archived {
  // Required
  ArchivedEvent archived_event = 1;

  // Required
  // The synchronizer which sequenced the archival of the contract
  string synchronizer_id = 2;
}
