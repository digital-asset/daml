// Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2.admin;

import "google/protobuf/field_mask.proto";

option csharp_namespace = "Com.Daml.Ledger.Api.V2.Admin";
option java_outer_classname = "IdentityProviderConfigServiceOuterClass";
option java_package = "com.daml.ledger.api.v2.admin";

// Identity Provider Config Service makes it possible for participant node administrators
// to setup and manage additional identity providers at runtime.
//
// This allows using access tokens from identity providers unknown at deployment time. When an identity
// provider is configured, independent IDP administrators can manage their own set of parties and users.
// Such parties and users have a matching `identity_provider_id` defined and are inaccessible to
// administrators from other identity providers. A user will only be authenticated if the corresponding JWT
// token is issued by the appropriate identity provider.
// Users and parties without `identity_provider_id` defined are assumed to be using the default identity provider,
// which is configured statically at the participant node's deployment time.
//
// The Ledger API uses the "iss" claim of a JWT token to match the token to a specific IDP. If there is no match,
// the default IDP is assumed.
//
// The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
//
// 1. ``Optional`` denoting the client may leave the field unset when sending a request.
// 2. ``Required`` denoting the client must set the field to a non-default value when sending a request.
//
// An identity provider config resource is described by the ``IdentityProviderConfig`` message,
// An identity provider config resource, once it has been created, can be modified.
// In order to update the properties represented by the ``IdentityProviderConfig`` message use the ``UpdateIdentityProviderConfig`` RPC.
// The only fields that can be modified are those marked as ``Modifiable``.
service IdentityProviderConfigService {
  // Create a new identity provider configuration.
  // The request will fail if the maximum allowed number of separate configurations is reached.
  rpc CreateIdentityProviderConfig(CreateIdentityProviderConfigRequest) returns (CreateIdentityProviderConfigResponse);

  // Get the identity provider configuration data by id.
  rpc GetIdentityProviderConfig(GetIdentityProviderConfigRequest) returns (GetIdentityProviderConfigResponse);

  // Update selected modifiable attribute of an identity provider config resource described
  // by the ``IdentityProviderConfig`` message.
  rpc UpdateIdentityProviderConfig(UpdateIdentityProviderConfigRequest) returns (UpdateIdentityProviderConfigResponse);

  // List all existing identity provider configurations.
  rpc ListIdentityProviderConfigs(ListIdentityProviderConfigsRequest) returns (ListIdentityProviderConfigsResponse);

  // Delete an existing identity provider configuration.
  rpc DeleteIdentityProviderConfig(DeleteIdentityProviderConfigRequest) returns (DeleteIdentityProviderConfigResponse);
}

message IdentityProviderConfig {
  // The identity provider identifier
  // Must be a valid LedgerString (as describe in ``value.proto``).
  // Required
  string identity_provider_id = 1;

  // When set, the callers using JWT tokens issued by this identity provider are denied all access
  // to the Ledger API.
  // Optional,
  // Modifiable
  bool is_deactivated = 2;

  // Specifies the issuer of the JWT token.
  // The issuer value is a case sensitive URL using the https scheme that contains scheme, host,
  // and optionally, port number and path components and no query or fragment components.
  // Required
  // Modifiable
  string issuer = 3;

  // The JWKS (JSON Web Key Set) URL.
  // The Ledger API uses JWKs (JSON Web Keys) from the provided URL to verify that the JWT has been
  // signed with the loaded JWK. Only RS256 (RSA Signature with SHA-256) signing algorithm is supported.
  // Required
  // Modifiable
  string jwks_url = 4;

  // Specifies the audience of the JWT token.
  // When set, the callers using JWT tokens issued by this identity provider are allowed to get an access
  // only if the "aud" claim includes the string specified here
  // Optional,
  // Modifiable
  string audience = 5;
}

message CreateIdentityProviderConfigRequest {
  // Required
  IdentityProviderConfig identity_provider_config = 1;
}

message CreateIdentityProviderConfigResponse {
  IdentityProviderConfig identity_provider_config = 1;
}

message GetIdentityProviderConfigRequest {
  // Required
  string identity_provider_id = 1;
}

message GetIdentityProviderConfigResponse {
  IdentityProviderConfig identity_provider_config = 1;
}

message ListIdentityProviderConfigsRequest {
  // Pagination is not required as the resulting data set is small enough to be returned in a single call
}

message ListIdentityProviderConfigsResponse {
  repeated IdentityProviderConfig identity_provider_configs = 1;
}

message UpdateIdentityProviderConfigRequest {
  // The identity provider config to update.
  // Required,
  // Modifiable
  IdentityProviderConfig identity_provider_config = 1;

  // An update mask specifies how and which properties of the ``IdentityProviderConfig`` message are to be updated.
  // An update mask consists of a set of update paths.
  // A valid update path points to a field or a subfield relative to the ``IdentityProviderConfig`` message.
  // A valid update mask must:
  //
  // 1. contain at least one update path,
  // 2. contain only valid update paths.
  //
  // Fields that can be updated are marked as ``Modifiable``.
  // For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
  // Required
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateIdentityProviderConfigResponse {
  // Updated identity provider config
  IdentityProviderConfig identity_provider_config = 1;
}

message DeleteIdentityProviderConfigRequest {
  // The identity provider config to delete.
  // Required
  string identity_provider_id = 1;
}

// Does not (yet) contain any data.
message DeleteIdentityProviderConfigResponse {}
