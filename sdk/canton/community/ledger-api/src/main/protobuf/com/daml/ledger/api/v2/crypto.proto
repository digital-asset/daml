// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v2;

option csharp_namespace = "Com.Daml.Ledger.Api.V2";
option java_outer_classname = "CryptoOuterClass";
option java_package = "com.daml.ledger.api.v2";

// Note: these crypto data types are a subset of the ones used internally by Canton.
// They have been forked from the respective com.digitalasset.canton.crypto.v30 package.

enum SigningKeySpec {
  SIGNING_KEY_SPEC_UNSPECIFIED = 0;

  // Elliptic Curve Key from Curve25519
  // as defined in http://ed25519.cr.yp.to/
  SIGNING_KEY_SPEC_EC_CURVE25519 = 1;

  // Elliptic Curve Key from the NIST P-256 curve (aka secp256r1)
  // as defined in https://doi.org/10.6028/NIST.FIPS.186-4
  SIGNING_KEY_SPEC_EC_P256 = 2;

  // Elliptic Curve Key from the NIST P-384 curve (aka secp384r1)
  // as defined in https://doi.org/10.6028/NIST.FIPS.186-4
  SIGNING_KEY_SPEC_EC_P384 = 3;

  // Elliptic Curve Key from SECG P256k1 curve (aka secp256k1)
  // commonly used in bitcoin and ethereum
  // as defined in https://www.secg.org/sec2-v2.pdf
  SIGNING_KEY_SPEC_EC_SECP256K1 = 4;
}

// Serialization format for crypto keys and signatures
enum CryptoKeyFormat {
  CRYPTO_KEY_FORMAT_UNSPECIFIED = 0;

  // ASN.1 + DER encoding
  // Legacy format no longer used, except for migrations
  CRYPTO_KEY_FORMAT_DER = 1;

  // Raw encoding of a key
  CRYPTO_KEY_FORMAT_RAW = 2;

  // ASN.1 + DER-encoding of X.509 SubjectPublicKeyInfo structure: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1
  CRYPTO_KEY_FORMAT_DER_X509_SUBJECT_PUBLIC_KEY_INFO = 3;

  // Symbolic crypto, must only be used for testing
  reserved 10000;
}

message SigningPublicKey {
  // The serialization format of the public key
  CryptoKeyFormat format = 1;

  // Serialized public key in the format specified above
  bytes key_data = 2;

  // The key specification
  SigningKeySpec key_spec = 3;
}

message Signature {
  SignatureFormat format = 1;

  bytes signature = 2;

  // The fingerprint/id of the keypair used to create this signature and needed to verify.
  string signed_by = 3;

  // The signing algorithm specification used to produce this signature
  SigningAlgorithmSpec signing_algorithm_spec = 4;
}

enum SigningAlgorithmSpec {
  SIGNING_ALGORITHM_SPEC_UNSPECIFIED = 0;

  // EdDSA Signature based on Curve25519 with SHA-512
  // http://ed25519.cr.yp.to/
  SIGNING_ALGORITHM_SPEC_ED25519 = 1;

  // Elliptic Curve Digital Signature Algorithm with SHA256
  SIGNING_ALGORITHM_SPEC_EC_DSA_SHA_256 = 2;

  // Elliptic Curve Digital Signature Algorithm with SHA384
  SIGNING_ALGORITHM_SPEC_EC_DSA_SHA_384 = 3;
}

enum SignatureFormat {
  SIGNATURE_FORMAT_UNSPECIFIED = 0;

  // Signature scheme specific signature format
  // Legacy format no longer used, except for migrations
  SIGNATURE_FORMAT_RAW = 1;

  // ASN.1 + DER-encoding of the `r` and `s` integers, as defined in https://datatracker.ietf.org/doc/html/rfc3279#section-2.2.3
  // Used for ECDSA signatures
  SIGNATURE_FORMAT_DER = 2;

  // Concatenation of the integers `r || s` in little-endian form, as defined in https://datatracker.ietf.org/doc/html/rfc8032#section-3.3
  // Note that this is different from the format defined in IEEE P1363, which uses concatenation in big-endian form.
  // Used for EdDSA signatures
  SIGNATURE_FORMAT_CONCAT = 3;

  // Symbolic crypto, must only be used for testing
  SIGNATURE_FORMAT_SYMBOLIC = 10000;
}
