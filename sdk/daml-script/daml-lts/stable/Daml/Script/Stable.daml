-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- This module contains all serializable types for the daml-script-lts library.
-- This includes any "exposed" data types (which a user could realistically use in a template)
-- as well as exceptions, and any types that the exceptions depend on

module Daml.Script.Stable where

-- ## PartyManagement ##

-- | The party details returned by the party management service.
data PartyDetails = PartyDetails
  with
    party : Party -- ^ Party id
    displayName : Optional Text -- ^ Optional display name
    isLocal : Bool -- ^ True if party is hosted by the backing participant.
  deriving (Eq, Ord, Show)

-- | A hint to the backing participant what party id to allocate.
-- Must be a valid PartyIdString (as described in @value.proto@).
newtype PartyIdHint = PartyIdHint { partyIdHint : Text }

newtype ParticipantName = ParticipantName { participantName : Text }

-- ## UserManagement ##

-- | Identifier for a user in the user management service.
newtype UserId = UserId Text deriving (Eq, Ord)

instance Show UserId where show (UserId text) = "'" <> text <> "'"
-- | User-info record for a user in the user management service.
data User = User
  with
    userId : UserId
    primaryParty : Optional Party
  deriving (Show, Eq, Ord)

-- | The rights of a user.
data UserRight
  = ParticipantAdmin
  | CanActAs Party
  | CanReadAs Party
  deriving (Show, Eq)

-- | Extract the name-text from a user identitifer.
userIdToText : UserId -> Text
userIdToText (UserId text) = text

-- | Thrown if text for a user identifier does not conform to the format restriction.
exception InvalidUserId
  with
    m : Text
  where
    message m

-- | Thrown if a user to be created already exists.
exception UserAlreadyExists
  with
    userId : UserId
  where
    message (userIdToText userId)
-- | Thrown if a user cannot be located for a given user identifier.
exception UserNotFound
  with
    userId : UserId
  where
    message (userIdToText userId)

-- ## Testing ##

-- | HIDE
newtype CommandName = CommandName
  with getCommandName : Text
  deriving (Eq, Show)

-- | HIDE
newtype ErrorClassName = ErrorClassName
  with getErrorClassName : Text
  deriving (Eq, Show)

-- | HIDE
newtype ErrorMessage = ErrorMessage
  with getErrorMessage : Text
  deriving (Eq, Show)

-- | HIDE
exception FailedCmd with
    commandName : CommandName
    errorClassName : ErrorClassName
    errorMessage : ErrorMessage
  where
    message getErrorMessage errorMessage
