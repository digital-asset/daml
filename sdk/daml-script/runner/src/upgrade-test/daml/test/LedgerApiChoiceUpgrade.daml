-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module LedgerApiChoiceUpgrade (main) where

import UpgradeTestLib
import qualified V1.UpgradedChoice as V1
import qualified V2.UpgradedChoice as V2

{- PACKAGE
name: ledger-api-choice-upgrades
versions: 2
-}

{- MODULE
package: ledger-api-choice-upgrades
contents: |
  module UpgradedChoice where

  data UpgradedChoiceReturn = UpgradedChoiceReturn with
      someData : Text
      someOtherData : Optional Text                     -- @V  2
    deriving (Eq, Show)

  template UpgradedChoiceTemplate
    with
      party : Party
      newField : Optional Text                          -- @V  2
    where
      signatory party

      choice UpgradedChoice : UpgradedChoiceReturn with
          firstArg : Text
          secondArg : Optional Text                     -- @V  2
        controller party
        do
          pure $ UpgradedChoiceReturn
            (firstArg <> ":V1")                         -- @V 1
            (firstArg <> ":V2:" <> show secondArg)      -- @V  2
            secondArg                                   -- @V  2
-}

main : Script ()
main = tests
  [ ("Explicitly call a V1 choice on a V1 contract over the ledger-api, expect V1 implementation used.", explicitV1ChoiceV1Contract)
  , ("Explicitly call a V2 choice on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", explicitV2ChoiceV1Contract)
  , ("Call a V1 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, contract + argument upgraded, daml-script downgrades return type.", inferredV1ChoiceV1Contract)
  , ("Call a V2 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", inferredV2ChoiceV1Contract)
  -- , broken ("Call a V2 choice without package ID on a V1 contract over the ledger-api, with V2 unvetted, expect V1 implementation used, argument downgraded, daml-script upgrades return type.", inferredV1ChoiceV1ContractWithoutV2)
  , ("Explicitly call a V1 choice on a V2 contract over the ledger-api, expect V1 implementation used, and contract downgraded.", explicitV1ChoiceV2Contract)
  , ("Explicitly call a V2 choice on a V2 contract over the ledger-api, expect V2 implementation used.", explicitV2ChoiceV2Contract)
  ]

choiceTest
  : forall t2 t1 c2 r
  . (Template t1, HasAgreement t1, Choice t2 c2 r, Eq r, Show r)
  => (Party -> t1)
  -> c2
  -> Bool
  -> r
  -> Script ()
choiceTest makeV1Contract v2Choice explicitPackageIds expectedResult = do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` (if explicitPackageIds then exerciseExactCmd else exerciseCmd) cidV2 v2Choice
  case res of
    Right returnValue -> returnValue === expectedResult
    Left err -> assertFail $ "Expected " <> show expectedResult <> " but got " <> show err

explicitV1ChoiceV1Contract : Script ()
explicitV1ChoiceV1Contract =
  choiceTest @V1.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V1.UpgradedChoice "v1 to v1") True (V1.UpgradedChoiceReturn "v1 to v1:V1")

explicitV2ChoiceV1Contract : Script ()
explicitV2ChoiceV1Contract =
  choiceTest @V2.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V2.UpgradedChoice "v2 to v1" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- When inferring, the V1 contract and choice argument is upgraded, and the return type is downgraded directly by daml script.
-- As such, we get the v2 implementation called, with the additional field set to None (as shown in the choice return)
-- and since the extra data in the return will also be none, the downgrade can succeed.
inferredV1ChoiceV1Contract : Script ()
inferredV1ChoiceV1Contract =
  choiceTest @V1.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V1.UpgradedChoice "v1 to v1") False (V1.UpgradedChoiceReturn "v1 to v1:V2:None")

inferredV2ChoiceV1Contract : Script ()
inferredV2ChoiceV1Contract =
  choiceTest @V2.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V2.UpgradedChoice "v2 to v1" $ Some "extra") False (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- If v2 isn't vetted, then omitting a package id and giving v1 arguments should use the v1 implementation
-- withUnvettedDar is not supported on IDELedger, skip this test
-- inferredV1ChoiceV1ContractWithoutV2 : Script ()
-- inferredV1ChoiceV1ContractWithoutV2 =
--   withUnvettedDar "ledger-api-choice-upgrades-2.0.0" $
--     choiceTest @V1.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V1.UpgradedChoice "v1 to v1") False (V1.UpgradedChoiceReturn "v1 to v1:V1")

explicitV1ChoiceV2Contract : Script ()
explicitV1ChoiceV2Contract =
  choiceTest @V1.UpgradedChoiceTemplate (`V2.UpgradedChoiceTemplate` None) (V1.UpgradedChoice "v1 to v2") True (V1.UpgradedChoiceReturn "v1 to v2:V1")

explicitV2ChoiceV2Contract : Script ()
explicitV2ChoiceV2Contract =
  choiceTest @V2.UpgradedChoiceTemplate (`V2.UpgradedChoiceTemplate` Some "text") (V2.UpgradedChoice "v2 to v2" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v2:V2:Some \"extra\"" $ Some "extra")

