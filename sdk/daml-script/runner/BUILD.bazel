# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "default_scalacopts",
    "lf_scalacopts_stricter",
    "scaladoc_jar",
)
load("//rules_daml:daml.bzl", "daml_compile")
load("//bazel_tools:proto.bzl", "proto_gen")
load("@os_info//:os_info.bzl", "is_windows")

test_script_sources = [
    "src/main/scala/com/digitalasset/daml/lf/engine/script/TestMain.scala",
]

# Should match RunnerMainTestBase.DAR_COUNT
test_dar_count = 5

da_scala_library(
    name = "script-runner-lib",
    srcs =
        glob(
            ["src/main/scala/**/*.scala"],
        ) +
        #  we depend on sources to avoid pushing a canton artifact to maven
        [
            "//canton:community_participant_admin_proto_scala",
        ],
    override_scalacopts = [
        copt
        for copt in default_scalacopts + lf_scalacopts_stricter
        if copt not in [
            # scalapb does not like those
            "-P:wartremover:traverser:org.wartremover.warts.JavaSerializable",
            "-P:wartremover:traverser:org.wartremover.warts.Product",
            "-P:wartremover:traverser:org.wartremover.warts.Serializable",
        ]
    ],
    scala_deps = [
        "@maven//:com_github_scopt_scopt",
        "@maven//:org_apache_pekko_pekko_http",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_http_spray_json",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_typelevel_paiges_core",
        "@maven//:org_parboiled_parboiled",
    ],
    # no doc as our scaladoc pipeline does not support .scrjar
    scaladoc = False,
    tags = ["maven_coordinates=com.daml:daml-script-runner:__VERSION__"],
    visibility = ["//visibility:public"],
    deps = [
        "//canton:ledger_api_proto_scala",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/scenario-interpreter",
        "//daml-lf/transaction",
        "//daml-script/converter",
        "//ledger-service/cli-opts",
        "//ledger-service/lf-value-json",
        "//ledger/error",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-auth-client",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//ledger/participant-local-store",
        "//libs-scala/auth-utils",
        "//libs-scala/contextualized-logging",
        "//libs-scala/jwt",
        "//libs-scala/nonempty",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/rs-grpc-pekko",
        "@maven//:com_google_guava_guava",
        "@maven//:io_grpc_grpc_netty",
        "@maven//:io_netty_netty_handler",
    ],
)

# Create empty Scaladoc JAR for uploading to Maven Central
scaladoc_jar(
    name = "script-runner-lib_scaladoc",
    srcs = [],
    tags = ["scaladoc"],
    deps = [],
) if is_windows == False else None

da_scala_library(
    name = "test-lib",
    srcs = glob(
        ["src/test-lib/scala/**/*.scala"],
    ),
    scala_deps = [
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalactic_scalactic",
    ],
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//libs-scala/scala-utils",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_test(
    name = "tests",
    size = "large",
    srcs = glob(
        ["src/test/scala/**/*.scala"],
    ),
    data =
        glob(["src/test/resources/**/*"]) + [
            ":daml-script-binary",
            ":failing-test-script.dar",
            "//test-common/test-certificates",
        ] + [":test-script{n}.dar".format(n = n) for n in range(
            1,
            test_dar_count + 1,
        )],
    scala_deps = [
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalaz_scalaz_core",
    ],
    deps = [
        ":test-lib",
        "//bazel_tools/runfiles:scala_runfiles",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//ledger-service/http-json:http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/http-json-testing:ce",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/testing-utils",
        "//test-common/canton/it-lib",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

daml_compile(
    name = "upgrade-test-lib",
    srcs = [":src/upgrade-test/daml/UpgradeTestLib.daml"],
    dependencies = [
        "//daml-script/daml3:daml3-script-1.dev.dar",
    ],
    project_name = "upgrade-test-lib",
    # TODO(https://github.com/digital-asset/daml/issues/18457): split the lib into modules that use
    #  contract keys and those that don't. Revert to the default target for those that don't.
    target = "1.dev",
    version = "1.0.0",
)

filegroup(
    name = "upgrade-test-files",
    srcs = glob(["src/upgrade-test/daml/test/*.daml"]),
    visibility = ["__pkg__"],
)

da_scala_test(
    name = "ide-upgrade-test",
    size = "large",
    srcs = ["src/upgrade-test/scala/com/daml/lf/engine/script/IdeLedgerRunnerUpgradeTest.scala"],
    data =
        [
            ":daml-script-binary",
            ":upgrade-test-files",
            ":upgrade-test-lib.dar",
            "//compiler/damlc",
            "//daml-script/daml3:daml3-script-1.dev.dar",
        ],
    scala_deps = [
        "@maven//:io_circe_circe_core",
        "@maven//:io_circe_circe_yaml_common",
        "@maven//:io_circe_circe_yaml",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_kernel",
    ],
    deps = [
        ":test-lib",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/language",
        "//daml-script/test:test-utils",
        "//libs-scala/scala-utils",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
) if not is_windows else None
# skipping windows for now, it doesn't seem to like the filegroup `:upgrade-test-files`

da_scala_binary(
    name = "daml-script-binary",
    main_class = "com.daml.lf.engine.script.ScriptMain",
    resources = glob(["src/main/resources/**/*"]),
    scala_runtime_deps = [
        "@maven//:org_apache_pekko_pekko_slf4j",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["ee-jar-license"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [
        ":script-runner-lib",
    ],
)

[
    daml_compile(
        name = "test-script{n}".format(n = n),
        srcs = glob(["src/test/resources/TestScript.daml"]),
        dependencies = ["//daml-script/daml:daml-script.dar"],
    )
    for n in range(
        1,
        test_dar_count + 1,
    )
]

daml_compile(
    name = "failing-test-script",
    srcs = glob(["src/test/resources/FailingTestScript.daml"]),
    dependencies = ["//daml-script/daml:daml-script.dar"],
)

exports_files(["src/main/resources/logback.xml"])
