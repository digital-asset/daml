-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- TODO[SW]: Add some kind of warning here saying this _only_ works for IdeLedgerClient

module Daml.Script.Internal.Questions.Packages where

import Daml.Script.Internal.LowLevel
import Daml.Script.Internal.Questions.PartyManagement (ParticipantName (..))
import Daml.Script.Internal.Questions.Time (sleep)
import DA.Stack
import DA.Time

data VetPackages = VetPackages with
  packages : [PackageName]
  participant : Optional Text
instance IsQuestion VetPackages () where command = "VetPackages"

data UnvetPackages = UnvetPackages with
  packages : [PackageName]
  participant : Optional Text
instance IsQuestion UnvetPackages () where command = "UnvetPackages"

data ListVettedPackages = ListVettedPackages {}
instance IsQuestion ListVettedPackages [PackageName] where command = "ListVettedPackages"

data ListAllPackages = ListAllPackages {}
instance IsQuestion ListAllPackages [PackageName] where command = "ListAllPackages"

data PackageName = PackageName
  with
    name : Text
    version : Text
  deriving (Eq, Ord)

instance Show PackageName where
  show (PackageName name version) = name <> "-" <> version

vetPackages : HasCallStack => [PackageName] -> Script ()
vetPackages packages = thenWait $ unsafeVetPackages packages None

vetPackagesOnParticipant : HasCallStack => [PackageName] -> ParticipantName -> Script ()
vetPackagesOnParticipant packages participant = thenWait $ unsafeVetPackages packages (Some participant)

unvetPackages : HasCallStack => [PackageName] -> Script ()
unvetPackages packages = thenWait $ unsafeUnvetPackages packages None

unvetPackagesOnParticipant : HasCallStack => [PackageName] -> ParticipantName -> Script ()
unvetPackagesOnParticipant packages participant = thenWait $ unsafeUnvetPackages packages (Some participant)

unsafeVetPackages : HasCallStack => [PackageName] -> Optional ParticipantName -> Script ()
unsafeVetPackages packages mParticipantName = lift $ VetPackages packages (participantName <$> mParticipantName)

unsafeUnvetPackages : HasCallStack => [PackageName] -> Optional ParticipantName -> Script ()
unsafeUnvetPackages packages mParticipantName = lift $ UnvetPackages packages (participantName <$> mParticipantName)

listVettedPackages : HasCallStack => Script [PackageName]
listVettedPackages = lift ListVettedPackages

listAllPackages : HasCallStack => Script [PackageName]
listAllPackages = lift ListAllPackages

-- Add a wait after performing the action, as vetting and unvetting takes a little bit of time
-- https://github.com/digital-asset/daml/issues/17707
thenWait : Script a -> Script a
thenWait s = s <* sleep (seconds 1)

