-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Internal.Questions.Testing where

import Daml.Script.Internal.LowLevel
import Daml.Script.Internal.Questions.Exceptions ()
import DA.Bifunctor
import DA.Exception
import GHC.Types (primitive)
import DA.Record

newtype CommandName = CommandName
  with getCommandName : Text
  deriving (Eq, Show)

newtype ErrorClassName = ErrorClassName
  with getErrorClassName : Text
  deriving (Eq, Show)

newtype ErrorMessage = ErrorMessage
  with getErrorMessage : Text
  deriving (Eq, Show)

data TryCommands = TryCommands with
  act : LedgerValue
instance IsQuestion TryCommands (Either (Text, Text, Text) x) where command = "TryCommands"

tupleToFailedCmd : (Text, Text, Text) -> FailedCmd
tupleToFailedCmd (cmdName, errName, msg) =
  FailedCmd with
    commandName = CommandName cmdName
    errorClassName = ErrorClassName errName
    errorMessage = ErrorMessage msg

-- Internal testing tool that allows us to catch FailedCmds in the daml language
tryCommands : Script a -> Script (Either FailedCmd a)
tryCommands = fmap (first tupleToFailedCmd) . lift . TryCommands . toLedgerValue

-- Pseudo exception that daml-script can throw/catch, but that isn't seen as an exception in the dar
-- and as such, does not need to be serializable/cannot be thrown in Update
data FailedCmd = FailedCmd with
    commandName : CommandName
    errorClassName : ErrorClassName
    errorMessage : ErrorMessage

instance HasThrow FailedCmd where
    throwPure _ = error "Tried to throw daml-script pseudo-exception"

instance GetField "message" FailedCmd Text where
    getField (FailedCmd _ _ msg) = getErrorMessage msg

instance HasMessage FailedCmd where
    message (FailedCmd _ _ msg) = getErrorMessage msg

-- These primitives do not check that the type arguments are real templates
-- they also use the same internal representation in the engine as exceptions
-- (SBToAny, SBFromAny)
-- So we hijack them until Daml 3.4, where either exceptions are removed, or not serializable
instance HasToAnyException FailedCmd where
    toAnyException = anyToAnyException . primitive @"EToAnyTemplate"

instance HasFromAnyException FailedCmd where
    fromAnyException = primitive @"EFromAnyTemplate" . anyExceptionToAny

-- Runs a script and lifts FailedCmd scala exceptions into the FailedCmd daml exception, which can be caught via try-catch
liftFailedCommandToException : Script a -> Script a
liftFailedCommandToException act = tryCommands act >>= either throw pure
