-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE InstanceSigs #-}

module Daml.Script.Internal.Questions.Submit
  ( module Daml.Script.Internal.Questions.Submit
  , module Daml.Script.Internal.Questions.Submit.Error
  ) where

import Daml.Script.Internal.LowLevel
import Daml.Script.Internal.Questions.Commands
import Daml.Script.Internal.Questions.Submit.Error
import Daml.Script.Internal.Questions.TransactionTree
import DA.NonEmpty
import DA.List.Total (head)
import DA.Stack
import DA.Set
import DA.Functor (void)
import DA.Bifunctor (first)

-- | HIDE
data Submit = Submit with
  submissions : [Submission]
-- | HIDE
instance IsQuestion Submit [Either SubmitError ([CommandResult], TransactionTree)] where command = "Submit"

-- | HIDE
data Submission = Submission with
  sActAs : NonEmpty Party
  sReadAs : [Party]
  sDisclosures : [Disclosure]
  sPackagePreference : Optional [PackageId]
  sPrefetchKeys : [AnyContractKey]
  sErrorBehaviour : ErrorBehaviour
  sCommands : [CommandWithMeta]
  sLocation : Optional (Text, SrcLoc)

-- | HIDE
data ErrorBehaviour = MustSucceed | MustFail | Try

-- | MOVE Daml.Script
-- Package-id newtype for package preference
newtype PackageId = PackageId Text deriving (Show, Eq)

-- | MOVE Daml.Script
-- Options to detemine the stakeholders of a transaction, as well as disclosures.
-- Intended to be specified using the `actAs`, `readAs` and `disclose` builders, combined using the Semigroup concat `(<>)` operator.
-- ```
-- actAs alice <> readAs [alice, bob] <> disclose myContract
-- ```
-- Note that actAs and readAs follows the same party derivation rules as `signatory`, see their docs for examples.
-- All submissions must specify at least one `actAs` party, else a runtime error will be thrown.
-- A minimum submission may look like
-- ```
-- actAs alice `submit` createCmd MyContract with party = alice
-- ```
-- For backwards compatibility, a single or set of parties can be provided in place of the `SubmitOptions` to
-- `submit`, which will represent the `actAs` field.
-- The above example could be reduced to
-- ```
-- alice `submit` createCmd MyContract with party = alice
-- ```
data SubmitOptions = SubmitOptions with
  soActAs : [Party]
  soReadAs : [Party]
  soDisclosures : [Disclosure]
  soPackagePreference : Optional [PackageId]
  soPrefetchKeys : [AnyContractKey]

-- Optional doesn't have Semigroup instance?
-- | HIDE
combineOptional : Semigroup a => Optional a -> Optional a -> Optional a
combineOptional (Some a) (Some b) = Some (a <> b)
combineOptional None r = r
combineOptional l _ = l

-- | MOVE Daml.Script
-- Semigroup instance allowing for combination via (<>)
instance Semigroup SubmitOptions where
  SubmitOptions a b c d e <> SubmitOptions a' b' c' d' e' = SubmitOptions (a <> a') (b <> b') (c <> c') (d `combineOptional` d') (e <> e')

-- | MOVE Daml.Script
-- Monoid instance allowing for use of mconcat
instance Monoid SubmitOptions where
  mempty = SubmitOptions [] [] [] None []

-- | MOVE Daml.Script
-- Builds a SubmitOptions with given actAs parties.
-- Any given submission must include at least one actAs party.
-- Note that the parties type is constrainted by `IsParties`, allowing for specifying parties as any of the following:
-- ```
-- Party
-- [Party]
-- NonEmpty Party
-- Set Party
-- Optional Party
-- ```
actAs : IsParties parties => parties -> SubmitOptions
actAs p = SubmitOptions (toParties p) [] [] None []

-- | MOVE Daml.Script
-- Builds a SubmitOptions with given readAs parties.
-- A given submission may omit any readAs parties and still be valid.
-- Note that the parties type is constrainted by `IsParties`, allowing for specifying parties as any of the following:
-- ```
-- Party
-- [Party]
-- NonEmpty Party
-- Set Party
-- Optional Party
-- ```
readAs : IsParties parties => parties -> SubmitOptions
readAs p = SubmitOptions [] (toParties p) [] None []

-- | MOVE Daml.Script
-- Provides many Explicit Disclosures to the transaction.
discloseMany : [Disclosure] -> SubmitOptions
discloseMany ds = SubmitOptions [] [] ds None []

-- | MOVE Daml.Script
-- Provides an Explicit Disclosure to the transaction.
disclose : Disclosure -> SubmitOptions
disclose d = discloseMany [d]

-- | MOVE Daml.Script
-- Provide a package id selection preference for upgrades for a submission
packagePreference : [PackageId] -> SubmitOptions
packagePreference packages = SubmitOptions [] [] [] (Some packages) []

-- | MOVE Daml.Script
-- Provide a list of contract keys to prefetch for a submission
prefetchKeys : [AnyContractKey] -> SubmitOptions
prefetchKeys keys = SubmitOptions [] [] [] None keys

-- | MOVE Daml.Script
-- Defines a type that can be transformed into a SubmitOptions
class IsSubmitOptions options where
  toSubmitOptions : options -> SubmitOptions

-- | MOVE Daml.Script
instance IsSubmitOptions SubmitOptions where
  toSubmitOptions = identity

-- | MOVE Daml.Script
instance IsSubmitOptions Party where
  toSubmitOptions = actAs

-- | MOVE Daml.Script
instance IsSubmitOptions [Party] where
  toSubmitOptions = actAs

-- | MOVE Daml.Script
instance IsSubmitOptions (NonEmpty Party) where
  toSubmitOptions = actAs

-- | MOVE Daml.Script
instance IsSubmitOptions (Set Party) where
  toSubmitOptions = actAs

-- | MOVE Daml.Script
-- Applicative that allows for multiple concurrent transaction submissions
-- See `concurrently` for usage of this type.
data ConcurrentSubmits a = ConcurrentSubmits with
    submits : [Submission]
    continue : [Either SubmitError ([CommandResult], TransactionTree)] -> a
  deriving Functor

-- | MOVE Daml.Script
instance Applicative ConcurrentSubmits where
  pure : a -> ConcurrentSubmits a
  pure x = ConcurrentSubmits [] (const x)

  liftA2 : (a -> b -> c) -> ConcurrentSubmits a -> ConcurrentSubmits b -> ConcurrentSubmits c
  liftA2 f a b = ConcurrentSubmits
    { submits = a.submits <> b.submits
    , continue = \results -> 
        let (aResults, bResults) = splitAt (length a.submits) results
        in f (a.continue aResults) (b.continue bResults)
    }

-- | HIDE
actAsNonEmpty : [Party] -> NonEmpty Party
actAsNonEmpty ps = case ps of
  [] -> error "actAs must be non-empty"
  p :: ps -> NonEmpty p ps

-- | MOVE Daml.Script
-- Allows for concurrent submission of transactions, using an applicative, similar to Commands.
-- Concurrently takes a computation in `ConcurrentSubmits`, which supports all the existing `submit` functions
-- that `Script` supports. It however does not implement `Action`, and thus does not support true binding and computation interdependence
-- NOTE: The submission order of transactions within `concurrently` is deterministic, this function is not intended to test contention.
-- It is only intended to allow faster submission of many unrelated transactions, by not waiting for completion for each transaction before
-- sending the next.
-- Example:
-- ```
-- exerciseResult <- concurrently $ do
--   alice `submit` createCmd ...
--   res <- alice `submit` exerciseCmd ...
--   bob `submit` createCmd ...
--   pure res
-- ```
concurrently : HasCallStack => ConcurrentSubmits a -> Script a
concurrently submissions = fmap submissions.continue $ lift $ Submit with
  submissions = submissions.submits

-- | MOVE Daml.Script
-- Defines an applicative that can run transaction submissions. Usually this is simply `Script`.
class Applicative script => ScriptSubmit script where
  liftSubmission : HasCallStack => ConcurrentSubmits a -> script a

-- | MOVE Daml.Script
instance ScriptSubmit ConcurrentSubmits where
  liftSubmission : HasCallStack => ConcurrentSubmits a -> ConcurrentSubmits a
  liftSubmission = identity

-- | MOVE Daml.Script
instance ScriptSubmit Script where
  liftSubmission : HasCallStack => ConcurrentSubmits a -> Script a
  liftSubmission = concurrently

-- | HIDE
submitInternal : (HasCallStack, ScriptSubmit script) => SubmitOptions -> ErrorBehaviour -> Commands a -> script (Either SubmitError (a, TransactionTree))
submitInternal opts errorBehaviour cmds = liftSubmission $ ConcurrentSubmits with
  submits =
    [ Submission with
        sActAs = actAsNonEmpty opts.soActAs
        sReadAs = opts.soReadAs
        sDisclosures = opts.soDisclosures
        sPackagePreference = opts.soPackagePreference
        sPrefetchKeys = opts.soPrefetchKeys
        sErrorBehaviour = errorBehaviour
        sCommands = cmds.commands
        sLocation = head getExposedCallStack
    ]
  continue = \case
    [res] -> fmap (first cmds.continue) res
    _ -> error "CRASH! Incorrect number of submission results returned from ConcurrentSubmit!"

-- | HIDE
-- assertFromRight for mustsucceed. Error path should never be called, as scala handles it.
mustSucceed : Either a b -> b
mustSucceed = \case
  Left _ -> error "MustSucceed Failed"
  Right r -> r

-- | HIDE
-- assertFromLeft for mustfail. Error path should never be called, as scala handles it.
mustFail : Either a b -> a
mustFail = \case
  Left e -> e
  Right _ -> error "MustFail Succeeded"

-- ##### Main API #####
-- | MOVE Daml.Script
-- Equivalent to `submit` but returns the result and the full transaction tree.
submitResultAndTree : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script (a, TransactionTree)
submitResultAndTree opts cmds = mustSucceed <$> submitInternal (toSubmitOptions opts) MustSucceed cmds

-- | MOVE Daml.Script
-- Equivalent to `trySubmit` but returns the result and the full transaction tree.
trySubmitResultAndTree : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script (Either SubmitError (a, TransactionTree))
trySubmitResultAndTree opts cmds = submitInternal (toSubmitOptions opts) Try cmds

-- | MOVE Daml.Script
-- Equivalent to `submitMustFail` but returns the error thrown.
submitWithError : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script SubmitError
submitWithError opts cmds = mustFail <$> submitInternal (toSubmitOptions opts) MustFail cmds

-- | MOVE Daml.Script
-- `submit p cmds` submits the commands `cmds` as a single transaction
-- from party `p` and returns the value returned by `cmds`.
-- The `options` field can either be any "Parties" like type (See `IsParties`) or `SubmitOptions`
-- which allows for finer control over parameters of the submission.
--
-- If the transaction fails, `submit` also fails.
submit : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script a
submit opts cmds = fst <$> submitResultAndTree opts cmds

{-# DEPRECATED submitWithOptions "Daml 2.9 compatibility helper, use 'submit' instead" #-}
-- | MOVE Daml.Script
submitWithOptions : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script a
submitWithOptions = submit

-- | MOVE Daml.Script
-- Equivalent to `submit` but returns the full transaction tree.
submitTree : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script TransactionTree
submitTree opts cmds = snd <$> submitResultAndTree opts cmds

-- | MOVE Daml.Script
-- Submit a transaction and recieve back either the result, or a `SubmitError`.
-- In the majority of failures, this will not crash at runtime.
trySubmit : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script (Either SubmitError a)
trySubmit opts cmds = fmap fst <$> trySubmitResultAndTree opts cmds

-- | MOVE Daml.Script
-- Equivalent to `trySubmit` but returns the full transaction tree.
trySubmitTree : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script (Either SubmitError TransactionTree)
trySubmitTree opts cmds = fmap snd <$> trySubmitResultAndTree opts cmds

-- | MOVE Daml.Script
-- `submitMustFail p cmds` submits the commands `cmds` as a single transaction
-- from party `p`.
-- See submitWithOptions for details on the `options` field
--
-- It only succeeds if the submitting the transaction fails.
submitMustFail : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script ()
submitMustFail opts cmds = void $ submitWithError opts cmds

{-# DEPRECATED submitMustFailWithOptions "Daml 2.9 compatibility helper, use 'submitMustFail' instead" #-}
-- | MOVE Daml.Script
submitMustFailWithOptions : (HasCallStack, ScriptSubmit script, IsSubmitOptions options) => options -> Commands a -> script ()
submitMustFailWithOptions = submitMustFail

-- ##### Old compatibility conveniences #####

{-# DEPRECATED submitMulti "Legacy API, use `submit`, `actAs` and `readAs` separately" #-}
-- | MOVE Daml.Script
-- `submitMulti actAs readAs cmds` submits `cmds` as a single transaction
-- authorized by `actAs`. Fetched contracts must be visible to at least
-- one party in the union of actAs and readAs.
-- 
-- Note: This behaviour can be achieved using `submit (actAs actors <> readAs readers) cmds`
-- and is only provided for backwards compatibility.
submitMulti : (HasCallStack, ScriptSubmit script) => [Party] -> [Party] -> Commands a -> script a
submitMulti actors readers cmds = submit (actAs actors <> readAs readers) cmds

{-# DEPRECATED submitMultiMustFail "Legacy API, use `submitMustFail`, `actAs` and `readAs` separately" #-}
-- | MOVE Daml.Script
-- `submitMultiMustFail actAs readAs cmds` behaves like `submitMulti actAs readAs cmds`
-- but fails when `submitMulti` succeeds and the other way around.
--
-- Note: This behaviour can be achieved using `submitMustFail (actAs actors <> readAs readers) cmds`
-- and is only provided for backwards compatibility.
submitMultiMustFail : (HasCallStack, ScriptSubmit script) => [Party] -> [Party] -> Commands a -> script ()
submitMultiMustFail actors readers cmds = submitMustFail (actAs actors <> readAs readers) cmds

{-# DEPRECATED submitTreeMulti "Legacy API, use `submitTree`, `actAs` and `readAs` separately" #-}
-- | MOVE Daml.Script
-- Equivalent to `submitMulti` but returns the full transaction tree.
-- 
-- Note: This behaviour can be achieved using `submitTree (actAs actors <> readAs readers) cmds`
-- and is only provided for backwards compatibility.
submitTreeMulti : (HasCallStack, ScriptSubmit script) => [Party] -> [Party] -> Commands a -> script TransactionTree
submitTreeMulti actors readers cmds = submitTree (actAs actors <> readAs readers) cmds

{-# DEPRECATED trySubmitMulti "Legacy API, use `trySubmit`, `actAs` and `readAs` separately" #-}
-- | MOVE Daml.Script
-- Alternate version of `trySubmit` that allows specifying the actAs and readAs parties.
-- 
-- Note: This behaviour can be achieved using `trySubmit (actAs actors <> readAs readers) cmds`
-- and is only provided for backwards compatibility.
trySubmitMulti : (HasCallStack, ScriptSubmit script) => [Party] -> [Party] -> Commands a -> script (Either SubmitError a)
trySubmitMulti actors readers cmds = trySubmit (actAs actors <> readAs readers) cmds

-- #### Provided for testing for now, likely to be removed #####
{-# DEPRECATED trySubmitConcurrently "Legacy API, use `concurrent` and `trySubmit` separately" #-}
-- | MOVE Daml.Script
trySubmitConcurrently : HasCallStack => Party -> [Commands a] -> Script [Either SubmitError a]
trySubmitConcurrently p cmdss = concurrently $ forA cmdss $ trySubmit p

{-# DEPRECATED submitWithDisclosures "Legacy API, use `trySubmit` and `disclosures` separately" #-}
-- | MOVE Daml.Script
submitWithDisclosures : HasCallStack => Party -> [Disclosure] -> Commands a -> Script a
submitWithDisclosures p disclosures cmds = submit (actAs p <> discloseMany disclosures) cmds

{-# DEPRECATED submitWithDisclosuresMustFail "Legacy API, use `submitMustFail` and `disclosures` separately" #-}
-- | MOVE Daml.Script
submitWithDisclosuresMustFail : HasCallStack => Party -> [Disclosure] -> Commands a -> Script ()
submitWithDisclosuresMustFail p disclosures cmds = submitMustFail (actAs p <> discloseMany disclosures) cmds
