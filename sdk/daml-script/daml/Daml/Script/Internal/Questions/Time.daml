-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Internal.Questions.Time where

import Daml.Script.Internal.LowLevel
import DA.Time
import DA.Stack

-- | HIDE
data SetTime = SetTime with
  time : Time
-- | HIDE
instance IsQuestion SetTime () where command = "SetTime"

-- | MOVE Daml.Script
-- Set the time via the time service.
--
-- This is only supported in Daml Studio and `daml test` as well as
-- when running over the gRPC API against a ledger in static time mode.
--
-- Note that the ledger time service does not support going backwards in time.
-- However, you can go back in time in Daml Studio.
setTime : HasCallStack => Time -> Script ()
setTime = lift . SetTime

-- | HIDE
data GetTime = GetTime {}
-- | HIDE
instance IsQuestion GetTime Time where command = "GetTime"

-- | MOVE Daml.Script
-- In wallclock mode, this is the current UTC time both over gRPC and over the JSON API.
--
-- In static time mode over gRPC, this will
-- query the ledger time service for the current time when running over
-- gRPC.
--
-- In static time mode over the JSON API, it will always
-- return the Unix epoch.
instance HasTime Script where
  getTime = lift GetTime

-- | HIDE
data Sleep = Sleep with
  duration : RelTime
-- | HIDE
instance IsQuestion Sleep () where command = "Sleep"

-- | MOVE Daml.Script
-- Sleep for the given duration.
--
-- This is primarily useful in tests
-- where you repeatedly call `query` until a certain state is reached.
--
-- Note that this will sleep for the same duration in both wall clock and static time mode.
sleep : HasCallStack => RelTime -> Script ()
sleep = lift . Sleep

-- | MOVE Daml.Script
-- Advance ledger time by the given interval.
--
-- This is only supported in Daml Studio and `daml test` as well as
-- when running over the gRPC API against a ledger in static time mode.
-- Note that this is not an atomic operation over the
-- gRPC API so no other clients should try to change time while this is
-- running.
--
-- Note that the ledger time service does not support going backwards in time.
-- However, you can go back in time in Daml Studio.
passTime : RelTime -> Script ()
passTime rt = do
  t <- getTime
  setTime (addRelTime t rt)
