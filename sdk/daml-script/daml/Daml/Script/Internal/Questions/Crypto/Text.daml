-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}
{-# OPTIONS_GHC -Wno-x-crypto #-}

#ifndef DAML_CRYPTO

-- | HIDE
module Daml.Script.Internal.Questions.Crypto.Text where

#else

-- | Daml Script support for working with Crypto builtins.
module Daml.Script.Internal.Questions.Crypto.Text where

import Daml.Script.Internal.LowLevel
import DA.Crypto.Text
import DA.Stack

-- | A DER formatted private key to be used for ECDSA message signing
type PrivateKeyHex = BytesHex

data Secp256k1Sign = Secp256k1Sign with
  privateKey: PublicKeyHex
  message: BytesHex
instance IsQuestion Secp256k1Sign BytesHex where command = "Secp256k1Sign"

#ifdef DAML_CRYPTO_ADDITIONS
-- | HIDE
data Secp256k1WithEcdsaSign = Secp256k1WithEcdsaSign with
  privateKey: PublicKeyHex
  message: BytesHex
-- | HIDE
instance IsQuestion Secp256k1WithEcdsaSign BytesHex where command = "Secp256k1WithEcdsaSign"

-- | MOVE Daml.Script
-- Using a DER formatted private key (encoded as a hex string) use Secp256k1 to sign a hex encoded string message.
--
-- Note that this implementation uses a random source with a fixed PRNG and seed, ensuring it behaves deterministically during testing.
--
-- For example, CCTP attestation services may be mocked in daml-script code.
secp256k1signWithEcdsaOnly : HasCallStack => PrivateKeyHex -> BytesHex -> Script BytesHex
secp256k1signWithEcdsaOnly pk msg = lift $ Secp256k1WithEcdsaSign pk msg
#endif

-- | MOVE Daml.Script
-- Using a DER formatted private key (encoded as a hex string) use Secp256k1 to sign a SHA256 digest of a hex encoded string message.
--
-- Note that this implementation uses a random source with a fixed PRNG and seed, ensuring it behaves deterministically during testing.
--
-- For example, CCTP attestation services may be mocked in daml-script code.
secp256k1sign : HasCallStack => PrivateKeyHex -> BytesHex -> Script BytesHex
secp256k1sign pk msg = lift(Secp256k1Sign pk msg)

data Secp256k1KeyPair = Secp256k1KeyPair with
  privateKey: PrivateKeyHex
  publicKey: PublicKeyHex

data Secp256k1GenerateKeyPair = Secp256k1GenerateKeyPair {}
instance IsQuestion Secp256k1GenerateKeyPair Secp256k1KeyPair where command = "Secp256k1GenerateKeyPair"

-- | Generate DER formatted Secp256k1 public/private key pairs.
secp256k1generatekeypair : HasCallStack => Script Secp256k1KeyPair
secp256k1generatekeypair = lift Secp256k1GenerateKeyPair

#endif
