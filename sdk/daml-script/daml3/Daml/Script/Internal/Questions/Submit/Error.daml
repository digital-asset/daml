-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Script.Internal.Questions.Submit.Error
  ( DevErrorType (..)
  , ContractNotFoundAdditionalInfo -- Don't export constructors, users should not be able to rely on the structure.
  , isNotActive
  , SubmitError (..)
  , UpgradeErrorType (..)
  ) where

import Daml.Script.Internal.Questions.Util
import DA.NonEmpty
import DA.Text
import DA.Foldable (foldMap)
import DA.Exception

data UpgradeErrorType
  = ValidationFailed
  | DowngradeDropDefinedField
  | ViewMismatch
  | ContractNotUpgradable
  deriving Show

-- | Errors that will be promoted to SubmitError once stable - code needs to be kept in sync with SubmitError.scala
data DevErrorType
  = ChoiceGuardFailed
  | WronglyTypedContractSoft
  | UnknownNewFeature -- ^ This should never happen - Update Scripts when you see this!
  deriving Show

-- | Additional debugging info optionally provided by the ledger
data ContractNotFoundAdditionalInfo
  = NotFound -- The generic "this contract does not exist"
  | NotActive with -- The contract did exist, but has since been archived
      additionalInfoCid : AnyContractId
  | NotEffective with -- The contract "will" exist, only thrown from the IDELedger where one can go backwards in time
      additionalInfoCid : AnyContractId
      effectiveAt : Text
  | NotVisible with -- The contract exists, but the readAs/actAs party union cannot see it
      additionalInfoCid : AnyContractId
      actAs : [Party]
      readAs : [Party]
      observers : [Party]
  deriving Show

isNotActive : ContractNotFoundAdditionalInfo -> Optional AnyContractId
isNotActive (NotActive {additionalInfoCid}) = Some additionalInfoCid
isNotActive _ = None

-- | Errors that can be thrown by a command submission - code needs to be kept in sync with SubmitError.scala
data SubmitError
  = -- | Contract with given contract ID could not be found, and has never existed on this participant
    -- When run on Canton, there may be more than one contract ID, and additionalDebuggingInfo is always None
    -- On the other hand, when run on IDELedger, there is only ever one contract ID, and additionalDebuggingInfo is always Some
    ContractNotFound with
      unknownContractIds : NonEmpty Text
        -- ^ Provided as text, as we do not know the template ID of a contract if the lookup fails
      additionalDebuggingInfo : Optional ContractNotFoundAdditionalInfo
       -- ^ should always be None in Canton's case, see https://github.com/digital-asset/daml/issues/17154
  | -- | Contract with given contract key could not be found
    ContractKeyNotFound with
      contractKey : AnyContractKey
  | -- | Generic authorization failure, included missing party authority, invalid signatories, etc.
    AuthorizationError with
      authorizationErrorMessage : Text -- We can't pass over the data at the moment, so we just give the full string error here, for anyone that wants to check it
  | -- | Given disclosed contract key does not match the contract key of the contract on ledger.
    DisclosedContractKeyHashingError with
      contractId : AnyContractId
      expectedKey : AnyContractKey
      givenKeyHash : Text
  | -- | Attempted to create a contract with a contract key that already exists
    DuplicateContractKey with
      duplicateContractKey : Optional AnyContractKey
        -- ^ Canton will often not provide this key, IDELedger will
  | -- | Contract key lookup yielded different results
    InconsistentContractKey with
      contractKey : AnyContractKey
  | -- | Unhandled user thrown exception
    UnhandledException with
      exc : Optional AnyException
        -- ^ Errors more complex than simple records cannot currently be encoded over the grpc status. Such errors will be missing here.
  | -- | Transaction failure due to abort/assert calls pre-exceptions
    UserError with
      userErrorMessage : Text -- TODO[SW] Post LF 1.14, only `submitMustFail` can throw this. I'll refactor that later and likely remove this error
  | -- | Failure due to false result from `ensure`, strictly pre-exception.
    -- According to docs, not throwable with LF >= 1.14.
    -- On LF >= 1.14, a failed `ensure` will result in a `PreconditionFailed`
    -- exception wrapped in `UnhandledException`.
    TemplatePreconditionViolated
  | -- | Attempted to create a contract with empty contract key maintainers
    CreateEmptyContractKeyMaintainers with
      invalidTemplate : AnyTemplate
  | -- | Attempted to fetch a contract with empty contract key maintainers
    FetchEmptyContractKeyMaintainers with
      failedTemplateKey : AnyContractKey
  | -- | Attempted to exercise/fetch a contract with the wrong template type
    WronglyTypedContract with
      contractId : AnyContractId -- ^ Any contract Id of the actual contract
      expectedTemplateId : TemplateTypeRep
      actualTemplateId : TemplateTypeRep
  | -- | Attempted to use a contract as an interface that it does not implement
    ContractDoesNotImplementInterface with
      contractId : AnyContractId
      templateId : TemplateTypeRep
      interfaceId : TemplateTypeRep -- Consider InterfaceTypeRep from DA.Internal.Interface.AnyView.Types (so exposing it in stdlib)
  | -- | Attempted to use a contract as a required interface that it does not implement
    ContractDoesNotImplementRequiringInterface with
      contractId : AnyContractId
      templateId : TemplateTypeRep
      requiredInterfaceId : TemplateTypeRep
      requiringInterfaceId : TemplateTypeRep
  | -- | Attempted to compare values that are not comparable
    NonComparableValues
  | -- | Illegal Contract ID found in Contract Key
    ContractIdInContractKey with
      -- TODO[SW]: Update the ContractIdInContractKey scala error to include a TemplateId (which it does have when thrown) in separate PR
      -- Then we can uncomment this and add the plumbing
      -- contractKey : AnyContractKey
  | -- | Attempted to compare a local and global contract ID with the same discriminator. You're doing something very wrong
    ContractIdComparability with
      globalExistingContractId : Text
        -- ^ We do not know the template ID at time of comparison.
  | -- | A value has been nested beyond a given depth limit
    ValueNesting with
        limit : Int
          -- ^ Nesting limit that was exceeded
  | -- | The transaction refers to locked contracts which are in the process of being created, transferred, or
    -- archived by another transaction. If the other transaction fails, this transaction could be successfully retried.
    LocalVerdictLockedContracts with
      localVerdictLockedContracts : [AnyContractId]
          -- ^ Locked contract ids
  | -- | The transaction refers to locked keys which are in the process of being modified by another transaction.
    LocalVerdictLockedKeys with
      localVerdictLockedKeys : [AnyContractKey]
          -- ^ Locked contract keys
  | -- | Upgrade exception
    UpgradeError with -- We just give the error's simple class name and the prettied message it generates. Scripts doesn't need anything more right now.
      errorType : UpgradeErrorType
      errorMessage : Text
  | -- | Development feature exceptions
    DevError with -- We just give the error's simple class name and the prettied message it generates. Scripts doesn't need anything more right now.
      devErrorType : DevErrorType
      devErrorMessage : Text
  | -- | Generic catch-all for missing errors.
    UnknownError with
      unknownErrorMessage : Text
  | -- | One of the above error types where the full exception body did not fit into the response, and was incomplete.
    -- TODO: Should we expose this at all?
    TruncatedError with
      truncatedErrorType : Text
        -- ^ One of the constructor names of SubmitFailure except DevError, UnknownError, TruncatedError
      truncatedErrorMessage : Text

instance Show AnyContractKey where
  show _ = "<some ContractKey>"
  
instance Show TemplateTypeRep where
  show _ = "<some templateTypeRep>"  
  
-- TODO(https://github.com/digital-asset/daml/issues/18328): improve error messages involving types
instance Show SubmitError where
  show err = case err of
    ContractNotFound { unknownContractIds, additionalDebuggingInfo } ->
      "Could not find contract with ID(s) " <> intercalate ", " (toList unknownContractIds) <> "."
      <> foldMap (\info -> " Additional debugging info: " <> show info) additionalDebuggingInfo
    ContractKeyNotFound contractKey -> "Could not find contract with given key"
    AuthorizationError errMessage -> "Authorization failure: " <> errMessage
    DisclosedContractKeyHashingError contractId contractKey contractKeyHash ->
      "Disclosed contract with ID " <> show contractId <> " used incorrect payload - contract key hash: " <> contractKeyHash
    DuplicateContractKey contractKey -> "Attempted to create a contract with a contract key that is already in use"
    InconsistentContractKey contractKey -> "Inconsistent contract key between daml and ledger"
    UnhandledException None -> "An Exception was thrown and not caught"
    UnhandledException (Some exn) -> "An Exception was thrown and not caught - message: " <> (message exn)
    UserError errMessage -> "User Error: " <> errMessage
    TemplatePreconditionViolated {} -> "Template precondition was violated"
    CreateEmptyContractKeyMaintainers _ -> "Attempted to create a contract with empty key maintainers"
    FetchEmptyContractKeyMaintainers contractKey -> "Attempted to fetch a contract with empty key maintainers"
    WronglyTypedContract contractId _ _ ->
      "Attempted to exercise/fetch a contract with the wrong template type - contract ID: " <> show contractId
    ContractDoesNotImplementInterface contractId _ _ ->
      "Attempted to use a contract as an interface that it does not implement - contract ID: " <> show contractId
    ContractDoesNotImplementRequiringInterface contractId _ _ _ ->
      "Attempted to use a contract as a required interface that it does not implement - contract ID: " <> show contractId
    NonComparableValues {} -> "Failed to compare values"
    ContractIdInContractKey {} -> "Illegal contract ID in contract key"
    ContractIdComparability contractId -> "Attempted to compare local and global contract IDs of the same contract - contract ID: " <> contractId
    ValueNesting limit -> "Exceeded maximum nesting depth for values - limit: " <> show limit
    LocalVerdictLockedContracts cids -> "Attempted to use locked contracts: " <> show cids
    LocalVerdictLockedKeys _ -> "Attempted to use locked contract keys"
    UpgradeError ty msg -> "UpgradeError of type " <> show ty <> " and message \"" <> msg <> "\""
    DevError ty msg -> "DevError of type " <> show ty <> " and message \"" <> msg <> "\""
    UnknownError msg -> "Unknown error: " <> msg
    TruncatedError ty msg -> "TruncatedError of type " <> ty <> " and message \"" <> msg <> "\""
