# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test",
    "da_scala_test_suite",
    "lf_scalacopts_stricter",
)
load("//bazel_tools:haskell.bzl", "da_haskell_test")
load("@build_environment//:configuration.bzl", "sdk_version")
load("@os_info//:os_info.bzl", "is_windows")
load("//rules_daml:daml.bzl", "daml_compile")
load(
    "//daml-lf/language:daml-lf.bzl",
    "COMPILER_LF_VERSIONS",
    "LEGACY_DAML_SCRIPT_LF_VERSIONS",
    "lf_version_configuration",
    "mangle_for_damlc",
)

[
    genrule(
        name = "script-test",
        srcs =
            glob(["**/*.daml"]) + [
                "//daml-script/daml:daml-script-{}.dar".format(target),
                "//docs:source/daml-script/template-root/src/ScriptExample.daml",
                "//daml-script/test:template.dar",
                "//daml-script/test:retrointerface.dar",
            ],
        outs = ["script-test.dar"],
        cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/ScriptTest.daml) $$TMP_DIR/daml
      cp -L $(location :daml/MultiTest.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestContractId.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestExceptions.daml) $$TMP_DIR/daml
      cp -L $(location :daml/TestInterfaces.daml) $$TMP_DIR/daml
      cp -L $(location //docs:source/daml-script/template-root/src/ScriptExample.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/test:template.dar) $$TMP_DIR/
      cp -L $(location //daml-script/test:retrointerface.dar) $$TMP_DIR/
      cat << EOF >> $$TMP_DIR/daml/ScriptExample.daml
initializeFixed : Script ()
initializeFixed = do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  bank <- allocatePartyWithHint "Bank" (PartyIdHint "Bank")
  let parties = LedgerParties{{..}}
  initialize parties
EOF
      cp -L $(location //daml-script/daml:daml-script-{target}.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script-{target}.dar
data-dependencies:
  - template.dar
  - retrointerface.dar
build-options:
  - --target={target}
  - --typecheck-upgrades=no
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test.dar)
      rm -rf $$TMP_DIR
    """.format(
            sdk = sdk_version,
            target = target,
        ),
        tools = ["//compiler/damlc"],
        visibility = ["//visibility:public"],
    )
    for target in [lf_version_configuration.get("latest")]
]

[
    # Test DAR in x.dev to test new features.
    genrule(
        name = "script-test-{}".format(lf_version),
        srcs =
            glob(["**/*.daml"]) + ["//daml-script/daml-lts:daml-script-lts-{}.dar".format(lf_version)],
        outs = ["script-test-{}.dar".format(lf_version)],
        cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/TestChoiceAuthority.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/daml-lts:daml-script-lts-{lf_version}.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test-{mangled_lf_version}
version: 0.0.1
source: daml
build-options:
  - --target={lf_version}
dependencies:
  - daml-stdlib
  - daml-prim
data-dependencies:
  - daml-script-lts-{lf_version}.dar
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test-{lf_version}.dar)
      rm -rf $$TMP_DIR
    """.format(
            lf_version = lf_version,
            mangled_lf_version = mangle_for_damlc(lf_version),
            sdk = sdk_version,
        ),
        tools = ["//compiler/damlc"],
        visibility = ["//visibility:public"],
    )
    for lf_version in [
        v
        for v in COMPILER_LF_VERSIONS
        if not (v in LEGACY_DAML_SCRIPT_LF_VERSIONS)
    ]
]

# A variant of script-test that has not been uploaded to the ledger
# to test missing template ids. We only care that this has a different package id.
genrule(
    name = "script-test-no-ledger",
    srcs =
        glob(["**/*.daml"]) + [
            "//daml-script/daml:daml-script.dar",
            "//docs:source/daml-script/template-root/src/ScriptExample.daml",
        ],
    outs = ["script-test-no-ledger.dar"],
    cmd = """
      set -eou pipefail
      TMP_DIR=$$(mktemp -d)
      mkdir -p $$TMP_DIR/daml
      cp -L $(location :daml/ScriptTest.daml) $$TMP_DIR/daml
      cp -L $(location //daml-script/daml:daml-script.dar) $$TMP_DIR/
      cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: script-test-no-ledger
source: daml
version: 0.0.2
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-script.dar
EOF
      $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$(location script-test-no-ledger.dar)
      rm -rf $$TMP_DIR
    """.format(sdk = sdk_version),
    tools = ["//compiler/damlc"],
    visibility = ["//visibility:public"],
)

da_scala_library(
    name = "test-utils",
    srcs = glob(["src/test-utils/**/*.scala"]),
    scala_deps = [
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalatest_scalatest_wordspec",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_kernel",
        "@maven//:io_circe_circe_core",
        "@maven//:io_circe_circe_yaml_common",
        "@maven//:io_circe_circe_yaml",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = [
        "cpu:4",
        "dev-canton-test",
    ],
    unused_dependency_checker_mode = "warn",
    visibility = ["//visibility:public"],
    deps = [
        "//:sdk-version-scala-lib",
        "//bazel_tools/runfiles:scala_runfiles",
        "//canton:community_base",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/scala-utils",
        "//libs-scala/testing-utils",
        "//test-common/canton/it-lib",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:io_grpc_grpc_api",
        "@maven//:io_grpc_grpc_netty",
        "@maven//:io_grpc_grpc_stub",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

daml_compile(
    name = "submit-test-1.15",
    srcs = [":daml/DamlScriptLtsSubmit.daml"],
    data_dependencies = [
        "//daml-script/daml-lts:daml-script-lts-1.15.dar",
    ],
    project_name = "submit-test",
    target = "1.15",
    version = "1.0.0",
)

daml_compile(
    name = "upgrade-test-lib",
    srcs = [":daml/UpgradeTestLib.daml"],
    data_dependencies = [
        "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
    ],
    project_name = "upgrade-test-lib",
    # TODO(https://github.com/digital-asset/daml/issues/18457): split the lib into modules that use
    #  contract keys and those that don't. Revert to the default target for those that don't.
    target = "1.dev",
    version = "1.0.0",
)

daml_compile(
    name = "template",
    srcs = [":daml/Template.daml"],
    target = "1.15",
)

daml_compile(
    name = "retrointerface",
    srcs = [":daml/RetroInterface.daml"],
    data_dependencies = ["//daml-script/test:template.dar"],
    target = "1.15",
)

filegroup(
    name = "upgrade-test-files",
    srcs = glob(["daml/upgrades/*.daml"]),
    visibility = ["__pkg__"],
)

da_scala_test_suite(
    name = "test",
    size = "large",
    srcs = glob(
        ["src/com/**/*.scala"],
        exclude = [
            "src/com/**/*Dev*.scala",
            "src/com/digitalasset/daml/lf/engine/script/test/UpgradesIT.scala",
            "src/com/digitalasset/daml/lf/engine/script/test/DamlScriptUtilityPackage.scala",
        ],
    ),
    data = [
        ":script-test.dar",
        ":script-test-no-ledger.dar",
        ":submit-test-1.15.dar",
        "//compiler/damlc/tests:submit-test.dar",
        "//daml-script/runner:daml-script-binary",
        "//daml-script/test:retrointerface.dar",
        "//daml-script/test:template.dar",
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_http",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_scalaz_scalaz_core",
    ],
    tags = [
        "cpu:4",
    ],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//ledger-service/cli-opts",
        "//ledger-service/http-json:http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/lf-value-json",
        "//ledger-service/metrics",
        "//ledger-service/utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//libs-scala/contextualized-logging",
        "//libs-scala/fs-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/rs-grpc-pekko",
        "//libs-scala/scala-utils",
        "//libs-scala/testing-utils",
        "//observability/metrics",
        "//test-common/canton/it-lib",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:io_netty_netty_handler",
    ],
)

da_scala_test(
    name = "upgrade-test",
    size = "large",
    srcs = ["src/com/digitalasset/daml/lf/engine/script/test/UpgradesIT.scala"],
    data = [
        ":upgrade-test-files",
        ":upgrade-test-lib.dar",
        "//compiler/damlc",
        "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_stream",
    ],
    tags = [
        "cpu:4",
    ],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/data",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/testing-utils",
        "//libs-scala/timer-utils",
        "//test-common/canton/it-lib",
    ],
) if not is_windows else None
# skipping windows for now, it doesn't seem to like the filegroup `:upgrade-test-files`

da_scala_test(
    name = "utility-package-test",
    size = "small",
    srcs = ["src/com/digitalasset/daml/lf/engine/script/test/DamlScriptUtilityPackage.scala"],
    data = [
        "//daml-script/daml:daml-script-1.14.dar",
        "//daml-script/daml:daml-script-1.15.dar",
        "//daml-script/daml-lts:daml-script-lts-1.14.dar",
        "//daml-script/daml-lts:daml-script-lts-1.15.dar",
        "//daml-script/daml-lts:daml-script-lts-1.17.dar",
        "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
    ],
    resources = glob(["src/main/resources/**/*"]),
    deps = [
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/data",
        "//daml-lf/language",
    ],
)

da_scala_binary(
    name = "compile-upgrade-test-cases",
    srcs = ["src/com/digitalasset/daml/lf/engine/script/CompileUpgradeTestCases.scala"],
    data = [
        ":upgrade-test-files",
        ":upgrade-test-lib.dar",
        "//compiler/damlc",
        "//daml-script/daml-lts:daml-script-lts-1.dev.dar",
    ],
    main_class = "com.digitalasset.daml.lf.engine.script.CompileUpgradeTestCases",
    resources = glob(["src/main/resources/**/*"]),
    tags = [
        "cpu:4",
    ],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
    ],
)

da_scala_test_suite(
    name = "test-dev",
    srcs = glob(
        ["src/com/**/*Dev*.scala"],
    ),
    data = [
        ":script-test-1.dev.dar",
        "//compiler/damlc/tests:query-test.dar",
        "//compiler/damlc/tests:try-submit-concurrently-test.dar",
        "//daml-script/runner:daml-script-binary",
    ],
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_http",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:io_spray_spray_json",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:com_typesafe_scala_logging_scala_logging",
    ],
    tags = [
        "cpu:4",
        "dev-canton-test",
    ],
    deps = [
        ":test-utils",
        "//bazel_tools/runfiles:scala_runfiles",
        "//daml-lf/api-type-signature",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//daml-lf/transaction",
        "//daml-script/runner:script-runner-lib",
        "//ledger-service/cli-opts",
        "//ledger-service/http-json:http-json-ce",
        "//ledger-service/http-json-cli:ce",
        "//ledger-service/lf-value-json",
        "//ledger-service/metrics",
        "//ledger-service/utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//libs-scala/caching",
        "//libs-scala/contextualized-logging",
        "//libs-scala/fs-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/logging-entries",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/resources-grpc",
        "//libs-scala/resources-pekko",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/rs-grpc-pekko",
        "//libs-scala/scala-utils",
        "//libs-scala/testing-utils",
        "//observability/metrics",
        "//test-common/canton/it-lib",
        "@maven//:com_auth0_java_jwt",
        "@maven//:io_dropwizard_metrics_metrics_core",
    ],
)
