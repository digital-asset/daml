-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module LedgerApiChoiceUpgrade (main) where

import UpgradeTestLib
import qualified V1.UpgradedChoice as V1
import qualified V2.UpgradedChoice as V2
import qualified V1.UpgradedChoiceClient as V1
import qualified V2.UpgradedChoiceClient as V2
import DA.Optional (fromSome)
import PackageIds

{- PACKAGE
name: ledger-api-choice-upgrades
versions: 2
-}

{- MODULE
package: ledger-api-choice-upgrades
contents: |
  module UpgradedChoice where

  data UpgradedChoiceReturn = UpgradedChoiceReturn with
      someData : Text
      someOtherData : Optional Text                     -- @V  2
    deriving (Eq, Show)

  template UpgradedChoiceTemplate
    with
      party : Party
      newField : Optional Text                          -- @V  2
    where
      signatory party

      choice UpgradedChoice : UpgradedChoiceReturn with
          firstArg : Text
          secondArg : Optional Text                     -- @V  2
        controller party
        do
          pure $ UpgradedChoiceReturn
            (firstArg <> ":V1")                         -- @V 1
            (firstArg <> ":V2:" <> show secondArg)      -- @V  2
            secondArg                                   -- @V  2
-}

{- PACKAGE
name: ledger-api-choice-upgrades-client
versions: 2
depends: |
  ledger-api-choice-upgrades-1.0.0
  ledger-api-choice-upgrades-2.0.0
-}

{- MODULE
package: ledger-api-choice-upgrades-client
contents: |
  module UpgradedChoiceClient where

  import qualified V1.UpgradedChoice as V1
  import qualified V2.UpgradedChoice as V2

  template UpgradedChoiceClientTemplate
    with
      party : Party
    where
      signatory party

      choice CreateAndExercise : V1.UpgradedChoiceReturn with -- @V 1
      choice CreateAndExercise : V2.UpgradedChoiceReturn with -- @V 2
        controller party
        do 
          cid <- create (V1.UpgradedChoiceTemplate party)
          exercise cid (V1.UpgradedChoice "v1 to v1")                                                                               -- @V 1
          exercise (coerceContractId @V1.UpgradedChoiceTemplate @V2.UpgradedChoiceTemplate cid) (V2.UpgradedChoice "v1 to v1" None) -- @V 2
-}

v1PackageId : PackageId
v1PackageId = getPackageId "ledger-api-choice-upgrades-1.0.0"

v1ClientPackageId : PackageId
v1ClientPackageId = getPackageId "ledger-api-choice-upgrades-client-1.0.0"

main : TestTree
main = tests
  [ ("Explicitly call a V1 choice on a V1 contract over the ledger-api, expect V1 implementation used.", explicitV1ChoiceV1Contract)
  , ("Explicitly call a V2 choice on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", explicitV2ChoiceV1Contract)
  , subtree "Call a V1 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, contract + argument upgraded, daml-script downgrades return type."
     [ ("global contract", v1RequestV2PreferenceV1GlobalContract)
     , ("disclosed contract", v1RequestV2PreferenceV1DisclosedContract)
     , ("local contract", v1RequestV2PreferenceV1LocalContract)
     ]
  , ("Call a V2 choice without package ID on a V1 contract over the ledger-api, expect V2 implementation used, and contract upgraded.", inferredV2ChoiceV1Contract)
  , subtree "Call a V2 choice without package ID on a V1 contract over the ledger-api, with package preference V1, expect V1 implementation used, daml-script upgrades return type."
     [ ("global contract", v2RequestV1PreferenceV1GlobalContract)
     , ("disclosed contract", v2RequestV1PreferenceV1DisclosedContract)
     , ("local contract", v2RequestV1PreferenceV1LocalContract)
     ]
  , ("Explicitly call a V1 choice on a V2 contract over the ledger-api, expect V1 implementation used, and contract downgraded.", explicitV1ChoiceV2Contract)
  , ("Explicitly call a V2 choice on a V2 contract over the ledger-api, expect V2 implementation used.", explicitV2ChoiceV2Contract)
  ]

choiceTest
  : forall t2 t1 c2 r
  . (Template t1, HasAgreement t1, Choice t2 c2 r, Eq r, Show r)
  => (Party -> t1)
  -> c2
  -> Bool
  -> r
  -> Test
choiceTest makeV1Contract v2Choice explicitPackageIds expectedResult = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` (if explicitPackageIds then exerciseExactCmd else exerciseCmd) cidV2 v2Choice
  case res of
    Right returnValue -> returnValue === expectedResult
    Left err -> assertFail $ "Expected " <> show expectedResult <> " but got " <> show err

explicitV1ChoiceV1Contract : Test
explicitV1ChoiceV1Contract =
  choiceTest @V1.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V1.UpgradedChoice "v1 to v1") True (V1.UpgradedChoiceReturn "v1 to v1:V1")

explicitV2ChoiceV1Contract : Test
explicitV2ChoiceV1Contract =
  choiceTest @V2.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V2.UpgradedChoice "v2 to v1" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

-- When inferring, the V1 contract and choice argument is upgraded, and the return type is downgraded directly by daml script.
-- As such, we get the v2 implementation called, with the additional field set to None (as shown in the choice return)
-- and since the extra data in the return will also be none, the downgrade can succeed.
v1RequestV2PreferenceV1GlobalContract : Test
v1RequestV2PreferenceV1GlobalContract =
  choiceTest @V1.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V1.UpgradedChoice "v1 to v1") False (V1.UpgradedChoiceReturn "v1 to v1:V2:None")

v1RequestV2PreferenceV1DisclosedContract = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (V1.UpgradedChoiceTemplate a)
  disclosure <- fromSome <$> queryDisclosure a cid
  res <- (actAs a <> disclose disclosure) `trySubmit` exerciseCmd cid (V1.UpgradedChoice "v1 to v1")
  case res of
    Right returnValue -> returnValue === (V1.UpgradedChoiceReturn "v1 to v1:V2:None")
    Left err -> assertFail $ "Expected 'v1 to v1:V2:None' but got " <> show err

v1RequestV2PreferenceV1LocalContract = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (V1.UpgradedChoiceClientTemplate a)
  res <- a `trySubmit` exerciseCmd cid V1.CreateAndExercise
  case res of
    Right returnValue -> returnValue === (V1.UpgradedChoiceReturn "v1 to v1:V2:None")
    Left err -> assertFail $ "Expected 'v1 to v1:V2:None' but got " <> show err

inferredV2ChoiceV1Contract : Test
inferredV2ChoiceV1Contract =
  choiceTest @V2.UpgradedChoiceTemplate V1.UpgradedChoiceTemplate (V2.UpgradedChoice "v2 to v1" $ Some "extra") False (V2.UpgradedChoiceReturn "v2 to v1:V2:Some \"extra\"" $ Some "extra")

v2RequestV1PreferenceV1GlobalContract : Test
v2RequestV1PreferenceV1GlobalContract = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (V1.UpgradedChoiceTemplate a)
  let cidV2 = coerceContractId @V1.UpgradedChoiceTemplate @V2.UpgradedChoiceTemplate cid
  res <- (actAs a <> packagePreference [v1PackageId]) `trySubmit` exerciseCmd cidV2 (V2.UpgradedChoice "v1 to v1" None)
  case res of
    Right returnValue -> returnValue === (V2.UpgradedChoiceReturn "v1 to v1:V1" None)
    Left err -> assertFail $ "Expected 'v1 to v1:V1' but got " <> show err

v2RequestV1PreferenceV1DisclosedContract : Test
v2RequestV1PreferenceV1DisclosedContract = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (V1.UpgradedChoiceTemplate a)
  disclosure <- fromSome <$> queryDisclosure a cid
  let cidV2 = coerceContractId @V1.UpgradedChoiceTemplate @V2.UpgradedChoiceTemplate cid
  res <- (actAs a <> disclose disclosure <> packagePreference [v1PackageId]) `trySubmit` exerciseCmd cidV2 (V2.UpgradedChoice "v1 to v1" None)
  case res of
    Right returnValue -> returnValue === (V2.UpgradedChoiceReturn "v1 to v1:V1" None)
    Left err -> assertFail $ "Expected 'v1 to v1:V1' but got " <> show err

v2RequestV1PreferenceV1LocalContract = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (V1.UpgradedChoiceClientTemplate a)
  let cidV2 = coerceContractId @V1.UpgradedChoiceClientTemplate @V2.UpgradedChoiceClientTemplate cid
  res <- (actAs a <> packagePreference [v1ClientPackageId]) `trySubmit` exerciseCmd cidV2 V2.CreateAndExercise
  case res of
    Right returnValue -> returnValue === (V2.UpgradedChoiceReturn "v1 to v1:V1" None)
    Left err -> assertFail $ "Expected 'v1 to v1:V1' but got " <> show err


explicitV1ChoiceV2Contract : Test
explicitV1ChoiceV2Contract =
  choiceTest @V1.UpgradedChoiceTemplate (`V2.UpgradedChoiceTemplate` None) (V1.UpgradedChoice "v1 to v2") True (V1.UpgradedChoiceReturn "v1 to v2:V1")

explicitV2ChoiceV2Contract : Test
explicitV2ChoiceV2Contract =
  choiceTest @V2.UpgradedChoiceTemplate (`V2.UpgradedChoiceTemplate` Some "text") (V2.UpgradedChoice "v2 to v2" $ Some "extra") True (V2.UpgradedChoiceReturn "v2 to v2:V2:Some \"extra\"" $ Some "extra")

