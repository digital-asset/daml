-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module MultiParticipant (main) where

import UpgradeTestLib
import qualified V1.MultiParticipant as V1
-- import qualified V2.MultiParticipant as V2
import DA.Text

{- PACKAGE
name: multi-participant
versions: 2
-}

{- MODULE
package: multi-participant
contents: |
  module MultiParticipant where

  template SharedTemplate
    with
      party : Party
      ob : Party
      additionalField : Optional Text -- @V 2
    where
      signatory party
      observer ob
-}

main : TestTree
main = tests
  [ ("Both participants have v2, upgraded create succeeds.", bothParticipantsV2)
  , brokenOnIDELedger ("Submitting participant has v2, other has v1, expect v1 used.", submitV2OtherV1)
  , brokenOnIDELedger ("Submitting participant has v1, other has v2, expect v1 used.", submitV1OtherV2)
  ]

-- The error given back for unknown templates is either PACKAGE_NOT_FOUND (if the dar was never uploaded)
-- or NO_DOMAIN_FOR_SUBMISSION. We always upload all dars before the test, so we'll never hit the former error.
-- We've not yet implemented variants in the SubmitError type for NoDomainForSubmission, so we capture this error via UnknownError
assertUnknownPackageError : Either SubmitError a -> Script ()
assertUnknownPackageError (Left (UnknownError msg)) | "NO_DOMAIN_FOR_SUBMISSION" `isInfixOf` msg = pure ()
assertUnknownPackageError (Left err) = assertFail $ "Expected NO_DOMAIN_FOR_SUBMISSION error, but got: " <> show err
assertUnknownPackageError (Right _) = assertFail $ "Expected missing package error, but submission succeeded"

-- Convenient wrapper we can inline with the submit call
liftAssertUnknownPackageError : Script (Either SubmitError a) -> Script ()
liftAssertUnknownPackageError s = s >>= assertUnknownPackageError

bothParticipantsV2 : Test
bothParticipantsV2 = test $ do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1
  a `submit` createCmd V1.SharedTemplate with party = a, ob = b
  pure ()

submitV1OtherV2 : Test
submitV1OtherV2 = test $ do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1

  withUnvettedDarOnParticipant "multi-participant-2.0.0" participant0 $
    a `trySubmit` createCmd V1.SharedTemplate with party = a, ob = b

  pure ()

submitV2OtherV1 : Test
submitV2OtherV1 = test $ do
  a <- allocatePartyOn "alice" participant0
  b <- allocatePartyOn "bob" participant1

  withUnvettedDarOnParticipant "multi-participant-2.0.0" participant1 $
    liftAssertUnknownPackageError $ a `trySubmit` createCmd V1.SharedTemplate with party = a, ob = b
