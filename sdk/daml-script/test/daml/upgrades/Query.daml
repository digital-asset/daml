-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Query (main) where

import UpgradeTestLib
import qualified V1.Query as V1
import qualified V2.Query as V2

{- PACKAGE
name: query
versions: 2
-}

{- MODULE
package: query
contents: |
  module Query where

  template QueryTemplate
    with
      party: Party
      newField : Optional Text -- @V 2
    where
      signatory party
-}

main : TestTree
main = tests
  [ ("Upgrade a contract when querying", queryUpgraded)
  , ("Downgrade a contract with Nones when querying", queryDowngradedNone)
  , ("Fail to downgrade a contract with Somes when querying", queryDowngradedSome)
  ]

queryUpgraded : Test
queryUpgraded = test $ do
  a <- allocatePartyOn "alice" participant0

  cid <- a `submit` createExactCmd V1.QueryTemplate with party = a
  let v2Cid = coerceContractId @V1.QueryTemplate @V2.QueryTemplate cid
  v2Name <- queryContractId a v2Cid
  v2Name === Some V2.QueryTemplate with party = a, newField = None

queryDowngradedNone : Test
queryDowngradedNone = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.QueryTemplate with party = a, newField = None
  let v1Cid = coerceContractId @V2.QueryTemplate @V1.QueryTemplate cid
  v1Name <- queryContractId a v1Cid
  v1Name === Some V1.QueryTemplate with party = a
  pure ()

queryDowngradedSome : Test
queryDowngradedSome = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.QueryTemplate with party = a, newField = Some("Text")
  let v1Cid = coerceContractId @V2.QueryTemplate @V1.QueryTemplate cid
  res <- tryCommands $ queryContractId a v1Cid
  case res of
    Left (FailedCmd (CommandName "QueryContractId") _ _) -> pure ()
    _ -> assertFail $ "Expected QueryContractId to error, but got " <> show res

