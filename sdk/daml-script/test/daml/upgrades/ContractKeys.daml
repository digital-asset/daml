-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module ContractKeys (main) where

import UpgradeTestLib
import qualified V1.ContractKeys as V1
import qualified V2.ContractKeys as V2
import qualified V1.ChangedKeyExpr as V1
import qualified V2.ChangedKeyExpr as V2
import qualified V1.UpgradedContractKeys as V1
import qualified V2.UpgradedContractKeys as V2

{- PACKAGE
name: contract-key-upgrades
versions: 2
-}

main : TestTree
main = tests
  [ ("Query an unchanged old key for a new contract", queryKeyUnchanged)
  , ("ExerciseByKey command an unchanged old key for a new contract", exerciseCmdKeyUnchanged)
  , ("Fetching an unchanged old key for a new contract", fetchKeyUnchanged)
  , ("ExerciseByKey in Update an unchanged old key for a new contract", exerciseUpdateKeyUnchanged)
  , ("Query an old key for a new contract, key expression changed but key value unchanged", queryKeyChangedExprSameValue)
  , ("Query an old key for a new contract, key expression and key value changed", queryKeyChangedExprChangedValue)
  , ("Fetching an old key for a new contract, key expression changed but key value unchanged", fetchKeyChangedExprSameValue)
  , ("Fetching an old key for a new contract, key expression and key value changed", fetchKeyChangedExprChangedValue)
  , ("Fetching-by-key an old key for a new contract, key expression changed but key value unchanged", fbkKeyChangedExprSameValue)
  , ("Fetching-by-key an old key for a new contract, key expression and key value changed", fbkKeyChangedExprChangedValue)
  , ("Query an Upgraded old key for a new contract", queryKeyUpgraded)
  , ("ExerciseByKey command an Upgraded old key for a new contract", exerciseCmdKeyUpgraded)
  , ("Fetching an Upgraded old key for a new contract", fetchKeyUpgraded)
  , ("ExerciseByKey in Update an Upgraded old key for a new contract", exerciseUpdateKeyUpgraded)
  ]

{- MODULE
package: contract-key-upgrades
contents: |
  module ContractKeys where

  data UnchangedKeyKey = UnchangedKeyKey with
      p : Party
      n : Int
    deriving (Eq, Show)

  template UnchangedKey
    with
      party : Party
      n : Int
      newField : Optional Text                        -- @V  2
    where
      signatory party
      key (UnchangedKeyKey party n) : UnchangedKeyKey
      maintainer key.p

      choice UnchangedKeyCall : Text
        controller party
        do pure "V1"                                  -- @V 1
        do pure "V2"                                  -- @V  2

  template UnchangedKeyHelper
    with
      party : Party
    where
      signatory party
      choice UnchangedKeyFetch : (ContractId UnchangedKey, UnchangedKey) with
          k : UnchangedKeyKey
        controller party
        do fetchByKey k

      choice UnchangedKeyExercise : Text with
          k : UnchangedKeyKey
        controller party
        do exerciseByKey @UnchangedKey k UnchangedKeyCall
-}

queryKeyUnchanged : Test
queryKeyUnchanged = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.UnchangedKey a 1)
  keyRes <- queryContractKey a $ V2.UnchangedKeyKey a 1
  case keyRes of
    Some (foundCid, foundContract) | show foundCid == show cid && foundContract == V2.UnchangedKey a 1 None -> pure ()
    _ -> assertFail $ "Didn't find correct contract, expected " <> show (cid, V2.UnchangedKey a 1 None) <> ", got " <> show keyRes

exerciseCmdKeyUnchanged : Test
exerciseCmdKeyUnchanged = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.UnchangedKey a 1)
  res <- a `submit` exerciseByKeyExactCmd @V2.UnchangedKey (V2.UnchangedKeyKey a 1) V2.UnchangedKeyCall
  res === "V2"

fetchKeyUnchanged : Test
fetchKeyUnchanged = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createCmd (V1.UnchangedKey a 1)
  (foundCid, foundContract) <- a `submit` createAndExerciseCmd (V2.UnchangedKeyHelper a) (V2.UnchangedKeyFetch $ V2.UnchangedKeyKey a 1)
  foundContract === V2.UnchangedKey a 1 None
  show foundCid === show cid

exerciseUpdateKeyUnchanged : Test
exerciseUpdateKeyUnchanged = test $ do
  a <- allocateParty "alice"
  _ <- a `submit` createCmd (V1.UnchangedKey a 1)
  res <- a `submit` createAndExerciseCmd (V2.UnchangedKeyHelper a) (V2.UnchangedKeyExercise $ V2.UnchangedKeyKey a 1)
  res === "V2"

{- MODULE
package: contract-key-upgrades
contents: |
  module ChangedKeyExpr where

  data ChangedKeyExprKey = ChangedKeyExprKey with
      p : Party
      b : Bool
    deriving (Eq, Show)

  template ChangedKeyExpr
    with
      party : Party
      b : Bool
    where
      signatory party
      key (ChangedKeyExprKey party False) : ChangedKeyExprKey -- @V 1
      key (ChangedKeyExprKey party b)     : ChangedKeyExprKey -- @V  2
      maintainer key.p

      choice ChangedKeyExprCall : Text
        controller party
        do pure "V1"                                          -- @V 1
        do pure "V2"                                          -- @V  2

  template ChangedKeyExprHelper
    with
      party : Party
    where
      signatory party

      choice ChangedKeyExprFetch : ChangedKeyExpr with
          cid : ContractId ChangedKeyExpr
        controller party
        do fetch cid

      choice ChangedKeyExprFetchByKey : (ContractId ChangedKeyExpr, ChangedKeyExpr) with
          k : ChangedKeyExprKey
        controller party
        do fetchByKey k

      choice ChangedKeyExprExercise : Text with
          k : ChangedKeyExprKey
        controller party
        do exerciseByKey @ChangedKeyExpr k ChangedKeyExprCall
-}

queryKeyChangedExprSameValue : Test
queryKeyChangedExprSameValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a False)
  keyRes <- queryContractKey a $ V2.ChangedKeyExprKey a False
  case keyRes of
    Some (foundCid, foundContract) | show foundCid == show cid && foundContract == V2.ChangedKeyExpr a False -> pure ()
    _ -> assertFail $ "Didn't find correct contract, expected " <> show (cid, V2.ChangedKeyExpr a False) <> ", got " <> show keyRes

queryKeyChangedExprChangedValue : Test
queryKeyChangedExprChangedValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a True)
  -- the following query works, even though the key value changed!
  keyRes <- queryContractKey a $ V2.ChangedKeyExprKey a False
  case keyRes of
    Some (foundCid, foundContract) | show foundCid == show cid && foundContract == V2.ChangedKeyExpr a True -> pure ()
    _ -> assertFail $ "Didn't find correct contract, expected " <> show (cid, V2.ChangedKeyExpr a True) <> ", got " <> show keyRes

fetchKeyChangedExprSameValue : Test
fetchKeyChangedExprSameValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a False)
  foundContract <- a `submit` createAndExerciseCmd (V2.ChangedKeyExprHelper a) (V2.ChangedKeyExprFetch $ coerceContractId cid)
  foundContract === V2.ChangedKeyExpr a False

fetchKeyChangedExprChangedValue : Test
fetchKeyChangedExprChangedValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a True)
  {-
  The fetch inside the following command correctly fails with:
    com.daml.lf.engine.script.Script$FailedCmd: Command Submit failed: FAILED_PRECONDITION: INTERPRETATION_DEV_ERROR(9,<hash>):
        Interpretation error:
          Error: Validation fails when trying to upgrade the contract <hash>
          from ChangedKeyExpr:ChangedKeyExpr@<hash> to ChangedKeyExpr:ChangedKeyExpr@<hash>
        Verify that neither the signatories, nor the observers, nor the contract key, nor the key's maintainers have changed
    -}
  foundContract <- a `submit` createAndExerciseCmd (V2.ChangedKeyExprHelper a) (V2.ChangedKeyExprFetch $ coerceContractId cid)
  foundContract === V2.ChangedKeyExpr a True

fbkKeyChangedExprSameValue : Test
fbkKeyChangedExprSameValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a False)
  (foundCid, foundContract) <- a `submit` createAndExerciseCmd (V2.ChangedKeyExprHelper a) (V2.ChangedKeyExprFetchByKey $ V2.ChangedKeyExprKey a False)
  foundContract === V2.ChangedKeyExpr a False
  show foundCid === show cid

fbkKeyChangedExprChangedValue : Test
fbkKeyChangedExprChangedValue = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.ChangedKeyExpr a True)
  -- the fetch inside the following command works, even though the key value changed!
  (foundCid, foundContract) <- a `submit` createAndExerciseCmd (V2.ChangedKeyExprHelper a) (V2.ChangedKeyExprFetchByKey $ V2.ChangedKeyExprKey a False)
  foundContract === V2.ChangedKeyExpr a True
  show foundCid === show cid

{- MODULE
package: contract-key-upgrades
contents: |
  module UpgradedContractKeys where

  data UpgradedKeyKey = UpgradedKeyKey with
      p : Party
      n : Int
      m : Optional Int                                -- @V 2
    deriving (Eq, Show)

  template UpgradedKey
    with
      party : Party
      n : Int
      m : Optional Int                                -- @V 2
    where
      signatory party
      key (UpgradedKeyKey party n) : UpgradedKeyKey   -- @V 1
      key (UpgradedKeyKey party n m) : UpgradedKeyKey -- @V 2
      maintainer key.p

      choice UpgradedKeyCall : Text
        controller party
        do pure "V1"                                  -- @V 1
        do pure "V2"                                  -- @V 2

  template UpgradedKeyHelper
    with
      party : Party
    where
      signatory party
      choice UpgradedKeyFetch : (ContractId UpgradedKey, UpgradedKey) with
          k : UpgradedKeyKey
        controller party
        do fetchByKey k

      choice UpgradedKeyExercise : Text with
          k : UpgradedKeyKey
        controller party
        do exerciseByKey @UpgradedKey k UpgradedKeyCall
-}

queryKeyUpgraded : Test
queryKeyUpgraded = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.UpgradedKey a 1)
  keyRes <- queryContractKey a $ V2.UpgradedKeyKey a 1 None
  case keyRes of
    Some (foundCid, foundContract) | show foundCid == show cid && foundContract == V2.UpgradedKey a 1 None -> pure ()
    _ -> assertFail $ "Didn't find correct contract, expected " <> show (cid, V2.UpgradedKey a 1 None) <> ", got " <> show keyRes

exerciseCmdKeyUpgraded : Test
exerciseCmdKeyUpgraded = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createExactCmd (V1.UpgradedKey a 1)
  res <- a `submit` exerciseByKeyExactCmd @V2.UpgradedKey (V2.UpgradedKeyKey a 1 None) V2.UpgradedKeyCall
  res === "V2"

fetchKeyUpgraded : Test
fetchKeyUpgraded = test $ do
  a <- allocateParty "alice"
  cid <- a `submit` createCmd (V1.UpgradedKey a 1)
  (foundCid, foundContract) <- a `submit` createAndExerciseCmd (V2.UpgradedKeyHelper a) (V2.UpgradedKeyFetch $ V2.UpgradedKeyKey a 1 None)
  foundContract === V2.UpgradedKey a 1 None
  show foundCid === show cid

exerciseUpdateKeyUpgraded : Test
exerciseUpdateKeyUpgraded = test $ do
  a <- allocateParty "alice"
  _ <- a `submit` createCmd (V1.UpgradedKey a 1)
  res <- a `submit` createAndExerciseCmd (V2.UpgradedKeyHelper a) (V2.UpgradedKeyExercise $ V2.UpgradedKeyKey a 1 None)
  res === "V2"