-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Ensure (main) where

import UpgradeTestLib
import qualified V1.EnsureChanges as V1
import qualified V2.EnsureChanges as V2
import qualified V1.IfaceMod as Iface
import DA.Exception

{- PACKAGE
name: ensure-changes-iface
versions: 1
-}

{- MODULE
package: ensure-changes-iface
contents: |
  module IfaceMod where

  data MyUnit = MyUnit {}

  interface I where
    viewtype MyUnit

    nonconsuming choice NoOp : ()
      controller signatory this
      do pure ()
-}

{- PACKAGE
name: ensure-changes
versions: 2
depends: ensure-changes-iface-1.0.0
-}

{- MODULE
package: ensure-changes
contents: |
  module EnsureChanges where

  import IfaceMod

  template EnsureChangesTemplate
    with
      v1Valid : Bool
      v2Valid : Bool
      party : Party
    where
      signatory party
      ensure v1Valid       -- @V 1
      ensure v2Valid       -- @V  2

      interface instance I for EnsureChangesTemplate where
        view = MyUnit {}

      choice EnsureChangesCall : Text
        controller party
        do pure "V1"       -- @V 1
        do pure "V2"       -- @V  2
-}

main : TestTree
main = tests
  [ ("Fails if the ensure clause changes such that V1 is not longer valid", ensureClauseBecomesInvalid)
  , ("Fails if the ensure clause changes such that V1 is not longer valid, exercise by interface", ensureClauseBecomesInvalidDynamic)
  , ("Succeeds when implicitly creating a V1 contract such that the ensure clause only passes in V2", onlyV2EnsureClauseRequiredForImplicitUpgrade)
  , ("Fails when explicitly calling a V1 choice on a V2 contract that doesn't pass the ensure clause in V1", ensureClauseDowngradeToNoLongerValid)
  ]

testForPreconditionFailed
  :  (Template t1, HasAgreement t1, Show r)
  => (Party -> t1)
  -> (ContractId t1 -> Commands r)
  -> Test
testForPreconditionFailed makeV1Contract exerciseChoice = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  res <-  a `trySubmit` exerciseChoice cid
  case res of
    Left (UnhandledException (Some (fromAnyException -> Some (PreconditionFailed _)))) -> pure ()
    res -> assertFail $ "Expected PreconditionFailed, got " <> show res

ensureClauseBecomesInvalid : Test
ensureClauseBecomesInvalid =
  testForPreconditionFailed (V1.EnsureChangesTemplate True False) $ \cidV1 ->
     -- because the exercise is not exact, the contract should be upgraded to V2 before evaluating the ensure clause
     exerciseCmd cidV1 V1.EnsureChangesCall

ensureClauseBecomesInvalidDynamic : Test
ensureClauseBecomesInvalidDynamic =
  testForPreconditionFailed (V1.EnsureChangesTemplate True False) $ \cidV1 ->
     exerciseExactCmd (coerceContractId @V1.EnsureChangesTemplate @Iface.I cidV1) Iface.NoOp

onlyV2EnsureClauseRequiredForImplicitUpgrade : Test
onlyV2EnsureClauseRequiredForImplicitUpgrade = test $ do
  a <- allocatePartyOn "alice" participant0
  -- The V1 should be implicitly upgraded to V2 before evaluating the ensure clause.
  a `submit` createCmd (V1.EnsureChangesTemplate False True a)
  pure ()

ensureClauseDowngradeToNoLongerValid : Test
ensureClauseDowngradeToNoLongerValid =
  testForPreconditionFailed (V2.EnsureChangesTemplate False True) $ \cidV2 ->
    exerciseExactCmd (coerceContractId @V2.EnsureChangesTemplate @V1.EnsureChangesTemplate cidV2) V1.EnsureChangesCall
