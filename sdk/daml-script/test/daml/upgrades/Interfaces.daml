-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module Interfaces (main) where

import UpgradeTestLib
import FixedInterface
import FixedInterfaceCaller
import qualified V1.Interfaces as V1
import qualified V1.InterfacesAlt as V1
import qualified V2.Interfaces as V2
import qualified V2.InterfacesAlt as V2
import PackageIds
import DA.Foldable
import DA.Optional
import DA.Text

-- Fixed package containing only the interface
{- PACKAGE
name: fixed-interface
versions: 1
-}

{- MODULE
package: fixed-interface
contents: |
  module FixedInterface where

  data IV = IV with
    owner : Party
    payload : Optional Int

  interface I where
    viewtype IV

    getVersion : Text
    nonconsuming choice GetVersion : Text
      controller (view this).owner
      do
        pure $ getVersion this

  data INewV = INewV with
    owner : Party

  interface INew where
    viewtype INewV

    nonconsuming choice GetNew : Text
      controller (view this).owner
      do
        pure "GetNew"
-}

-- Another fixed package containing a helper template for exercising the interface in a choice
{- PACKAGE
name: fixed-interface-caller
versions: 1
depends: fixed-interface-1.0.0
-}

{- MODULE
package: fixed-interface-caller
contents: |
  module FixedInterfaceCaller where

  import FixedInterface

  template Caller with
      party : Party
    where
    signatory party

    choice CallInterface : Text with
        icid : ContractId I
      controller party
      do
        exercise icid GetVersion

    choice CallNewInterface : Text with
        icid : ContractId INew
      controller party
      do
        exercise icid GetNew
-}

-- The versioned/upgraded package
{- PACKAGE
name: interfaces
versions: 2
depends: fixed-interface-1.0.0
-}

{- MODULE
package: interfaces
contents: |
  module Interfaces where

  import FixedInterface
  import DA.Optional

  template FITemplate with
      party : Party
      payload : Optional Int   -- @V  2
    where
    signatory party

    interface instance I for FITemplate where
      view = IV party None     -- @V 1
      view = IV party payload  -- @V  2
      getVersion = "V1"        -- @V 1
      getVersion = "V2"        -- @V  2

    interface instance INew for FITemplate where -- @V  2
      view = INewV party                         -- @V  2

    -- Following two choices exist here for convenience. They could be in a separate package which depends on this,
    -- but additional unnecessary packages simply wastes time.
    choice FetchFromInterface : Optional Int with
        icid : ContractId I
      controller party
      do
        (_, res) <- fromSomeNote "Failed to fetch contract" <$> fetchFromInterface @FITemplate icid
        let v = view $ toInterface @I res
        pure v.payload

    choice FetchInterface : () with
        icid : ContractId I
      controller party
      do
        fetch icid
        pure ()
-}

-- Alt templates package to test multiple preference at once
{- PACKAGE
name: interfaces-alt
versions: 2
depends: fixed-interface-1.0.0
-}

{- MODULE
package: interfaces-alt
contents: |
  module InterfacesAlt where

  import FixedInterface

  template FITemplateAlt with
      party : Party
      payload : Optional Int   -- @V  2
    where
    signatory party

    interface instance I for FITemplateAlt where
      view = IV party None     -- @V 1
      view = IV party payload  -- @V  2
      getVersion = "V1"        -- @V 1
      getVersion = "V2"        -- @V  2
-}

interfacesV1 : PackageId
interfacesV1 = getPackageId "interfaces-1.0.0"

interfacesAltV1 : PackageId
interfacesAltV1 = getPackageId "interfaces-alt-1.0.0"

interfacesV2 : PackageId
interfacesV2 = getPackageId "interfaces-2.0.0"

interfacesAltV2 : PackageId
interfacesAltV2 = getPackageId "interfaces-alt-2.0.0"

-- cant upgrade contracts in interface choice argument - i dont think this is possible in daml-script
main : TestTree
main = tests
  [ ("Calling an interface choice uses the highest version implementation at command level by default", defaultHighestVersionChoiceImplementationCommand)
  , ("Calling an interface choice uses the highest version implementation at choice body level by default", defaultHighestVersionChoiceImplementationUpdate)
  , ("Package map preference is used for interface implementation selection at command level", interfaceChoicePackagePreferenceCommand)
  , ("Package map preference is used for interface implementation selection at choice body level", interfaceChoicePackagePreferenceUpdate)
  , ("Multiple interface exercises use their respective package preference entries at command level", multipleInterfaceChoicePackagePreferenceCommand)
  , ("Multiple interface exercises use their respective package preference entries at choice body level", multipleInterfaceChoicePackagePreferenceUpdate)
  , ("queryInterfaceContractId works as intended in the presence of upgraded packages", queryInterfaceUpgrades)
  , ("fetchFromInterface works as intended in the presence of upgraded packages", fetchFromInterfaceUpgrades)
  , ("Calling a new interface choice uses the highest version implementation at command level by default", defaultHighestVersionChoiceImplementationForNewInterfaceCommand)
  , ("Calling a new interface choice uses the highest version implementation at choice body level by default", defaultHighestVersionChoiceImplementationForNewInterfaceUpdate)
  , ("Package map preference is used for new interface implementation selection at command level", newInterfaceChoicePackagePreferenceCommand)
  , ("Package map preference is used for new interface implementation selection at choice body level", newInterfaceChoicePackagePreferenceUpdate)
  -- IDE Ledger doesn't support unvetting
  -- Can't unvet old version of package on 3x, even though v2 exists.
  , broken ("Can fetch interface from V1 contract when V1 unvetted", fetchWithoutV1)
  ]

setupAliceAndTemplate : Script (Party, ContractId V1.FITemplate)
setupAliceAndTemplate = do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd V1.FITemplate with party = alice
  pure (alice, cid)

setupAliceAndInterface : Script (Party, ContractId I)
setupAliceAndInterface =
  (fmap . fmap) (toInterfaceContractId @I) setupAliceAndTemplate

setupAliceAndNewInterface : Script (Party, ContractId INew)
setupAliceAndNewInterface = do
  (fmap . fmap) (coerceContractId @V1.FITemplate @INew) setupAliceAndTemplate

defaultHighestVersionChoiceImplementationCommand : Test
defaultHighestVersionChoiceImplementationCommand = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- alice `submit` exerciseCmd icid GetVersion
  res === "V2"

defaultHighestVersionChoiceImplementationUpdate : Test
defaultHighestVersionChoiceImplementationUpdate = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- alice `submit` createAndExerciseCmd (Caller with party = alice) (CallInterface with icid = icid)
  res === "V2"

defaultHighestVersionChoiceImplementationForNewInterfaceCommand : Test
defaultHighestVersionChoiceImplementationForNewInterfaceCommand = test $ do
  (alice, icid) <- setupAliceAndNewInterface
  res <- alice `submit` exerciseCmd icid GetNew
  res === "GetNew"

defaultHighestVersionChoiceImplementationForNewInterfaceUpdate : Test
defaultHighestVersionChoiceImplementationForNewInterfaceUpdate = test $ do
  (alice, icid) <- setupAliceAndNewInterface
  res <- alice `submit` createAndExerciseCmd (Caller with party = alice) (CallNewInterface with icid = icid)
  res === "GetNew"

newInterfaceChoicePackagePreferenceCommand : Test
newInterfaceChoicePackagePreferenceCommand = test $ do
  (alice, icid) <- setupAliceAndNewInterface
  resOrErr <-
    trySubmit
      (actAs alice <> packagePreference [interfacesV1])
      (exerciseCmd icid GetNew)
  case resOrErr of
    Left (ContractDoesNotImplementInterface {}) -> pure ()
    Left err -> assertFail $ "Failure, expected V1 submit of new interface to fail with an ContractDoesNotImplementInterface error, failed with the following error instead: " <> show err
    Right res -> assertFail $ "Failure, expected V1 submit of new interface to fail, succeeded with the following result instead: " <> show res
  res <-
    submitWithOptions
      (actAs alice <> packagePreference [interfacesV2])
      (exerciseCmd icid GetNew)
  res === "GetNew"

newInterfaceChoicePackagePreferenceUpdate : Test
newInterfaceChoicePackagePreferenceUpdate = test $ do
  (alice, icid) <- setupAliceAndNewInterface
  resOrErr <-
    trySubmit
      (actAs alice <> packagePreference [interfacesV1])
      (createAndExerciseCmd (Caller with party = alice) (CallNewInterface with icid = icid))
  case resOrErr of
    Left (ContractDoesNotImplementInterface {}) -> pure ()
    Left err -> assertFail $ "Failure, expected V1 submit of new interface to fail with an ContractDoesNotImplementInterface error, failed with the following error instead: " <> show err
    Right res -> assertFail $ "Failure, expected V1 submit of new interface to fail, succeeded with the following result instead: " <> show res
  res <-
    submitWithOptions
      (actAs alice <> packagePreference [interfacesV2])
      (createAndExerciseCmd (Caller with party = alice) (CallNewInterface with icid = icid))
  res === "GetNew"

interfaceChoicePackagePreferenceCommand : Test
interfaceChoicePackagePreferenceCommand = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <-
    submitWithOptions
      (actAs alice <> packagePreference [interfacesV1])
      (exerciseCmd icid GetVersion)
  res === "V1"

interfaceChoicePackagePreferenceUpdate : Test
interfaceChoicePackagePreferenceUpdate = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <-
    submitWithOptions
      (actAs alice <> packagePreference [interfacesV1])
      (createAndExerciseCmd (Caller with party = alice) (CallInterface with icid = icid))
  res === "V1"

multipleInterfaceChoicePackagePreference : (Party -> ContractId I -> Commands Text) -> Test
multipleInterfaceChoicePackagePreference doExercise = test $ do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd V1.FITemplate with party = alice
  cidAlt <- alice `submit` createExactCmd V1.FITemplateAlt with party = alice
  let icid = toInterfaceContractId @I cid
      icidAlt = toInterfaceContractId @I cidAlt
      -- Tests all 4 combinations of 2 versions for 2 packages
      cases =
        [ (interfacesVersion, interfacesVersionStr, interfacesAltVersion, interfacesAltVersionStr)
        | (interfacesVersion, interfacesVersionStr) <- [(interfacesV1, "V1"), (interfacesV2, "V2")]
        , (interfacesAltVersion, interfacesAltVersionStr) <- [(interfacesAltV1, "V1"), (interfacesAltV2, "V2")]
        ]

  forM_ cases $ \(interfacesVersion, interfacesVersionStr, interfacesAltVersion, interfacesAltVersionStr) -> do
    (res, resAlt) <-
      submitWithOptions (actAs alice <> packagePreference [interfacesVersion, interfacesAltVersion]) $ do
        res <- doExercise alice icid
        resAlt <- doExercise alice icidAlt
        pure (res, resAlt)
    res === interfacesVersionStr
    resAlt === interfacesAltVersionStr

multipleInterfaceChoicePackagePreferenceCommand : Test
multipleInterfaceChoicePackagePreferenceCommand =
  multipleInterfaceChoicePackagePreference $ \_ icid ->
    exerciseCmd icid GetVersion

multipleInterfaceChoicePackagePreferenceUpdate : Test
multipleInterfaceChoicePackagePreferenceUpdate =
  multipleInterfaceChoicePackagePreference $ \alice icid ->
    createAndExerciseCmd (Caller with party = alice) (CallInterface with icid = icid)

queryInterfaceUpgrades : Test
queryInterfaceUpgrades = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- fromSomeNote "Failed to find contract" <$> alice `queryInterfaceContractId` icid
  res.payload === None

fetchFromInterfaceUpgrades : Test
fetchFromInterfaceUpgrades = test $ do
  (alice, icid) <- setupAliceAndInterface
  resV1 <- alice `submit` createAndExerciseExactCmd (V1.FITemplate with party = alice) (V1.FetchFromInterface with icid = icid)
  resV1 === None
  resV2 <- alice `submit` createAndExerciseExactCmd (V2.FITemplate with party = alice, payload = None) (V2.FetchFromInterface with icid = icid)
  resV2 === None

fetchWithoutV1 : Test
fetchWithoutV1 = test $ do
  (alice, icid) <- setupAliceAndInterface
  withUnvettedDarOnParticipant "interfaces-1.0.0" participant0 $ do
    alice `submit` createAndExerciseCmd (V2.FITemplate alice None) (V2.FetchInterface icid)
  pure ()
