-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module MixedLfVersions (main) where

import UpgradeTestLib
import qualified V1.MixedLfVersionsInterface as IV1
import qualified V1.MixedLfVersionsClient as TV1
import qualified V1.MixedLfVersionsDep as DV1

{- PACKAGE
name: mixed-lf-versions-dep
versions: 1
lf-version: "1.15"
-}

{- MODULE
package: mixed-lf-versions-dep
contents: |
  module MixedLfVersionsDep where

  data MyPair a b = MyPair { fst : a, snd : b }
    deriving (Eq, Show)
-}

{- PACKAGE
name: mixed-lf-versions-interface
depends: mixed-lf-versions-dep-1.0.0
versions: 1
lf-version: "1.17"
-}

{- MODULE
package: mixed-lf-versions-interface
contents: |
  module MixedLfVersionsInterface where

  import MixedLfVersionsDep

  data IV = IV { u : () }

  interface I where
    viewtype IV

    getTupleWithTrailingOption : (Int, Optional Int)
    getUserDefinedTupleWithTrailingOption : MyPair Int (Optional Int)

    nonconsuming choice GetTupleWithTrailingOption : (Int, Optional Int)
      with ctl: Party
      controller ctl
      do
        pure $ getTupleWithTrailingOption this

    nonconsuming choice GetUserDefinedTupleWithTrailingOption : MyPair Int (Optional Int)
         with ctl: Party
         controller ctl
         do
           pure $ getUserDefinedTupleWithTrailingOption this
-}

{- PACKAGE
name: mixed-lf-versions-client
versions: 1
depends: |
  mixed-lf-versions-interface-1.0.0
  mixed-lf-versions-dep-1.0.0
lf-version: "1.17"
-}

{- MODULE
package: mixed-lf-versions-client
contents: |
  module MixedLfVersionsClient where

  import MixedLfVersionsInterface
  import MixedLfVersionsDep

  template T with
      party : Party
    where
    signatory party

    nonconsuming choice TGetTupleWithTrailingOption : (Int, Optional Int)
        with ctl: Party
        controller ctl
        do pure (1, None)

    nonconsuming choice TGetUserDefinedTupleWithTrailingOption : MyPair Int (Optional Int)
        with ctl: Party
        controller ctl
        do pure (MyPair 1 None)

    interface instance I for T where
      view = IV ()
      getTupleWithTrailingOption = (1, None)
      getUserDefinedTupleWithTrailingOption = MyPair 1 None
-}


{-
- From daml finance:
  - (1.17) Interface choice with the return type (X, Optional Y) (where X and Y don't matter).
  - Implemented by 1.17 template
  - Daml-script calls this interface choice and "consumes" the result (i.e. the result needs to come across the ledger-api, so don't call from a helper template)
  - Should break without my fix
- Continued ^
  - Also try this with a 1.15 interface choice (still 1.17 template)
  - Should break without my fix
- More Continued ^
  - Try this as a choice directly on a template (drop the interface), keep the template at LF1.17
- Even more continued ^
  - Try the above with another LF1.15 data type to replace the tuple, it should ideally be polymorphic in its last field, in which you pass an optional value at type level (i.e. MyType a = MyType with myVal : Text, myAdditional : a with MyType (Optional Text))
- Lf version tetris
  - LF1.17 template, with a 1.15 polymoriphic type with an optional value at the end (i.e. data My15PolyType a = My15PolyType with poly : a, opt : Optional Text), which contains (as a) a 1.17 type which we will perform upgrades on (so in V1 no additional fields, in v2 an additional optional field)
  - Try to query this via daml-script, and maybe also try a separate choice that returns this contract as a payload, ensure it doesnt break
  - No idea what this will do, should work maybe?

-}

main : TestTree
main = tests
  [ ("Call a dynamic choice that returns a tuple with a trailing None", callDynamicChoiceThatReturnsTupleWithTrailingNone)
  , ("Call a dynamic choice that returns a user-defined LF 1.15 tuple with a trailing None", callDynamicChoiceThatReturnsUserDefinedTupleWithTrailingNone)
  , ("Call a choice that returns a tuple with a trailing None", callChoiceThatReturnsTupleWithTrailingNone)
  , ("Call a choice that returns a user-defined LF 1.15 tuple with a trailing None", callChoiceThatReturnsUserDefinedTupleWithTrailingNone)
  ]

callDynamicChoiceThatReturnsTupleWithTrailingNone : Test
callDynamicChoiceThatReturnsTupleWithTrailingNone = test $ do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd TV1.T { party = alice }
  let icid = toInterfaceContractId @IV1.I cid
  res <- alice `submit` exerciseExactCmd @IV1.I icid (IV1.GetTupleWithTrailingOption { ctl = alice })
  res === (1, None)


callDynamicChoiceThatReturnsUserDefinedTupleWithTrailingNone : Test
callDynamicChoiceThatReturnsUserDefinedTupleWithTrailingNone = test $ do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd TV1.T { party = alice }
  let icid = toInterfaceContractId @IV1.I cid
  res <- alice `submit` exerciseExactCmd @IV1.I icid (IV1.GetUserDefinedTupleWithTrailingOption { ctl = alice })
  res === DV1.MyPair 1 None

callChoiceThatReturnsTupleWithTrailingNone : Test
callChoiceThatReturnsTupleWithTrailingNone = test $ do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd TV1.T { party = alice }
  res <- alice `submit` exerciseExactCmd @TV1.T cid (TV1.TGetTupleWithTrailingOption { ctl = alice })
  res === (1, None)


callChoiceThatReturnsUserDefinedTupleWithTrailingNone : Test
callChoiceThatReturnsUserDefinedTupleWithTrailingNone = test $ do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd TV1.T { party = alice }
  res <- alice `submit` exerciseExactCmd @TV1.T cid (TV1.TGetUserDefinedTupleWithTrailingOption { ctl = alice })
  res === DV1.MyPair 1 None