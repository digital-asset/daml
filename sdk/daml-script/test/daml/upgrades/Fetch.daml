-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Fetch (main) where

import UpgradeTestLib
import qualified V1.Fetch as V1
import qualified V2.Fetch as V2
import DA.Text

{- PACKAGE
name: fetch
versions: 2
-}

{- MODULE
package: fetch
contents: |
  module Fetch where

  template FetchTemplate
    with
      party: Party
      newField : Optional Text -- @V 2
    where
      signatory party

  template FetchHelper
    with
      party: Party
    where
      signatory party
      choice DoFetch : FetchTemplate with
          cid : ContractId FetchTemplate
        controller party
        do fetch cid
-}

main : TestTree
main = tests
  [ ("Upgrade a contract when fetching", fetchUpgraded)
  , ("Downgrade a contract with Nones when fetching", fetchDowngradedNone)
  , ("Fail to downgrade a contract with Somes when fetching", fetchDowngradedSome)

  , -- Fetching tests with unvetted sources
    broken ("Upgrade a contract when fetching where the source package (V1) is unvetted", fetchUpgradedSourceUnvetted)
  , broken ("Downgrade a contract with Nones when fetching where the source package (V2) is unvetted", fetchDowngradedNoneSourceUnvetted)
  ]

exerciseV1Util : Choice V1.FetchHelper c r => Party -> c -> Script r
exerciseV1Util p c = p `submit` createAndExerciseExactCmd (V1.FetchHelper with party = p) c

exerciseV2Util : Choice V2.FetchHelper c r => Party -> c -> Script r
exerciseV2Util p c = p `submit` createAndExerciseExactCmd (V2.FetchHelper with party = p) c

tryExerciseV1Util : Choice V1.FetchHelper c r => Party -> c -> Script (Either SubmitError r)
tryExerciseV1Util p c = p `trySubmit` createAndExerciseExactCmd (V1.FetchHelper with party = p) c

tryExerciseV2Util : Choice V2.FetchHelper c r => Party -> c -> Script (Either SubmitError r)
tryExerciseV2Util p c = p `trySubmit` createAndExerciseExactCmd (V2.FetchHelper with party = p) c

fetchUpgraded : Test
fetchUpgraded = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.FetchTemplate with party = a

  let v2Cid = coerceContractId @V1.FetchTemplate @V2.FetchTemplate cid
  v2Name <- a `exerciseV2Util` V2.DoFetch with cid = v2Cid
  v2Name === V2.FetchTemplate with party = a, newField = None

fetchDowngradedNone : Test
fetchDowngradedNone = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.FetchTemplate with party = a, newField = None
  let v1Cid = coerceContractId @V2.FetchTemplate @V1.FetchTemplate cid
  v1Name <- a `exerciseV1Util` V1.DoFetch with cid = v1Cid
  v1Name === V1.FetchTemplate with party = a

fetchDowngradedSome : Test
fetchDowngradedSome = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.FetchTemplate with party = a, newField = Some "hi"
  let v1Cid = coerceContractId @V2.FetchTemplate @V1.FetchTemplate cid
  eV1Name <- a `tryExerciseV1Util` V1.DoFetch with cid = v1Cid

  case eV1Name of
    Left (UpgradeError DowngradeDropDefinedField msg)
      | "An optional contract field with a value of Some may not be dropped during downgrading" `isInfixOf` msg
      -> pure ()
    res -> assertFail $ "Expected DevError Upgrade, got " <> show res

fetchUpgradedSourceUnvetted : Test
fetchUpgradedSourceUnvetted = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.FetchTemplate with party = a

  -- Unvet v1, so the engine cannot have type information about the real packageid of the contract
  withUnvettedDarOnParticipant "fetch-1.0.0" participant0 $ do
    let v2Cid = coerceContractId @V1.FetchTemplate @V2.FetchTemplate cid
    res <- a `tryExerciseV2Util` V2.DoFetch with cid = v2Cid
    case res of
      Right v2Name -> v2Name === V2.FetchTemplate with party = a, newField = None
      Left err -> assertFail $ "Expected success but got " <> show err

fetchDowngradedNoneSourceUnvetted : Test
fetchDowngradedNoneSourceUnvetted = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.FetchTemplate with party = a, newField = None

  -- Unvet the upgraded type and ensure downgrade occurs
  withUnvettedDarOnParticipant "fetch-2.0.0" participant0 $ do
    let v1Cid = coerceContractId @V2.FetchTemplate @V1.FetchTemplate cid
    res <- a `tryExerciseV1Util` V1.DoFetch with cid = v1Cid

    case res of
      Right v1Name -> v1Name === V1.FetchTemplate with party = a
      Left err -> assertFail $ "Expected success but got " <> show err
