-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module DataChanges (main) where

import UpgradeTestLib
import qualified V1.NameChanges as V1
import qualified V1.FieldsRemoved as V1
import qualified V1.FieldsRemovedNested as V1
import qualified V1.NonOptionalFieldsAdded as V1
import qualified V1.NonOptionalFieldsAddedNested as V1
import qualified V1.EnumUnchanged as V1
import qualified V1.EnumRemoved as V1
import qualified V1.EnumAdditional as V1
import qualified V1.OptionalFieldsAdded as V1
import qualified V1.OptionalFieldOnChoiceAdded as V1

import qualified V2.NameChanges as V2
import qualified V2.FieldsRemoved as V2
import qualified V2.FieldsRemovedNested as V2
import qualified V2.NonOptionalFieldsAdded as V2
import qualified V2.NonOptionalFieldsAddedNested as V2
import qualified V2.EnumUnchanged as V2
import qualified V2.EnumRemoved as V2
import qualified V2.EnumAdditional as V2
import qualified V2.OptionalFieldsAdded as V2
import qualified V2.OptionalFieldOnChoiceAdded as V2
import DA.Text
import DA.Optional (fromSome)
import PackageIds

import V1.OptionalFieldsAddedIface
import V1.DataChangesDummy

main : TestTree
main = tests
  [ ("Fails if the template name changes", templateNameChanges)
  , ("Fails if fields are removed", templateFieldsRemoved)
  , ("Fails if non-optional fields are added", templateNonOptionalFieldsAdded)
  , ("Fails if nested fields are removed", templateFieldsRemovedNested)
  , ("Fails if nested non-optional fields are added", templateNonOptionalFieldsAddedNested)
  , ("Succeeds if a nested enum is unchanged", templateEnumUnchanged)
  , ("Succeeds if a nested enum is upgraded and extended", templateEnumUpgradeFromOld)
  , ("Succeeds if a nested enum is an old case when downgrading", templateEnumDowngradeFromOld)
  , ("Fails if a nested enum is a removed case", templateEnumUpgradeToRemoved)
  , ("Fails if a nested enum is an additional case when downgrading", templateEnumDowngradeFromNew)
  , ("Fails if an optional field is set on a choice when downgrading", templateOptionalFieldOnChoiceSetWhenDowngrading)
  -- Template optional field set when downgrading
  , tofswdViaInterfaceInCommandLocal
  , tofswdViaInterfaceInCommandGlobal
  , tofswdViaInterfaceInChoiceGlobal
  , tofswdViaInterfaceInCommandDisclosed
  , tofswdViaInterfaceInChoiceDisclosed
    -- no such thing as ViaCIDExercise, InCommand, and Local
  , tofswdViaKeyExerciseInCommandLocal
  , tofswdViaCIDExerciseInChoiceLocal
  , tofswdViaKeyExerciseInChoiceLocal
  , tofswdViaCIDExerciseInCommandGlobal
  , tofswdViaKeyExerciseInCommandGlobal
  , tofswdViaCIDExerciseInChoiceGlobal
  , tofswdViaKeyExerciseInChoiceGlobal
  , tofswdViaCIDExerciseInCommandDisclosed
  , tofswdViaKeyExerciseInCommandDisclosed
  , tofswdViaCIDExerciseInChoiceDisclosed
  , tofswdViaKeyExerciseInChoiceDisclosed
  ]

templateInvalidChange : forall t2 t1 c2. (Template t1, HasAgreement t1, Choice t2 c2 Text) => Bool -> (Party -> t1) -> c2 -> Test
templateInvalidChange shouldSucceed makeV1Contract v2Choice = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd (makeV1Contract a)
  let cidV2 = coerceContractId @t1 @t2 cid
  res <- a `trySubmit` exerciseCmd cidV2 v2Choice

  case (res, shouldSucceed) of
    (Right "V2", True) -> pure ()
    (Left (WronglyTypedContract {}), False) -> pure ()
    -- IDE Ledger doesn't apply obfuscation, instead the lookup error is wrapped in SCrash
    (Left (UnknownError msg), False) | "SErrorCrash" `isInfixOf` msg -> pure ()
    (Left (UnknownError msg), False) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected " <> (if shouldSucceed then "success" else "specific failure") <> " but got " <> show res

{- PACKAGE
name: data-changes
versions: 2
depends: data-changes-iface-1.0.0
-}

{- MODULE
package: data-changes
contents: |
  module NameChanges where

  template NameChanges              -- @V 1
  template NameChangesOops          -- @V  2
    with
      party : Party
    where
      signatory party
      choice NameChangesCall : Text
        controller party
        do pure "V1"                -- @V 1
        do pure "V2"                -- @V  2
-}

templateNameChanges : Test
templateNameChanges = templateInvalidChange @V2.NameChangesOops False V1.NameChanges V2.NameChangesCall

{- MODULE
package: data-changes
contents: |
  module FieldsRemoved where
  template FieldsRemoved
    with
      party : Party
      someData : Int                  -- @V 1
    where
      signatory party
      choice FieldsRemovedCall : Text
        controller party
        do pure "V1"                  -- @V 1
        do pure "V2"                  -- @V  2
-}

templateFieldsRemoved : Test
templateFieldsRemoved = templateInvalidChange @V2.FieldsRemoved False (`V1.FieldsRemoved` 1) V2.FieldsRemovedCall

{- MODULE
package: data-changes
contents: |
  module FieldsRemovedNested where
  data FieldsRemovedNestedData = FieldsRemovedNestedData
    with
      party : Party
      someData : Int                        -- @V 1
    deriving (Eq, Show)

  template FieldsRemovedNested
    with
      nestedData : FieldsRemovedNestedData
    where
      signatory nestedData.party
      choice FieldsRemovedNestedCall : Text
        controller nestedData.party
        do pure "V1"                        -- @V 1
        do pure "V2"                        -- @V  2
-}

templateFieldsRemovedNested : Test
templateFieldsRemovedNested =
  templateInvalidChange
    @V2.FieldsRemovedNested
    False
    (\p -> V1.FieldsRemovedNested $ V1.FieldsRemovedNestedData p 1)
    V2.FieldsRemovedNestedCall

{- MODULE
package: data-changes
contents: |
  module NonOptionalFieldsAdded where

  template NonOptionalFieldsAdded
    with
      party : Party
      newField : Int                           -- @V  2
    where
      signatory party
      choice NonOptionalFieldsAddedCall : Text
        controller party
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
-}

templateNonOptionalFieldsAdded : Test
templateNonOptionalFieldsAdded = templateInvalidChange @V2.NonOptionalFieldsAdded False V1.NonOptionalFieldsAdded V2.NonOptionalFieldsAddedCall

{- MODULE
package: data-changes
contents: |
  module NonOptionalFieldsAddedNested where

  data NonOptionalFieldsAddedNestedData = NonOptionalFieldsAddedNestedData
    with
      party : Party
      newField : Int                                 -- @V  2
    deriving (Eq, Show)

  template NonOptionalFieldsAddedNested
    with
      nestedData : NonOptionalFieldsAddedNestedData
    where
      signatory nestedData.party
      choice NonOptionalFieldsAddedNestedCall : Text
        controller nestedData.party
        do pure "V1"                                 -- @V 1
        do pure "V2"                                 -- @V  2
-}

templateNonOptionalFieldsAddedNested : Test
templateNonOptionalFieldsAddedNested =
  templateInvalidChange
    @V2.NonOptionalFieldsAddedNested
    False
    (V1.NonOptionalFieldsAddedNested . V1.NonOptionalFieldsAddedNestedData)
    V2.NonOptionalFieldsAddedNestedCall

{- MODULE
package: data-changes
contents: |
  module EnumUnchanged where

  data EnumUnchangedData
    = EnumUnchangedData1
    | EnumUnchangedData2
    deriving (Eq, Show, Enum)
  template EnumUnchanged
    with
      party : Party
      nestedData : EnumUnchangedData
    where
      signatory party
      choice EnumUnchangedCall : Text
        controller party
        do pure "V1"                     -- @V 1
        do pure "V2"                     -- @V  2
-}

templateEnumUnchanged : Test
templateEnumUnchanged =
  templateInvalidChange
    @V2.EnumUnchanged
    True
    (`V1.EnumUnchanged` V1.EnumUnchangedData1)
    V2.EnumUnchangedCall

{- MODULE
package: data-changes
contents: |
  module EnumRemoved where

  data EnumRemovedData
    = EnumRemovedData1
    | EnumRemovedData2
    | EnumRemovedData3                 -- @V 1
    deriving (Eq, Show, Enum)
  template EnumRemoved
    with
      party : Party
      nestedData : EnumRemovedData
    where
      signatory party
      choice EnumRemovedCall : Text
        controller party
        do pure "V1"                   -- @V 1
        do pure "V2"                   -- @V  2
-}

templateEnumUpgradeToRemoved : Test
templateEnumUpgradeToRemoved =
  templateInvalidChange
    @V2.EnumRemoved
    False
    (`V1.EnumRemoved` V1.EnumRemovedData3)
    V2.EnumRemovedCall

{- MODULE
package: data-changes
contents: |
  module EnumAdditional where

  data EnumAdditionalData
    = EnumAdditionalData1
    | EnumAdditionalData2
    | EnumAdditionalData3                 -- @V  2
    deriving (Eq, Show, Enum)
  template EnumAdditional
    with
      party : Party
      nestedData : EnumAdditionalData
    where
      signatory party
      choice EnumAdditionalCall : Text
        controller party
        do pure "V1"                      -- @V 1
        do pure "V2"                      -- @V  2
-}

templateEnumDowngradeFromNew : Test
templateEnumDowngradeFromNew = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createCmd V2.EnumAdditional with party = a, nestedData = V2.EnumAdditionalData3

  let cidV1 = coerceContractId @V2.EnumAdditional @V1.EnumAdditional cid

  -- Ensure we can only call the V1 choice
  res <- a `trySubmit` exerciseExactCmd cidV1 V1.EnumAdditionalCall

  case res of
    -- IDE Ledger doesn't apply obfuscation, instead the lookup error is wrapped in SCrash
    Left (UnknownError msg) | "SErrorCrash" `isInfixOf` msg -> pure ()
    Left (UnknownError msg) | "An error occurred." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected specific failure but got " <> show res

templateEnumUpgradeFromOld : Test
templateEnumUpgradeFromOld =
  templateInvalidChange
    @V2.EnumAdditional
    True
    (`V1.EnumAdditional` V1.EnumAdditionalData1)
    V2.EnumAdditionalCall

templateEnumDowngradeFromOld : Test
templateEnumDowngradeFromOld =
  templateInvalidChange
    @V1.EnumAdditional
    True
    (`V2.EnumAdditional` V2.EnumAdditionalData1)
    V1.EnumAdditionalCall

{- MODULE
package: data-changes
contents: |
  module OptionalFieldOnChoiceAdded where

  template OptionalFieldOnChoiceAdded
    with
      party : Party
    where
      signatory party
      choice OptionalFieldOnChoiceAddedCall : Text
        with
          existingField : Text
          newField : Optional Text                 -- @V  2
        controller party
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
-}

templateOptionalFieldOnChoiceSetWhenDowngrading : Test
templateOptionalFieldOnChoiceSetWhenDowngrading = test $ do
  a <- allocatePartyOn "alice" participant0
  cid <- a `submit` createExactCmd V1.OptionalFieldOnChoiceAdded with party = a

  let cidV2 = coerceContractId @V1.OptionalFieldOnChoiceAdded @V2.OptionalFieldOnChoiceAdded cid
  res <- (actAs a <> packagePreference [dataChangesV1]) `trySubmit` exerciseCmd cidV2 V2.OptionalFieldOnChoiceAddedCall { existingField = "V2", newField = Some "V2" }

  case res of
    Left (UnknownError msg) | "An optional contract field (\"newField\") with a value of Some may not be dropped during downgrading." `isInfixOf` msg -> pure ()
    _ -> assertFail $ "Expected specific failure but got " <> show res

{- PACKAGE
name: data-changes-iface
versions: 1
-}

{- MODULE
package: data-changes-iface
contents: |
  module OptionalFieldsAddedIface where

  data MyUnit = MyUnit {}

  interface OptionalFieldsAddedIface where
    viewtype MyUnit

    nonconsuming choice OptionalFieldsAddedIfaceChoice : ()
      with
        ctl : Party
      controller ctl
      do
        assertFail "aaa"
        pure ()
-}

{- MODULE
package: data-changes
contents: |
  module OptionalFieldsAdded where

  import OptionalFieldsAddedIface

  data OptionalFieldsAddedKey = OptionalFieldsAddedKey
    { party : Party
    }
    deriving (Eq, Show)

  template OptionalFieldsAdded
    with
      party : Party
      newField : Optional Text                 -- @V  2
    where
      signatory party
      key (OptionalFieldsAddedKey party) : OptionalFieldsAddedKey
      maintainer key.party
      choice OptionalFieldsAddedCall : Text
        controller party
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
      choice OptionalFieldsAddedCallWithCtl : Text
        with
          ctl: Party
        controller ctl
        do pure "V1"                           -- @V 1
        do pure "V2"                           -- @V  2
      interface instance OptionalFieldsAddedIface for OptionalFieldsAdded where
        view = MyUnit {}

  template OptionalFieldsAddedCallHelper
    with
      party : Party
    where
      signatory party
      choice OptionalFieldsAddedCallHelperCall : ()
        with
          cid : ContractId OptionalFieldsAdded
          ctl : Party
        controller ctl
        do
          exercise cid (OptionalFieldsAddedCallWithCtl ctl)
          pure ()

      choice OptionalFieldsAddedCallHelperMake : ContractId OptionalFieldsAdded
        with
          dat : OptionalFieldsAdded
          ctl : Party
        controller ctl
        do
          create dat

      choice OptionalFieldsAddedCallHelperCallViaKey : ()
        with
          k : OptionalFieldsAddedKey
          ctl : Party
        controller ctl
        do
          exerciseByKey @OptionalFieldsAdded k (OptionalFieldsAddedCallWithCtl ctl)
          pure ()

  template IChoiceBodyCall
    with
      party : Party
    where
      signatory party
      choice IChoiceBodyCallChoice : ()
        with
          cidI : ContractId OptionalFieldsAddedIface
          ctl : Party
        controller ctl
        do
          exercise cidI (OptionalFieldsAddedIfaceChoice ctl)
-}

{- PACKAGE
name: data-changes-dummy
versions: 1
depends: |
  data-changes-1.0.0
  data-changes-2.0.0
  data-changes-iface-1.0.0
-}

{- MODULE
package: data-changes-dummy
contents: |
  module DataChangesDummy where

  import OptionalFieldsAddedIface
  import qualified V1.OptionalFieldsAdded as V1
  import qualified V2.OptionalFieldsAdded as V2

  template OptionalFieldsLocalDummy
    with
      party : Party
    where
      signatory party
      choice OptionalFieldsLocalTemplateDummyChoice : ()
        controller party
        do
          cid <- create
            (V2.OptionalFieldsAdded
              party
              (Some "V2")
            )
          let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
          exercise cidV1 (V1.OptionalFieldsAddedCallWithCtl party)
          pure ()

      choice OptionalFieldsLocalTemplateDummyChoiceByKey : ()
        controller party
        do
          cid <- create
            (V2.OptionalFieldsAdded
              party
              (Some "V2")
            )
          let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
          exerciseByKey @V1.OptionalFieldsAdded (V1.OptionalFieldsAddedKey party) (V1.OptionalFieldsAddedCallWithCtl party)
          pure ()

      choice OptionalFieldsLocalIfaceDummyChoice : ()
        controller party
        do
          cid <- create (V2.OptionalFieldsAdded party (Some "V2"))
          let cidIface = toInterfaceContractId @OptionalFieldsAddedIface cid
          exercise cidIface (OptionalFieldsAddedIfaceChoice party)
-}

dataChangesV1 : PackageId
dataChangesV1 = getPackageId "data-changes-1.0.0"

templateOptionalFieldsSetWhenDowngradingTest : Show b => Text -> (Party -> Party -> Script (Either SubmitError b)) -> (Text, Test)
templateOptionalFieldsSetWhenDowngradingTest trailer f = ("Fails if an optional field is set when downgrading (" <> trailer <> ")", s)
  where
  s = test $ do
    a <- allocatePartyOn "alice" participant0
    b <- allocatePartyOn "bob" participant0
    res <- f a b
    case res of
      Left (UpgradeError _ msg) | "An optional contract field with a value of Some may not be dropped during downgrading" `isInfixOf` msg -> pure ()
      _ -> assertFail $ "Expected specific failure but got " <> show res

tofswdViaCIDExerciseInCommandGlobal : (Text, Test)
tofswdViaCIDExerciseInCommandGlobal = templateOptionalFieldsSetWhenDowngradingTest "static,  global,    in command, cid" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
  a `trySubmit` exerciseExactCmd cidV1 V1.OptionalFieldsAddedCall

tofswdViaInterfaceInCommandGlobal : (Text, Test)
tofswdViaInterfaceInCommandGlobal = templateOptionalFieldsSetWhenDowngradingTest "dynamic, global,    in command" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  let cidIface = toInterfaceContractId @OptionalFieldsAddedIface cid
  (actAs a <> packagePreference [dataChangesV1]) `trySubmit` exerciseExactCmd cidIface (OptionalFieldsAddedIfaceChoice a)

tofswdViaInterfaceInChoiceGlobal : (Text, Test)
tofswdViaInterfaceInChoiceGlobal = templateOptionalFieldsSetWhenDowngradingTest "dynamic, global,    in choice" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  let cidIface = toInterfaceContractId @OptionalFieldsAddedIface cid
  (actAs a <> packagePreference [dataChangesV1]) `trySubmit` createAndExerciseExactCmd (V2.IChoiceBodyCall a) (V2.IChoiceBodyCallChoice cidIface a)

tofswdViaInterfaceInCommandLocal : (Text, Test)
tofswdViaInterfaceInCommandLocal = templateOptionalFieldsSetWhenDowngradingTest "dynamic, local,     in command" $ \a b -> do
  (actAs a <> packagePreference [dataChangesV1]) `trySubmit` createAndExerciseExactCmd (OptionalFieldsLocalDummy a) OptionalFieldsLocalIfaceDummyChoice

tofswdViaInterfaceInCommandDisclosed : (Text, Test)
tofswdViaInterfaceInCommandDisclosed = templateOptionalFieldsSetWhenDowngradingTest "dynamic, disclosed, in command" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  let cidIface = toInterfaceContractId @OptionalFieldsAddedIface cid

  disclosure <- fromSome <$> queryDisclosure a cid
  (actAs b <> packagePreference [dataChangesV1] <> disclose disclosure) `trySubmit` exerciseExactCmd cidIface (OptionalFieldsAddedIfaceChoice b)

tofswdViaInterfaceInChoiceDisclosed : (Text, Test)
tofswdViaInterfaceInChoiceDisclosed = templateOptionalFieldsSetWhenDowngradingTest "dynamic, disclosed, in choice" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  let cidIface = toInterfaceContractId @OptionalFieldsAddedIface cid

  disclosure <- fromSome <$> queryDisclosure a cid
  (actAs b <> packagePreference [dataChangesV1] <> disclose disclosure) `trySubmit` createAndExerciseExactCmd (V2.IChoiceBodyCall b) (V2.IChoiceBodyCallChoice cidIface b)

tofswdViaKeyExerciseInCommandGlobal : (Text, Test)
tofswdViaKeyExerciseInCommandGlobal = templateOptionalFieldsSetWhenDowngradingTest "static,  global,    in command, key" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  -- Ensure we can only call the V1 choice
  a `trySubmit` exerciseByKeyExactCmd @V1.OptionalFieldsAdded (V1.OptionalFieldsAddedKey a) V1.OptionalFieldsAddedCall

tofswdViaCIDExerciseInChoiceGlobal : (Text, Test)
tofswdViaCIDExerciseInChoiceGlobal = templateOptionalFieldsSetWhenDowngradingTest "static,  global,    in choice,  cid" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
  (actAs a) `trySubmit` createAndExerciseExactCmd (V1.OptionalFieldsAddedCallHelper a) (V1.OptionalFieldsAddedCallHelperCall cidV1 a)

tofswdViaKeyExerciseInChoiceGlobal : (Text, Test)
tofswdViaKeyExerciseInChoiceGlobal = templateOptionalFieldsSetWhenDowngradingTest "static,  global,    in choice,  key" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"
  (actAs a) `trySubmit` createAndExerciseExactCmd (V1.OptionalFieldsAddedCallHelper a) (V1.OptionalFieldsAddedCallHelperCallViaKey (V1.OptionalFieldsAddedKey a) a)

tofswdViaKeyExerciseInCommandLocal : (Text, Test)
tofswdViaKeyExerciseInCommandLocal = templateOptionalFieldsSetWhenDowngradingTest "static,  local,     in command, key" $ \a b -> do
  trySubmit (actAs a) $ (,) <$>
    createAndExerciseExactCmd (V2.OptionalFieldsAddedCallHelper a) (V2.OptionalFieldsAddedCallHelperMake (V2.OptionalFieldsAdded a (Some "V2")) a) <*>
    createAndExerciseExactCmd (V1.OptionalFieldsAddedCallHelper a) (V1.OptionalFieldsAddedCallHelperCallViaKey (V1.OptionalFieldsAddedKey a) a)

tofswdViaCIDExerciseInCommandDisclosed : (Text, Test)
tofswdViaCIDExerciseInCommandDisclosed = templateOptionalFieldsSetWhenDowngradingTest "static,  disclosed, in command, cid" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  disclosure <- fromSome <$> queryDisclosure a cid

  let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
  (actAs b <> disclose disclosure) `trySubmit` exerciseExactCmd cidV1 (V1.OptionalFieldsAddedCallWithCtl b)

tofswdViaKeyExerciseInCommandDisclosed : (Text, Test)
tofswdViaKeyExerciseInCommandDisclosed = templateOptionalFieldsSetWhenDowngradingTest "static,  disclosed, in command, key" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  disclosure <- fromSome <$> queryDisclosure a cid

  let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
  (actAs b <> disclose disclosure) `trySubmit` exerciseByKeyExactCmd @V1.OptionalFieldsAdded (V1.OptionalFieldsAddedKey a) (V1.OptionalFieldsAddedCallWithCtl b)

tofswdViaCIDExerciseInChoiceLocal : (Text, Test)
tofswdViaCIDExerciseInChoiceLocal = templateOptionalFieldsSetWhenDowngradingTest "static,  local,     in choice,  cid" $ \a b -> do
  (actAs a) `trySubmit` createAndExerciseExactCmd (OptionalFieldsLocalDummy a) OptionalFieldsLocalTemplateDummyChoice

tofswdViaKeyExerciseInChoiceLocal : (Text, Test)
tofswdViaKeyExerciseInChoiceLocal = templateOptionalFieldsSetWhenDowngradingTest "static,  local,     in choice,  key" $ \a b -> do
  (actAs a) `trySubmit` createAndExerciseExactCmd (OptionalFieldsLocalDummy a) OptionalFieldsLocalTemplateDummyChoiceByKey

tofswdViaCIDExerciseInChoiceDisclosed : (Text, Test)
tofswdViaCIDExerciseInChoiceDisclosed = templateOptionalFieldsSetWhenDowngradingTest "static,  disclosed, in choice,  cid" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  disclosure <- fromSome <$> queryDisclosure a cid

  let cidV1 = coerceContractId @V2.OptionalFieldsAdded @V1.OptionalFieldsAdded cid
  (actAs b <> disclose disclosure) `trySubmit` createAndExerciseExactCmd (V1.OptionalFieldsAddedCallHelper b) (V1.OptionalFieldsAddedCallHelperCall cidV1 b)

tofswdViaKeyExerciseInChoiceDisclosed : (Text, Test)
tofswdViaKeyExerciseInChoiceDisclosed = templateOptionalFieldsSetWhenDowngradingTest "static,  disclosed, in choice,  key" $ \a b -> do
  cid <- a `submit` createCmd V2.OptionalFieldsAdded with party = a, newField = Some "V2"

  disclosure <- fromSome <$> queryDisclosure a cid

  (actAs b <> disclose disclosure) `trySubmit` createAndExerciseExactCmd (V1.OptionalFieldsAddedCallHelper b) (V1.OptionalFieldsAddedCallHelperCallViaKey (V1.OptionalFieldsAddedKey a) b)
