-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE ApplicativeDo #-}

module InterfaceViews (main) where

import UpgradeTestLib
import FixedInterface
import FixedInterfaceViewTemplate
import FixedInterfaceCaller
import qualified V1.Interfaces as V1
import qualified V2.Interfaces as V2
import PackageIds
import DA.Foldable
import DA.Optional
import DA.List
import DA.Text

-- Fixed template so interface view can contain a contract ID
{- PACKAGE
name: fixed-interface-view-template
versions: 1
-}

{- MODULE
package: fixed-interface-view-template
contents: |
  module FixedInterfaceViewTemplate where

  template FIVT with
      fivtOwner : Party
    where
    signatory fivtOwner
-}

-- Fixed package containing only the interface
{- PACKAGE
name: fixed-interface-view
versions: 1
depends: fixed-interface-view-template-1.0.0
-}

{- MODULE
package: fixed-interface-view
contents: |
  module FixedInterface where
  import FixedInterfaceViewTemplate

  data Nat = Z | S Nat
    deriving (Eq, Ord, Show)

  intToNat : Int -> Nat
  intToNat 0 = Z
  intToNat i = S (intToNat (i - 1))

  data IV = IV with
      owner : Party
      payload : Nat
      oContractId : Optional (ContractId FIVT)
    deriving (Eq, Ord, Show)

  interface I where
    viewtype IV

    getVersion : Text
    nonconsuming choice GetVersion : Text
      controller (view this).owner
      do
        pure $ getVersion this
-}

-- Another fixed package containing a helper template for exercising the interface in a choice
{- PACKAGE
name: fixed-interface-view-caller
versions: 1
depends: fixed-interface-view-1.0.0
-}

{- MODULE
package: fixed-interface-view-caller
contents: |
  module FixedInterfaceCaller where

  import FixedInterface

  template Caller with
      party : Party
    where
    signatory party

    choice CallInterface : Text with
        icid : ContractId I
      controller party
      do
        exercise icid GetVersion
-}

-- The versioned/upgraded package
{- PACKAGE
name: interface-views
versions: 2
depends: |
  fixed-interface-view-1.0.0
  fixed-interface-view-template-1.0.0
-}

{- MODULE
package: interface-views
contents: |
  module Interfaces where

  import FixedInterface
  import FixedInterfaceViewTemplate
  import DA.Optional

  template FITemplate with
      party : Party
    where
    signatory party

    interface instance I for FITemplate where
      view = IV party Z None     -- @V 1
      view = IV party (S Z) None -- @V  2
      getVersion = "V1"          -- @V 1
      getVersion = "V2"          -- @V  2

    -- Following two choices exist here for convenience. They could be in a separate package which depends on this,
    -- but additional unnecessary packages simply wastes time.
    choice FetchFromInterface : Nat with
        icid : ContractId I
      controller party
      do
        (_, res) <- fromSomeNote "Failed to fetch contract" <$> fetchFromInterface @FITemplate icid
        let v = view $ toInterface @I res
        pure v.payload

    choice FetchInterface : () with
        icid : ContractId I
      controller party
      do
        fetch icid
        pure ()

  template FITemplateWithContractId with
      party : Party
      cid : ContractId FIVT
    where
    signatory party

    interface instance I for FITemplateWithContractId where
      view = IV party Z (Some cid)
      getVersion = "V1"

  template FITemplateTooNested with
        party : Party
        i : Int
      where
      signatory party

      interface instance I for FITemplateTooNested where
        view = IV party Z None            -- @V 1
        view = IV party (intToNat i) None -- @V  2
        getVersion = "V1"                 -- @V 1
        getVersion = "V2"                 -- @V  2
-}

main : TestTree
main = tests
  [ ("Calling an interface choice at command level succeeds as intended when the view is modified", exerciseCommandShouldSucceed)
  , ("Calling an interface choice in choice body succeeds as intended when the view is modified", exerciseInChoiceBodyShouldSucceed)
  , ("fetchFromInterface succeeds as intended when the view is modified", fetchFromInterfaceShouldSucceed)
  , ("queryInterfaceContractId can query interfaces with contract ID in the view", queryInterfaceContractIdInView)
  , ("queryInterface returns None for upgraded views that are too deeply nested", queryInterfaceDeeplyNestedView)
  ]

setupAliceAndInterface : Script (Party, ContractId I)
setupAliceAndInterface = do
  alice <- allocateParty "alice"
  cid <- alice `submit` createExactCmd V1.FITemplate with party = alice
  pure (alice, toInterfaceContractId @I cid)

exerciseCommandShouldSucceed : Test
exerciseCommandShouldSucceed = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- alice `trySubmit` exerciseCmd icid GetVersion
  case res of
    Right _ -> pure ()
    Left err ->
      assertFail ("Expected fetchFromInterface to succeed, got " <> show res)

exerciseInChoiceBodyShouldSucceed : Test
exerciseInChoiceBodyShouldSucceed = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- alice `trySubmit` createAndExerciseCmd (Caller with party = alice) (CallInterface with icid = icid)
  case res of
    Right _ -> pure ()
    Left err ->
      assertFail ("Expected fetchFromInterface to succeed, got " <> show res)

fetchFromInterfaceShouldSucceed : Test
fetchFromInterfaceShouldSucceed = test $ do
  (alice, icid) <- setupAliceAndInterface
  res <- alice `trySubmit` createAndExerciseExactCmd (V2.FITemplate with party = alice) (V2.FetchFromInterface with icid = icid)
  case res of
    Right _ -> pure ()
    Left err ->
      assertFail ("Expected fetchFromInterface to succeed, got " <> show res)

queryInterfaceContractIdInView : Test
queryInterfaceContractIdInView = test $ do
  alice <- allocateParty "alice"
  fivtCid <- alice `submit` createExactCmd FIVT with fivtOwner = alice
  cid <- alice `submit` createExactCmd V1.FITemplateWithContractId with party = alice, cid = fivtCid
  let icid = toInterfaceContractId @I cid
  res <- queryInterfaceContractId alice icid
  res === Some (IV with owner = alice, payload = Z, oContractId = Some fivtCid)

queryInterfaceDeeplyNestedView : Test
queryInterfaceDeeplyNestedView = test $ do
    alice <- allocateParty "alice"
    cid1 <- alice `submit` createExactCmd V1.FITemplateTooNested with party = alice, i = 0
    cid2 <- alice `submit` createExactCmd V1.FITemplateTooNested with party = alice, i = 100
    res <- queryInterface @I alice
    sort res === sort [ (toInterfaceContractId @I cid1, Some (IV with owner = alice, payload = Z, oContractId = None))
                      , (toInterfaceContractId @I cid2, None)
                      ]
