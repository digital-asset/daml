-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module UpgradeTestLib (
  participant0,
  participant1,
  tests,
  broken,
  withUnvettedDar,
  withUnvettedDarOnParticipant,
  module Daml.Script,
  module Daml.Script.Internal,
  module DA.Assert,
) where

import Daml.Script
import Daml.Script.Internal
import DA.Assert
import DA.Foldable
import DA.Time

participant0 : ParticipantName
participant0 = ParticipantName "participant0"

participant1 : ParticipantName
participant1 = ParticipantName "participant1"

type TestTree = Text -> Script ()

type Test = Text -> Script ()

tests : [(Text, Test)] -> TestTree
tests cases runMode = forA_ cases $ \(testName, test) -> do
  debugRaw $ "Testing: " <> testName
  test runMode

test : Script () -> Test
test act _ = act

-- | Used to tag a test as failing by erroring in any way, once all this behaviour works, this function can be removed
brokenScript : Test -> Test
brokenScript act runMode = do
  tryToEither (\() -> liftFailedCommandToException $ act runMode) >>= \case
    Right _ -> assertFail "Expected failed and got success! Did you fix this logic? Remove the wrapping `broken` to mark this as working."
    Left _ -> pure ()

-- | WARNING: These will not work on IDE Ledger
withUnvettedDarOnParticipant : Text -> ParticipantName -> Script a -> Script a
withUnvettedDarOnParticipant darName participant act = do
  unvetDarOnParticipant darName participant
  res <- tryToEither (\() -> liftFailedCommandToException act)
  vetDarOnParticipant darName participant
  case res of
    Left e -> throwAnyException e
    Right r -> pure r

-- | WARNING: These will not work on IDE Ledger
withUnvettedDar : Text -> Script a -> Script a
withUnvettedDar darName act = do
  unsafeUnvetDarOnParticipant darName (Some participant0)
  unsafeUnvetDarOnParticipant darName (Some participant1)
  sleep $ seconds 1
  res <- tryToEither (\() -> liftFailedCommandToException act)
  unsafeVetDarOnParticipant darName (Some participant0)
  unsafeVetDarOnParticipant darName (Some participant1)
  sleep $ seconds 1
  case res of
    Left e -> throwAnyException e
    Right r -> pure r

broken : (Text, Test) -> (Text, Test)
broken (name, act) = ("(BROKEN) " <> name, brokenScript act)

brokenOnCanton : (Text, Test) -> (Text, Test)
brokenOnCanton (name, act) = 
  ( "(BROKEN ON CANTON) " <> name
  , \case
    "canton" -> brokenScript act "canton"
    runMode -> act runMode
  )

brokenOnIDELedger : (Text, Test) -> (Text, Test)
brokenOnIDELedger (name, act) = 
  ( "(BROKEN ON IDE-LEDGER) " <> name
  , \case
    "ide-ledger" -> brokenScript act "ide-ledger"
    runMode -> act runMode
  )
