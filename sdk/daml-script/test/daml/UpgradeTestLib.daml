-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module UpgradeTestLib (
  TestTree,
  Test,
  RunMode (..),
  TestState (..),
  participant0,
  participant1,
  test,
  tests,
  subtree,
  broken,
  brokenOnCanton,
  disabledScriptUpgradeTestDueToTriStateVetting,
  brokenOnIDELedger,
  withUnvettedDar,
  withUnvettedDarOnParticipant,
  module Daml.Script,
  module Daml.Script.Internal,
  module DA.Assert,
) where

import Daml.Script
import Daml.Script.Internal
import DA.Assert
import DA.Foldable
import DA.Time

import DA.Text qualified as T

participant0 : ParticipantName
participant0 = ParticipantName "participant0"

participant1 : ParticipantName
participant1 = ParticipantName "participant1"

data RunMode
  = IdeLedger
  | Canton
  deriving (Show)

data TestState = TestState
  { runMode : RunMode
  , testPath : [Text]
  }

type TestTree = TestState -> Script ()

type Test = TestState -> Script ()

tests : [(Text, Test)] -> TestTree
tests cases testState = forA_ cases $ \(testName, test) -> do
  test testState { testPath = testName :: testState.testPath }

test : Script () -> Test
test act TestState { runMode, testPath } = do
  debugRaw $ T.unwords
    [ "Testing:"
    , "[" <> show runMode <> "]"
    , T.intercalate " - " (reverse testPath)
    ]
  act

subtree : Text -> [(Text, Test)] -> (Text, Test)
subtree group cases = (group, tests cases)

-- | Used to tag a test as failing by erroring in any way, once all this behaviour works, this function can be removed
brokenScript : Test -> Test
brokenScript act testState = do
  tryToEither (\() -> liftFailedCommandToException $ act testState) >>= \case
    Right _ -> assertFail "Expected failed and got success! Did you fix this logic? Remove the wrapping `broken` to mark this as working."
    Left _ -> pure ()

-- | WARNING: These will not work on IDE Ledger
withUnvettedDarOnParticipant : Text -> ParticipantName -> Script a -> Script a
withUnvettedDarOnParticipant darName participant act = do
  unvetDarOnParticipant darName participant
  res <- tryToEither (\() -> liftFailedCommandToException act)
  vetDarOnParticipant darName participant
  case res of
    Left e -> throwAnyException e
    Right r -> pure r

-- | WARNING: These will not work on IDE Ledger
withUnvettedDar : Text -> Script a -> Script a
withUnvettedDar darName act = do
  unsafeUnvetDarOnParticipant darName (Some participant0)
  unsafeUnvetDarOnParticipant darName (Some participant1)
  sleep $ seconds 1
  res <- tryToEither (\() -> liftFailedCommandToException act)
  unsafeVetDarOnParticipant darName (Some participant0)
  unsafeVetDarOnParticipant darName (Some participant1)
  sleep $ seconds 1
  case res of
    Left e -> throwAnyException e
    Right r -> pure r

broken : (Text, Test) -> (Text, Test)
broken (name, act) = ("(BROKEN) " <> name, brokenScript act)

brokenOnCanton : (Text, Test) -> (Text, Test)
brokenOnCanton (name, act) =
  ( "(BROKEN ON CANTON) " <> name
  , \testState -> case testState.runMode of
    Canton -> brokenScript act testState
    _ -> act testState
  )

-- TODO(#21671): Fix and re-enable tests after tri-state vetting changes
disabledScriptUpgradeTestDueToTriStateVetting : (Text, Test) -> (Text, Test)
disabledScriptUpgradeTestDueToTriStateVetting (name, test) =
  (name
  , \state -> pure ()
  )

brokenOnIDELedger : (Text, Test) -> (Text, Test)
brokenOnIDELedger (name, act) =
  ( "(BROKEN ON IDE-LEDGER) " <> name
  , \testState -> case testState.runMode of
    IdeLedger -> brokenScript act testState
    _ -> act testState
  )
