-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Cats where

import Daml.Trigger
import DA.Foldable (forA_)
import DA.Time (seconds)
import DA.Functor (void)
import qualified DA.List as List

-- Configuration data

slowBreedingRate : Int
slowBreedingRate = 25

mediumBreedingRate : Int
mediumBreedingRate = 50

fastBreedingRate : Int
fastBreedingRate = 100

breedingPeriod : RelTime
breedingPeriod = seconds 1

pettingRate : Int
pettingRate = 10

pettingPeriod : RelTime
pettingPeriod = seconds 1

cullingRate : Int
cullingRate = 10

cullingPeriod : RelTime
cullingPeriod = seconds 1


template Cat
  with
    owner : Party
    name : Int
  where
    signatory owner

    choice Stroke_Cat : ()
      controller owner
      do
        pure ()


-- Backpressure will generate faults that impact this trigger's ACS view
genericBreedingTrigger : Int -> Trigger (Bool, Int)
genericBreedingTrigger rate = Trigger
  { initialize = pure (False, 0)
  , updateState = \msg -> case msg of
      MHeartbeat -> do
        (_, breedCount) <- get
        put (True, breedCount + rate)
      _ -> do
        (_, breedCount) <- get
        put (False, breedCount)
  , rule = \party -> do
      (heartbeat, breedCount) <- get
      if heartbeat then
        forA_ [1..rate] \offset -> do
          void $ emitCommands [createCmd (Cat party (breedCount + offset))] []
      else
        pure ()
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Cat ]
  , heartbeat = Some breedingPeriod
  }

slowBreedingTrigger : Trigger (Bool, Int)
slowBreedingTrigger = genericBreedingTrigger slowBreedingRate

mediumBreedingTrigger : Trigger (Bool, Int)
mediumBreedingTrigger = genericBreedingTrigger mediumBreedingRate

fastBreedingTrigger : Trigger (Bool, Int)
fastBreedingTrigger = genericBreedingTrigger fastBreedingRate


-- Contention will generate faults that impact this trigger's ACS view
pettingTrigger : Trigger ([ContractId Cat], Optional [ContractId Cat])
pettingTrigger = Trigger
  { initialize = pure ([], None)
  , updateState = \msg -> case msg of
      MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some (_, catId, _))]) -> do
        (cats, _) <- get
        put (catId :: cats, None)
      MTransaction (Transaction _ _ [ArchivedEvent (fromArchived @Cat -> Some (_, catId))]) -> do
        (cats, _) <- get
        put (List.delete catId cats, None)
      MHeartbeat -> do
        (cats, _) <- get
        let clowder = List.take pettingRate cats
        put ((List.drop pettingRate cats) ++ clowder, Some clowder)
      _ -> do
        (cats, _) <- get
        put (cats, None)
  , rule = \party -> do
      (cats, action) <- get
      case action of
        Some clowder -> do
          forA_ clowder \catId -> do
            void $ emitCommands [exerciseCmd catId Stroke_Cat] [toAnyContractId catId]
        None -> pure ()
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Cat ]
  , heartbeat = Some pettingPeriod
  }


-- Contention will generate faults that impact this trigger's ACS view
cullingTrigger : Trigger ([ContractId Cat], Optional [ContractId Cat])
cullingTrigger = Trigger
  { initialize = pure ([], None)
  , updateState = \msg -> case msg of
      MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some (_, catId, _))]) -> do
        (cats, _) <- get
        put (catId :: cats, None)
      MHeartbeat -> do
        (cats, _) <- get
        put (List.drop cullingRate cats, Some(List.take cullingRate cats))
      _ -> do
        (cats, _) <- get
        put (cats, None)
  , rule = \party -> do
      (cats, action) <- get
      case action of
        Some clowder -> do
          forA_ clowder \catId -> do
            void $ emitCommands [exerciseCmd catId Archive] [toAnyContractId catId]
        None -> pure ()
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Cat ]
  , heartbeat = Some cullingPeriod
  }
