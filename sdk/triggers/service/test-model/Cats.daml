-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Cats where

import Daml.Trigger
import DA.Foldable (forA_)
import DA.Time (seconds)
import DA.Functor (void)


template Cat
  with
    owner : Party
    id : Int
  where
    signatory owner

template TestComplete
  with
    owner : Party
  where
    signatory owner

populationSize : Int
populationSize = 100

inefficientFibonacci: Int -> Int
inefficientFibonacci n =
  case n of
    0 -> 0
    1 -> 1
    m -> inefficientFibonacci (m - 2) + inefficientFibonacci (m - 1)

simulateWorkload: () -> ()
simulateWorkload _ = do
  let _ = inefficientFibonacci 10
  ()

breedingTrigger : Trigger Int
breedingTrigger = Trigger
  { initialize = pure populationSize
  , updateState = \msg -> case msg of
       MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some catId)]) -> do
         modify (subtract 1)
       _ -> pure ()
  , rule = breedTheCats
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

breedTheCats: Party -> TriggerA Int ()
breedTheCats party = do
  breedCount <- get
  if breedCount == 0 then
    void $ emitCommands [createCmd (TestComplete party)] []
  else
    forA_ [1..breedCount] \id -> do
      void $ emitCommands [createCmd (Cat party id)] []

earlyBreedingTrigger : Trigger (Int, Int, Bool)
earlyBreedingTrigger = Trigger
  { initialize = pure (populationSize, 0, False)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

lateBreedingTrigger : Trigger (Int, Int, Bool)
lateBreedingTrigger = Trigger
  { initialize = pure (populationSize, 1, False)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

earlyBreedingTriggerWithDelay : Trigger (Int, Int, Bool)
earlyBreedingTriggerWithDelay = Trigger
  { initialize = pure (populationSize, 0, True)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

lateBreedingTriggerWithDelay : Trigger (Int, Int, Bool)
lateBreedingTriggerWithDelay = Trigger
  { initialize = pure (populationSize, 1, True)
  , updateState = breedingUpdate
  , rule = breedingAction
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @TestComplete, registeredTemplate @Cat ]
  , heartbeat = Some(seconds 1)
  }

breedingUpdate: Message -> TriggerUpdateA (Int, Int, Bool) ()
breedingUpdate msg = do
  (breedCount, breedDelay, busyLoop) <- get
  if breedDelay > 0 then
    put (breedCount, breedDelay - 1, busyLoop)
  else do
    case msg of
      MTransaction (Transaction _ _ [CreatedEvent (fromCreated @Cat -> Some catId)]) -> do
        if breedDelay == 0 then
          put (breedCount - 1, breedDelay - 1, busyLoop)
        else
          put (breedCount - 1, breedDelay, busyLoop)
      _ -> do
        if breedDelay == 0 then
          put (breedCount, breedDelay - 1, busyLoop)
        else
          pure ()

breedingAction: Party -> TriggerA (Int, Int, Bool) ()
breedingAction party = do
  (breedCount, breedDelay, busyLoop) <- get
  if and [breedDelay <= 0, breedCount == 0] then
    void $ emitCommands [createCmd (TestComplete party)] []
  else if breedDelay == 0 then do
    forA_ [1..populationSize] \id -> do
      let _ = if busyLoop then simulateWorkload() else ()
      void $ emitCommands [createCmd (Cat party id)] []
  else
    pure ()
