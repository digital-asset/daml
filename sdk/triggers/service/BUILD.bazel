# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@oracle//:index.bzl", "oracle_tags")
load("@build_environment//:configuration.bzl", "sdk_version")
load(
    "//daml-lf/language:daml-lf.bzl",
    "LEGACY_DAML_SCRIPT_LF_VERSIONS",
    "LF_DEV_VERSIONS",
    "LF_MAJOR_VERSIONS",
    "lf_version_default_or_latest",
    "lf_versions_aggregate",
)
load("@os_info//:os_info.bzl", "is_windows")
load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
    "da_scala_library",
    "da_scala_test_suite",
    "lf_scalacopts_stricter",
)

TRIGGER_MAIN = "src/main/scala/com/digitalasset/daml/lf/engine/trigger/ServiceMain.scala"

target_lf_versions = lf_versions_aggregate(
    [lf_version_default_or_latest(major) for major in LF_MAJOR_VERSIONS] +
    LF_DEV_VERSIONS,
)

da_scala_library(
    name = "trigger-service",
    srcs = glob(
        ["src/main/scala/**/*.scala"],
        exclude = [TRIGGER_MAIN],
    ),
    resources = glob(["src/main/resources/**/*"]),
    scala_deps = [
        "@maven//:com_chuusai_shapeless",
        "@maven//:com_github_pureconfig_pureconfig_core",
        "@maven//:com_github_pureconfig_pureconfig_generic",
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_actor_typed",
        "@maven//:org_apache_pekko_pekko_http",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_http_spray_json",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_parboiled_parboiled",
        "@maven//:org_scalaz_scalaz_core",
        "@maven//:org_tpolecat_doobie_core",
        "@maven//:org_tpolecat_doobie_free",
        "@maven//:org_tpolecat_doobie_postgres",
        "@maven//:org_typelevel_cats_core",
        "@maven//:org_typelevel_cats_effect",
        "@maven//:org_typelevel_cats_free",
        "@maven//:org_typelevel_cats_kernel",
    ],
    scala_runtime_deps = [
        "@maven//:org_apache_pekko_pekko_slf4j",
        "@maven//:org_tpolecat_doobie_postgres",
    ],
    scalacopts = lf_scalacopts_stricter,
    # Uncomment this if/when the target is published to maven.
    # tags = ["maven_coordinates=com.daml:trigger-service:__VERSION__"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:org_postgresql_postgresql",
    ],
    deps = [
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/engine",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//ledger-service/cli-opts",
        "//ledger-service/metrics",
        "//ledger-service/pureconfig-utils",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/contextualized-logging",
        "//libs-scala/db-utils",
        "//libs-scala/doobie-slf4j",
        "//libs-scala/ledger-resources",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/rs-grpc-pekko",
        "//libs-scala/scala-utils",
        "//observability/metrics",
        "//observability/pekko-http-metrics",
        "//triggers/metrics",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:com_typesafe_config",
        "@maven//:io_dropwizard_metrics_metrics_core",
        "@maven//:io_netty_netty_handler",
        "@maven//:io_opentelemetry_opentelemetry_api",
        "@maven//:org_flywaydb_flyway_core",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

scala_binary_deps = [
    "@maven//:org_apache_pekko_pekko_actor",
    "@maven//:org_apache_pekko_pekko_actor_typed",
    "@maven//:org_apache_pekko_pekko_http_core",
    "@maven//:com_typesafe_scala_logging_scala_logging",
    "@maven//:org_scalaz_scalaz_core",
]

binary_deps = [
    "//daml-lf/archive:daml_lf_archive_reader",
    "//daml-lf/archive:daml_lf_dev_archive_proto_java",
    "//daml-lf/data",
    "//daml-lf/interpreter",
    "//ledger/ledger-api-common",
    "//libs-scala/contextualized-logging",
    "//libs-scala/db-utils",
    "//libs-scala/ports",
    "//libs-scala/scala-utils",
    "//observability/metrics",
    "//triggers/runner:trigger-runner-lib",
    "//triggers/service/auth:middleware-api",
    ":trigger-service",
    "@maven//:ch_qos_logback_logback_classic",
    "@maven//:com_google_protobuf_protobuf_java",
    "@maven//:org_slf4j_slf4j_api",
]

trigger_service_runtime_deps = {
    "ce": [],
    "ee": ["@maven//:com_oracle_database_jdbc_ojdbc8"],
}

[
    da_scala_binary(
        name = "trigger-service-binary-{}".format(edition),
        srcs = [TRIGGER_MAIN],
        main_class = "com.daml.lf.engine.trigger.ServiceMain",
        resource_strip_prefix = "triggers/service/release/trigger-service-",
        resources = ["release/trigger-service-logback.xml"],
        scala_deps = scala_binary_deps,
        scalacopts = lf_scalacopts_stricter,
        tags = ["ee-jar-license"] if edition == "ee" else [],
        visibility = ["//visibility:public"],
        runtime_deps = trigger_service_runtime_deps.get(edition),
        deps = binary_deps + [
            "//runtime-components/jdbc-drivers:jdbc-drivers-{}".format(edition),
        ],
    )
    for edition in [
        "ce",
        "ee",
    ]
]

da_scala_library(
    name = "trigger-service-tests",
    srcs = glob(["src/test/scala/com/digitalasset/daml/lf/engine/trigger/*.scala"]),
    data = [
        ":test-model-{}.dar".format(lf_version)
        for lf_version in target_lf_versions
    ] + [
        ":test-model-v{}.dar".format(major)
        for major in LF_MAJOR_VERSIONS
    ] + (
        [
            "@toxiproxy_dev_env//:bin/toxiproxy-server",
        ] if not is_windows else [
            "@toxiproxy_dev_env//:toxiproxy-server-windows-amd64.exe",
        ]
    ),
    resources = glob(["src/test/resources/**/*"]),
    scala_deps = [
        "@maven//:com_lihaoyi_sourcecode",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_actor_typed",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_parboiled_parboiled",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_flatspec",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
        "@maven//:org_scalaz_scalaz_core",
    ],
    visibility = ["//test-evidence:__pkg__"],
    deps = [
        ":trigger-service",
        ":trigger-service-binary-ce",
        "//bazel_tools/runfiles:scala_runfiles",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//ledger/ledger-api-domain",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/oracle-testing",
        "//libs-scala/ports",
        "//libs-scala/ports:ports-testing",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/scala-utils",
        "//libs-scala/test-evidence/scalatest:test-evidence-scalatest",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//libs-scala/testing-utils",
        "//libs-scala/timer-utils",
        "//observability/metrics",
        "//test-common/canton/it-lib",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "//triggers/service/auth:oauth2-middleware",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:com_auth0_java_jwt",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_scalatest_scalatest_compatible",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

da_scala_test_suite(
    name = "test",
    timeout = "long",
    srcs = glob(
        ["src/test-suite/scala/**/*.scala"],
        exclude = ["**/*Oracle*"],
    ),
    data = [
        ":src/test-suite/resources/trigger-service.conf",
        ":src/test-suite/resources/trigger-service-minimal.conf",
    ],
    scala_deps = [
        "@maven//:com_github_pureconfig_pureconfig_core",
        "@maven//:com_github_scopt_scopt",
        "@maven//:com_typesafe_scala_logging_scala_logging",
        "@maven//:io_spray_spray_json",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_parboiled_parboiled",
        "@maven//:org_scalactic_scalactic",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_flatspec",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
    ],
    visibility = ["//test-evidence:__pkg__"],
    deps = [
        ":trigger-service",
        ":trigger-service-tests",
        "//bazel_tools/runfiles:scala_runfiles",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/interpreter",
        "//daml-lf/language",
        "//ledger-service/cli-opts",
        "//ledger-service/pureconfig-utils",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/flyway-testing",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/ports",
        "//libs-scala/postgresql-testing",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//libs-scala/testing-utils",
        "//libs-scala/timer-utils",
        "//test-common/canton/it-lib",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:middleware-api",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_flywaydb_flyway_core",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

da_scala_test_suite(
    name = "test-oracle",
    timeout = "long",
    srcs = glob(["src/test-suite/scala/**/*Oracle*.scala"]),
    scala_deps = [
        "@maven//:io_spray_spray_json",
        "@maven//:org_apache_pekko_pekko_actor",
        "@maven//:org_apache_pekko_pekko_http_core",
        "@maven//:org_apache_pekko_pekko_stream",
        "@maven//:org_scalatest_scalatest_core",
        "@maven//:org_scalatest_scalatest_matchers_core",
        "@maven//:org_scalatest_scalatest_shouldmatchers",
    ],
    tags = oracle_tags,
    runtime_deps = [
        "@maven//:com_oracle_database_jdbc_ojdbc8",
    ],
    deps = [
        ":trigger-service",
        ":trigger-service-tests",
        "//canton:ledger_api_proto_scala",
        "//daml-lf/archive:daml_lf_archive_reader",
        "//daml-lf/archive:daml_lf_dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/language",
        "//ledger/ledger-api-auth",
        "//ledger/ledger-api-client",
        "//ledger/ledger-api-common",
        "//libs-scala/adjustable-clock",
        "//libs-scala/db-utils",
        "//libs-scala/jwt",
        "//libs-scala/ledger-resources",
        "//libs-scala/oracle-testing",
        "//libs-scala/ports",
        "//libs-scala/resources",
        "//libs-scala/rs-grpc-bridge",
        "//libs-scala/test-evidence/tag:test-evidence-tag",
        "//libs-scala/testing-utils",
        "//test-common/canton/it-lib",
        "//triggers/runner:trigger-runner-lib",
        "//triggers/service/auth:oauth2-test-server",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:eu_rekawek_toxiproxy_toxiproxy_java_2_1_7",
        "@maven//:org_scalatest_scalatest_compatible",
    ],
)

# Build one DAR per LF version to bundle with the SDK.
[
    genrule(
        name = "test-model-{}".format(lf_version),
        srcs =
            glob(["test-model/*.daml"]) + [
                "//triggers/daml:daml-trigger-{}".format(lf_version),
            ] + [
                src
                for (src, _) in daml_script_dars
            ],
        outs = ["test-model-{}.dar".format(lf_version)],
        cmd = """
          set -eou pipefail
          TMP_DIR=$$(mktemp -d)
          mkdir -p $$TMP_DIR/daml
          cp -L $(location :test-model/TestTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/ErrorTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/LowLevelErrorTrigger.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/ReadAs.daml) $$TMP_DIR/daml
          cp -L $(location :test-model/Cats.daml) $$TMP_DIR/daml
          cp -L $(location {daml_trigger}) $$TMP_DIR/daml-trigger.dar
          {daml_script_copy_cmds}
          cat << EOF > $$TMP_DIR/daml.yaml
sdk-version: {sdk}
name: test-model
source: daml
version: 0.0.1
dependencies:
  - daml-stdlib
  - daml-prim
  - daml-trigger.dar
{daml_script_deps}
build-options: {build_options}
EOF
          $(location //compiler/damlc) build --project-root=$$TMP_DIR --ghc-option=-Werror -o $$PWD/$@
          rm -rf $$TMP_DIR
        """.format(
            build_options = str([
                "--target",
                lf_version,
            ]),
            daml_script_copy_cmds = "; ".join([
                "cp -L $(location {src}) $$TMP_DIR/{dst}".format(
                    src = src,
                    dst = dst,
                )
                for (src, dst) in daml_script_dars
            ]),
            daml_script_deps = "\n".join(["  - {}".format(dst) for (_, dst) in daml_script_dars]),
            daml_trigger = "//triggers/daml:daml-trigger-{}".format(lf_version),
            sdk = sdk_version,
        ),
        tools = ["//compiler/damlc"],
        visibility = ["//visibility:public"],
    )
    for lf_version in target_lf_versions
    # A list of bazel targets for daml-script dars and the file name they should be copied to in
    # the temporary directory. This file name is then declared as a dependency in the generated
    # daml.yaml file. For LF versions that support the legacy daml script (which includes "", the
    # default LF version), we only need one dar. For daml-script-lts we need two.
    for daml_script_dars in [
        [(
            "//daml-script/daml:daml-script-{}".format(lf_version),
            "daml-script.dar",
        )] if lf_version == "" or lf_version in LEGACY_DAML_SCRIPT_LF_VERSIONS else [
            (
                "//daml-script/daml-lts:daml-script-lts-{}".format(lf_version),
                "daml-script-lts.dar",
            ),
            (
                "//daml-script/daml-lts:daml-script-lts-stable-{}".format(lf_version),
                "daml-script-lts-stable.dar",
            ),
        ],
    ]
]

[
    genrule(
        name = "test-model-{}".format(major),
        srcs = [":test-model-{}".format(lf_version_default_or_latest(major))],
        outs = ["test-model-v{}.dar".format(major)],
        cmd = "cp -L $(location :test-model-{}) $$PWD/$@".format(lf_version_default_or_latest(major)),
        visibility = ["//visibility:public"],
    )
    for major in LF_MAJOR_VERSIONS
]

exports_files(["release/trigger-service-logback.xml"])
