-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE PatternSynonyms #-}

module Daml.Trigger.LowLevel
  ( Message(..)
  , Completion(..)
  , CompletionStatus(..)
  , TriggerConfig(..)
  , TriggerSetupArguments(..)
  , Transaction(..)
  , AnyContractId
  , toAnyContractId
  , fromAnyContractId
  , TransactionId(..)
  , EventId(..)
  , CommandId(..)
  , Event(..)
  , Created(..)
  , fromCreated
  , Archived(..)
  , fromArchived
  , Trigger(..)
  , BatchTrigger(..)
  , ActiveContracts(..)
  , Commands(..)
  , Command(..)
  , createCmd
  , exerciseCmd
  , exerciseByKeyCmd
  , createAndExerciseCmd
  , fromCreate
  , fromExercise
  , fromExerciseByKey
  , fromCreateAndExercise
  , RegisteredTemplates(AllInDar, ..)
  , registeredTemplate
  , RelTime(..)
  , execStateT
  , ActionTrigger(..)
  , TriggerSetup(..)
  , TriggerRule(..)
  , ActionState(..)
  , zoom
  , submitCommands
  , simulateRule
  ) where

import DA.Action.State
import DA.Action.State.Class
import DA.Functor ((<&>))
import DA.Internal.Interface.AnyView.Types
import DA.Time (RelTime(..))
import Daml.Script.Free (Free(..), lift, foldFree)

-- | This type represents the contract id of an unknown template.
-- You can use `fromAnyContractId` to check which template it corresponds to.
data AnyContractId = AnyContractId
  { templateId : TemplateTypeRep
  , contractId : ContractId ()
  } deriving Eq

deriving instance Ord AnyContractId

-- We canâ€™t derive the Show instance since TemplateTypeRep does not have a Show instance
-- but it is useful for debugging so we add one that omits the type.
instance Show AnyContractId where
  showsPrec d (AnyContractId _ cid) = showParen (d > app_prec) $
    showString "AnyContractId " . showsPrec (app_prec +1) cid
    where app_prec = 10


-- | Wrap a `ContractId t` in `AnyContractId`.
toAnyContractId : forall t. Template t => ContractId t -> AnyContractId
toAnyContractId cid = AnyContractId
  { templateId = templateTypeRep @t
  , contractId = coerceContractId cid
  }

-- | Check if a `AnyContractId` corresponds to the given template or return
-- `None` otherwise.
fromAnyContractId : forall t. Template t => AnyContractId -> Optional (ContractId t)
fromAnyContractId cid
  | cid.templateId == templateTypeRep @t = Some (coerceContractId cid.contractId)
  | otherwise = None

newtype TransactionId = TransactionId Text
  deriving (Show, Eq)

newtype EventId = EventId Text
  deriving (Show, Eq)

newtype CommandId = CommandId Text
  deriving (Show, Eq, Ord)

data Transaction = Transaction
 { transactionId : TransactionId
 , commandId : Optional CommandId
 , events : [Event]
 }

data InterfaceView = InterfaceView {
  interfaceTypeRep : TemplateTypeRep,
  anyView: Optional AnyView
}

-- | An event in a transaction.
-- This definition should be kept consistent with the object `EventVariant` defined in
-- triggers/runner/src/main/scala/com/digitalasset/daml/lf/engine/trigger/Converter.scala
data Event
  = CreatedEvent Created
  | ArchivedEvent Archived

-- | The data in a `Created` event.
data Created = Created
  { eventId : EventId
  , contractId : AnyContractId
  , argument : Optional AnyTemplate
  , views : [InterfaceView]
  }

-- | Check if a `Created` event corresponds to the given template.
fromCreated : Template t => Created -> Optional (EventId, ContractId t, t)
fromCreated Created {eventId, contractId, argument}
  | Some contractId' <- fromAnyContractId contractId
  , Some argument' <- argument
  , Some argument'' <- fromAnyTemplate argument'
  = Some (eventId, contractId', argument'')
  | otherwise
  = None

-- | The data in an `Archived` event.
data Archived = Archived
  { eventId : EventId
  , contractId : AnyContractId
  } deriving (Show, Eq)

-- | Check if an `Archived` event corresponds to the given template.
fromArchived : Template t => Archived -> Optional (EventId, ContractId t)
fromArchived Archived {eventId, contractId}
  | Some contractId' <- fromAnyContractId contractId
  = Some (eventId, contractId')
  | otherwise
  = None

-- | Either a transaction or a completion.
-- This definition should be kept consistent with the object `MessageVariant` defined in
-- triggers/runner/src/main/scala/com/digitalasset/daml/lf/engine/trigger/Converter.scala
data Message
  = MTransaction Transaction
  | MCompletion Completion
  | MHeartbeat

-- | A completion message.
-- Note that you will only get completions for commands emitted from the trigger.
-- Contrary to the ledger API completion stream, this also includes
-- synchronous failures.

data Completion = Completion
  { commandId : CommandId
  , status : CompletionStatus
  } deriving Show


-- This definition should be kept consistent with the object `CompletionStatusVariant` defined in
-- triggers/runner/src/main/scala/com/digitalasset/daml/lf/engine/trigger/Converter.scala
data CompletionStatus
  = Failed { status : Int, message : Text }
  | Succeeded { transactionId : TransactionId }
  deriving Show

-- Introduced in version 2.6.0
data TriggerConfig = TriggerConfig
  { maxInFlightCommands : Int
    -- ^ maximum number of commands that should be allowed to be in-flight at any point in time.
    --   Exceeding this value will eventually lead to the trigger run raising an InFlightCommandOverflowException exception.
  , maxActiveContracts : Int
    -- ^ maximum number of active contracts that we will allow to be stored
    --   Exceeding this value will lead to the trigger runner raising an ACSOverflowException exception.
  }

-- Introduced in version 2.5.1: this definition is used to simplify future extensions of trigger initialState arguments
data TriggerSetupArguments = TriggerSetupArguments
  { actAs : Party
  , readAs : [Party]
  , acs : ActiveContracts
  , config : TriggerConfig -- added in version 2.6.0
  }

data ActiveContracts = ActiveContracts { activeContracts : [Created] }

-- @WARN use 'BatchTrigger s' instead of 'Trigger s'
data Trigger s = Trigger
  { initialState : Party -> [Party] -> ActiveContracts -> TriggerSetup s
  , update : Message -> TriggerRule s ()
  , registeredTemplates : RegisteredTemplates
  , heartbeat : Optional RelTime
  }

-- | Batching trigger is (approximately) a left-fold over `Message` with
-- an accumulator of type `s`.
data BatchTrigger s = BatchTrigger
  { initialState : TriggerSetupArguments -> TriggerSetup s
  , update : [Message] -> TriggerRule s ()
  , registeredTemplates : RegisteredTemplates
  , heartbeat : Optional RelTime
  }

-- | A template that the trigger will receive events for.
newtype RegisteredTemplate = RegisteredTemplate TemplateTypeRep

-- This controls which templates the trigger will receive events for.
-- `AllTemplates` is a convenience default for development, but should be
-- avoided in production as it forces the triggers to process a lot of
-- unnecessary events.
data RegisteredTemplates
  = AllTemplates -- ^ Listen to events for all templates known by the triggers' runner.
  | RegisteredTemplates [RegisteredTemplate]

{-# DEPRECATED AllInDar "Use AllTemplates instead" #-}
pattern AllInDar : RegisteredTemplates
pattern AllInDar = AllTemplates

registeredTemplate : forall t. Template t => RegisteredTemplate
registeredTemplate = RegisteredTemplate (templateTypeRep @t)

-- | A ledger API command. To construct a command use `createCmd` and `exerciseCmd`.
data Command
  = CreateCommand
      { templateArg : AnyTemplate
      }
  | ExerciseCommand
      { contractId : AnyContractId
      , choiceArg : AnyChoice
      }
  | CreateAndExerciseCommand
    { templateArg : AnyTemplate
    , choiceArg : AnyChoice
    }
  | ExerciseByKeyCommand
      { tplTypeRep : TemplateTypeRep
      , contractKey : AnyContractKey
      , choiceArg : AnyChoice
      }

-- | Create a contract of the given template.
createCmd : (Template t, HasAgreement t) => t -> Command
createCmd templateArg =
  CreateCommand (toAnyTemplate templateArg)

-- | Exercise the given choice.
exerciseCmd : forall t c r. Choice t c r => ContractId t -> c -> Command
exerciseCmd contractId choiceArg =
  ExerciseCommand (toAnyContractId contractId) (toAnyChoice @t choiceArg)

-- | Create a contract of the given template and immediately exercise
-- the given choice on it.
createAndExerciseCmd : forall t c r. (Template t, Choice t c r) => t -> c -> Command
createAndExerciseCmd templateArg choiceArg =
  CreateAndExerciseCommand (toAnyTemplate templateArg) (toAnyChoice @t choiceArg)

exerciseByKeyCmd : forall t c r k. (Choice t c r, TemplateKey t k) => k -> c -> Command
exerciseByKeyCmd contractKey choiceArg =
  ExerciseByKeyCommand (templateTypeRep @t) (toAnyContractKey @t contractKey) (toAnyChoice @t choiceArg)

-- | Check if the command corresponds to a create command
-- for the given template.
fromCreate : Template t => Command -> Optional t
fromCreate (CreateCommand t) = fromAnyTemplate t
fromCreate _ = None

-- | Check if the command corresponds to a create and exercise command
-- for the given template.
fromCreateAndExercise : forall t c r. (Template t, Choice t c r) => Command -> Optional (t, c)
fromCreateAndExercise (CreateAndExerciseCommand t c) = (,) <$> fromAnyTemplate t <*> fromAnyChoice @t c
fromCreateAndExercise _ = None

-- | Check if the command corresponds to an exercise command
-- for the given template.
fromExercise : forall t c r. Choice t c r => Command -> Optional (ContractId t, c)
fromExercise (ExerciseCommand cid c) = (,) <$> fromAnyContractId cid <*> fromAnyChoice @t c
fromExercise _ = None

-- | Check if the command corresponds to an exercise by key command
-- for the given template.
fromExerciseByKey : forall t c r k. (Choice t c r, TemplateKey t k) => Command -> Optional (k, c)
fromExerciseByKey (ExerciseByKeyCommand tyRep k c)
  | tyRep == templateTypeRep @t = (,) <$> fromAnyContractKey @t k <*> fromAnyChoice @t c
fromExerciseByKey _ = None

-- | A set of commands that are submitted as a single transaction.
data Commands = Commands
  { commandId : CommandId
  , commands : [Command]
  }

newtype StateT s m a = StateT { runStateT : s -> m (a, s) }
  deriving Functor

liftStateT : Functor m => m a -> StateT s m a
liftStateT ma = StateT $ \s -> (,s) <$> ma

instance Action m => Applicative (StateT s m) where
  pure a = StateT (\s -> pure (a, s))
  f <*> x = f >>= (<$> x)

instance Action m => Action (StateT s m) where
  StateT x >>= f = StateT $ \s -> do
    (x', s') <- x s
    runStateT (f x') s'

instance Applicative m => ActionState s (StateT s m) where
  get = StateT $ \s -> pure (s, s)
  put s = StateT $ const $ pure ((), s)
  modify f = StateT $ \s -> pure ((), f s)

execStateT : Functor m => StateT s m a -> s -> m s
execStateT (StateT fa) = fmap snd . fa

zoom : Functor m => (t -> s) -> (t -> s -> t) -> StateT s m a -> StateT t m a
zoom r w (StateT smas) = StateT $ \t ->
  smas (r t) <&> \(a, s) -> (a, w t s)

-- Must be kept in sync with Runner#freeTriggerSubmits
data TriggerF a =
  GetTime (Time -> a)
  | Submit ([Command], Text -> a)
  deriving Functor

newtype TriggerSetup a = TriggerSetup { runTriggerSetup : Free TriggerF a }
  deriving (Functor, Applicative, Action)

newtype TriggerRule s a = TriggerRule { runTriggerRule : StateT s (Free TriggerF) a }
  deriving (Functor, Applicative, Action)

-- | Run a rule without running it.  May lose information from the rule;
-- meant for testing purposes only.
simulateRule : TriggerRule s a -> Time -> s -> (s, [Commands], a)
simulateRule rule time s = (s', reverse cmds, a)
  where ((a, s'), (cmds, _)) = runState (foldFree sim (runStateT (runTriggerRule rule) s)) ([], 0)
        sim : TriggerF x -> State ([Commands], Int) x
        sim (GetTime f) = pure (f time)
        sim (Submit (cmds, f)) = do
          (pastCmds, nextId) <- get
          let nextIdShown = show nextId
          put (Commands (CommandId nextIdShown) cmds :: pastCmds, nextId + 1)
          pure $ f nextIdShown

deriving instance ActionState s (TriggerRule s)

-- | Low-level trigger actions.
class HasTime m => ActionTrigger m where
  liftTF : TriggerF a -> m a

instance ActionTrigger TriggerSetup where
  liftTF = TriggerSetup . lift

instance ActionTrigger (TriggerRule s) where
  liftTF = TriggerRule . liftStateT . lift

instance HasTime TriggerSetup where
  getTime = liftTF (GetTime identity)

instance HasTime (TriggerRule s) where
  getTime = liftTF (GetTime identity)

submitCommands : ActionTrigger m => [Command] -> m CommandId
submitCommands cmds = liftTF (Submit (cmds, CommandId))
