-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Interface where

import DA.Foldable
import Daml.Trigger

test : Trigger Int
test = Trigger with
  initialize = pure 3
  updateState = \msg -> case msg of
      MCompletion c
        | Failed {} <- c.status -> modify (subtract 1)
      _ -> pure ()
  rule = \p1 -> do
    cs <- query @Asset
    case cs of
      [] -> do
        dedupCreate Asset {owner = p1, issuer = p1, amount = 10}
      cs -> do
        forA_ cs $ \(cid, _asset) -> do
          dedupExercise (toInterfaceContractId @Token cid) $ Transfer with newOwner = p1
  registeredTemplates = AllInDar
  heartbeat = None

interface Token where
  getOwner : Party
  getAmount : Int

  splitImpl : Int -> Update (ContractId Token, ContractId Token)
  transferImpl : Party -> Update (ContractId Token)
  noopImpl : () -> Update ()

  choice Split : (ContractId Token, ContractId Token)
    with
      splitAmount : Int
    controller getOwner this
    do
      splitImpl this splitAmount

  choice Transfer : ContractId Token
    with
      newOwner : Party
    controller getOwner this
    do
      transferImpl this newOwner

  nonconsuming choice Noop : ()
    with
      nothing : ()
    controller getOwner this
    do
      noopImpl this nothing

template Asset
  with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer
    implements Token where
      getOwner = owner
      getAmount = amount

      splitImpl splitAmount = do
        assert (splitAmount < amount)
        cid1 <- create this with amount = splitAmount
        cid2 <- create this with amount = amount - splitAmount
        pure (toInterfaceContractId @Token cid1, toInterfaceContractId @Token cid2)

      transferImpl newOwner = do
        cid <- create this with owner = newOwner
        pure (toInterfaceContractId @Token cid)

      noopImpl nothing = do
        pure ()
