-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module InterfaceTriggers where

import Daml.Trigger

data View = View { num: Int, label: Text }

interface I where
  viewtype View

  getOwner: Party
  getTag: Text

template A
  with
    owner: Party
    tag: Text
  where
    signatory owner
    interface instance I for A where
      view = View with
        num = 0
        label = tag

      getOwner = owner
      getTag = tag

template B
  with
    owner: Party
    tag: Text
  where
    signatory owner
    interface instance I for B where
      view = View with
         num = 1
         label = tag

      getOwner = owner
      getTag = tag

globalTrigger: Trigger ()
globalTrigger = Trigger with
  initialize = do
    debug "globalTrigger initialize"
    pure ()
  updateState = \_ -> do
    debug "globalTrigger updateState"
    pure ()
  rule = \_ -> do
    debug "globalTrigger rule"
    pure ()
  registeredTemplates = AllTemplates
  heartbeat = None

triggerWithRegistration: Trigger ()
triggerWithRegistration = Trigger with
  initialize = do
    debug "triggerWithRegistration initialize"
    pure ()
  updateState = \_ -> do
    debug "triggerWithRegistration updateState"
    pure ()
  rule = \_ -> do
    debug "triggerWithRegistration rule"
    pure ()
  registeredTemplates = RegisteredTemplates [registeredTemplate @A, registeredTemplate @I]
  heartbeat = None

interfaceOnlyTrigger: Trigger ()
interfaceOnlyTrigger = Trigger with
  initialize = do
    debug "interfaceOnlyTrigger initialize"
    pure ()
  updateState = \_ -> do
    debug "interfaceOnlyTrigger updateState"
    pure ()
  rule = \_ -> do
    debug "interfaceOnlyTrigger rule"
    pure ()
  registeredTemplates = RegisteredTemplates [registeredTemplate @I]
  heartbeat = None
