# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load(
    "//bazel_tools:scala.bzl",
    "da_scala_binary",
)
load(
    "//daml-lf/language:daml-lf.bzl",
    "LF_DEFAULT_DEV_VERSION",
    "LF_DEV_VERSIONS",
    "lf_version_configuration",
)
load("//ledger-test-tool:conformance.bzl", "conformance_test", "testtool_lf_versions")
load("@os_info//:os_info.bzl", "is_windows")

# we release ledger-api-test-tool-stable as ledger-api-test-tool
da_scala_binary(
    name = "ledger-api-test-tool",
    srcs = [],
    main_class = "com.daml.ledger.api.testtool.Main",
    resources = glob(["src/main/resources/**/*"]),
    tags = [
        "maven_coordinates=com.daml:ledger-api-test-tool:__VERSION__",
        # We release this as a fat jar so this tag ensures that the dependencies in the generated
        # POM file are set correctly.
        "fat_jar",
        "no_scala_version_suffix",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:ch_qos_logback_logback_classic",
    ],
    deps = [":tool-default"],
)

[
    alias(
        name = "tool-%s" % name,
        actual = ":tool-%s" % lf_target,
        visibility = ["//visibility:public"],
    )
    for (name, lf_target) in lf_version_configuration.items()
]

[
    da_scala_binary(
        name = "tool-%s" % lf_version,
        srcs = glob([
            "src/main/scala/**/*.scala",
            "src/lf-v%s/scala/**/*.scala" % lf_version,
        ]),
        main_class = "com.daml.ledger.api.testtool.Main",
        resources = glob(["src/main/resources/**/*"]),
        scala_deps = [
            "@maven//:com_github_scopt_scopt",
        ],
        tags = [
            "maven_coordinates=com.daml:ledger-api-test-tool-{}:__VERSION__".format(lf_version),
            # We release this as a fat jar so this tag ensures that the dependencies in the generated
            # POM file are set correctly.
            "fat_jar",
            "no_scala_version_suffix",
        ],
        visibility = ["//visibility:public"],
        runtime_deps = [
            "@maven//:ch_qos_logback_logback_classic",
        ],
        deps = [
            "//ledger/ledger-api-common",
            "//ledger-test-tool/infrastructure:infrastructure-%s" % lf_version,
            "//ledger-test-tool/runner:runner-%s" % lf_version,
            "//ledger-test-tool/suites:suites-%s" % lf_version,
            "//libs-scala/build-info",
            "@maven//:io_netty_netty_handler",
        ],
    )
    for lf_version in testtool_lf_versions
]

sh_test(
    name = "test-extract",
    srcs = ["src/test/test-extract.sh"],
    args = [
        "$(location @local_jdk//:bin/java.exe)" if is_windows else "$(location @local_jdk//:bin/java)",
        "$(location :ledger-api-test-tool_distribute.jar)",
    ],
    data = [
        ":ledger-api-test-tool_distribute.jar",
        "@local_jdk//:bin/java.exe" if is_windows else "@local_jdk//:bin/java",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

# Disabled on Windows because `coreutils` and `grpcurl` aren't easily available.
[
    genrule(
        name = "canton-test-runner-with-dependencies-script",
        srcs = ["src/test/canton-test-runner.sh"],
        outs = ["canton-test-runner-with-dependencies.sh"],
        cmd = """
cat > $@ <<EOF
#!/usr/bin/env bash

set -euo pipefail

f=bazel_tools/tools/bash/runfiles/runfiles.bash
source "\\$${RUNFILES_DIR:-/dev/null}/\\$$f" 2>/dev/null || \\
  source "\\$$(grep -sm1 "^\\$$f " "\\$${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \\
  source "\\$$0.runfiles/\\$$f" 2>/dev/null || \\
  source "\\$$(grep -sm1 "^\\$$f " "\\$$0.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \\
  source "\\$$(grep -sm1 "^\\$$f " "\\$$0.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \\
  { echo>&2 "ERROR: cannot find \\$$f"; exit 1; }; f=; set -e

PATH="\\$$(rlocation coreutils_nix/bin):\\$$(rlocation curl_nix/bin):\\$$(rlocation grpcurl_nix/bin):\\$$(rlocation jq_dev_env/bin):\\$$PATH"
export PATH

EOF
cat $< >> $@
""",
    ),

    # Required because running `canton-test-runner-with-dependencies-script` directly fails.
    sh_binary(
        name = "canton-test-runner-with-dependencies",
        srcs = [":canton-test-runner-with-dependencies-script"],
        # Ideally these would be part of the script definition above, but that doesn't seem to work.
        deps = ["@bazel_tools//tools/bash/runfiles"],
    ),
] if not is_windows else None

conformance_test_extra_data_base = glob(["src/test/**/*canton*"]) + [
    "//test-common/test-certificates:client.crt",
    "//test-common/test-certificates:client.pem",
    "//test-common/test-certificates:server.crt",
    "//test-common/test-certificates:server.pem",
    "//test-common/test-certificates:server.pem.enc",
    "//test-common/test-certificates:ca.crt",
    "@coreutils_nix//:bin/base64",
    "@curl_nix//:bin/curl",
    "@grpcurl_nix//:bin/grpcurl",
    "@jq_dev_env//:jq",
    "@bazel_tools//tools/jdk",
]

conformance_test_ports = [
    5011,
    5021,
    5031,
    5041,
]

conformance_server_args_base = [
    "--verbose",
    "--config=$$(canonicalize_rlocation $(rootpath :src/test/canton.conf))",
    "--bootstrap=$$(canonicalize_rlocation $(rootpath :src/test/bootstrap.canton))",
    "-C",
    ",".join([
        "_shared.participant_ledger-api_tls.cert-chain-file=$$(canonicalize_rlocation $(rootpath //test-common/test-certificates:server.crt))",
        "_shared.participant_ledger-api_tls.private-key-file=$$(canonicalize_rlocation $(rootpath //test-common/test-certificates:server.pem))",
        "_shared.participant_ledger-api_tls.trust-collection-file=$$(canonicalize_rlocation $(rootpath //test-common/test-certificates:ca.crt))",
    ]),
]

conformance_test_tool_args_base = [
    "--crt $$(rlocation $$TEST_WORKSPACE/$(rootpath //test-common/test-certificates:client.crt))",
    "--cacrt $$(rlocation $$TEST_WORKSPACE/$(rootpath //test-common/test-certificates:ca.crt))",
    "--pem $$(rlocation $$TEST_WORKSPACE/$(rootpath //test-common/test-certificates:client.pem))",
    "--concurrent-test-runs=1",  # lowered from default #procs to reduce flakes - details in https://github.com/digital-asset/daml/issues/7316
    "--timeout-scale-factor=2",  # increased to reduce flakes particularly wrt timeouts in TransactionService*IT tests
]

conformance_test_excluded_test = [
    "ClosedWorldIT",  # Canton currently fails this test with a different error (missing namespace in "unallocated" party id)
    # dynamic config management not supported by Canton
    "ConfigManagementServiceIT",
    "LedgerConfigurationServiceIT",
    "ParticipantPruningIT",  # pruning not supported in Canton Community
    "CommandDeduplicationPeriodValidationIT:OffsetPruned",  # requires pruning not available in canton community
    "ActiveContractsServiceIT:AcsBeforePruningOffsetIsDisallowed",  # requires pruning not available in canton community
    "ActiveContractsServiceIT:AcsAtPruningOffsetIsAllowed",  # requires pruning not available in canton community
]

# conformance tests for default and latest
#  those test the conformance test it-self for stable features
conformance_test(
    name = "conformance-test",
    extra_data = conformance_test_extra_data_base + ["//canton:community_app_deploy.jar"],
    extra_runner_args = ["7000"],
    lf_versions = [
        "default",
        "latest",
    ],
    ports = conformance_test_ports,
    runner = "@//bazel_tools/client_server/runner_with_health_check",
    server = ":canton-test-runner-with-dependencies",
    server_args = conformance_server_args_base + [
        "-C",
        ",".join([
            "dev-mode=no",
            "_shared.participant_ledger-api_tls.minimum-server-protocol-version=TLSv1.3",
        ]),
    ],
    tags = ["main-only"],
    test_tool_args = conformance_test_tool_args_base + [
        "--exclude=" + ",".join(conformance_test_excluded_test),
        "--additional=TLSOnePointThreeIT",
    ],
) if not is_windows else None

# this tests TLSAtLeastOnePointTwoIT
conformance_test(
    name = "conformance-test-tls1.2-or-newer",
    extra_data = conformance_test_extra_data_base + ["//canton:community_app_deploy.jar"],
    extra_runner_args = ["7000"],
    lf_versions = ["latest"],
    ports = conformance_test_ports,
    runner = "@//bazel_tools/client_server/runner_with_health_check",
    server = ":canton-test-runner-with-dependencies",
    server_args = conformance_server_args_base + [
        "-C",
        ",".join([
            "dev-mode=no",
        ]),
    ],
    tags = ["main-only"],
    test_tool_args = conformance_test_tool_args_base + ["--include=TLSAtLeastOnePointTwoIT"],
) if not is_windows else None

# conformance tests for preview and dev
#  those test the conformance test it-self for preview/dev features
[
    conformance_test(
        name = "conformance-test-dev",
        dev_mod_flag = "",
        extra_data =
            conformance_test_extra_data_base + [
                "//canton:community_app_deploy.jar",
            ],
        extra_runner_args = ["7000"],
        lf_versions = lf_versions,
        ports = conformance_test_ports,
        preview_mod_flag = "",
        runner = "@//bazel_tools/client_server/runner_with_health_check",
        server = ":canton-test-runner-with-dependencies",
        server_args = conformance_server_args_base + [
            "-C",
            ",".join([
                "dev-mode=yes",
                "canton.domains.test_domain.init.domain-parameters.protocol-version=dev",
            ]),
        ],
        tags = ["dev-canton-test"] + extra_tags,
        test_tool_args = conformance_test_tool_args_base + [
            "--exclude=" + ",".join(conformance_test_excluded_test + [
                # we skip those tests for preview/dev
                "TLSOnePointThreeIT",
                "TLSAtLeastOnePointTwoIT",
            ]),
        ],
    )
    for (lf_versions, extra_tags) in [
        (
            [LF_DEFAULT_DEV_VERSION],
            [],
        ),
        (
            ["preview"] + [v for v in LF_DEV_VERSIONS if v != LF_DEFAULT_DEV_VERSION],
            ["main-only"],
        ),
    ]
    if not is_windows
]
