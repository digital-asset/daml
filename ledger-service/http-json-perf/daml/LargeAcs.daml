-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE RecordWildCards #-}
module LargeAcs (Genesis, Genesis_MakeIouRange, Iou, NotIou) where

import DA.Functor (void)
import DA.Optional (isNone)

template Genesis with
    issuer : Party
    owner : Party
    currency : Text
    observers : [Party]
  where
    signatory issuer, owner
    key owner : Party
    maintainer key
    nonconsuming choice Genesis_MakeIouRange : ()
        with
          totalSteps : Int
          amountCycle : [Decimal]
          observersCycle : [[Party]]
          whichTemplateCycle : [WhichTemplate]
        controller owner
        do
          assert (totalSteps >= 0)
          let cycles = (,,) <$> fromListEL amountCycle
                            <*> fromListEL observersCycle
                            <*> fromListEL whichTemplateCycle
          assert . not $ nullEL cycles
          makeIouRange totalSteps cycles this

makeIouRange : Int -> EphemeralList (Decimal, [Party], WhichTemplate) -> Genesis -> Update ()
makeIouRange count amountsObserversWhichTemplates g =
  let Genesis {..} = g
  in takeEL count (cycleEL amountsObserversWhichTemplates)
     `forEL_` \(amount, observers, whichTemplate) ->
       case whichTemplate of
         UseIou -> void $ create Iou with ..
         UseNotIou -> void $ create NotIou with ..

data EphemeralList a = EphemeralList { uncons : () -> Optional (a, EphemeralList a) }

fromListEL : [a] -> EphemeralList a
fromListEL [] = EphemeralList $ const None
fromListEL (x :: xs) = EphemeralList $ \_ ->
  Some (x, fromListEL xs)

-- Lazy, right-associative version of forA_
forEL_ : Action m => EphemeralList a -> (a -> m b) -> m ()
xs `forEL_` f = case xs.uncons () of
  Some (hd, tl) -> do
    f hd
    tl `forEL_` f
  None -> pure ()

nullEL : EphemeralList a -> Bool
nullEL xs = isNone $ xs.uncons ()

takeEL : Int -> EphemeralList a -> EphemeralList a
takeEL n _ | n <= 0 = EphemeralList $ const None
takeEL n xs = EphemeralList $ fmap (\(hd, tl) -> (hd, takeEL (n - 1) tl)) . xs.uncons

cycleEL : EphemeralList a -> EphemeralList a
cycleEL as = as `appendEL` EphemeralList \_ ->
  (cycleEL as).uncons ()

appendEL : EphemeralList a -> EphemeralList a -> EphemeralList a
EphemeralList l `appendEL` er = EphemeralList $ \_ ->
  case l () of
    Some (hd, tl) -> Some (hd, tl `appendEL` er)
    None -> er.uncons ()

fmapEL : (a -> b) -> EphemeralList a -> EphemeralList b
fmapEL f (EphemeralList uncons) = EphemeralList $
    fmap (\(hd, tl) -> (f hd, fmapEL f tl)) . uncons

instance Semigroup (EphemeralList a) where
  (<>) = appendEL

instance Functor EphemeralList where
  fmap = fmapEL

instance Applicative EphemeralList where
  pure a = EphemeralList $ \_ -> Some (a, EphemeralList $ \_ -> None)
  EphemeralList unconsF <*> as = EphemeralList $ \_ -> do
    (hdF, tlF) <- unconsF ()
    (fmapEL hdF as `appendEL` (tlF <*> as)).uncons ()

template Iou
  with
    issuer : Party
    owner : Party
    currency : Text
    amount : Decimal
    observers : [Party]
  where
    signatory issuer, owner

    observer observers

template NotIou
  with
    issuer : Party
    owner : Party
    currency : Text
    amount : Decimal
    observers : [Party]
  where
    signatory issuer, owner

    observer observers

data WhichTemplate = UseIou | UseNotIou
  deriving (Eq, Show)

template KeyedIou
  with
    id: Int
    issuer : Party
    owner : Party
    currency : Text
    amount : Decimal
    observers : [Party]
  where
    signatory issuer, owner
    observer observers

    key (issuer, id): (Party, Int)
    maintainer key._1