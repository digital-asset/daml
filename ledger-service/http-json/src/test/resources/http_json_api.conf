http-json-api {
  ledger-api {
    address = "127.0.0.1"
    port = 5041
    tls {
      // the certificate to be used by the server
      cert-chain-file = "./tls/cert-chain.crt"
      // private key of the server
      private-key-file = "./tls/pvt-key.pem"
      // trust collection, which means that all client certificates will be verified using the trusted
      // certificates in this store. if omitted, the JVM default trust store is used.
      trust-collection-file = "./tls/root-ca.crt"
      // define whether clients need to authenticate as well (default not)
      client-auth = {
        // none, optional and require are supported
        type = require
        // If clients are required to authenticate as well, we need to provide a client
        // certificate and the key. 
        // If the server certificate is trusted by the trust-collection, then you can
        // just use the server certificates. Otherwise, you need to create separate ones.
        admin-client {
          cert-chain-file = "./tls/admin-client.crt"
          private-key-file = "./tls/admin-client.pem"
        }
      }
      // protocols = ...
      // ciphers = ...
    }
  }

  query-store {
    // can be postgres | oracle 
    type = postgres
    config {
        user = "postgres"
        password = "password"
        driver = org.postgresql.Driver
        url = "jdbc:postgresql://localhost:5432/test?&ssl=true"
    }
    // prefix for table names to avoid collisions, empty by default
    // table-prefix = ""
    // option setting how the schema should be handled. Valid options are create-only,start-only,create-if-needed-and-start,create-and-start.
    start-mode = "start-only"

    // max pool size for the database connection pool
    max-connections = 8
    //specifies the min idle connections for database connection pool.
    min-idle = 8
    //specifies the idle timeout for the database connection pool.
    idle-timeout = 10s
    / specifies the connection timeout for database connection pool.
    connection-timeout = 60s
  }

  
  //IP address that HTTP JSON API service listens on. Defaults to 127.0.0.1.
  address = "127.0.0.1"
  //HTTP JSON API service port number. A port number of 0 will let the system pick an ephemeral port.
  port = 8888
  //Optional unique file name where to write the allocated HTTP port number. If process terminates gracefully, this file will be deleted automatically. Used to inform clients in CI about which port HTTP JSON API listens on. Defaults to none, that is, no file gets created.
  port-file = "./port-file"

  // Optional interval to poll for package updates. Examples: 500ms, 5s, 10min, 1h, 1d. Defaults to 5 seconds
  package-reload-interval= 5s
  //Optional max inbound message size in bytes. Defaults to 4194304.
  max-inbound-message-size = 4194304 bytes     
  //Optional max inbound message size in bytes used for uploading and downloading package updates. Defaults to the `max-inbound-message-size` setting.       
  package-max-inbound-message-size = 4194304 bytes
  //Optional max cache size in entries for storing surrogate template id mappings. Defaults to None
  max-template-id-cache-entries = 1000   

  logging {
    //Default logging level to use. Available values are DEBUG, ERROR, TRACE, WARN, INFO. Defaults to INFO.
    level = "INFO"
    //which encoder to use: plain|json    
    log-encoder = "plain" 
  } 

  //Optional websocket configuration parameters
  websocket-config {
    //Maximum websocket session duration
    max-duration = 120m 
    //Server-side heartbeat interval duration
    heartbeat-period = 1s
  }
  
  metrics {
    //Start a metrics reporter. Must be one of "console", "csv:///PATH", "graphite://HOST[:PORT][/METRIC_PREFIX]", or "prometheus://HOST[:PORT]".
    reporter = "console"
    //Set metric reporting interval , examples : 1s, 30s, 1m, 1h
    reporting-interval = 30s
  }     

  // DEV MODE ONLY (not recommended for production)
  // Allow connections without a reverse proxy providing HTTPS.
  allow-insecure-tokens = false
  // Optional static content configuration string. Contains comma-separated key-value pairs, where:
  // prefix -- URL prefix,
  // directory -- local directory that will be mapped to the URL prefix.
  // Example: "prefix=static,directory=./static-content"
  // static-content {
  //    prefix = "static"
  //    directory = "./static-content"
  // }                              
}
