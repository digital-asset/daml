diff --git a/src/Language/LSP/Types/Uri.hs b/src/Language/LSP/Types/Uri.hs
index 8d2d43f..8477dde 100644
--- a/src/Language/LSP/Types/Uri.hs
+++ b/src/Language/LSP/Types/Uri.hs
@@ -112,12 +112,12 @@ platformAdjustFromUriPath systemOS authority srcPath =
     else let
       firstSegment:rest = (FPP.splitDirectories . tail) srcPath  -- Drop leading '/' for absolute Windows paths
       drive = if FPW.isDrive firstSegment
-              then FPW.addTrailingPathSeparator firstSegment
+              then FPP.addTrailingPathSeparator firstSegment
               else firstSegment
-      in FPW.joinDrive drive $ FPW.joinPath rest
+      in FPP.joinDrive drive $ FPP.joinPath rest
 
 filePathToUri :: FilePath -> Uri
-filePathToUri = (platformAwareFilePathToUri System.Info.os) . FP.normalise
+filePathToUri = (platformAwareFilePathToUri System.Info.os) . normalise'
 
 {-# WARNING platformAwareFilePathToUri "This function is considered private. Use normalizedUriToFilePath instead." #-}
 platformAwareFilePathToUri :: SystemOS -> FilePath -> Uri
@@ -193,10 +193,22 @@ instance Hashable NormalizedFilePath where
 instance IsString NormalizedFilePath where
     fromString = toNormalizedFilePath
 
+-- | Normalise a file path, but always convert to POSIX style file paths.
+normalise' :: FilePath -> FilePath
+normalise' fp = nfp
+  where
+      (drv, nfp0) = FP.splitDrive fp
+      nfp = convertDrive drv `FPP.joinDrive` (FPP.joinPath $ FP.splitDirectories nfp0)
+
+      convertDrive drv
+        | System.Info.os == windowsOS && FPW.hasTrailingPathSeparator drv =
+            FPP.addTrailingPathSeparator (init drv)
+        | otherwise = drv
+
 toNormalizedFilePath :: FilePath -> NormalizedFilePath
 toNormalizedFilePath fp = normalizedFilePath nuri nfp
   where
-      nfp = FP.normalise fp
+      nfp = normalise' fp
       nuri = internalNormalizedFilePathToUri nfp
 
 fromNormalizedFilePath :: NormalizedFilePath -> FilePath
