We only need the protobuf message for ActionResult.
To reduce dependencies, we patch out other things
that would pull in extra dependencies or fail to parse
in proto3-suite.
diff --git a/build/bazel/remote/execution/v2/remote_execution.proto b/build/bazel/remote/execution/v2/remote_execution.proto
index 052c222..c988be5 100644
--- a/build/bazel/remote/execution/v2/remote_execution.proto
+++ b/build/bazel/remote/execution/v2/remote_execution.proto
@@ -16,9 +16,6 @@ syntax = "proto3";
 
 package build.bazel.remote.execution.v2;
 
-import "build/bazel/semver/semver.proto";
-import "google/api/annotations.proto";
-import "google/longrunning/operations.proto";
 import "google/protobuf/duration.proto";
 import "google/protobuf/timestamp.proto";
 import "google/rpc/status.proto";
@@ -30,329 +27,6 @@ option java_outer_classname = "RemoteExecutionProto";
 option java_package = "build.bazel.remote.execution.v2";
 option objc_class_prefix = "REX";
 
-
-// The Remote Execution API is used to execute an
-// [Action][build.bazel.remote.execution.v2.Action] on the remote
-// workers.
-//
-// As with other services in the Remote Execution API, any call may return an
-// error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
-// information about when the client should retry the request; clients SHOULD
-// respect the information provided.
-service Execution {
-  // Execute an action remotely.
-  //
-  // In order to execute an action, the client must first upload all of the
-  // inputs, the
-  // [Command][build.bazel.remote.execution.v2.Command] to run, and the
-  // [Action][build.bazel.remote.execution.v2.Action] into the
-  // [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
-  // It then calls `Execute` with an `action_digest` referring to them. The
-  // server will run the action and eventually return the result.
-  //
-  // The input `Action`'s fields MUST meet the various canonicalization
-  // requirements specified in the documentation for their types so that it has
-  // the same digest as other logically equivalent `Action`s. The server MAY
-  // enforce the requirements and return errors if a non-canonical input is
-  // received. It MAY also proceed without verifying some or all of the
-  // requirements, such as for performance reasons. If the server does not
-  // verify the requirement, then it will treat the `Action` as distinct from
-  // another logically equivalent action if they hash differently.
-  //
-  // Returns a stream of
-  // [google.longrunning.Operation][google.longrunning.Operation] messages
-  // describing the resulting execution, with eventual `response`
-  // [ExecuteResponse][build.bazel.remote.execution.v2.ExecuteResponse]. The
-  // `metadata` on the operation is of type
-  // [ExecuteOperationMetadata][build.bazel.remote.execution.v2.ExecuteOperationMetadata].
-  //
-  // If the client remains connected after the first response is returned after
-  // the server, then updates are streamed as if the client had called
-  // [WaitExecution][build.bazel.remote.execution.v2.Execution.WaitExecution]
-  // until the execution completes or the request reaches an error. The
-  // operation can also be queried using [Operations
-  // API][google.longrunning.Operations.GetOperation].
-  //
-  // The server NEED NOT implement other methods or functionality of the
-  // Operations API.
-  //
-  // Errors discovered during creation of the `Operation` will be reported
-  // as gRPC Status errors, while errors that occurred while running the
-  // action will be reported in the `status` field of the `ExecuteResponse`. The
-  // server MUST NOT set the `error` field of the `Operation` proto.
-  // The possible errors include:
-  //
-  // * `INVALID_ARGUMENT`: One or more arguments are invalid.
-  // * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
-  //   action requested, such as a missing input or command or no worker being
-  //   available. The client may be able to fix the errors and retry.
-  // * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
-  //   the action.
-  // * `UNAVAILABLE`: Due to a transient condition, such as all workers being
-  //   occupied (and the server does not support a queue), the action could not
-  //   be started. The client should retry.
-  // * `INTERNAL`: An internal error occurred in the execution engine or the
-  //   worker.
-  // * `DEADLINE_EXCEEDED`: The execution timed out.
-  // * `CANCELLED`: The operation was cancelled by the client. This status is
-  //   only possible if the server implements the Operations API CancelOperation
-  //   method, and it was called for the current execution.
-  //
-  // In the case of a missing input or command, the server SHOULD additionally
-  // send a [PreconditionFailure][google.rpc.PreconditionFailure] error detail
-  // where, for each requested blob not present in the CAS, there is a
-  // `Violation` with a `type` of `MISSING` and a `subject` of
-  // `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
-  rpc Execute(ExecuteRequest) returns (stream google.longrunning.Operation) {
-    option (google.api.http) = { post: "/v2/{instance_name=**}/actions:execute" body: "*" };
-  }
-
-  // Wait for an execution operation to complete. When the client initially
-  // makes the request, the server immediately responds with the current status
-  // of the execution. The server will leave the request stream open until the
-  // operation completes, and then respond with the completed operation. The
-  // server MAY choose to stream additional updates as execution progresses,
-  // such as to provide an update as to the state of the execution.
-  rpc WaitExecution(WaitExecutionRequest) returns (stream google.longrunning.Operation) {
-    option (google.api.http) = { post: "/v2/{name=operations/**}:waitExecution" body: "*" };
-  }
-}
-
-// The action cache API is used to query whether a given action has already been
-// performed and, if so, retrieve its result. Unlike the
-// [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage],
-// which addresses blobs by their own content, the action cache addresses the
-// [ActionResult][build.bazel.remote.execution.v2.ActionResult] by a
-// digest of the encoded [Action][build.bazel.remote.execution.v2.Action]
-// which produced them.
-//
-// The lifetime of entries in the action cache is implementation-specific, but
-// the server SHOULD assume that more recently used entries are more likely to
-// be used again.
-//
-// As with other services in the Remote Execution API, any call may return an
-// error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
-// information about when the client should retry the request; clients SHOULD
-// respect the information provided.
-service ActionCache {
-  // Retrieve a cached execution result.
-  //
-  // Implementations SHOULD ensure that any blobs referenced from the
-  // [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage]
-  // are available at the time of returning the
-  // [ActionResult][build.bazel.remote.execution.v2.ActionResult] and will be
-  // for some period of time afterwards. The TTLs of the referenced blobs SHOULD be increased
-  // if necessary and applicable.
-  //
-  // Errors:
-  //
-  // * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
-  rpc GetActionResult(GetActionResultRequest) returns (ActionResult) {
-    option (google.api.http) = { get: "/v2/{instance_name=**}/actionResults/{action_digest.hash}/{action_digest.size_bytes}" };
-  }
-
-  // Upload a new execution result.
-  //
-  // In order to allow the server to perform access control based on the type of
-  // action, and to assist with client debugging, the client MUST first upload
-  // the [Action][build.bazel.remote.execution.v2.Execution] that produced the
-  // result, along with its
-  // [Command][build.bazel.remote.execution.v2.Command], into the
-  // `ContentAddressableStorage`.
-  //
-  // Errors:
-  //
-  // * `INVALID_ARGUMENT`: One or more arguments are invalid.
-  // * `FAILED_PRECONDITION`: One or more errors occurred in updating the
-  //   action result, such as a missing command or action.
-  // * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
-  //   entry to the cache.
-  rpc UpdateActionResult(UpdateActionResultRequest) returns (ActionResult) {
-    option (google.api.http) = { put: "/v2/{instance_name=**}/actionResults/{action_digest.hash}/{action_digest.size_bytes}" body: "action_result" };
-  }
-}
-
-// The CAS (content-addressable storage) is used to store the inputs to and
-// outputs from the execution service. Each piece of content is addressed by the
-// digest of its binary data.
-//
-// Most of the binary data stored in the CAS is opaque to the execution engine,
-// and is only used as a communication medium. In order to build an
-// [Action][build.bazel.remote.execution.v2.Action],
-// however, the client will need to also upload the
-// [Command][build.bazel.remote.execution.v2.Command] and input root
-// [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
-// The Command and Directory messages must be marshalled to wire format and then
-// uploaded under the hash as with any other piece of content. In practice, the
-// input root directory is likely to refer to other Directories in its
-// hierarchy, which must also each be uploaded on their own.
-//
-// For small file uploads the client should group them together and call
-// [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
-// For large uploads, the client must use the
-// [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
-// `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
-// where `instance_name` is as described in the next paragraph, `uuid` is a
-// version 4 UUID generated by the client, and `hash` and `size` are the
-// [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
-// `uuid` is used only to avoid collisions when multiple clients try to upload
-// the same file (or the same client tries to upload the file multiple times at
-// once on different threads), so the client MAY reuse the `uuid` for uploading
-// different blobs. The `resource_name` may optionally have a trailing filename
-// (or other metadata) for a client to use if it is storing URLs, as in
-// `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
-// after the `size` is ignored.
-//
-// A single server MAY support multiple instances of the execution system, each
-// with their own workers, storage, cache, etc. The exact relationship between
-// instances is up to the server. If the server does, then the `instance_name`
-// is an identifier, possibly containing multiple path segments, used to
-// distinguish between the various instances on the server, in a manner defined
-// by the server. For servers which do not support multiple instances, then the
-// `instance_name` is the empty path and the leading slash is omitted, so that
-// the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
-// To simplify parsing, a path segment cannot equal any of the following
-// keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
-// `capabilities`.
-//
-// When attempting an upload, if another client has already completed the upload
-// (which may occur in the middle of a single upload if another client uploads
-// the same blob concurrently), the request will terminate immediately with
-// a response whose `committed_size` is the full size of the uploaded file
-// (regardless of how much data was transmitted by the client). If the client
-// completes the upload but the
-// [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
-// `INVALID_ARGUMENT` error will be returned. In either case, the client should
-// not attempt to retry the upload.
-//
-// For downloading blobs, the client must use the
-// [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
-// a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
-// `instance_name` is the instance name (see above), and `hash` and `size` are
-// the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
-//
-// The lifetime of entries in the CAS is implementation specific, but it SHOULD
-// be long enough to allow for newly-added and recently looked-up entries to be
-// used in subsequent calls (e.g. to
-// [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
-//
-// As with other services in the Remote Execution API, any call may return an
-// error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
-// information about when the client should retry the request; clients SHOULD
-// respect the information provided.
-service ContentAddressableStorage {
-  // Determine if blobs are present in the CAS.
-  //
-  // Clients can use this API before uploading blobs to determine which ones are
-  // already present in the CAS and do not need to be uploaded again.
-  //
-  // There are no method-specific errors.
-  rpc FindMissingBlobs(FindMissingBlobsRequest) returns (FindMissingBlobsResponse) {
-    option (google.api.http) = { post: "/v2/{instance_name=**}/blobs:findMissing" body: "*" };
-  }
-
-  // Upload many blobs at once.
-  //
-  // The server may enforce a limit of the combined total size of blobs
-  // to be uploaded using this API. This limit may be obtained using the
-  // [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
-  // Requests exceeding the limit should either be split into smaller
-  // chunks or uploaded using the
-  // [ByteStream API][google.bytestream.ByteStream], as appropriate.
-  //
-  // This request is equivalent to calling a Bytestream `Write` request
-  // on each individual blob, in parallel. The requests may succeed or fail
-  // independently.
-  //
-  // Errors:
-  //
-  // * `INVALID_ARGUMENT`: The client attempted to upload more than the
-  //   server supported limit.
-  //
-  // Individual requests may return the following errors, additionally:
-  //
-  // * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
-  // * `INVALID_ARGUMENT`: The
-  // [Digest][build.bazel.remote.execution.v2.Digest] does not match the
-  // provided data.
-  rpc BatchUpdateBlobs(BatchUpdateBlobsRequest) returns (BatchUpdateBlobsResponse) {
-    option (google.api.http) = { post: "/v2/{instance_name=**}/blobs:batchUpdate" body: "*" };
-  }
-
-  // Download many blobs at once.
-  //
-  // The server may enforce a limit of the combined total size of blobs
-  // to be downloaded using this API. This limit may be obtained using the
-  // [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
-  // Requests exceeding the limit should either be split into smaller
-  // chunks or downloaded using the
-  // [ByteStream API][google.bytestream.ByteStream], as appropriate.
-  //
-  // This request is equivalent to calling a Bytestream `Read` request
-  // on each individual blob, in parallel. The requests may succeed or fail
-  // independently.
-  //
-  // Errors:
-  //
-  // * `INVALID_ARGUMENT`: The client attempted to read more than the
-  //   server supported limit.
-  //
-  // Every error on individual read will be returned in the corresponding digest
-  // status.
-  rpc BatchReadBlobs(BatchReadBlobsRequest) returns (BatchReadBlobsResponse) {
-    option (google.api.http) = { post: "/v2/{instance_name=**}/blobs:batchRead" body: "*" };
-  }
-
-  // Fetch the entire directory tree rooted at a node.
-  //
-  // This request must be targeted at a
-  // [Directory][build.bazel.remote.execution.v2.Directory] stored in the
-  // [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage]
-  // (CAS). The server will enumerate the `Directory` tree recursively and
-  // return every node descended from the root.
-  //
-  // The GetTreeRequest.page_token parameter can be used to skip ahead in
-  // the stream (e.g. when retrying a partially completed and aborted request),
-  // by setting it to a value taken from GetTreeResponse.next_page_token of the
-  // last successfully processed GetTreeResponse).
-  //
-  // The exact traversal order is unspecified and, unless retrieving subsequent
-  // pages from an earlier request, is not guaranteed to be stable across
-  // multiple invocations of `GetTree`.
-  //
-  // If part of the tree is missing from the CAS, the server will return the
-  // portion present and omit the rest.
-  //
-  // Errors:
-  //
-  // * `NOT_FOUND`: The requested tree root is not present in the CAS.
-  rpc GetTree(GetTreeRequest) returns (stream GetTreeResponse) {
-    option (google.api.http) = { get: "/v2/{instance_name=**}/blobs/{root_digest.hash}/{root_digest.size_bytes}:getTree" };
-  }
-}
-
-// The Capabilities service may be used by remote execution clients to query
-// various server properties, in order to self-configure or return meaningful
-// error messages.
-//
-// The query may include a particular `instance_name`, in which case the values
-// returned will pertain to that instance.
-service Capabilities {
-  // GetCapabilities returns the server capabilities configuration of the
-  // remote endpoint.
-  // Only the capabilities of the services supported by the endpoint will
-  // be returned:
-  // * Execution + CAS + Action Cache endpoints should return both
-  //   CacheCapabilities and ExecutionCapabilities.
-  // * Execution only endpoints should return ExecutionCapabilities.
-  // * CAS + Action Cache only endpoints should return CacheCapabilities.
-  rpc GetCapabilities(GetCapabilitiesRequest) returns (ServerCapabilities) {
-    option (google.api.http) = {
-      get: "/v2/{instance_name=**}/capabilities"
-    };
-  }
-}
-
 // An `Action` captures all the information about an execution which is required
 // to reproduce it.
 //
@@ -1383,25 +1057,6 @@ message GetCapabilitiesRequest {
   string instance_name = 1;
 }
 
-// A response message for
-// [Capabilities.GetCapabilities][build.bazel.remote.execution.v2.Capabilities.GetCapabilities].
-message ServerCapabilities {
-  // Capabilities of the remote cache system.
-  CacheCapabilities cache_capabilities = 1;
-
-  // Capabilities of the remote execution system.
-  ExecutionCapabilities execution_capabilities = 2;
-
-  // Earliest RE API version supported, including deprecated versions.
-  build.bazel.semver.SemVer deprecated_api_version = 3;
-
-  // Earliest non-deprecated RE API version supported.
-  build.bazel.semver.SemVer low_api_version = 4;
-
-  // Latest RE API version supported.
-  build.bazel.semver.SemVer high_api_version = 5;
-}
-
 // The digest function used for converting values into keys for CAS and Action
 // Cache.
 message DigestFunction {
