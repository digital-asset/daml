diff --git a/haskell/haskell.bzl b/haskell/haskell.bzl
index 61994e4..7b05a9c 100644
--- a/haskell/haskell.bzl
+++ b/haskell/haskell.bzl
@@ -243,6 +243,11 @@ haskell_library = rule(
             default = False,
             doc = "Create a static library, not both a static and a shared library.",
         ),
+        package_name = attr.string(
+            doc = """Library name used in version macro generation. Only used
+            if the version attribute is defined, see version attribute
+            documentation. Optional, defaults to target name.""",
+        ),
         version = attr.string(
             doc = """Library version. Not normally necessary unless to build a library
             originally defined as a Cabal package. If this is specified, CPP version macro will be generated.""",
diff --git a/haskell/private/actions/package.bzl b/haskell/private/actions/package.bzl
index 1c438e8..bdcdfdd 100644
--- a/haskell/private/actions/package.bzl
+++ b/haskell/private/actions/package.bzl
@@ -81,7 +81,7 @@ def package(
     (extra_lib_dirs, extra_libs) = _get_extra_libraries(dep_info)
 
     metadata_entries = {
-        "name": my_pkg_id.name,
+        "name": my_pkg_id.package_name,
         "version": my_pkg_id.version,
         "id": pkg_id.to_string(my_pkg_id),
         "key": pkg_id.to_string(my_pkg_id),
diff --git a/haskell/private/haskell_impl.bzl b/haskell/private/haskell_impl.bzl
index 2f107a3..e2db3f5 100644
--- a/haskell/private/haskell_impl.bzl
+++ b/haskell/private/haskell_impl.bzl
@@ -313,8 +313,9 @@ def haskell_library_impl(ctx):
         ctx,
         [dep for plugin in ctx.attr.plugins for dep in plugin[GhcPluginInfo].deps],
     )
-    version = ctx.attr.version if ctx.attr.version else None
-    my_pkg_id = pkg_id.new(ctx.label, version)
+    package_name = getattr(ctx.attr, "package_name", None)
+    version = getattr(ctx.attr, "version", None)
+    my_pkg_id = pkg_id.new(ctx.label, package_name, version)
     with_profiling = is_profiling_enabled(hs)
     with_shared = False if hs.toolchain.is_windows else not ctx.attr.linkstatic
 
@@ -445,7 +446,7 @@ def haskell_library_impl(ctx):
     version_macros = set.empty()
     if version != None:
         version_macros = set.singleton(
-            generate_version_macros(ctx, hs.name, version),
+            generate_version_macros(ctx, getattr(ctx.attr, "package_name", hs.name), version),
         )
 
     hs_info = HaskellInfo(
diff --git a/haskell/private/pkg_id.bzl b/haskell/private/pkg_id.bzl
index 0a3c5fa..a7cbec1 100644
--- a/haskell/private/pkg_id.bzl
+++ b/haskell/private/pkg_id.bzl
@@ -27,7 +27,7 @@ def _to_string(my_pkg_id):
         ),
     )
 
-def _new(label, version = None):
+def _new(label, package_name = None, version = None):
     """Create a new package identifier.
 
     Package identifiers should be globally unique. This is why we use
@@ -35,15 +35,18 @@ def _new(label, version = None):
 
     Args:
       label: The label of the rule declaring the package.
+      package_name: an optional override of the package name.
       version: an optional version annotation.
 
     Returns:
       string: GHC package ID to use.
 
     """
+    name = label.name.replace("_", "-")
     return struct(
         label = label,
-        name = label.name.replace("_", "-"),
+        name = name,
+        package_name = package_name if package_name else name,
         version = version,
     )
 
diff --git a/haskell/private/version_macros.bzl b/haskell/private/version_macros.bzl
index 35f913f..dbdcbb5 100644
--- a/haskell/private/version_macros.bzl
+++ b/haskell/private/version_macros.bzl
@@ -1,17 +1,17 @@
 load(":private/set.bzl", "set")
 
-def generate_version_macros(ctx, name, version):
+def generate_version_macros(ctx, pkg_name, version):
     """Generate a version macros header file.
 
     Args:
         ctx: Rule context. Needs to define a _version_macros executable attribute.
-        name: The package name.
+        pkg_name: The package name.
         version: The package version.
 
     Returns:
         Version macros header File.
     """
-    version_macros_file = ctx.actions.declare_file("{}_version_macros.h".format(name))
+    version_macros_file = ctx.actions.declare_file("{}_version_macros.h".format(ctx.attr.name))
     ctx.actions.run_shell(
         inputs = [ctx.executable._version_macros],
         outputs = [version_macros_file],
@@ -20,7 +20,7 @@ def generate_version_macros(ctx, name, version):
         """,
         arguments = [
             ctx.executable._version_macros.path,
-            name,
+            pkg_name,
             version,
             version_macros_file.path,
         ],
