Adding include paths to the GHC bindist upsets the Windows builds. GHC starts
looking for ghcversion.h under too long paths and fails due to not finding it.
diff --git a/haskell/cabal.bzl b/haskell/cabal.bzl
index b2cc1e27..a48572ab 100644
--- a/haskell/cabal.bzl
+++ b/haskell/cabal.bzl
@@ -88,6 +88,12 @@ def _cabal_tool_flag(tool):
 def _binary_paths(binaries):
     return [binary.dirname for binary in binaries.to_list()]
 
+def _skip_ghc_bindist(path):
+    if path.find("rules_haskell_ghc_windows_amd64") != -1:
+        return None
+    else:
+        return path
+
 def _prepare_cabal_inputs(hs, cc, posix, dep_info, cc_info, component, package_id, tool_inputs, tool_input_manifests, cabal, setup, srcs, flags, cabal_wrapper, package_database):
     """Compute Cabal wrapper, arguments, inputs."""
     with_profiling = is_profiling_enabled(hs)
@@ -118,7 +124,7 @@ def _prepare_cabal_inputs(hs, cc, posix, dep_info, cc_info, component, package_i
     args.add("--flags=" + " ".join(flags))
     args.add("--")
     args.add_all(package_databases, map_each = _dirname, format_each = "--package-db=%s")
-    args.add_all(extra_include_dirs, format_each = "--extra-include-dirs=%s")
+    args.add_all(extra_include_dirs, map_each = _skip_ghc_bindist, format_each = "--extra-include-dirs=%s")
     args.add_all(extra_lib_dirs, format_each = "--extra-lib-dirs=%s", uniquify = True)
     if with_profiling:
         args.add("--enable-profiling")
